   1              		.file	"main_ascii.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              	# GNU C17 (GCC) version 11.1.0 (riscv32-unknown-elf)
   7              	#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   8              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   9              	# options passed: -march=rv32im -mabi=ilp32 -mtune=rocket -march=rv32im -Os -fno-pic -fno-stack-pro
  10              		.text
  11              		.align	2
  12              		.globl	set_reg
  14              	set_reg:
  15              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
  16 0000 93071000 		li	a5,1		# tmp85,
  17 0004 B395B700 		sll	a1,a5,a1	# tmp88, _12, tmp85
  18              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
  19 0008 83270500 		lw	a5,0(a0)		# _1,* p
  20              	# kianv_stdlib.h:42:     if (bit) {
  21 000c 63080600 		beq	a2,zero,.L2	#, tmp89,,
  22              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
  23 0010 B3E5F500 		or	a1,a1,a5	# _1, _5, _12
  24              	.L4:
  25              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
  26 0014 2320B500 		sw	a1,0(a0)	# _18,* p
  27              	# kianv_stdlib.h:47: }
  28 0018 67800000 		ret	
  29              	.L2:
  30              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
  31 001c 93C5F5FF 		not	a1,a1	# tmp86, _12
  32              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
  33 0020 B3F5F500 		and	a1,a1,a5	# _13, _18, tmp86
  34 0024 6FF01FFF 		j	.L4		#
  36              		.align	2
  37              		.globl	gpio_set_value
  39              	gpio_set_value:
  40              	# kianv_stdlib.h:49: void gpio_set_value(int gpio, int bit) {
  41 0028 13860500 		mv	a2,a1	# tmp76, bit
  42              	# kianv_stdlib.h:50:     set_reg(GPIO_OUTPUT, gpio, bit);
  43 002c 93050500 		mv	a1,a0	#, tmp75
  44 0030 37050030 		li	a0,805306368		# tmp74,
  45 0034 1305C501 		addi	a0,a0,28	#,, tmp74
  46 0038 17030000 		tail	set_reg		#
  46      67000300 
  48              		.align	2
  49              		.globl	gpio_get_input_value
  51              	gpio_get_input_value:
  52              	# kianv_stdlib.h:54:   uint32_t read = IO_IN(GPIO_INPUT);
  53 0040 B7070030 		li	a5,805306368		# tmp77,
  54 0044 83A70702 		lw	a5,32(a5)		# read, MEM[(volatile uint32_t *)805306400B]
  55              	# kianv_stdlib.h:57:   return ((read >> gpio) & 0x01);
  56 0048 33D5A700 		srl	a0,a5,a0	# tmp80, tmp79, read
  57              	# kianv_stdlib.h:58: }
  58 004c 13751500 		andi	a0,a0,1	#,, tmp79
  59 0050 67800000 		ret	
  61              		.align	2
  62              		.globl	gpio_set_direction
  64              	gpio_set_direction:
  65              	# kianv_stdlib.h:60: void gpio_set_direction(int gpio, int bit) {
  66 0054 13860500 		mv	a2,a1	# tmp76, bit
  67              	# kianv_stdlib.h:61:     set_reg(GPIO_DIR, gpio, bit);
  68 0058 93050500 		mv	a1,a0	#, tmp75
  69 005c 37050030 		li	a0,805306368		# tmp74,
  70 0060 13054501 		addi	a0,a0,20	#,, tmp74
  71 0064 17030000 		tail	set_reg		#
  71      67000300 
  73              		.align	2
  74              		.globl	get_cycles
  76              	get_cycles:
  77 006c 130101FF 		addi	sp,sp,-16	#,,
  78              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
  79              	 #APP
  80              	# 68 "kianv_stdlib.h" 1
   1              	#include <stdint.h>
   2              	#include <math.h>
   3              	
   4              	/* kian hardware register */
   5              	#define IO_BASE 0x30000000
   6              	#define UART_TX             (volatile uint32_t *) (IO_BASE + 0x0000)
   7              	#define UART_READY          (volatile uint32_t *) (IO_BASE + 0x0000)
   8              	#define VIDEOENABLE         (volatile uint32_t *) (IO_BASE + 0x0008)
   9              	#define VIDEO               (volatile uint32_t *) (IO_BASE + 0x0008)
  10              	#define VIDEO_RAW           (volatile uint32_t *) (IO_BASE + 0x000C)
  11              	#define CPU_FREQ            (volatile uint32_t *) (IO_BASE + 0x0010)
  12              	// gpio hack stuff
  13              	#define GPIO_DIR            ( volatile uint32_t  *) (IO_BASE + 0x0014)
  14              	#define GPIO_PULLUP         ( volatile uint32_t  *) (IO_BASE + 0x0018) // not implemented
  15              	#define GPIO_OUTPUT         ( volatile uint32_t  *) (IO_BASE + 0x001C)
  16              	#define GPIO_INPUT          ( volatile uint32_t  *) (IO_BASE + 0x0020)
  17              	#define IO_OUT(reg, value) *((volatile uint32_t  *) (reg)) = (value)
  18              	#define IO_IN(reg)         *((volatile uint32_t  *) reg)
  19              	
  20              	#define GPIO_INPUT_PIN  0
  21              	#define GPIO_OUTPUT_PIN 1
  22              	//#define RV32_FASTCODE __attribute((section(".fastcode")))
  23              	#define RV32_FASTCODE
  24              	
  25              	//__attribute((section(".fastcode")))
  26              	
  27              	#define RED   "\x1B[31m"
  28              	#define GRN   "\x1B[32m"
  29              	#define YEL   "\x1B[33m"
  30              	#define BLU   "\x1B[34m"
  31              	#define MAG   "\x1B[35m"
  32              	#define CYN   "\x1B[36m"
  33              	#define WHT   "\x1B[37m"
  34              	#define RESET "\x1B[0m"
  35              	
  36              	#define CLS       "\x1B[2J"
  37              	#define BOLD      "\x1B[1m"
  38              	#define BLINK     "\x1B[5m"
  39              	#define BLINK_OFF "\x1B[25m"
  40              	
  41              	void set_reg(volatile uint32_t *p, int gpio, int bit) {
  42              	    if (bit) {
  43              	      *p |=  (0x01 << (gpio & 0x1f));
  44              	    } else {
  45              	      *p &= ~( 0x01 << (gpio & 0x1f));
  46              	    }
  47              	}
  48              	
  49              	void gpio_set_value(int gpio, int bit) {
  50              	    set_reg(GPIO_OUTPUT, gpio, bit);
  51              	}
  52              	
  53              	uint32_t gpio_get_input_value(int gpio) {
  54              	  uint32_t read = IO_IN(GPIO_INPUT);
  55              	
  56              	  //  return ((read & (1<<gpio)) >> gpio);
  57              	  return ((read >> gpio) & 0x01);
  58              	}
  59              	
  60              	void gpio_set_direction(int gpio, int bit) {
  61              	    set_reg(GPIO_DIR, gpio, bit);
  62              	}
  63              	
  64              	uint64_t get_cycles() {
  65              	  volatile uint32_t tmph0;
  66              	  volatile uint32_t tmpl0;
  67              	
  68 0070 F32700C8 	  asm volatile ("rdcycleh %0" : "=r"(tmph0));
  69              	  asm volatile ("rdcycle  %0" : "=r"(tmpl0));
  81              		rdcycleh a5	# tmp78
  82              	# 0 "" 2
  83              	 #NO_APP
  84 0074 2324F100 		sw	a5,8(sp)	# tmp78, tmph0
  85              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
  86              	 #APP
  87              	# 69 "kianv_stdlib.h" 1
  70              	
  88              		rdcycle  a5	# tmp79
  89              	# 0 "" 2
  90              	 #NO_APP
  91 007c 2326F100 		sw	a5,12(sp)	# tmp79, tmpl0
  92              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
  93 0080 83258100 		lw	a1,8(sp)		# tmph0.0_1, tmph0
  94              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
  95 0084 0325C100 		lw	a0,12(sp)		# tmpl0.1_4, tmpl0
  96              	# kianv_stdlib.h:73: }
  97 0088 13010101 		addi	sp,sp,16	#,,
  98 008c 67800000 		jr	ra		#
 100              		.align	2
 101              		.globl	wait_cycles
 103              	wait_cycles:
 104 0090 130101FF 		addi	sp,sp,-16	#,,
 105 0094 23248100 		sw	s0,8(sp)	#,
 106 0098 23229100 		sw	s1,4(sp)	#,
 107 009c 23202101 		sw	s2,0(sp)	#,
 108 00a0 93040500 		mv	s1,a0	# wait, tmp97
 109 00a4 13890500 		mv	s2,a1	# wait, tmp98
 110 00a8 23261100 		sw	ra,12(sp)	#,
 111              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 112 00ac 97000000 		call	get_cycles		#
 112      E7800000 
 113              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 114 00b4 B3049500 		add	s1,a0,s1	# wait, tmp95, _1
 115 00b8 33B4A400 		sltu	s0,s1,a0	# _1, tmp78, tmp95
 116 00bc B3852501 		add	a1,a1,s2	# wait, tmp96, tmp100
 117 00c0 3304B400 		add	s0,s0,a1	# tmp96, tmp80, tmp78
 118              	.L13:
 119              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 120 00c4 97000000 		call	get_cycles		#
 120      E7800000 
 121              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 122 00cc E3EC85FE 		bgtu	s0,a1,.L13	#, tmp80, _2,
 123 00d0 6314B400 		bne	s0,a1,.L10	#, tmp80, _2,
 124 00d4 E36895FE 		bgtu	s1,a0,.L13	#, tmp95, _2,
 125              	.L10:
 126              	# kianv_stdlib.h:83: }
 127 00d8 8320C100 		lw	ra,12(sp)		#,
 128 00dc 03248100 		lw	s0,8(sp)		#,
 129 00e0 83244100 		lw	s1,4(sp)		#,
 130 00e4 03290100 		lw	s2,0(sp)		#,
 131 00e8 13010101 		addi	sp,sp,16	#,,
 132 00ec 67800000 		jr	ra		#
 134              		.align	2
 135              		.globl	usleep
 137              	usleep:
 138              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 139 00f0 63040502 		beq	a0,zero,.L15	#, us,,
 140              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 141 00f4 B7070030 		li	a5,805306368		# tmp78,
 142 00f8 83A70701 		lw	a5,16(a5)		# _8, MEM[(volatile uint32_t *)805306384B]
 143              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 144 00fc 37470F00 		li	a4,999424		# tmp82,
 145 0100 13070724 		addi	a4,a4,576	#, tmp81, tmp82
 146 0104 B3D7E702 		divu	a5,a5,a4	# tmp81, tmp80, _8
 147              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 148 0108 93050000 		li	a1,0		#,
 149 010c 3385A702 		mul	a0,a5,a0	#, tmp80, us
 150 0110 17030000 		tail	wait_cycles		#
 150      67000300 
 151              	.L15:
 152              	# kianv_stdlib.h:87: }
 153 0118 67800000 		ret	
 155              		.align	2
 156              		.globl	msleep
 158              	msleep:
 159              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 160 011c 63020502 		beq	a0,zero,.L17	#, ms,,
 161              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 162 0120 B7070030 		li	a5,805306368		# tmp78,
 163 0124 83A70701 		lw	a5,16(a5)		# _8, MEM[(volatile uint32_t *)805306384B]
 164              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 165 0128 1307803E 		li	a4,1000		# tmp80,
 166              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 167 012c 93050000 		li	a1,0		#,
 168              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 169 0130 B3D7E702 		divu	a5,a5,a4	# tmp80, tmp81, _8
 170              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 171 0134 3385A702 		mul	a0,a5,a0	#, tmp81, ms
 172 0138 17030000 		tail	wait_cycles		#
 172      67000300 
 173              	.L17:
 174              	# kianv_stdlib.h:91: }
 175 0140 67800000 		ret	
 177              		.align	2
 178              		.globl	sleep
 180              	sleep:
 181              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 182 0144 630E0500 		beq	a0,zero,.L19	#, sec,,
 183              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 184 0148 B7070030 		li	a5,805306368		# tmp77,
 185 014c 83A70701 		lw	a5,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 186              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 187 0150 93050000 		li	a1,0		#,
 188 0154 3305F502 		mul	a0,a0,a5	#, sec, _7
 189 0158 17030000 		tail	wait_cycles		#
 189      67000300 
 190              	.L19:
 191              	# kianv_stdlib.h:95: }
 192 0160 67800000 		ret	
 194              		.globl	__udivdi3
 195              		.align	2
 196              		.globl	nanoseconds
 198              	nanoseconds:
 199 0164 130101FF 		addi	sp,sp,-16	#,,
 200 0168 23261100 		sw	ra,12(sp)	#,
 201              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 202 016c 97000000 		call	get_cycles		#
 202      E7800000 
 203              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 204 0174 B7070030 		li	a5,805306368		# tmp78,
 205 0178 03A60701 		lw	a2,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 206              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 207 017c B7470F00 		li	a5,999424		# tmp83,
 208 0180 93870724 		addi	a5,a5,576	#, tmp82, tmp83
 209 0184 3356F602 		divu	a2,a2,a5	# tmp82,, _7
 210 0188 93060000 		li	a3,0		#,
 211 018c 97000000 		call	__udivdi3		#
 211      E7800000 
 212              	# kianv_stdlib.h:99: }
 213 0194 8320C100 		lw	ra,12(sp)		#,
 214 0198 13010101 		addi	sp,sp,16	#,,
 215 019c 67800000 		jr	ra		#
 217              		.align	2
 218              		.globl	milliseconds
 220              	milliseconds:
 221 01a0 130101FF 		addi	sp,sp,-16	#,,
 222 01a4 23261100 		sw	ra,12(sp)	#,
 223              	# kianv_stdlib.h:102:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 224 01a8 97000000 		call	get_cycles		#
 224      E7800000 
 225              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 226 01b0 B7070030 		li	a5,805306368		# tmp78,
 227 01b4 03A60701 		lw	a2,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 228              	# kianv_stdlib.h:102:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 229 01b8 9307803E 		li	a5,1000		# tmp81,
 230 01bc 93060000 		li	a3,0		#,
 231 01c0 3356F602 		divu	a2,a2,a5	# tmp81,, _7
 232 01c4 97000000 		call	__udivdi3		#
 232      E7800000 
 233              	# kianv_stdlib.h:103: }
 234 01cc 8320C100 		lw	ra,12(sp)		#,
 235 01d0 13010101 		addi	sp,sp,16	#,,
 236 01d4 67800000 		jr	ra		#
 238              		.align	2
 239              		.globl	seconds
 241              	seconds:
 242 01d8 130101FF 		addi	sp,sp,-16	#,,
 243 01dc 23261100 		sw	ra,12(sp)	#,
 244              	# kianv_stdlib.h:106:   return get_cycles() / (uint64_t) (get_cpu_freq());
 245 01e0 97000000 		call	get_cycles		#
 245      E7800000 
 246              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 247 01e8 B7070030 		li	a5,805306368		# tmp77,
 248 01ec 03A60701 		lw	a2,16(a5)		# _6, MEM[(volatile uint32_t *)805306384B]
 249              	# kianv_stdlib.h:106:   return get_cycles() / (uint64_t) (get_cpu_freq());
 250 01f0 93060000 		li	a3,0		#,
 251 01f4 97000000 		call	__udivdi3		#
 251      E7800000 
 252              	# kianv_stdlib.h:107: }
 253 01fc 8320C100 		lw	ra,12(sp)		#,
 254 0200 13010101 		addi	sp,sp,16	#,,
 255 0204 67800000 		jr	ra		#
 257              		.align	2
 258              		.globl	putchar
 260              	putchar:
 261              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 262 0208 B7070030 		li	a5,805306368		# tmp75,
 263              	.L28:
 264              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 265 020c 03A70700 		lw	a4,0(a5)		# _1, MEM[(volatile uint32_t *)805306368B]
 266              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 267 0210 E30E07FE 		beq	a4,zero,.L28	#, _1,,
 268              	# kianv_stdlib.h:112:   *((volatile uint32_t*) UART_TX) = c;
 269 0214 23A0A700 		sw	a0,0(a5)	# c, MEM[(volatile uint32_t *)805306368B]
 270              	# kianv_stdlib.h:113: }
 271 0218 67800000 		ret	
 273              		.align	2
 274              		.globl	print_chr
 276              	print_chr:
 277 021c 17030000 		tail	putchar		#
 277      67000300 
 279              		.align	2
 280              		.globl	print_str
 282              	print_str:
 283              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 284 0224 37070030 		li	a4,805306368		# tmp78,
 285              	.L33:
 286              	# kianv_stdlib.h:122:   while (*p != 0) {
 287 0228 83470500 		lbu	a5,0(a0)	# _3, MEM[(char *)p_4]
 288              	# kianv_stdlib.h:122:   while (*p != 0) {
 289 022c 63940700 		bne	a5,zero,.L34	#, _3,,
 290              	# kianv_stdlib.h:127: }
 291 0230 67800000 		ret	
 292              	.L34:
 293              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 294 0234 83260700 		lw	a3,0(a4)		# _1, MEM[(volatile uint32_t *)805306368B]
 295              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 296 0238 E38E06FE 		beq	a3,zero,.L34	#, _1,,
 297              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 298 023c 13051500 		addi	a0,a0,1	#, p, p
 299              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 300 0240 2320F700 		sw	a5,0(a4)	# _3, MEM[(volatile uint32_t *)805306368B]
 301 0244 6FF05FFE 		j	.L33		#
 303              		.align	2
 304              		.globl	print_str_ln
 306              	print_str_ln:
 307 0248 130101FF 		addi	sp,sp,-16	#,,
 308 024c 23261100 		sw	ra,12(sp)	#,
 309              	# kianv_stdlib.h:129:   print_str(p);
 310 0250 97000000 		call	print_str		#
 310      E7800000 
 311              	# kianv_stdlib.h:131: }
 312 0258 8320C100 		lw	ra,12(sp)		#,
 313              	# kianv_stdlib.h:130:   print_chr(10);
 314 025c 1305A000 		li	a0,10		#,
 315              	# kianv_stdlib.h:131: }
 316 0260 13010101 		addi	sp,sp,16	#,,
 317              	# kianv_stdlib.h:130:   print_chr(10);
 318 0264 17030000 		tail	putchar		#
 318      67000300 
 320              		.align	2
 321              		.globl	print_dec
 323              	print_dec:
 324 026c 130101FF 		addi	sp,sp,-16	#,,
 325              	# kianv_stdlib.h:135:   char *p = buffer;
 326 0270 93074100 		addi	a5,sp,4	#, p,
 327 0274 93860700 		mv	a3,a5	# p, p
 328              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 329 0278 1307A000 		li	a4,10		# tmp93,
 330              	.L41:
 331              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 332 027c 63180502 		bne	a0,zero,.L42	#, val,,
 333              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 334 0280 6386D702 		beq	a5,a3,.L42	#, p, p,
 335              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 336 0284 37060030 		li	a2,805306368		# tmp88,
 337              	.L43:
 338              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 339 0288 03270600 		lw	a4,0(a2)		# _3, MEM[(volatile uint32_t *)805306368B]
 340              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 341 028c E30E07FE 		beq	a4,zero,.L43	#, _3,,
 342              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 343 0290 03C7F7FF 		lbu	a4,-1(a5)	# MEM[(char *)p_16], MEM[(char *)p_16]
 344              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 345 0294 9387F7FF 		addi	a5,a5,-1	#, p, p
 346              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 347 0298 13070703 		addi	a4,a4,48	#, _7, MEM[(char *)p_16]
 348              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 349 029c 2320E600 		sw	a4,0(a2)	# _7, MEM[(volatile uint32_t *)805306368B]
 350              	# kianv_stdlib.h:141:   while (p != buffer) {
 351 02a0 E394D7FE 		bne	a5,a3,.L43	#, p, p,
 352              	# kianv_stdlib.h:146: }
 353 02a4 13010101 		addi	sp,sp,16	#,,
 354 02a8 67800000 		jr	ra		#
 355              	.L42:
 356              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 357 02ac 3376E502 		remu	a2,a0,a4	# tmp93, tmp83, val
 358              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 359 02b0 93871700 		addi	a5,a5,1	#, p, p
 360              	# kianv_stdlib.h:138:     val = val / 10;
 361 02b4 3355E502 		divu	a0,a0,a4	# tmp93, val, val
 362              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 363 02b8 A38FC7FE 		sb	a2,-1(a5)	# tmp83, MEM[(char *)p_18 + 4294967295B]
 364 02bc 6FF01FFC 		j	.L41		#
 366              		.globl	__umoddi3
 367              		.align	2
 368              		.globl	print_dec64
 370              	print_dec64:
 371 02c0 130101FC 		addi	sp,sp,-64	#,,
 372 02c4 23282103 		sw	s2,48(sp)	#,
 373              	# kianv_stdlib.h:150:   char *p = buffer;
 374 02c8 1309C100 		addi	s2,sp,12	#, p,
 375              	# kianv_stdlib.h:148: void print_dec64(uint64_t val) {
 376 02cc 232C8102 		sw	s0,56(sp)	#,
 377 02d0 232A9102 		sw	s1,52(sp)	#,
 378 02d4 23263103 		sw	s3,44(sp)	#,
 379 02d8 232E1102 		sw	ra,60(sp)	#,
 380              	# kianv_stdlib.h:148: void print_dec64(uint64_t val) {
 381 02dc 13040500 		mv	s0,a0	# val, tmp102
 382 02e0 93840500 		mv	s1,a1	# val, tmp103
 383 02e4 93090900 		mv	s3,s2	# p, p
 384              	.L50:
 385              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 386 02e8 B3679400 		or	a5,s0,s1	# val, val, val
 387 02ec 63920704 		bne	a5,zero,.L51	#, val,,
 388              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 389 02f0 63003905 		beq	s2,s3,.L51	#, p, p,
 390              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 391 02f4 37070030 		li	a4,805306368		# tmp93,
 392              	.L52:
 393              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 394 02f8 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 395              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 396 02fc E38E07FE 		beq	a5,zero,.L52	#, _3,,
 397              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 398 0300 8347F9FF 		lbu	a5,-1(s2)	# MEM[(char *)p_16], MEM[(char *)p_16]
 399              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 400 0304 1309F9FF 		addi	s2,s2,-1	#, p, p
 401              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 402 0308 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 403              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 404 030c 2320F700 		sw	a5,0(a4)	# _7, MEM[(volatile uint32_t *)805306368B]
 405              	# kianv_stdlib.h:156:   while (p != buffer) {
 406 0310 E31439FF 		bne	s2,s3,.L52	#, p, p,
 407              	# kianv_stdlib.h:161: }
 408 0314 8320C103 		lw	ra,60(sp)		#,
 409 0318 03248103 		lw	s0,56(sp)		#,
 410 031c 83244103 		lw	s1,52(sp)		#,
 411 0320 03290103 		lw	s2,48(sp)		#,
 412 0324 8329C102 		lw	s3,44(sp)		#,
 413 0328 13010104 		addi	sp,sp,64	#,,
 414 032c 67800000 		jr	ra		#
 415              	.L51:
 416              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 417 0330 1306A000 		li	a2,10		#,
 418 0334 93060000 		li	a3,0		#,
 419 0338 13050400 		mv	a0,s0	#, val
 420 033c 93850400 		mv	a1,s1	#, val
 421 0340 97000000 		call	__umoddi3		#
 421      E7800000 
 422              	# kianv_stdlib.h:153:     val = val / 10;
 423 0348 93850400 		mv	a1,s1	#, val
 424              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 425 034c 2300A900 		sb	a0,0(s2)	# tmp104, MEM[(char *)p_18 + 4294967295B]
 426              	# kianv_stdlib.h:153:     val = val / 10;
 427 0350 1306A000 		li	a2,10		#,
 428 0354 13050400 		mv	a0,s0	#, val
 429 0358 93060000 		li	a3,0		#,
 430 035c 97000000 		call	__udivdi3		#
 430      E7800000 
 431              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 432 0364 13091900 		addi	s2,s2,1	#, p, p
 433              	# kianv_stdlib.h:153:     val = val / 10;
 434 0368 13040500 		mv	s0,a0	# val, tmp106
 435 036c 93840500 		mv	s1,a1	# val, tmp107
 436 0370 6FF09FF7 		j	.L50		#
 438              		.section	.rodata.str1.4,"aMS",@progbits,1
 439              		.align	2
 440              	.LC0:
 441 0000 30313233 		.string	"0123456789ABCDEF"
 441      34353637 
 441      38394142 
 441      43444546 
 441      00
 442              		.text
 443              		.align	2
 444              		.globl	print_hex
 446              	print_hex:
 447              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 448 0374 9385F5FF 		addi	a1,a1,-1	#, tmp81, tmp93
 449              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 450 0378 37070000 		lui	a4,%hi(.LC0)	# tmp90,
 451              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 452 037c 93952500 		slli	a1,a1,2	#, i, tmp81
 453              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 454 0380 B7060030 		li	a3,805306368		# tmp89,
 455              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 456 0384 13070700 		addi	a4,a4,%lo(.LC0)	# tmp91, tmp90,
 457              	.L59:
 458              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 459 0388 63D40500 		bge	a1,zero,.L60	#, i,,
 460              	# kianv_stdlib.h:169: }
 461 038c 67800000 		ret	
 462              	.L60:
 463              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 464 0390 83A70600 		lw	a5,0(a3)		# _2, MEM[(volatile uint32_t *)805306368B]
 465              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 466 0394 E38E07FE 		beq	a5,zero,.L60	#, _2,,
 467              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 468 0398 B357B500 		srl	a5,a0,a1	# i, tmp85, val
 469              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 470 039c 93F7F700 		andi	a5,a5,15	#, tmp86, tmp85
 471              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 472 03a0 B307F700 		add	a5,a4,a5	# tmp86, tmp87, tmp91
 473 03a4 83C70700 		lbu	a5,0(a5)	# _6, "0123456789ABCDEF"[_4]
 474              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 475 03a8 9385C5FF 		addi	a1,a1,-4	#, i, i
 476              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 477 03ac 23A0F600 		sw	a5,0(a3)	# _6, MEM[(volatile uint32_t *)805306368B]
 478 03b0 6FF09FFD 		j	.L59		#
 480              		.align	2
 481              		.globl	setpixel
 483              	setpixel:
 484              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 485 03b4 B7070100 		li	a5,65536		# tmp88,
 486 03b8 9387F7FF 		addi	a5,a5,-1	#, tmp87, tmp88
 487 03bc 93958500 		slli	a1,a1,8	#, tmp85, tmp94
 488 03c0 B3F5F500 		and	a1,a1,a5	# tmp87, tmp86, tmp85
 489              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 490 03c4 93960601 		slli	a3,a3,16	#, tmp89, tmp96
 491              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 492 03c8 B3E5D500 		or	a1,a1,a3	# tmp89, tmp90, tmp86
 493              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 494 03cc 1376F60F 		andi	a2,a2,0xff	# tmp91, tmp95
 495              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 496 03d0 B3E5C500 		or	a1,a1,a2	# tmp91, _9, tmp90
 497              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 498 03d4 B7070030 		li	a5,805306368		# tmp93,
 499 03d8 23A4B700 		sw	a1,8(a5)	# _9, MEM[(volatile uint32_t *)805306376B]
 500              	# kianv_stdlib.h:184: }
 501 03dc 67800000 		ret	
 503              		.align	2
 504              		.globl	draw_bresenham
 506              	draw_bresenham:
 507 03e0 130101FC 		addi	sp,sp,-64	#,,
 508 03e4 232E7101 		sw	s7,28(sp)	#,
 509 03e8 930B0500 		mv	s7,a0	# fb, tmp101
 510              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 511 03ec 3385B640 		sub	a0,a3,a1	#, x1, x0
 512              	# kianv_stdlib.h:187: {
 513 03f0 232C8102 		sw	s0,56(sp)	#,
 514 03f4 232A9102 		sw	s1,52(sp)	#,
 515 03f8 23263103 		sw	s3,44(sp)	#,
 516 03fc 23225103 		sw	s5,36(sp)	#,
 517 0400 23206103 		sw	s6,32(sp)	#,
 518 0404 232C8101 		sw	s8,24(sp)	#,
 519 0408 2328A101 		sw	s10,16(sp)	#,
 520 040c 232E1102 		sw	ra,60(sp)	#,
 521 0410 23282103 		sw	s2,48(sp)	#,
 522 0414 23244103 		sw	s4,40(sp)	#,
 523 0418 232A9101 		sw	s9,20(sp)	#,
 524 041c 2326B101 		sw	s11,12(sp)	#,
 525              	# kianv_stdlib.h:187: {
 526 0420 93840500 		mv	s1,a1	# x0, tmp102
 527 0424 13040600 		mv	s0,a2	# y0, tmp103
 528 0428 938A0600 		mv	s5,a3	# x1, tmp104
 529 042c 130B0700 		mv	s6,a4	# y1, tmp105
 530 0430 138C0700 		mv	s8,a5	# color, tmp106
 531              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 532 0434 97000000 		call	abs		#
 532      E7800000 
 533 043c 93090500 		mv	s3,a0	# dx, tmp107
 534              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 535 0440 130DF0FF 		li	s10,-1		# iftmp.6_9,
 536 0444 63D45401 		ble	s5,s1,.L66	#, x1, x0,
 537 0448 130D1000 		li	s10,1		# iftmp.6_9,
 538              	.L66:
 539              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 540 044c 33058B40 		sub	a0,s6,s0	#, y1, y0
 541 0450 97000000 		call	abs		#
 541      E7800000 
 542 0458 130A0500 		mv	s4,a0	# _3, tmp108
 543              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 544 045c B30DA040 		neg	s11,a0	# dy, _3
 545              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 546 0460 930C1000 		li	s9,1		# iftmp.7_10,
 547 0464 63446401 		bgt	s6,s0,.L67	#, y1, y0,
 548              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 549 0468 930CF0FF 		li	s9,-1		# iftmp.7_10,
 550              	.L67:
 551 046c 33894941 		sub	s2,s3,s4	# err, dx, _3
 552              	.L68:
 553              	# kianv_stdlib.h:196:     setpixel(fb, x0, y0, color);
 554 0470 93060C00 		mv	a3,s8	#, color
 555 0474 13060400 		mv	a2,s0	#, y0
 556 0478 93850400 		mv	a1,s1	#, x0
 557 047c 13850B00 		mv	a0,s7	#, fb
 558 0480 97000000 		call	setpixel		#
 558      E7800000 
 559              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 560 0488 63945401 		bne	s1,s5,.L69	#, x0, x1,
 561              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 562 048c 63026403 		beq	s0,s6,.L65	#, y0, y1,
 563              	.L69:
 564              	# kianv_stdlib.h:198:     e2 = 2*err;
 565 0490 93171900 		slli	a5,s2,1	#, e2, err
 566              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 567 0494 63C6B701 		bgt	s11,a5,.L71	#, dy, e2,
 568 0498 33094941 		sub	s2,s2,s4	# err, err, _3
 569              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 570 049c B384A401 		add	s1,s1,s10	# iftmp.6_9, x0, x0
 571              	.L71:
 572              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 573 04a0 E3C8F9FC 		blt	s3,a5,.L68	#, dx, e2,
 574              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 575 04a4 33093901 		add	s2,s2,s3	# dx, err, err
 576              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 577 04a8 33049401 		add	s0,s0,s9	# iftmp.7_10, y0, y0
 578 04ac 6FF05FFC 		j	.L68		#
 579              	.L65:
 580              	# kianv_stdlib.h:202: }
 581 04b0 8320C103 		lw	ra,60(sp)		#,
 582 04b4 03248103 		lw	s0,56(sp)		#,
 583 04b8 83244103 		lw	s1,52(sp)		#,
 584 04bc 03290103 		lw	s2,48(sp)		#,
 585 04c0 8329C102 		lw	s3,44(sp)		#,
 586 04c4 032A8102 		lw	s4,40(sp)		#,
 587 04c8 832A4102 		lw	s5,36(sp)		#,
 588 04cc 032B0102 		lw	s6,32(sp)		#,
 589 04d0 832BC101 		lw	s7,28(sp)		#,
 590 04d4 032C8101 		lw	s8,24(sp)		#,
 591 04d8 832C4101 		lw	s9,20(sp)		#,
 592 04dc 032D0101 		lw	s10,16(sp)		#,
 593 04e0 832DC100 		lw	s11,12(sp)		#,
 594 04e4 13010104 		addi	sp,sp,64	#,,
 595 04e8 67800000 		jr	ra		#
 597              		.section	.text.startup,"ax",@progbits
 598              		.align	2
 599              		.globl	main
 601              	main:
 602 0000 130101FF 		addi	sp,sp,-16	#,,
 603 0004 23229100 		sw	s1,4(sp)	#,
 604 0008 23261100 		sw	ra,12(sp)	#,
 605 000c 23248100 		sw	s0,8(sp)	#,
 606              	# main_ascii.c:8:     for (char i = ' '; i < 'z'; i++) {
 607 0010 9304A007 		li	s1,122		# tmp74,
 608              	.L79:
 609              	# main_ascii.c:8:     for (char i = ' '; i < 'z'; i++) {
 610 0014 13040002 		li	s0,32		# i,
 611              	.L78:
 612              	# main_ascii.c:9:       putchar(i);
 613 0018 13050400 		mv	a0,s0	#, i
 614              	# main_ascii.c:8:     for (char i = ' '; i < 'z'; i++) {
 615 001c 13041400 		addi	s0,s0,1	#, tmp73, i
 616 0020 1374F40F 		andi	s0,s0,0xff	# i, tmp73
 617              	# main_ascii.c:9:       putchar(i);
 618 0024 97000000 		call	putchar		#
 618      E7800000 
 619              	# main_ascii.c:8:     for (char i = ' '; i < 'z'; i++) {
 620 002c E31694FE 		bne	s0,s1,.L78	#, i, tmp74,
 621 0030 6FF05FFE 		j	.L79		#
 623              		.ident	"GCC: (GNU) 11.1.0"
