   1              		.file	"main_raytrace.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              	# GNU C17 (GCC) version 11.1.0 (riscv32-unknown-elf)
   7              	#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   8              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   9              	# options passed: -march=rv32im -mabi=ilp32 -mtune=rocket -march=rv32im -Os -fno-pic -fno-stack-pro
  10              		.text
  11              		.globl	__mulsf3
  12              		.globl	__addsf3
  13              		.globl	__divsf3
  14              		.align	2
  16              	vec3_normalize:
  17 0000 130101FE 		addi	sp,sp,-32	#,,
  18 0004 23244101 		sw	s4,8(sp)	#,
  19 0008 03AA0500 		lw	s4,0(a1)		# U$x, U.x
  20 000c 23263101 		sw	s3,12(sp)	#,
  21 0010 83A94500 		lw	s3,4(a1)		# U$y, U.y
  22 0014 232C8100 		sw	s0,24(sp)	#,
  23 0018 23282101 		sw	s2,16(sp)	#,
  24 001c 13040500 		mv	s0,a0	# .result_ptr, tmp97
  25 0020 03A98500 		lw	s2,8(a1)		# U$z, U.z
  26              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
  27 0024 13050A00 		mv	a0,s4	#, U$x
  28 0028 93050A00 		mv	a1,s4	#, U$x
  29              	# main_raytrace.c:56: static inline vec3 vec3_normalize(vec3 U)      { return vec3_scale(1.0f/vec3_
  30 002c 232E1100 		sw	ra,28(sp)	#,
  31 0030 232A9100 		sw	s1,20(sp)	#,
  32              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
  33 0034 97000000 		call	__mulsf3		#
  33      E7800000 
  34 003c 93040500 		mv	s1,a0	# tmp87, tmp99
  35              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
  36 0040 93850900 		mv	a1,s3	#, U$y
  37 0044 13850900 		mv	a0,s3	#, U$y
  38 0048 97000000 		call	__mulsf3		#
  38      E7800000 
  39 0050 93050500 		mv	a1,a0	# tmp100,
  40              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
  41 0054 13850400 		mv	a0,s1	#, tmp87
  42 0058 97000000 		call	__addsf3		#
  42      E7800000 
  43 0060 93040500 		mv	s1,a0	# tmp89, tmp101
  44              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
  45 0064 93050900 		mv	a1,s2	#, U$z
  46 0068 13050900 		mv	a0,s2	#, U$z
  47 006c 97000000 		call	__mulsf3		#
  47      E7800000 
  48 0074 93050500 		mv	a1,a0	# tmp102,
  49              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
  50 0078 13850400 		mv	a0,s1	#, tmp89
  51 007c 97000000 		call	__addsf3		#
  51      E7800000 
  52 0084 97000000 		call	sqrtf		#
  52      E7800000 
  53              	# main_raytrace.c:56: static inline vec3 vec3_normalize(vec3 U)      { return vec3_scale(1.0f/vec3_
  54 008c B7070000 		lui	a5,%hi(.LC0)	# tmp92,
  55              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
  56 0090 93050500 		mv	a1,a0	# tmp103,
  57              	# main_raytrace.c:56: static inline vec3 vec3_normalize(vec3 U)      { return vec3_scale(1.0f/vec3_
  58 0094 03A50700 		lw	a0,%lo(.LC0)(a5)		#,
  59 0098 97000000 		call	__divsf3		#
  59      E7800000 
  60              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
  61 00a0 93050A00 		mv	a1,s4	#, U$x
  62              	# main_raytrace.c:56: static inline vec3 vec3_normalize(vec3 U)      { return vec3_scale(1.0f/vec3_
  63 00a4 93040500 		mv	s1,a0	# tmp93, tmp104
  64              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
  65 00a8 97000000 		call	__mulsf3		#
  65      E7800000 
  66              	# main_raytrace.c:41:   return V;
  67 00b0 2320A400 		sw	a0,0(s0)	# tmp105, <retval>.x
  68              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
  69 00b4 93850400 		mv	a1,s1	#, tmp93
  70 00b8 13850900 		mv	a0,s3	#, U$y
  71 00bc 97000000 		call	__mulsf3		#
  71      E7800000 
  72              	# main_raytrace.c:41:   return V;
  73 00c4 2322A400 		sw	a0,4(s0)	# tmp106, <retval>.y
  74              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
  75 00c8 93050900 		mv	a1,s2	#, U$z
  76 00cc 13850400 		mv	a0,s1	#, tmp93
  77 00d0 97000000 		call	__mulsf3		#
  77      E7800000 
  78              	# main_raytrace.c:41:   return V;
  79 00d8 2324A400 		sw	a0,8(s0)	# tmp107, <retval>.z
  80              	# main_raytrace.c:56: static inline vec3 vec3_normalize(vec3 U)      { return vec3_scale(1.0f/vec3_
  81 00dc 8320C101 		lw	ra,28(sp)		#,
  82 00e0 13050400 		mv	a0,s0	#, .result_ptr
  83 00e4 03248101 		lw	s0,24(sp)		#,
  84 00e8 83244101 		lw	s1,20(sp)		#,
  85 00ec 03290101 		lw	s2,16(sp)		#,
  86 00f0 8329C100 		lw	s3,12(sp)		#,
  87 00f4 032A8100 		lw	s4,8(sp)		#,
  88 00f8 13010102 		addi	sp,sp,32	#,,
  89 00fc 67800000 		jr	ra		#
  91              		.align	2
  92              		.globl	set_reg
  94              	set_reg:
  95              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
  96 0100 93071000 		li	a5,1		# tmp85,
  97 0104 B395B700 		sll	a1,a5,a1	# tmp88, _12, tmp85
  98              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
  99 0108 83270500 		lw	a5,0(a0)		# _1,* p
 100              	# kianv_stdlib.h:42:     if (bit) {
 101 010c 63080600 		beq	a2,zero,.L4	#, tmp89,,
 102              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 103 0110 B3E5F500 		or	a1,a1,a5	# _1, _5, _12
 104              	.L6:
 105              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 106 0114 2320B500 		sw	a1,0(a0)	# _18,* p
 107              	# kianv_stdlib.h:47: }
 108 0118 67800000 		ret	
 109              	.L4:
 110              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 111 011c 93C5F5FF 		not	a1,a1	# tmp86, _12
 112              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 113 0120 B3F5F500 		and	a1,a1,a5	# _13, _18, tmp86
 114 0124 6FF01FFF 		j	.L6		#
 116              		.align	2
 117              		.globl	gpio_set_value
 119              	gpio_set_value:
 120              	# kianv_stdlib.h:49: void gpio_set_value(int gpio, int bit) {
 121 0128 13860500 		mv	a2,a1	# tmp76, bit
 122              	# kianv_stdlib.h:50:     set_reg(GPIO_OUTPUT, gpio, bit);
 123 012c 93050500 		mv	a1,a0	#, tmp75
 124 0130 37050030 		li	a0,805306368		# tmp74,
 125 0134 1305C501 		addi	a0,a0,28	#,, tmp74
 126 0138 17030000 		tail	set_reg		#
 126      67000300 
 128              		.align	2
 129              		.globl	gpio_get_input_value
 131              	gpio_get_input_value:
 132              	# kianv_stdlib.h:54:   uint32_t read = IO_IN(GPIO_INPUT);
 133 0140 B7070030 		li	a5,805306368		# tmp77,
 134 0144 83A70702 		lw	a5,32(a5)		# read, MEM[(volatile uint32_t *)805306400B]
 135              	# kianv_stdlib.h:57:   return ((read >> gpio) & 0x01);
 136 0148 33D5A700 		srl	a0,a5,a0	# tmp80, tmp79, read
 137              	# kianv_stdlib.h:58: }
 138 014c 13751500 		andi	a0,a0,1	#,, tmp79
 139 0150 67800000 		ret	
 141              		.align	2
 142              		.globl	gpio_set_direction
 144              	gpio_set_direction:
 145              	# kianv_stdlib.h:60: void gpio_set_direction(int gpio, int bit) {
 146 0154 13860500 		mv	a2,a1	# tmp76, bit
 147              	# kianv_stdlib.h:61:     set_reg(GPIO_DIR, gpio, bit);
 148 0158 93050500 		mv	a1,a0	#, tmp75
 149 015c 37050030 		li	a0,805306368		# tmp74,
 150 0160 13054501 		addi	a0,a0,20	#,, tmp74
 151 0164 17030000 		tail	set_reg		#
 151      67000300 
 153              		.align	2
 154              		.globl	get_cycles
 156              	get_cycles:
 157 016c 130101FF 		addi	sp,sp,-16	#,,
 158              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 159              	 #APP
 160              	# 68 "kianv_stdlib.h" 1
   1              	#include <stdint.h>
   2              	#include <math.h>
   3              	
   4              	/* kian hardware register */
   5              	#define IO_BASE 0x30000000
   6              	#define UART_TX             (volatile uint32_t *) (IO_BASE + 0x0000)
   7              	#define UART_READY          (volatile uint32_t *) (IO_BASE + 0x0000)
   8              	#define VIDEOENABLE         (volatile uint32_t *) (IO_BASE + 0x0008)
   9              	#define VIDEO               (volatile uint32_t *) (IO_BASE + 0x0008)
  10              	#define VIDEO_RAW           (volatile uint32_t *) (IO_BASE + 0x000C)
  11              	#define CPU_FREQ            (volatile uint32_t *) (IO_BASE + 0x0010)
  12              	// gpio hack stuff
  13              	#define GPIO_DIR            ( volatile uint32_t  *) (IO_BASE + 0x0014)
  14              	#define GPIO_PULLUP         ( volatile uint32_t  *) (IO_BASE + 0x0018) // not implemented
  15              	#define GPIO_OUTPUT         ( volatile uint32_t  *) (IO_BASE + 0x001C)
  16              	#define GPIO_INPUT          ( volatile uint32_t  *) (IO_BASE + 0x0020)
  17              	#define IO_OUT(reg, value) *((volatile uint32_t  *) (reg)) = (value)
  18              	#define IO_IN(reg)         *((volatile uint32_t  *) reg)
  19              	
  20              	#define GPIO_INPUT_PIN  0
  21              	#define GPIO_OUTPUT_PIN 1
  22              	//#define RV32_FASTCODE __attribute((section(".fastcode")))
  23              	#define RV32_FASTCODE
  24              	
  25              	//__attribute((section(".fastcode")))
  26              	
  27              	#define RED   "\x1B[31m"
  28              	#define GRN   "\x1B[32m"
  29              	#define YEL   "\x1B[33m"
  30              	#define BLU   "\x1B[34m"
  31              	#define MAG   "\x1B[35m"
  32              	#define CYN   "\x1B[36m"
  33              	#define WHT   "\x1B[37m"
  34              	#define RESET "\x1B[0m"
  35              	
  36              	#define CLS       "\x1B[2J"
  37              	#define BOLD      "\x1B[1m"
  38              	#define BLINK     "\x1B[5m"
  39              	#define BLINK_OFF "\x1B[25m"
  40              	
  41              	void set_reg(volatile uint32_t *p, int gpio, int bit) {
  42              	    if (bit) {
  43              	      *p |=  (0x01 << (gpio & 0x1f));
  44              	    } else {
  45              	      *p &= ~( 0x01 << (gpio & 0x1f));
  46              	    }
  47              	}
  48              	
  49              	void gpio_set_value(int gpio, int bit) {
  50              	    set_reg(GPIO_OUTPUT, gpio, bit);
  51              	}
  52              	
  53              	uint32_t gpio_get_input_value(int gpio) {
  54              	  uint32_t read = IO_IN(GPIO_INPUT);
  55              	
  56              	  //  return ((read & (1<<gpio)) >> gpio);
  57              	  return ((read >> gpio) & 0x01);
  58              	}
  59              	
  60              	void gpio_set_direction(int gpio, int bit) {
  61              	    set_reg(GPIO_DIR, gpio, bit);
  62              	}
  63              	
  64              	uint64_t get_cycles() {
  65              	  volatile uint32_t tmph0;
  66              	  volatile uint32_t tmpl0;
  67              	
  68 0170 F32700C8 	  asm volatile ("rdcycleh %0" : "=r"(tmph0));
  69              	  asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 161              		rdcycleh a5	# tmp78
 162              	# 0 "" 2
 163              	 #NO_APP
 164 0174 2324F100 		sw	a5,8(sp)	# tmp78, tmph0
 165              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 166              	 #APP
 167              	# 69 "kianv_stdlib.h" 1
  70              	
 168              		rdcycle  a5	# tmp79
 169              	# 0 "" 2
 170              	 #NO_APP
 171 017c 2326F100 		sw	a5,12(sp)	# tmp79, tmpl0
 172              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 173 0180 83258100 		lw	a1,8(sp)		# tmph0.0_1, tmph0
 174              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 175 0184 0325C100 		lw	a0,12(sp)		# tmpl0.1_4, tmpl0
 176              	# kianv_stdlib.h:73: }
 177 0188 13010101 		addi	sp,sp,16	#,,
 178 018c 67800000 		jr	ra		#
 180              		.align	2
 181              		.globl	wait_cycles
 183              	wait_cycles:
 184 0190 130101FF 		addi	sp,sp,-16	#,,
 185 0194 23248100 		sw	s0,8(sp)	#,
 186 0198 23229100 		sw	s1,4(sp)	#,
 187 019c 23202101 		sw	s2,0(sp)	#,
 188 01a0 93040500 		mv	s1,a0	# wait, tmp97
 189 01a4 13890500 		mv	s2,a1	# wait, tmp98
 190 01a8 23261100 		sw	ra,12(sp)	#,
 191              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 192 01ac 97000000 		call	get_cycles		#
 192      E7800000 
 193              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 194 01b4 B3049500 		add	s1,a0,s1	# wait, tmp95, _1
 195 01b8 33B4A400 		sltu	s0,s1,a0	# _1, tmp78, tmp95
 196 01bc B3852501 		add	a1,a1,s2	# wait, tmp96, tmp100
 197 01c0 3304B400 		add	s0,s0,a1	# tmp96, tmp80, tmp78
 198              	.L15:
 199              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 200 01c4 97000000 		call	get_cycles		#
 200      E7800000 
 201              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 202 01cc E3EC85FE 		bgtu	s0,a1,.L15	#, tmp80, _2,
 203 01d0 6314B400 		bne	s0,a1,.L12	#, tmp80, _2,
 204 01d4 E36895FE 		bgtu	s1,a0,.L15	#, tmp95, _2,
 205              	.L12:
 206              	# kianv_stdlib.h:83: }
 207 01d8 8320C100 		lw	ra,12(sp)		#,
 208 01dc 03248100 		lw	s0,8(sp)		#,
 209 01e0 83244100 		lw	s1,4(sp)		#,
 210 01e4 03290100 		lw	s2,0(sp)		#,
 211 01e8 13010101 		addi	sp,sp,16	#,,
 212 01ec 67800000 		jr	ra		#
 214              		.align	2
 215              		.globl	usleep
 217              	usleep:
 218              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 219 01f0 63040502 		beq	a0,zero,.L17	#, us,,
 220              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 221 01f4 B7070030 		li	a5,805306368		# tmp78,
 222 01f8 83A70701 		lw	a5,16(a5)		# _8, MEM[(volatile uint32_t *)805306384B]
 223              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 224 01fc 37470F00 		li	a4,999424		# tmp82,
 225 0200 13070724 		addi	a4,a4,576	#, tmp81, tmp82
 226 0204 B3D7E702 		divu	a5,a5,a4	# tmp81, tmp80, _8
 227              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 228 0208 93050000 		li	a1,0		#,
 229 020c 3385A702 		mul	a0,a5,a0	#, tmp80, us
 230 0210 17030000 		tail	wait_cycles		#
 230      67000300 
 231              	.L17:
 232              	# kianv_stdlib.h:87: }
 233 0218 67800000 		ret	
 235              		.align	2
 236              		.globl	msleep
 238              	msleep:
 239              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 240 021c 63020502 		beq	a0,zero,.L19	#, ms,,
 241              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 242 0220 B7070030 		li	a5,805306368		# tmp78,
 243 0224 83A70701 		lw	a5,16(a5)		# _8, MEM[(volatile uint32_t *)805306384B]
 244              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 245 0228 1307803E 		li	a4,1000		# tmp80,
 246              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 247 022c 93050000 		li	a1,0		#,
 248              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 249 0230 B3D7E702 		divu	a5,a5,a4	# tmp80, tmp81, _8
 250              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 251 0234 3385A702 		mul	a0,a5,a0	#, tmp81, ms
 252 0238 17030000 		tail	wait_cycles		#
 252      67000300 
 253              	.L19:
 254              	# kianv_stdlib.h:91: }
 255 0240 67800000 		ret	
 257              		.align	2
 258              		.globl	sleep
 260              	sleep:
 261              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 262 0244 630E0500 		beq	a0,zero,.L21	#, sec,,
 263              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 264 0248 B7070030 		li	a5,805306368		# tmp77,
 265 024c 83A70701 		lw	a5,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 266              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 267 0250 93050000 		li	a1,0		#,
 268 0254 3305F502 		mul	a0,a0,a5	#, sec, _7
 269 0258 17030000 		tail	wait_cycles		#
 269      67000300 
 270              	.L21:
 271              	# kianv_stdlib.h:95: }
 272 0260 67800000 		ret	
 274              		.globl	__udivdi3
 275              		.align	2
 276              		.globl	nanoseconds
 278              	nanoseconds:
 279 0264 130101FF 		addi	sp,sp,-16	#,,
 280 0268 23261100 		sw	ra,12(sp)	#,
 281              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 282 026c 97000000 		call	get_cycles		#
 282      E7800000 
 283              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 284 0274 B7070030 		li	a5,805306368		# tmp78,
 285 0278 03A60701 		lw	a2,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 286              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 287 027c B7470F00 		li	a5,999424		# tmp83,
 288 0280 93870724 		addi	a5,a5,576	#, tmp82, tmp83
 289 0284 3356F602 		divu	a2,a2,a5	# tmp82,, _7
 290 0288 93060000 		li	a3,0		#,
 291 028c 97000000 		call	__udivdi3		#
 291      E7800000 
 292              	# kianv_stdlib.h:99: }
 293 0294 8320C100 		lw	ra,12(sp)		#,
 294 0298 13010101 		addi	sp,sp,16	#,,
 295 029c 67800000 		jr	ra		#
 297              		.align	2
 298              		.globl	milliseconds
 300              	milliseconds:
 301 02a0 130101FF 		addi	sp,sp,-16	#,,
 302 02a4 23261100 		sw	ra,12(sp)	#,
 303              	# kianv_stdlib.h:102:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 304 02a8 97000000 		call	get_cycles		#
 304      E7800000 
 305              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 306 02b0 B7070030 		li	a5,805306368		# tmp78,
 307 02b4 03A60701 		lw	a2,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 308              	# kianv_stdlib.h:102:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 309 02b8 9307803E 		li	a5,1000		# tmp81,
 310 02bc 93060000 		li	a3,0		#,
 311 02c0 3356F602 		divu	a2,a2,a5	# tmp81,, _7
 312 02c4 97000000 		call	__udivdi3		#
 312      E7800000 
 313              	# kianv_stdlib.h:103: }
 314 02cc 8320C100 		lw	ra,12(sp)		#,
 315 02d0 13010101 		addi	sp,sp,16	#,,
 316 02d4 67800000 		jr	ra		#
 318              		.align	2
 319              		.globl	seconds
 321              	seconds:
 322 02d8 130101FF 		addi	sp,sp,-16	#,,
 323 02dc 23261100 		sw	ra,12(sp)	#,
 324              	# kianv_stdlib.h:106:   return get_cycles() / (uint64_t) (get_cpu_freq());
 325 02e0 97000000 		call	get_cycles		#
 325      E7800000 
 326              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 327 02e8 B7070030 		li	a5,805306368		# tmp77,
 328 02ec 03A60701 		lw	a2,16(a5)		# _6, MEM[(volatile uint32_t *)805306384B]
 329              	# kianv_stdlib.h:106:   return get_cycles() / (uint64_t) (get_cpu_freq());
 330 02f0 93060000 		li	a3,0		#,
 331 02f4 97000000 		call	__udivdi3		#
 331      E7800000 
 332              	# kianv_stdlib.h:107: }
 333 02fc 8320C100 		lw	ra,12(sp)		#,
 334 0300 13010101 		addi	sp,sp,16	#,,
 335 0304 67800000 		jr	ra		#
 337              		.align	2
 338              		.globl	putchar
 340              	putchar:
 341              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 342 0308 B7070030 		li	a5,805306368		# tmp75,
 343              	.L30:
 344              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 345 030c 03A70700 		lw	a4,0(a5)		# _1, MEM[(volatile uint32_t *)805306368B]
 346              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 347 0310 E30E07FE 		beq	a4,zero,.L30	#, _1,,
 348              	# kianv_stdlib.h:112:   *((volatile uint32_t*) UART_TX) = c;
 349 0314 23A0A700 		sw	a0,0(a5)	# c, MEM[(volatile uint32_t *)805306368B]
 350              	# kianv_stdlib.h:113: }
 351 0318 67800000 		ret	
 353              		.align	2
 354              		.globl	print_chr
 356              	print_chr:
 357 031c 17030000 		tail	putchar		#
 357      67000300 
 359              		.align	2
 360              		.globl	print_str
 362              	print_str:
 363              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 364 0324 37070030 		li	a4,805306368		# tmp78,
 365              	.L35:
 366              	# kianv_stdlib.h:122:   while (*p != 0) {
 367 0328 83470500 		lbu	a5,0(a0)	# _3, MEM[(char *)p_4]
 368              	# kianv_stdlib.h:122:   while (*p != 0) {
 369 032c 63940700 		bne	a5,zero,.L36	#, _3,,
 370              	# kianv_stdlib.h:127: }
 371 0330 67800000 		ret	
 372              	.L36:
 373              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 374 0334 83260700 		lw	a3,0(a4)		# _1, MEM[(volatile uint32_t *)805306368B]
 375              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 376 0338 E38E06FE 		beq	a3,zero,.L36	#, _1,,
 377              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 378 033c 13051500 		addi	a0,a0,1	#, p, p
 379              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 380 0340 2320F700 		sw	a5,0(a4)	# _3, MEM[(volatile uint32_t *)805306368B]
 381 0344 6FF05FFE 		j	.L35		#
 383              		.align	2
 384              		.globl	print_str_ln
 386              	print_str_ln:
 387 0348 130101FF 		addi	sp,sp,-16	#,,
 388 034c 23261100 		sw	ra,12(sp)	#,
 389              	# kianv_stdlib.h:129:   print_str(p);
 390 0350 97000000 		call	print_str		#
 390      E7800000 
 391              	# kianv_stdlib.h:131: }
 392 0358 8320C100 		lw	ra,12(sp)		#,
 393              	# kianv_stdlib.h:130:   print_chr(10);
 394 035c 1305A000 		li	a0,10		#,
 395              	# kianv_stdlib.h:131: }
 396 0360 13010101 		addi	sp,sp,16	#,,
 397              	# kianv_stdlib.h:130:   print_chr(10);
 398 0364 17030000 		tail	putchar		#
 398      67000300 
 400              		.align	2
 401              		.globl	print_dec
 403              	print_dec:
 404 036c 130101FF 		addi	sp,sp,-16	#,,
 405              	# kianv_stdlib.h:135:   char *p = buffer;
 406 0370 93074100 		addi	a5,sp,4	#, p,
 407 0374 93860700 		mv	a3,a5	# p, p
 408              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 409 0378 1307A000 		li	a4,10		# tmp93,
 410              	.L43:
 411              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 412 037c 63180502 		bne	a0,zero,.L44	#, val,,
 413              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 414 0380 6386D702 		beq	a5,a3,.L44	#, p, p,
 415              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 416 0384 37060030 		li	a2,805306368		# tmp88,
 417              	.L45:
 418              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 419 0388 03270600 		lw	a4,0(a2)		# _3, MEM[(volatile uint32_t *)805306368B]
 420              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 421 038c E30E07FE 		beq	a4,zero,.L45	#, _3,,
 422              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 423 0390 03C7F7FF 		lbu	a4,-1(a5)	# MEM[(char *)p_16], MEM[(char *)p_16]
 424              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 425 0394 9387F7FF 		addi	a5,a5,-1	#, p, p
 426              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 427 0398 13070703 		addi	a4,a4,48	#, _7, MEM[(char *)p_16]
 428              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 429 039c 2320E600 		sw	a4,0(a2)	# _7, MEM[(volatile uint32_t *)805306368B]
 430              	# kianv_stdlib.h:141:   while (p != buffer) {
 431 03a0 E394D7FE 		bne	a5,a3,.L45	#, p, p,
 432              	# kianv_stdlib.h:146: }
 433 03a4 13010101 		addi	sp,sp,16	#,,
 434 03a8 67800000 		jr	ra		#
 435              	.L44:
 436              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 437 03ac 3376E502 		remu	a2,a0,a4	# tmp93, tmp83, val
 438              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 439 03b0 93871700 		addi	a5,a5,1	#, p, p
 440              	# kianv_stdlib.h:138:     val = val / 10;
 441 03b4 3355E502 		divu	a0,a0,a4	# tmp93, val, val
 442              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 443 03b8 A38FC7FE 		sb	a2,-1(a5)	# tmp83, MEM[(char *)p_18 + 4294967295B]
 444 03bc 6FF01FFC 		j	.L43		#
 446              		.globl	__umoddi3
 447              		.align	2
 448              		.globl	print_dec64
 450              	print_dec64:
 451 03c0 130101FC 		addi	sp,sp,-64	#,,
 452 03c4 23282103 		sw	s2,48(sp)	#,
 453              	# kianv_stdlib.h:150:   char *p = buffer;
 454 03c8 1309C100 		addi	s2,sp,12	#, p,
 455              	# kianv_stdlib.h:148: void print_dec64(uint64_t val) {
 456 03cc 232C8102 		sw	s0,56(sp)	#,
 457 03d0 232A9102 		sw	s1,52(sp)	#,
 458 03d4 23263103 		sw	s3,44(sp)	#,
 459 03d8 232E1102 		sw	ra,60(sp)	#,
 460              	# kianv_stdlib.h:148: void print_dec64(uint64_t val) {
 461 03dc 13040500 		mv	s0,a0	# val, tmp102
 462 03e0 93840500 		mv	s1,a1	# val, tmp103
 463 03e4 93090900 		mv	s3,s2	# p, p
 464              	.L52:
 465              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 466 03e8 B3679400 		or	a5,s0,s1	# val, val, val
 467 03ec 63920704 		bne	a5,zero,.L53	#, val,,
 468              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 469 03f0 63003905 		beq	s2,s3,.L53	#, p, p,
 470              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 471 03f4 37070030 		li	a4,805306368		# tmp93,
 472              	.L54:
 473              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 474 03f8 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 475              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 476 03fc E38E07FE 		beq	a5,zero,.L54	#, _3,,
 477              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 478 0400 8347F9FF 		lbu	a5,-1(s2)	# MEM[(char *)p_16], MEM[(char *)p_16]
 479              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 480 0404 1309F9FF 		addi	s2,s2,-1	#, p, p
 481              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 482 0408 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 483              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 484 040c 2320F700 		sw	a5,0(a4)	# _7, MEM[(volatile uint32_t *)805306368B]
 485              	# kianv_stdlib.h:156:   while (p != buffer) {
 486 0410 E31439FF 		bne	s2,s3,.L54	#, p, p,
 487              	# kianv_stdlib.h:161: }
 488 0414 8320C103 		lw	ra,60(sp)		#,
 489 0418 03248103 		lw	s0,56(sp)		#,
 490 041c 83244103 		lw	s1,52(sp)		#,
 491 0420 03290103 		lw	s2,48(sp)		#,
 492 0424 8329C102 		lw	s3,44(sp)		#,
 493 0428 13010104 		addi	sp,sp,64	#,,
 494 042c 67800000 		jr	ra		#
 495              	.L53:
 496              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 497 0430 1306A000 		li	a2,10		#,
 498 0434 93060000 		li	a3,0		#,
 499 0438 13050400 		mv	a0,s0	#, val
 500 043c 93850400 		mv	a1,s1	#, val
 501 0440 97000000 		call	__umoddi3		#
 501      E7800000 
 502              	# kianv_stdlib.h:153:     val = val / 10;
 503 0448 93850400 		mv	a1,s1	#, val
 504              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 505 044c 2300A900 		sb	a0,0(s2)	# tmp104, MEM[(char *)p_18 + 4294967295B]
 506              	# kianv_stdlib.h:153:     val = val / 10;
 507 0450 1306A000 		li	a2,10		#,
 508 0454 13050400 		mv	a0,s0	#, val
 509 0458 93060000 		li	a3,0		#,
 510 045c 97000000 		call	__udivdi3		#
 510      E7800000 
 511              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 512 0464 13091900 		addi	s2,s2,1	#, p, p
 513              	# kianv_stdlib.h:153:     val = val / 10;
 514 0468 13040500 		mv	s0,a0	# val, tmp106
 515 046c 93840500 		mv	s1,a1	# val, tmp107
 516 0470 6FF09FF7 		j	.L52		#
 518              		.section	.rodata.str1.4,"aMS",@progbits,1
 519              		.align	2
 520              	.LC1:
 521 0000 30313233 		.string	"0123456789ABCDEF"
 521      34353637 
 521      38394142 
 521      43444546 
 521      00
 522              		.text
 523              		.align	2
 524              		.globl	print_hex
 526              	print_hex:
 527              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 528 0474 9385F5FF 		addi	a1,a1,-1	#, tmp81, tmp93
 529              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 530 0478 37070000 		lui	a4,%hi(.LC1)	# tmp90,
 531              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 532 047c 93952500 		slli	a1,a1,2	#, i, tmp81
 533              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 534 0480 B7060030 		li	a3,805306368		# tmp89,
 535              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 536 0484 13070700 		addi	a4,a4,%lo(.LC1)	# tmp91, tmp90,
 537              	.L61:
 538              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 539 0488 63D40500 		bge	a1,zero,.L62	#, i,,
 540              	# kianv_stdlib.h:169: }
 541 048c 67800000 		ret	
 542              	.L62:
 543              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 544 0490 83A70600 		lw	a5,0(a3)		# _2, MEM[(volatile uint32_t *)805306368B]
 545              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 546 0494 E38E07FE 		beq	a5,zero,.L62	#, _2,,
 547              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 548 0498 B357B500 		srl	a5,a0,a1	# i, tmp85, val
 549              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 550 049c 93F7F700 		andi	a5,a5,15	#, tmp86, tmp85
 551              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 552 04a0 B307F700 		add	a5,a4,a5	# tmp86, tmp87, tmp91
 553 04a4 83C70700 		lbu	a5,0(a5)	# _6, "0123456789ABCDEF"[_4]
 554              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 555 04a8 9385C5FF 		addi	a1,a1,-4	#, i, i
 556              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 557 04ac 23A0F600 		sw	a5,0(a3)	# _6, MEM[(volatile uint32_t *)805306368B]
 558 04b0 6FF09FFD 		j	.L61		#
 560              		.align	2
 561              		.globl	setpixel
 563              	setpixel:
 564              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 565 04b4 B7070100 		li	a5,65536		# tmp88,
 566 04b8 9387F7FF 		addi	a5,a5,-1	#, tmp87, tmp88
 567 04bc 93958500 		slli	a1,a1,8	#, tmp85, tmp94
 568 04c0 B3F5F500 		and	a1,a1,a5	# tmp87, tmp86, tmp85
 569              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 570 04c4 93960601 		slli	a3,a3,16	#, tmp89, tmp96
 571              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 572 04c8 B3E5D500 		or	a1,a1,a3	# tmp89, tmp90, tmp86
 573              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 574 04cc 1376F60F 		andi	a2,a2,0xff	# tmp91, tmp95
 575              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 576 04d0 B3E5C500 		or	a1,a1,a2	# tmp91, _9, tmp90
 577              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 578 04d4 B7070030 		li	a5,805306368		# tmp93,
 579 04d8 23A4B700 		sw	a1,8(a5)	# _9, MEM[(volatile uint32_t *)805306376B]
 580              	# kianv_stdlib.h:184: }
 581 04dc 67800000 		ret	
 583              		.align	2
 584              		.globl	draw_bresenham
 586              	draw_bresenham:
 587 04e0 130101FC 		addi	sp,sp,-64	#,,
 588 04e4 232E7101 		sw	s7,28(sp)	#,
 589 04e8 930B0500 		mv	s7,a0	# fb, tmp101
 590              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 591 04ec 3385B640 		sub	a0,a3,a1	#, x1, x0
 592              	# kianv_stdlib.h:187: {
 593 04f0 232C8102 		sw	s0,56(sp)	#,
 594 04f4 232A9102 		sw	s1,52(sp)	#,
 595 04f8 23263103 		sw	s3,44(sp)	#,
 596 04fc 23225103 		sw	s5,36(sp)	#,
 597 0500 23206103 		sw	s6,32(sp)	#,
 598 0504 232C8101 		sw	s8,24(sp)	#,
 599 0508 2328A101 		sw	s10,16(sp)	#,
 600 050c 232E1102 		sw	ra,60(sp)	#,
 601 0510 23282103 		sw	s2,48(sp)	#,
 602 0514 23244103 		sw	s4,40(sp)	#,
 603 0518 232A9101 		sw	s9,20(sp)	#,
 604 051c 2326B101 		sw	s11,12(sp)	#,
 605              	# kianv_stdlib.h:187: {
 606 0520 93840500 		mv	s1,a1	# x0, tmp102
 607 0524 13040600 		mv	s0,a2	# y0, tmp103
 608 0528 938A0600 		mv	s5,a3	# x1, tmp104
 609 052c 130B0700 		mv	s6,a4	# y1, tmp105
 610 0530 138C0700 		mv	s8,a5	# color, tmp106
 611              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 612 0534 97000000 		call	abs		#
 612      E7800000 
 613 053c 93090500 		mv	s3,a0	# dx, tmp107
 614              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 615 0540 130DF0FF 		li	s10,-1		# iftmp.6_9,
 616 0544 63D45401 		ble	s5,s1,.L68	#, x1, x0,
 617 0548 130D1000 		li	s10,1		# iftmp.6_9,
 618              	.L68:
 619              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 620 054c 33058B40 		sub	a0,s6,s0	#, y1, y0
 621 0550 97000000 		call	abs		#
 621      E7800000 
 622 0558 130A0500 		mv	s4,a0	# _3, tmp108
 623              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 624 055c B30DA040 		neg	s11,a0	# dy, _3
 625              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 626 0560 930C1000 		li	s9,1		# iftmp.7_10,
 627 0564 63446401 		bgt	s6,s0,.L69	#, y1, y0,
 628              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 629 0568 930CF0FF 		li	s9,-1		# iftmp.7_10,
 630              	.L69:
 631 056c 33894941 		sub	s2,s3,s4	# err, dx, _3
 632              	.L70:
 633              	# kianv_stdlib.h:196:     setpixel(fb, x0, y0, color);
 634 0570 93060C00 		mv	a3,s8	#, color
 635 0574 13060400 		mv	a2,s0	#, y0
 636 0578 93850400 		mv	a1,s1	#, x0
 637 057c 13850B00 		mv	a0,s7	#, fb
 638 0580 97000000 		call	setpixel		#
 638      E7800000 
 639              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 640 0588 63945401 		bne	s1,s5,.L71	#, x0, x1,
 641              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 642 058c 63026403 		beq	s0,s6,.L67	#, y0, y1,
 643              	.L71:
 644              	# kianv_stdlib.h:198:     e2 = 2*err;
 645 0590 93171900 		slli	a5,s2,1	#, e2, err
 646              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 647 0594 63C6B701 		bgt	s11,a5,.L73	#, dy, e2,
 648 0598 33094941 		sub	s2,s2,s4	# err, err, _3
 649              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 650 059c B384A401 		add	s1,s1,s10	# iftmp.6_9, x0, x0
 651              	.L73:
 652              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 653 05a0 E3C8F9FC 		blt	s3,a5,.L70	#, dx, e2,
 654              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 655 05a4 33093901 		add	s2,s2,s3	# dx, err, err
 656              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 657 05a8 33049401 		add	s0,s0,s9	# iftmp.7_10, y0, y0
 658 05ac 6FF05FFC 		j	.L70		#
 659              	.L67:
 660              	# kianv_stdlib.h:202: }
 661 05b0 8320C103 		lw	ra,60(sp)		#,
 662 05b4 03248103 		lw	s0,56(sp)		#,
 663 05b8 83244103 		lw	s1,52(sp)		#,
 664 05bc 03290103 		lw	s2,48(sp)		#,
 665 05c0 8329C102 		lw	s3,44(sp)		#,
 666 05c4 032A8102 		lw	s4,40(sp)		#,
 667 05c8 832A4102 		lw	s5,36(sp)		#,
 668 05cc 032B0102 		lw	s6,32(sp)		#,
 669 05d0 832BC101 		lw	s7,28(sp)		#,
 670 05d4 032C8101 		lw	s8,24(sp)		#,
 671 05d8 832C4101 		lw	s9,20(sp)		#,
 672 05dc 032D0101 		lw	s10,16(sp)		#,
 673 05e0 832DC100 		lw	s11,12(sp)		#,
 674 05e4 13010104 		addi	sp,sp,64	#,,
 675 05e8 67800000 		jr	ra		#
 677              		.align	2
 678              		.globl	make_Light
 680              	make_Light:
 681 05ec 130101FF 		addi	sp,sp,-16	#,,
 682 05f0 23229100 		sw	s1,4(sp)	#,
 683 05f4 93040600 		mv	s1,a2	# intensity, tmp80
 684              	# main_raytrace.c:67:   L.position = position;
 685 05f8 1306C000 		li	a2,12		#,
 686              	# main_raytrace.c:65: Light make_Light(vec3 position, float intensity) {
 687 05fc 23248100 		sw	s0,8(sp)	#,
 688 0600 23261100 		sw	ra,12(sp)	#,
 689              	# main_raytrace.c:65: Light make_Light(vec3 position, float intensity) {
 690 0604 13040500 		mv	s0,a0	# .result_ptr, tmp79
 691              	# main_raytrace.c:67:   L.position = position;
 692 0608 97000000 		call	memcpy		#
 692      E7800000 
 693              	# main_raytrace.c:70: }
 694 0610 8320C100 		lw	ra,12(sp)		#,
 695              	# main_raytrace.c:69:   return L;
 696 0614 23269400 		sw	s1,12(s0)	# intensity, <retval>.intensity
 697              	# main_raytrace.c:70: }
 698 0618 13050400 		mv	a0,s0	#, .result_ptr
 699 061c 03248100 		lw	s0,8(sp)		#,
 700 0620 83244100 		lw	s1,4(sp)		#,
 701 0624 13010101 		addi	sp,sp,16	#,,
 702 0628 67800000 		jr	ra		#
 704              		.align	2
 705              		.globl	make_Material
 707              	make_Material:
 708 062c 130101FE 		addi	sp,sp,-32	#,,
 709 0630 232C8100 		sw	s0,24(sp)	#,
 710 0634 23282101 		sw	s2,16(sp)	#,
 711 0638 13040500 		mv	s0,a0	# .result_ptr, tmp85
 712 063c 13890500 		mv	s2,a1	# r, tmp86
 713              	# main_raytrace.c:84:   M.albedo = a;
 714 0640 13054500 		addi	a0,a0,4	#,, .result_ptr
 715              	# main_raytrace.c:81: Material make_Material(float r, vec4 a, vec3 color, float spec) {
 716 0644 93050600 		mv	a1,a2	# tmp87,
 717              	# main_raytrace.c:84:   M.albedo = a;
 718 0648 13060001 		li	a2,16		#,
 719              	# main_raytrace.c:81: Material make_Material(float r, vec4 a, vec3 color, float spec) {
 720 064c 232E1100 		sw	ra,28(sp)	#,
 721 0650 232A9100 		sw	s1,20(sp)	#,
 722 0654 23263101 		sw	s3,12(sp)	#,
 723              	# main_raytrace.c:81: Material make_Material(float r, vec4 a, vec3 color, float spec) {
 724 0658 93040700 		mv	s1,a4	# spec, tmp89
 725 065c 93890600 		mv	s3,a3	# tmp75, tmp88
 726              	# main_raytrace.c:84:   M.albedo = a;
 727 0660 97000000 		call	memcpy		#
 727      E7800000 
 728              	# main_raytrace.c:85:   M.diffuse_color = color;
 729 0668 93850900 		mv	a1,s3	#, tmp75
 730 066c 13054401 		addi	a0,s0,20	#,, .result_ptr
 731 0670 1306C000 		li	a2,12		#,
 732 0674 97000000 		call	memcpy		#
 732      E7800000 
 733              	# main_raytrace.c:88: }
 734 067c 8320C101 		lw	ra,28(sp)		#,
 735              	# main_raytrace.c:87:   return M;
 736 0680 23202401 		sw	s2,0(s0)	# r, <retval>.refractive_index
 737 0684 23209402 		sw	s1,32(s0)	# spec, <retval>.specular_exponent
 738              	# main_raytrace.c:88: }
 739 0688 13050400 		mv	a0,s0	#, .result_ptr
 740 068c 03248101 		lw	s0,24(sp)		#,
 741 0690 83244101 		lw	s1,20(sp)		#,
 742 0694 03290101 		lw	s2,16(sp)		#,
 743 0698 8329C100 		lw	s3,12(sp)		#,
 744 069c 13010102 		addi	sp,sp,32	#,,
 745 06a0 67800000 		jr	ra		#
 747              		.align	2
 748              		.globl	make_Material_default
 750              	make_Material_default:
 751              	# main_raytrace.c:96:   return M;
 752 06a4 37070000 		lui	a4,%hi(.LC0)	# tmp73,
 753 06a8 03270700 		lw	a4,%lo(.LC0)(a4)		# tmp74,
 754 06ac 2320E500 		sw	a4,0(a0)	# tmp74, <retval>.refractive_index
 755 06b0 2322E500 		sw	a4,4(a0)	# tmp74, <retval>.albedo.x
 756 06b4 13070000 		mv	a4,zero	# tmp79,
 757 06b8 2324E500 		sw	a4,8(a0)	# tmp79, <retval>.albedo.y
 758 06bc 2326E500 		sw	a4,12(a0)	# tmp80, <retval>.albedo.z
 759 06c0 2328E500 		sw	a4,16(a0)	# tmp81, <retval>.albedo.w
 760 06c4 232AE500 		sw	a4,20(a0)	# tmp82, <retval>.diffuse_color.x
 761 06c8 232CE500 		sw	a4,24(a0)	# tmp83, <retval>.diffuse_color.y
 762 06cc 232EE500 		sw	a4,28(a0)	# tmp84, <retval>.diffuse_color.z
 763 06d0 2320E502 		sw	a4,32(a0)	# tmp85, <retval>.specular_exponent
 764              	# main_raytrace.c:97: }
 765 06d4 67800000 		ret	
 767              		.align	2
 768              		.globl	make_Sphere
 770              	make_Sphere:
 771 06d8 130101FF 		addi	sp,sp,-16	#,,
 772 06dc 23229100 		sw	s1,4(sp)	#,
 773 06e0 93040600 		mv	s1,a2	# r, tmp85
 774              	# main_raytrace.c:109:   S.center = c;
 775 06e4 1306C000 		li	a2,12		#,
 776              	# main_raytrace.c:107: Sphere make_Sphere(vec3 c, float r, Material M) {
 777 06e8 23261100 		sw	ra,12(sp)	#,
 778 06ec 23248100 		sw	s0,8(sp)	#,
 779 06f0 23202101 		sw	s2,0(sp)	#,
 780              	# main_raytrace.c:107: Sphere make_Sphere(vec3 c, float r, Material M) {
 781 06f4 13040500 		mv	s0,a0	# .result_ptr, tmp84
 782 06f8 13890600 		mv	s2,a3	# tmp75, tmp86
 783              	# main_raytrace.c:109:   S.center = c;
 784 06fc 97000000 		call	memcpy		#
 784      E7800000 
 785              	# main_raytrace.c:111:   S.material = M;
 786 0704 93050900 		mv	a1,s2	#, tmp75
 787 0708 13050401 		addi	a0,s0,16	#,, .result_ptr
 788 070c 13064002 		li	a2,36		#,
 789 0710 97000000 		call	memcpy		#
 789      E7800000 
 790              	# main_raytrace.c:113: }
 791 0718 8320C100 		lw	ra,12(sp)		#,
 792              	# main_raytrace.c:112:   return S;
 793 071c 23269400 		sw	s1,12(s0)	# r, <retval>.radius
 794              	# main_raytrace.c:113: }
 795 0720 13050400 		mv	a0,s0	#, .result_ptr
 796 0724 03248100 		lw	s0,8(sp)		#,
 797 0728 83244100 		lw	s1,4(sp)		#,
 798 072c 03290100 		lw	s2,0(sp)		#,
 799 0730 13010101 		addi	sp,sp,16	#,,
 800 0734 67800000 		jr	ra		#
 802              		.globl	__subsf3
 803              		.globl	__gtsf2
 804              		.globl	__ltsf2
 805              		.align	2
 806              		.globl	Sphere_ray_intersect
 808              	Sphere_ray_intersect:
 809 0738 130101FE 		addi	sp,sp,-32	#,,
 810 073c 232C8100 		sw	s0,24(sp)	#,
 811 0740 23282101 		sw	s2,16(sp)	#,
 812 0744 13040500 		mv	s0,a0	# S, tmp134
 813 0748 13890500 		mv	s2,a1	# tmp105, tmp135
 814              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 815 074c 03250500 		lw	a0,0(a0)		#, S_11(D)->center.x
 816 0750 83A50500 		lw	a1,0(a1)		#, orig.x
 817              	# main_raytrace.c:115: BOOL Sphere_ray_intersect(Sphere* S, vec3 orig, vec3 dir, float* t0) {
 818 0754 232E1100 		sw	ra,28(sp)	#,
 819 0758 232A9100 		sw	s1,20(sp)	#,
 820 075c 23263101 		sw	s3,12(sp)	#,
 821 0760 93040600 		mv	s1,a2	# tmp106, tmp136
 822 0764 93890600 		mv	s3,a3	# t0, tmp137
 823 0768 23244101 		sw	s4,8(sp)	#,
 824 076c 23225101 		sw	s5,4(sp)	#,
 825 0770 23206101 		sw	s6,0(sp)	#,
 826              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 827 0774 97000000 		call	__subsf3		#
 827      E7800000 
 828 077c 930A0500 		mv	s5,a0	# tmp108, tmp138
 829 0780 83254900 		lw	a1,4(s2)		#, orig.y
 830 0784 03254400 		lw	a0,4(s0)		#, S_11(D)->center.y
 831 0788 97000000 		call	__subsf3		#
 831      E7800000 
 832 0790 130A0500 		mv	s4,a0	# tmp109, tmp139
 833 0794 83258900 		lw	a1,8(s2)		#, orig.z
 834 0798 03258400 		lw	a0,8(s0)		#, S_11(D)->center.z
 835 079c 97000000 		call	__subsf3		#
 835      E7800000 
 836              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 837 07a4 83A50400 		lw	a1,0(s1)		#, dir.x
 838              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 839 07a8 13090500 		mv	s2,a0	# tmp110, tmp140
 840              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 841 07ac 13850A00 		mv	a0,s5	#, tmp108
 842 07b0 97000000 		call	__mulsf3		#
 842      E7800000 
 843              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 844 07b8 83A54400 		lw	a1,4(s1)		#, dir.y
 845              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 846 07bc 130B0500 		mv	s6,a0	# tmp111, tmp141
 847              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 848 07c0 13050A00 		mv	a0,s4	#, tmp109
 849 07c4 97000000 		call	__mulsf3		#
 849      E7800000 
 850 07cc 93050500 		mv	a1,a0	# tmp142,
 851              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 852 07d0 13050B00 		mv	a0,s6	#, tmp111
 853 07d4 97000000 		call	__addsf3		#
 853      E7800000 
 854              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 855 07dc 83A58400 		lw	a1,8(s1)		#, dir.z
 856              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 857 07e0 130B0500 		mv	s6,a0	# tmp113, tmp143
 858              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 859 07e4 13050900 		mv	a0,s2	#, tmp110
 860 07e8 97000000 		call	__mulsf3		#
 860      E7800000 
 861 07f0 93050500 		mv	a1,a0	# tmp144,
 862              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 863 07f4 13050B00 		mv	a0,s6	#, tmp113
 864 07f8 97000000 		call	__addsf3		#
 864      E7800000 
 865 0800 93040500 		mv	s1,a0	# tmp115, tmp145
 866              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 867 0804 93850A00 		mv	a1,s5	#, tmp108
 868 0808 13850A00 		mv	a0,s5	#, tmp11
 869 080c 97000000 		call	__mulsf3		#
 869      E7800000 
 870              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 871 0814 93050A00 		mv	a1,s4	#, tmp109
 872              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 873 0818 930A0500 		mv	s5,a0	# tmp116, tmp146
 874              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 875 081c 13050A00 		mv	a0,s4	#, tmp11
 876 0820 97000000 		call	__mulsf3		#
 876      E7800000 
 877 0828 93050500 		mv	a1,a0	# tmp147,
 878              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 879 082c 13850A00 		mv	a0,s5	#, tmp116
 880 0830 97000000 		call	__addsf3		#
 880      E7800000 
 881              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 882 0838 93050900 		mv	a1,s2	#, tmp110
 883              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 884 083c 130A0500 		mv	s4,a0	# tmp118, tmp148
 885              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 886 0840 13050900 		mv	a0,s2	#, tmp11
 887 0844 97000000 		call	__mulsf3		#
 887      E7800000 
 888 084c 93050500 		mv	a1,a0	# tmp149,
 889              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 890 0850 13050A00 		mv	a0,s4	#, tmp118
 891 0854 97000000 		call	__addsf3		#
 891      E7800000 
 892 085c 13090500 		mv	s2,a0	# tmp120, tmp150
 893              	# main_raytrace.c:118:   float d2 = vec3_dot(L,L) - tca*tca;
 894 0860 93850400 		mv	a1,s1	#, tmp115
 895 0864 13850400 		mv	a0,s1	#, tmp115
 896 0868 97000000 		call	__mulsf3		#
 896      E7800000 
 897 0870 93050500 		mv	a1,a0	# tmp151,
 898              	# main_raytrace.c:118:   float d2 = vec3_dot(L,L) - tca*tca;
 899 0874 13050900 		mv	a0,s2	#, tmp120
 900 0878 97000000 		call	__subsf3		#
 900      E7800000 
 901              	# main_raytrace.c:119:   float r2 = S->radius*S->radius;
 902 0880 8325C400 		lw	a1,12(s0)		# _3, S_11(D)->radius
 903              	# main_raytrace.c:118:   float d2 = vec3_dot(L,L) - tca*tca;
 904 0884 13090500 		mv	s2,a0	# tmp122, tmp152
 905              	# main_raytrace.c:119:   float r2 = S->radius*S->radius;
 906 0888 13850500 		mv	a0,a1	#,
 907 088c 97000000 		call	__mulsf3		#
 907      E7800000 
 908 0894 13040500 		mv	s0,a0	# tmp123, tmp153
 909              	# main_raytrace.c:120:   if (d2 > r2) return 0;
 910 0898 93050500 		mv	a1,a0	#, tmp123
 911 089c 13050900 		mv	a0,s2	#, tmp122
 912 08a0 97000000 		call	__gtsf2		#
 912      E7800000 
 913 08a8 6340A00A 		bgt	a0,zero,.L91	#, tmp154,,
 914              	# main_raytrace.c:121:   float thc = sqrtf(r2 - d2);
 915 08ac 93050900 		mv	a1,s2	#, tmp122
 916 08b0 13050400 		mv	a0,s0	#, tmp123
 917 08b4 97000000 		call	__subsf3		#
 917      E7800000 
 918 08bc 97000000 		call	sqrtf		#
 918      E7800000 
 919              	# main_raytrace.c:122:   *t0       = tca - thc;
 920 08c4 93050500 		mv	a1,a0	#, thc
 921              	# main_raytrace.c:121:   float thc = sqrtf(r2 - d2);
 922 08c8 13090500 		mv	s2,a0	# thc, tmp155
 923              	# main_raytrace.c:122:   *t0       = tca - thc;
 924 08cc 13850400 		mv	a0,s1	#, tmp115
 925 08d0 97000000 		call	__subsf3		#
 925      E7800000 
 926              	# main_raytrace.c:124:   if (*t0 < 0) *t0 = t1;
 927 08d8 93050000 		mv	a1,zero	#,
 928              	# main_raytrace.c:122:   *t0       = tca - thc;
 929 08dc 13040500 		mv	s0,a0	# tmp156,
 930              	# main_raytrace.c:124:   if (*t0 < 0) *t0 = t1;
 931 08e0 97000000 		call	__ltsf2		#
 931      E7800000 
 932 08e8 635C0500 		bge	a0,zero,.L88	#, tmp157,,
 933              	# main_raytrace.c:123:   float t1 = tca + thc;
 934 08ec 93850400 		mv	a1,s1	#, tmp115
 935 08f0 13050900 		mv	a0,s2	#, thc
 936 08f4 97000000 		call	__addsf3		#
 936      E7800000 
 937 08fc 13040500 		mv	s0,a0	# t1, tmp158
 938              	.L88:
 939 0900 23A08900 		sw	s0,0(s3)	# t1, MEM <float> [(void *)t0_17(D)]
 940              	# main_raytrace.c:125:   if (*t0 < 0) return 0;
 941 0904 93050000 		mv	a1,zero	#,
 942 0908 13050400 		mv	a0,s0	#, t1
 943 090c 97000000 		call	__ltsf2		#
 943      E7800000 
 944 0914 1355F501 		srli	a0,a0,31	#, tmp129, tmp159
 945 0918 13451500 		xori	a0,a0,1	#, tmp131, tmp129
 946              	# main_raytrace.c:120:   if (d2 > r2) return 0;
 947 091c 1375F50F 		andi	a0,a0,0xff	# <retval>, tmp131
 948              	.L86:
 949              	# main_raytrace.c:127: }
 950 0920 8320C101 		lw	ra,28(sp)		#,
 951 0924 03248101 		lw	s0,24(sp)		#,
 952 0928 83244101 		lw	s1,20(sp)		#,
 953 092c 03290101 		lw	s2,16(sp)		#,
 954 0930 8329C100 		lw	s3,12(sp)		#,
 955 0934 032A8100 		lw	s4,8(sp)		#,
 956 0938 832A4100 		lw	s5,4(sp)		#,
 957 093c 032B0100 		lw	s6,0(sp)		#,
 958 0940 13010102 		addi	sp,sp,32	#,,
 959 0944 67800000 		jr	ra		#
 960              	.L91:
 961              	# main_raytrace.c:120:   if (d2 > r2) return 0;
 962 0948 13050000 		li	a0,0		# <retval>,
 963 094c 6FF05FFD 		j	.L86		#
 965              		.align	2
 966              		.globl	reflect
 968              	reflect:
 969 0950 130101FD 		addi	sp,sp,-48	#,,
 970 0954 23286101 		sw	s6,16(sp)	#,
 971 0958 23267101 		sw	s7,12(sp)	#,
 972 095c 03AB0500 		lw	s6,0(a1)		# U$x, I.x
 973 0960 832B0600 		lw	s7,0(a2)		# V$x, N.x
 974 0964 232C4101 		sw	s4,24(sp)	#,
 975 0968 232A5101 		sw	s5,20(sp)	#,
 976 096c 03AA4500 		lw	s4,4(a1)		# U$y, I.y
 977 0970 832A4600 		lw	s5,4(a2)		# V$y, N.y
 978 0974 23248102 		sw	s0,40(sp)	#,
 979 0978 23202103 		sw	s2,32(sp)	#,
 980 097c 13040500 		mv	s0,a0	# .result_ptr, tmp105
 981 0980 03A98500 		lw	s2,8(a1)		# U$z, I.z
 982              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 983 0984 13850B00 		mv	a0,s7	#, V$x
 984 0988 93050B00 		mv	a1,s6	#, U$x
 985              	# main_raytrace.c:129: vec3 reflect(vec3 I, vec3 N) { return vec3_sub(I, vec3_scale(2.f*vec3_dot(I,
 986 098c 23261102 		sw	ra,44(sp)	#,
 987 0990 23229102 		sw	s1,36(sp)	#,
 988 0994 232E3101 		sw	s3,28(sp)	#,
 989 0998 83298600 		lw	s3,8(a2)		# V$z, N.z
 990              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 991 099c 97000000 		call	__mulsf3		#
 991      E7800000 
 992 09a4 93040500 		mv	s1,a0	# tmp93, tmp108
 993              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 994 09a8 93850A00 		mv	a1,s5	#, V$y
 995 09ac 13050A00 		mv	a0,s4	#, U$y
 996 09b0 97000000 		call	__mulsf3		#
 996      E7800000 
 997 09b8 93050500 		mv	a1,a0	# tmp109,
 998              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 999 09bc 13850400 		mv	a0,s1	#, tmp93
 1000 09c0 97000000 		call	__addsf3		#
 1000      E7800000 
 1001 09c8 93040500 		mv	s1,a0	# tmp95, tmp110
 1002              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1003 09cc 93850900 		mv	a1,s3	#, V$z
 1004 09d0 13050900 		mv	a0,s2	#, U$z
 1005 09d4 97000000 		call	__mulsf3		#
 1005      E7800000 
 1006 09dc 93050500 		mv	a1,a0	# tmp111,
 1007              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1008 09e0 13850400 		mv	a0,s1	#, tmp95
 1009 09e4 97000000 		call	__addsf3		#
 1009      E7800000 
 1010 09ec 93050500 		mv	a1,a0	# tmp112,
 1011              	# main_raytrace.c:129: vec3 reflect(vec3 I, vec3 N) { return vec3_sub(I, vec3_scale(2.f*vec3_dot(I,
 1012 09f0 97000000 		call	__addsf3		#
 1012      E7800000 
 1013              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1014 09f8 93850B00 		mv	a1,s7	#, V$x
 1015              	# main_raytrace.c:129: vec3 reflect(vec3 I, vec3 N) { return vec3_sub(I, vec3_scale(2.f*vec3_dot(I,
 1016 09fc 93040500 		mv	s1,a0	# tmp98, tmp113
 1017              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1018 0a00 97000000 		call	__mulsf3		#
 1018      E7800000 
 1019 0a08 93050500 		mv	a1,a0	# tmp114,
 1020              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1021 0a0c 13050B00 		mv	a0,s6	#, U$x
 1022 0a10 97000000 		call	__subsf3		#
 1022      E7800000 
 1023              	# main_raytrace.c:41:   return V;
 1024 0a18 2320A400 		sw	a0,0(s0)	# tmp115, <retval>.x
 1025              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1026 0a1c 93850A00 		mv	a1,s5	#, V$y
 1027 0a20 13850400 		mv	a0,s1	#, tmp98
 1028 0a24 97000000 		call	__mulsf3		#
 1028      E7800000 
 1029 0a2c 93050500 		mv	a1,a0	# tmp116,
 1030              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1031 0a30 13050A00 		mv	a0,s4	#, U$y
 1032 0a34 97000000 		call	__subsf3		#
 1032      E7800000 
 1033              	# main_raytrace.c:41:   return V;
 1034 0a3c 2322A400 		sw	a0,4(s0)	# tmp117, <retval>.y
 1035              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1036 0a40 93850900 		mv	a1,s3	#, V$z
 1037 0a44 13850400 		mv	a0,s1	#, tmp98
 1038 0a48 97000000 		call	__mulsf3		#
 1038      E7800000 
 1039 0a50 93050500 		mv	a1,a0	# tmp118,
 1040              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1041 0a54 13050900 		mv	a0,s2	#, U$z
 1042 0a58 97000000 		call	__subsf3		#
 1042      E7800000 
 1043              	# main_raytrace.c:41:   return V;
 1044 0a60 2324A400 		sw	a0,8(s0)	# tmp119, <retval>.z
 1045              	# main_raytrace.c:129: vec3 reflect(vec3 I, vec3 N) { return vec3_sub(I, vec3_scale(2.f*vec3_dot(I,
 1046 0a64 8320C102 		lw	ra,44(sp)		#,
 1047 0a68 13050400 		mv	a0,s0	#, .result_ptr
 1048 0a6c 03248102 		lw	s0,40(sp)		#,
 1049 0a70 83244102 		lw	s1,36(sp)		#,
 1050 0a74 03290102 		lw	s2,32(sp)		#,
 1051 0a78 8329C101 		lw	s3,28(sp)		#,
 1052 0a7c 032A8101 		lw	s4,24(sp)		#,
 1053 0a80 832A4101 		lw	s5,20(sp)		#,
 1054 0a84 032B0101 		lw	s6,16(sp)		#,
 1055 0a88 832BC100 		lw	s7,12(sp)		#,
 1056 0a8c 13010103 		addi	sp,sp,48	#,,
 1057 0a90 67800000 		jr	ra		#
 1059              		.align	2
 1060              		.globl	refract
 1062              	refract:
 1063 0a94 130101F9 		addi	sp,sp,-112	#,,
 1064 0a98 232C4105 		sw	s4,88(sp)	#,
 1065 0a9c 2320A105 		sw	s10,64(sp)	#,
 1066 0aa0 032A0600 		lw	s4,0(a2)		# V$x, N.x
 1067 0aa4 03AD0500 		lw	s10,0(a1)		# U$x, I.x
 1068 0aa8 232E3105 		sw	s3,92(sp)	#,
 1069 0aac 23229105 		sw	s9,68(sp)	#,
 1070 0ab0 83294600 		lw	s3,4(a2)		# V$y, N.y
 1071 0ab4 83AC4500 		lw	s9,4(a1)		# U$y, I.y
 1072 0ab8 23248106 		sw	s0,104(sp)	#,
 1073 0abc 23202107 		sw	s2,96(sp)	#,
 1074 0ac0 23248105 		sw	s8,72(sp)	#,
 1075 0ac4 13040500 		mv	s0,a0	# .result_ptr, tmp164
 1076 0ac8 03AC8500 		lw	s8,8(a1)		# U$z, I.z
 1077 0acc 13890500 		mv	s2,a1	# tmp106, tmp165
 1078              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1079 0ad0 13050A00 		mv	a0,s4	#, V$x
 1080 0ad4 93050D00 		mv	a1,s10	#, U$x
 1081              	# main_raytrace.c:131: vec3 refract(vec3 I, vec3 N, float eta_t, float eta_i /* =1.f */) { // Snell
 1082 0ad8 23261106 		sw	ra,108(sp)	#,
 1083 0adc 23229106 		sw	s1,100(sp)	#,
 1084 0ae0 232A5105 		sw	s5,84(sp)	#,
 1085 0ae4 23286105 		sw	s6,80(sp)	#,
 1086 0ae8 23267105 		sw	s7,76(sp)	#,
 1087 0aec 130B0700 		mv	s6,a4	# eta_i, tmp168
 1088 0af0 832B8600 		lw	s7,8(a2)		# V$z, N.z
 1089 0af4 232EB103 		sw	s11,60(sp)	#,
 1090              	# main_raytrace.c:131: vec3 refract(vec3 I, vec3 N, float eta_t, float eta_i /* =1.f */) { // Snell
 1091 0af8 938D0600 		mv	s11,a3	# eta_t, tmp167
 1092              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1093 0afc 97000000 		call	__mulsf3		#
 1093      E7800000 
 1094 0b04 93040500 		mv	s1,a0	# tmp111, tmp169
 1095              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1096 0b08 93850900 		mv	a1,s3	#, V$y
 1097 0b0c 13850C00 		mv	a0,s9	#, U$y
 1098 0b10 97000000 		call	__mulsf3		#
 1098      E7800000 
 1099 0b18 93050500 		mv	a1,a0	# tmp170,
 1100              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1101 0b1c 13850400 		mv	a0,s1	#, tmp111
 1102 0b20 97000000 		call	__addsf3		#
 1102      E7800000 
 1103 0b28 93040500 		mv	s1,a0	# tmp113, tmp171
 1104              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1105 0b2c 93050C00 		mv	a1,s8	#, U$z
 1106 0b30 13850B00 		mv	a0,s7	#, V$z
 1107 0b34 97000000 		call	__mulsf3		#
 1107      E7800000 
 1108 0b3c 93050500 		mv	a1,a0	# tmp172,
 1109              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1110 0b40 13850400 		mv	a0,s1	#, tmp113
 1111 0b44 97000000 		call	__addsf3		#
 1111      E7800000 
 1112              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 1113 0b4c B70A0000 		lui	s5,%hi(.LC0)	# tmp117,
 1114 0b50 83A50A00 		lw	a1,%lo(.LC0)(s5)		#,
 1115              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1116 0b54 93040500 		mv	s1,a0	# _31, tmp173
 1117              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 1118 0b58 97000000 		call	__gtsf2		#
 1118      E7800000 
 1119 0b60 634CA002 		bgt	a0,zero,.L97	#, tmp174,,
 1120              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 1121 0b64 B7070000 		lui	a5,%hi(.LC2)	# tmp120,
 1122 0b68 83A50700 		lw	a1,%lo(.LC2)(a5)		# tmp119,
 1123 0b6c 13850400 		mv	a0,s1	#, _31
 1124 0b70 97000000 		call	__ltsf2		#
 1124      E7800000 
 1125 0b78 B7070000 		lui	a5,%hi(.LC2)	# tmp200,
 1126 0b7c 83A50700 		lw	a1,%lo(.LC2)(a5)		# tmp119,
 1127 0b80 634C050A 		blt	a0,zero,.L103	#, tmp175,,
 1128              	# main_raytrace.c:133:   if (cosi<0) return refract(I, vec3_neg(N), eta_i, eta_t); // if the ray co
 1129 0b84 93050000 		mv	a1,zero	#,
 1130 0b88 13850400 		mv	a0,s1	#, _31
 1131 0b8c 97000000 		call	__gtsf2		#
 1131      E7800000 
 1132 0b94 6354A00A 		ble	a0,zero,.L98	#, tmp176,,
 1133              	.L97:
 1134              	# main_raytrace.c:50: static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y,
 1135 0b98 B7070080 		li	a5,-2147483648		# tmp123,
 1136 0b9c 33CA4701 		xor	s4,a5,s4	# V$x, tmp124, tmp123
 1137 0ba0 B3C93701 		xor	s3,a5,s3	# V$y, tmp126, tmp123
 1138              	# main_raytrace.c:133:   if (cosi<0) return refract(I, vec3_neg(N), eta_i, eta_t); // if the ray co
 1139 0ba4 1306C000 		li	a2,12		#,
 1140              	# main_raytrace.c:50: static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y,
 1141 0ba8 B3C77701 		xor	a5,a5,s7	# V$z, tmp128, tmp123
 1142              	# main_raytrace.c:133:   if (cosi<0) return refract(I, vec3_neg(N), eta_i, eta_t); // if the ray co
 1143 0bac 93050900 		mv	a1,s2	#, tmp106
 1144 0bb0 13050101 		addi	a0,sp,16	#, tmp194,
 1145              	# main_raytrace.c:41:   return V;
 1146 0bb4 2326F102 		sw	a5,44(sp)	# tmp128, D.2054.z
 1147 0bb8 23224103 		sw	s4,36(sp)	# tmp124, D.2054.x
 1148 0bbc 23243103 		sw	s3,40(sp)	# tmp126, D.2054.y
 1149              	# main_raytrace.c:133:   if (cosi<0) return refract(I, vec3_neg(N), eta_i, eta_t); // if the ray co
 1150 0bc0 97000000 		call	memcpy		#
 1150      E7800000 
 1151 0bc8 1306C000 		li	a2,12		#,
 1152 0bcc 93054102 		addi	a1,sp,36	#,,
 1153 0bd0 13050100 		mv	a0,sp	#,
 1154 0bd4 97000000 		call	memcpy		#
 1154      E7800000 
 1155 0bdc 13870D00 		mv	a4,s11	#, eta_t
 1156 0be0 93060B00 		mv	a3,s6	#, eta_i
 1157 0be4 13060100 		mv	a2,sp	#,
 1158 0be8 93050101 		addi	a1,sp,16	#, tmp195,
 1159 0bec 13050400 		mv	a0,s0	#, .result_ptr
 1160 0bf0 97000000 		call	refract		#
 1160      E7800000 
 1161              	.L96:
 1162              	# main_raytrace.c:138: }
 1163 0bf8 8320C106 		lw	ra,108(sp)		#,
 1164 0bfc 13050400 		mv	a0,s0	#, .result_ptr
 1165 0c00 03248106 		lw	s0,104(sp)		#,
 1166 0c04 83244106 		lw	s1,100(sp)		#,
 1167 0c08 03290106 		lw	s2,96(sp)		#,
 1168 0c0c 8329C105 		lw	s3,92(sp)		#,
 1169 0c10 032A8105 		lw	s4,88(sp)		#,
 1170 0c14 832A4105 		lw	s5,84(sp)		#,
 1171 0c18 032B0105 		lw	s6,80(sp)		#,
 1172 0c1c 832BC104 		lw	s7,76(sp)		#,
 1173 0c20 032C8104 		lw	s8,72(sp)		#,
 1174 0c24 832C4104 		lw	s9,68(sp)		#,
 1175 0c28 032D0104 		lw	s10,64(sp)		#,
 1176 0c2c 832DC103 		lw	s11,60(sp)		#,
 1177 0c30 13010107 		addi	sp,sp,112	#,,
 1178 0c34 67800000 		jr	ra		#
 1179              	.L103:
 1180              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 1181 0c38 93840500 		mv	s1,a1	# _31, tmp119
 1182              	.L98:
 1183              	# main_raytrace.c:134:   float eta = eta_i / eta_t;
 1184 0c3c 93850D00 		mv	a1,s11	#, eta_t
 1185 0c40 13050B00 		mv	a0,s6	#, eta_i
 1186 0c44 97000000 		call	__divsf3		#
 1186      E7800000 
 1187 0c4c 13090500 		mv	s2,a0	# tmp139, tmp177
 1188              	# main_raytrace.c:135:   float k = 1 - eta*eta*(1 - cosi*cosi);
 1189 0c50 93850400 		mv	a1,s1	#, _31
 1190 0c54 13850400 		mv	a0,s1	#, _31
 1191 0c58 97000000 		call	__mulsf3		#
 1191      E7800000 
 1192 0c60 93050500 		mv	a1,a0	# tmp178,
 1193              	# main_raytrace.c:135:   float k = 1 - eta*eta*(1 - cosi*cosi);
 1194 0c64 03A50A00 		lw	a0,%lo(.LC0)(s5)		#,
 1195 0c68 97000000 		call	__subsf3		#
 1195      E7800000 
 1196 0c70 130B0500 		mv	s6,a0	# tmp142, tmp179
 1197              	# main_raytrace.c:135:   float k = 1 - eta*eta*(1 - cosi*cosi);
 1198 0c74 93050900 		mv	a1,s2	#, tmp139
 1199 0c78 13050900 		mv	a0,s2	#, tmp139
 1200 0c7c 97000000 		call	__mulsf3		#
 1200      E7800000 
 1201 0c84 93050500 		mv	a1,a0	# tmp180,
 1202              	# main_raytrace.c:135:   float k = 1 - eta*eta*(1 - cosi*cosi);
 1203 0c88 13050B00 		mv	a0,s6	#, tmp142
 1204 0c8c 97000000 		call	__mulsf3		#
 1204      E7800000 
 1205 0c94 93050500 		mv	a1,a0	# tmp181,
 1206              	# main_raytrace.c:135:   float k = 1 - eta*eta*(1 - cosi*cosi);
 1207 0c98 03A50A00 		lw	a0,%lo(.LC0)(s5)		#,
 1208 0c9c 97000000 		call	__subsf3		#
 1208      E7800000 
 1209              	# main_raytrace.c:136:   return k<0 ? make_vec3(1,0,0) : vec3_add(vec3_scale(eta,I),vec3_scale((eta
 1210 0ca4 93050000 		mv	a1,zero	#,
 1211              	# main_raytrace.c:135:   float k = 1 - eta*eta*(1 - cosi*cosi);
 1212 0ca8 130B0500 		mv	s6,a0	# tmp146, tmp182
 1213              	# main_raytrace.c:136:   return k<0 ? make_vec3(1,0,0) : vec3_add(vec3_scale(eta,I),vec3_scale((eta
 1214 0cac 97000000 		call	__ltsf2		#
 1214      E7800000 
 1215 0cb4 635E0500 		bge	a0,zero,.L105	#, tmp183,,
 1216              	# main_raytrace.c:41:   return V;
 1217 0cb8 83A70A00 		lw	a5,%lo(.LC0)(s5)		# tmp149,
 1218 0cbc 2320F400 		sw	a5,0(s0)	# tmp149, <retval>.x
 1219 0cc0 93070000 		mv	a5,zero	# tmp196,
 1220 0cc4 2322F400 		sw	a5,4(s0)	# tmp196, <retval>.y
 1221 0cc8 2324F400 		sw	a5,8(s0)	# tmp197, <retval>.z
 1222 0ccc 6FF0DFF2 		j	.L96		#
 1223              	.L105:
 1224              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1225 0cd0 93050D00 		mv	a1,s10	#, U$x
 1226 0cd4 13050900 		mv	a0,s2	#, tmp139
 1227 0cd8 97000000 		call	__mulsf3		#
 1227      E7800000 
 1228 0ce0 130D0500 		mv	s10,a0	# tmp150, tmp184
 1229 0ce4 93050900 		mv	a1,s2	#, tmp139
 1230 0ce8 13850C00 		mv	a0,s9	#, U$y
 1231 0cec 97000000 		call	__mulsf3		#
 1231      E7800000 
 1232 0cf4 930C0500 		mv	s9,a0	# tmp151, tmp185
 1233 0cf8 93050C00 		mv	a1,s8	#, U$z
 1234 0cfc 13050900 		mv	a0,s2	#, tmp139
 1235 0d00 97000000 		call	__mulsf3		#
 1235      E7800000 
 1236 0d08 930A0500 		mv	s5,a0	# tmp152, tmp186
 1237              	# main_raytrace.c:136:   return k<0 ? make_vec3(1,0,0) : vec3_add(vec3_scale(eta,I),vec3_scale((eta
 1238 0d0c 37050080 		li	a0,-2147483648		# tmp154,
 1239 0d10 93050900 		mv	a1,s2	#, tmp139
 1240 0d14 33459500 		xor	a0,a0,s1	# _31,, tmp154
 1241 0d18 97000000 		call	__mulsf3		#
 1241      E7800000 
 1242 0d20 93040500 		mv	s1,a0	# tmp155, tmp187
 1243              	# main_raytrace.c:136:   return k<0 ? make_vec3(1,0,0) : vec3_add(vec3_scale(eta,I),vec3_scale((eta
 1244 0d24 13050B00 		mv	a0,s6	#, tmp146
 1245 0d28 97000000 		call	sqrtf		#
 1245      E7800000 
 1246 0d30 93050500 		mv	a1,a0	# tmp188,
 1247              	# main_raytrace.c:136:   return k<0 ? make_vec3(1,0,0) : vec3_add(vec3_scale(eta,I),vec3_scale((eta
 1248 0d34 13850400 		mv	a0,s1	#, tmp155
 1249 0d38 97000000 		call	__subsf3		#
 1249      E7800000 
 1250 0d40 93040500 		mv	s1,a0	# tmp156, tmp189
 1251              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1252 0d44 93050500 		mv	a1,a0	#, tmp156
 1253 0d48 13050A00 		mv	a0,s4	#, V$x
 1254 0d4c 97000000 		call	__mulsf3		#
 1254      E7800000 
 1255              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1256 0d54 93050D00 		mv	a1,s10	#, tmp150
 1257 0d58 97000000 		call	__addsf3		#
 1257      E7800000 
 1258              	# main_raytrace.c:41:   return V;
 1259 0d60 2320A400 		sw	a0,0(s0)	# tmp190, <retval>.x
 1260              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1261 0d64 93850900 		mv	a1,s3	#, V$y
 1262 0d68 13850400 		mv	a0,s1	#, tmp156
 1263 0d6c 97000000 		call	__mulsf3		#
 1263      E7800000 
 1264              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1265 0d74 93850C00 		mv	a1,s9	#, tmp151
 1266 0d78 97000000 		call	__addsf3		#
 1266      E7800000 
 1267              	# main_raytrace.c:41:   return V;
 1268 0d80 2322A400 		sw	a0,4(s0)	# tmp191, <retval>.y
 1269              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1270 0d84 93850400 		mv	a1,s1	#, tmp156
 1271 0d88 13850B00 		mv	a0,s7	#, V$z
 1272 0d8c 97000000 		call	__mulsf3		#
 1272      E7800000 
 1273              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1274 0d94 93850A00 		mv	a1,s5	#, tmp152
 1275 0d98 97000000 		call	__addsf3		#
 1275      E7800000 
 1276              	# main_raytrace.c:41:   return V;
 1277 0da0 2324A400 		sw	a0,8(s0)	# tmp192, <retval>.z
 1278 0da4 6FF05FE5 		j	.L96		#
 1280              		.globl	__extendsfdf2
 1281              		.globl	__gtdf2
 1282              		.globl	__ltdf2
 1283              		.globl	__muldf3
 1284              		.globl	__adddf3
 1285              		.globl	__fixdfsi
 1286              		.align	2
 1287              		.globl	scene_intersect
 1289              	scene_intersect:
 1290 0da8 130101F7 		addi	sp,sp,-144	#,,
 1291 0dac 232C4107 		sw	s4,120(sp)	#,
 1292 0db0 138A0700 		mv	s4,a5	# N, tmp236
 1293 0db4 83278500 		lw	a5,8(a0)		# orig$z, orig.z
 1294 0db8 232E3107 		sw	s3,124(sp)	#,
 1295 0dbc 232A5107 		sw	s5,116(sp)	#,
 1296 0dc0 2328F100 		sw	a5,16(sp)	# orig$z, %sfp
 1297 0dc4 83A78500 		lw	a5,8(a1)		# dir$z, dir.z
 1298 0dc8 23267107 		sw	s7,108(sp)	#,
 1299 0dcc 2320A107 		sw	s10,96(sp)	#,
 1300 0dd0 2326F100 		sw	a5,12(sp)	# dir$z, %sfp
 1301              	# main_raytrace.c:142:   float spheres_dist = 1e30;
 1302 0dd4 B7070000 		lui	a5,%hi(.LC3)	# tmp264,
 1303              	# main_raytrace.c:141: BOOL scene_intersect(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, v
 1304 0dd8 232EB105 		sw	s11,92(sp)	#,
 1305 0ddc 032D0500 		lw	s10,0(a0)		# orig$x, orig.x
 1306 0de0 832B4500 		lw	s7,4(a0)		# orig$y, orig.y
 1307 0de4 83AD0500 		lw	s11,0(a1)		# dir$x, dir.x
 1308 0de8 83AA4500 		lw	s5,4(a1)		# dir$y, dir.y
 1309              	# main_raytrace.c:142:   float spheres_dist = 1e30;
 1310 0dec 83A90700 		lw	s3,%lo(.LC3)(a5)		# spheres_dist,
 1311              	# main_raytrace.c:141: BOOL scene_intersect(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, v
 1312 0df0 23248108 		sw	s0,136(sp)	#,
 1313 0df4 23229108 		sw	s1,132(sp)	#,
 1314 0df8 23202109 		sw	s2,128(sp)	#,
 1315 0dfc 23248107 		sw	s8,104(sp)	#,
 1316 0e00 23229107 		sw	s9,100(sp)	#,
 1317 0e04 23261108 		sw	ra,140(sp)	#,
 1318 0e08 23286107 		sw	s6,112(sp)	#,
 1319              	# main_raytrace.c:141: BOOL scene_intersect(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, v
 1320 0e0c 130C0500 		mv	s8,a0	# tmp122, tmp231
 1321 0e10 938C0500 		mv	s9,a1	# tmp123, tmp232
 1322 0e14 232AD100 		sw	a3,20(sp)	# tmp234, %sfp
 1323 0e18 13040700 		mv	s0,a4	# hit, tmp235
 1324 0e1c 93040800 		mv	s1,a6	# material, tmp237
 1325 0e20 13090600 		mv	s2,a2	# ivtmp.559, tmp233
 1326              	# main_raytrace.c:143:   for(int i=0; i<nb_spheres; ++i) {
 1327 0e24 23240100 		sw	zero,8(sp)	#, %sfp
 1328              	.L108:
 1329              	# main_raytrace.c:143:   for(int i=0; i<nb_spheres; ++i) {
 1330 0e28 83278100 		lw	a5,8(sp)		# i, %sfp
 1331 0e2c 03274101 		lw	a4,20(sp)		# nb_spheres, %sfp
 1332 0e30 63C2E70A 		blt	a5,a4,.L111	#, i, nb_spheres,
 1333              	# main_raytrace.c:153:   if (fabs(dir.y)>1e-3)  {
 1334 0e34 13850A00 		mv	a0,s5	#, dir$y
 1335 0e38 97000000 		call	__extendsfdf2		#
 1335      E7800000 
 1336 0e40 97000000 		call	fabs		#
 1336      E7800000 
 1337              	# main_raytrace.c:153:   if (fabs(dir.y)>1e-3)  {
 1338 0e48 B7070000 		lui	a5,%hi(.LC4)	# tmp168,
 1339 0e4c 03A60700 		lw	a2,%lo(.LC4)(a5)		#,
 1340 0e50 83A64700 		lw	a3,%lo(.LC4+4)(a5)		#,
 1341 0e54 97000000 		call	__gtdf2		#
 1341      E7800000 
 1342 0e5c 634CA020 		bgt	a0,zero,.L112	#, tmp246,,
 1343              	.L114:
 1344              	# main_raytrace.c:152:   float checkerboard_dist = 1e30;
 1345 0e60 B7070000 		lui	a5,%hi(.LC3)	# tmp277,
 1346 0e64 03A90700 		lw	s2,%lo(.LC3)(a5)		# d,
 1347              	.L113:
 1348              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 1349 0e68 93050900 		mv	a1,s2	#, d
 1350 0e6c 13850900 		mv	a0,s3	#, spheres_dist
 1351 0e70 97000000 		call	__ltsf2		#
 1351      E7800000 
 1352 0e78 63440500 		blt	a0,zero,.L121	#, tmp259,,
 1353 0e7c 93090900 		mv	s3,s2	# spheres_dist, d
 1354              	.L121:
 1355              	# main_raytrace.c:163:   return min(spheres_dist, checkerboard_dist)<1000;
 1356 0e80 B7070000 		lui	a5,%hi(.LC14)	# tmp223,
 1357 0e84 83A50700 		lw	a1,%lo(.LC14)(a5)		#,
 1358 0e88 13850900 		mv	a0,s3	#, spheres_dist
 1359 0e8c 97000000 		call	__ltsf2		#
 1359      E7800000 
 1360              	# main_raytrace.c:164: }
 1361 0e94 8320C108 		lw	ra,140(sp)		#,
 1362 0e98 03248108 		lw	s0,136(sp)		#,
 1363 0e9c 83244108 		lw	s1,132(sp)		#,
 1364 0ea0 03290108 		lw	s2,128(sp)		#,
 1365 0ea4 8329C107 		lw	s3,124(sp)		#,
 1366 0ea8 032A8107 		lw	s4,120(sp)		#,
 1367 0eac 832A4107 		lw	s5,116(sp)		#,
 1368 0eb0 032B0107 		lw	s6,112(sp)		#,
 1369 0eb4 832BC106 		lw	s7,108(sp)		#,
 1370 0eb8 032C8106 		lw	s8,104(sp)		#,
 1371 0ebc 832C4106 		lw	s9,100(sp)		#,
 1372 0ec0 032D0106 		lw	s10,96(sp)		#,
 1373 0ec4 832DC105 		lw	s11,92(sp)		#,
 1374 0ec8 13250500 		slti	a0,a0,0	#,, tmp260
 1375 0ecc 13010109 		addi	sp,sp,144	#,,
 1376 0ed0 67800000 		jr	ra		#
 1377              	.L111:
 1378              	# main_raytrace.c:145:     if(Sphere_ray_intersect(&spheres[i], orig, dir, &dist_i) && (dist_i < sp
 1379 0ed4 83270101 		lw	a5,16(sp)		# orig$z, %sfp
 1380 0ed8 1306C000 		li	a2,12		#,
 1381 0edc 93050C00 		mv	a1,s8	#, tmp122
 1382 0ee0 2324FC00 		sw	a5,8(s8)	# orig$z, orig.z
 1383 0ee4 8327C100 		lw	a5,12(sp)		# dir$z, %sfp
 1384 0ee8 13050103 		addi	a0,sp,48	#, tmp267,
 1385 0eec 2320AC01 		sw	s10,0(s8)	# orig$x, orig.x
 1386 0ef0 23A4FC00 		sw	a5,8(s9)	# dir$z, dir.z
 1387 0ef4 23227C01 		sw	s7,4(s8)	# orig$y, orig.y
 1388 0ef8 23A0BC01 		sw	s11,0(s9)	# dir$x, dir.x
 1389 0efc 23A25C01 		sw	s5,4(s9)	# dir$y, dir.y
 1390 0f00 97000000 		call	memcpy		#
 1390      E7800000 
 1391 0f08 1306C000 		li	a2,12		#,
 1392 0f0c 93850C00 		mv	a1,s9	#, tmp123
 1393 0f10 13050102 		addi	a0,sp,32	#,,
 1394 0f14 97000000 		call	memcpy		#
 1394      E7800000 
 1395 0f1c 93060104 		addi	a3,sp,64	#, tmp268,
 1396 0f20 13060102 		addi	a2,sp,32	#,,
 1397 0f24 93050103 		addi	a1,sp,48	#, tmp269,
 1398 0f28 13050900 		mv	a0,s2	#, ivtmp.559
 1399 0f2c 97000000 		call	Sphere_ray_intersect		#
 1399      E7800000 
 1400              	# main_raytrace.c:145:     if(Sphere_ray_intersect(&spheres[i], orig, dir, &dist_i) && (dist_i < sp
 1401 0f34 63060512 		beq	a0,zero,.L109	#, tmp238,,
 1402              	# main_raytrace.c:145:     if(Sphere_ray_intersect(&spheres[i], orig, dir, &dist_i) && (dist_i < sp
 1403 0f38 032B0104 		lw	s6,64(sp)		# dist_i.11_5, dist_i
 1404              	# main_raytrace.c:145:     if(Sphere_ray_intersect(&spheres[i], orig, dir, &dist_i) && (dist_i < sp
 1405 0f3c 93850900 		mv	a1,s3	#, spheres_dist
 1406 0f40 13050B00 		mv	a0,s6	#, dist_i.11_5
 1407 0f44 97000000 		call	__ltsf2		#
 1407      E7800000 
 1408 0f4c 635A0510 		bge	a0,zero,.L109	#, tmp239,,
 1409              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1410 0f50 93850D00 		mv	a1,s11	#, dir$x
 1411 0f54 13050B00 		mv	a0,s6	#, dist_i.11_5
 1412 0f58 97000000 		call	__mulsf3		#
 1412      E7800000 
 1413              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1414 0f60 93050D00 		mv	a1,s10	#, orig$x
 1415 0f64 97000000 		call	__addsf3		#
 1415      E7800000 
 1416 0f6c 93090500 		mv	s3,a0	# tmp144, tmp240
 1417              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1418 0f70 93850A00 		mv	a1,s5	#, dir$y
 1419 0f74 13050B00 		mv	a0,s6	#, dist_i.11_5
 1420 0f78 97000000 		call	__mulsf3		#
 1420      E7800000 
 1421              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1422 0f80 93850B00 		mv	a1,s7	#, orig$y
 1423 0f84 97000000 		call	__addsf3		#
 1423      E7800000 
 1424              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1425 0f8c 8325C100 		lw	a1,12(sp)		#, %sfp
 1426              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1427 0f90 232CA100 		sw	a0,24(sp)	# tmp146, %sfp
 1428              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1429 0f94 13050B00 		mv	a0,s6	#, dist_i.11_5
 1430 0f98 97000000 		call	__mulsf3		#
 1430      E7800000 
 1431              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1432 0fa0 83250101 		lw	a1,16(sp)		#, %sfp
 1433 0fa4 97000000 		call	__addsf3		#
 1433      E7800000 
 1434              	# main_raytrace.c:147:       *hit = vec3_add(orig,vec3_scale(dist_i,dir));
 1435 0fac 03278101 		lw	a4,24(sp)		# tmp146, %sfp
 1436 0fb0 23203401 		sw	s3,0(s0)	# tmp144, hit_42(D)->x
 1437 0fb4 2324A400 		sw	a0,8(s0)	# tmp148, hit_42(D)->z
 1438 0fb8 2322E400 		sw	a4,4(s0)	# tmp146, hit_42(D)->y
 1439              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1440 0fbc 83254900 		lw	a1,4(s2)		#, MEM[(float *)_3 + 4B]
 1441              	# main_raytrace.c:147:       *hit = vec3_add(orig,vec3_scale(dist_i,dir));
 1442 0fc0 232CA100 		sw	a0,24(sp)	# tmp148, %sfp
 1443              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1444 0fc4 13050700 		mv	a0,a4	#, tmp146
 1445 0fc8 97000000 		call	__subsf3		#
 1445      E7800000 
 1446 0fd0 83278101 		lw	a5,24(sp)		# tmp148, %sfp
 1447 0fd4 83258900 		lw	a1,8(s2)		#, MEM[(float *)_3 + 8B]
 1448 0fd8 232EA100 		sw	a0,28(sp)	# tmp149, %sfp
 1449 0fdc 13850700 		mv	a0,a5	#, tmp148
 1450 0fe0 97000000 		call	__subsf3		#
 1450      E7800000 
 1451 0fe8 83250900 		lw	a1,0(s2)		#, MEM[(float *)_3]
 1452 0fec 232CA100 		sw	a0,24(sp)	# tmp150, %sfp
 1453 0ff0 13850900 		mv	a0,s3	#, tmp144
 1454 0ff4 97000000 		call	__subsf3		#
 1454      E7800000 
 1455              	# main_raytrace.c:41:   return V;
 1456 0ffc 0327C101 		lw	a4,28(sp)		# tmp149, %sfp
 1457 1000 83278101 		lw	a5,24(sp)		# tmp150, %sfp
 1458              	# main_raytrace.c:148:       *N = vec3_normalize(vec3_sub(*hit, spheres[i].center));
 1459 1004 1306C000 		li	a2,12		#,
 1460              	# main_raytrace.c:41:   return V;
 1461 1008 2322A104 		sw	a0,68(sp)	# tmp245, D.2082.x
 1462              	# main_raytrace.c:148:       *N = vec3_normalize(vec3_sub(*hit, spheres[i].center));
 1463 100c 93054104 		addi	a1,sp,68	#, tmp270,
 1464 1010 13050102 		addi	a0,sp,32	#,,
 1465              	# main_raytrace.c:41:   return V;
 1466 1014 2324E104 		sw	a4,72(sp)	# tmp149, D.2082.y
 1467 1018 2326F104 		sw	a5,76(sp)	# tmp150, D.2082.z
 1468              	# main_raytrace.c:148:       *N = vec3_normalize(vec3_sub(*hit, spheres[i].center));
 1469 101c 97000000 		call	memcpy		#
 1469      E7800000 
 1470 1024 93050102 		addi	a1,sp,32	#,,
 1471 1028 13050103 		addi	a0,sp,48	#, tmp271,
 1472 102c 97000000 		call	vec3_normalize		#
 1472      E7800000 
 1473 1034 1306C000 		li	a2,12		#,
 1474 1038 93050103 		addi	a1,sp,48	#, tmp272,
 1475 103c 13050A00 		mv	a0,s4	#, N
 1476 1040 97000000 		call	memcpy		#
 1476      E7800000 
 1477              	# main_raytrace.c:149:       *material = spheres[i].material;
 1478 1048 13064002 		li	a2,36		#,
 1479 104c 93050901 		addi	a1,s2,16	#,, ivtmp.559
 1480 1050 13850400 		mv	a0,s1	#, material
 1481 1054 97000000 		call	memcpy		#
 1481      E7800000 
 1482              	# main_raytrace.c:146:       spheres_dist = dist_i;
 1483 105c 93090B00 		mv	s3,s6	# spheres_dist, dist_i.11_5
 1484              	.L109:
 1485              	# main_raytrace.c:143:   for(int i=0; i<nb_spheres; ++i) {
 1486 1060 83278100 		lw	a5,8(sp)		# i, %sfp
 1487 1064 13094903 		addi	s2,s2,52	#, ivtmp.559, ivtmp.559
 1488 1068 93871700 		addi	a5,a5,1	#, i, i
 1489 106c 2324F100 		sw	a5,8(sp)	# i, %sfp
 1490 1070 6FF09FDB 		j	.L108		#
 1491              	.L112:
 1492              	# main_raytrace.c:154:     float d = -(orig.y+4)/dir.y; // the checkerboard plane has equation y = 
 1493 1074 B7070000 		lui	a5,%hi(.LC5)	# tmp170,
 1494 1078 83A50700 		lw	a1,%lo(.LC5)(a5)		#,
 1495 107c 13850B00 		mv	a0,s7	#, orig$y
 1496 1080 97000000 		call	__addsf3		#
 1496      E7800000 
 1497              	# main_raytrace.c:154:     float d = -(orig.y+4)/dir.y; // the checkerboard plane has equation y = 
 1498 1088 B7070080 		li	a5,-2147483648		# tmp173,
 1499 108c 93850A00 		mv	a1,s5	#, dir$y
 1500 1090 33C5A700 		xor	a0,a5,a0	# tmp247,, tmp173
 1501 1094 97000000 		call	__divsf3		#
 1501      E7800000 
 1502              	# main_raytrace.c:156:     if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 1503 109c 93050000 		mv	a1,zero	#,
 1504              	# main_raytrace.c:154:     float d = -(orig.y+4)/dir.y; // the checkerboard plane has equation y = 
 1505 10a0 13090500 		mv	s2,a0	# d, tmp248
 1506              	# main_raytrace.c:156:     if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 1507 10a4 97000000 		call	__gtsf2		#
 1507      E7800000 
 1508 10ac E35AA0DA 		ble	a0,zero,.L114	#, tmp249,,
 1509              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1510 10b0 93850D00 		mv	a1,s11	#, dir$x
 1511 10b4 13050900 		mv	a0,s2	#, d
 1512 10b8 97000000 		call	__mulsf3		#
 1512      E7800000 
 1513              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1514 10c0 93050D00 		mv	a1,s10	#, orig$x
 1515 10c4 97000000 		call	__addsf3		#
 1515      E7800000 
 1516 10cc 130D0500 		mv	s10,a0	# tmp177, tmp250
 1517              	# main_raytrace.c:156:     if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 1518 10d0 97000000 		call	__extendsfdf2		#
 1518      E7800000 
 1519 10d8 97000000 		call	fabs		#
 1519      E7800000 
 1520              	# main_raytrace.c:156:     if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 1521 10e0 B7070000 		lui	a5,%hi(.LC6)	# tmp180,
 1522 10e4 03A60700 		lw	a2,%lo(.LC6)(a5)		#,
 1523 10e8 83A64700 		lw	a3,%lo(.LC6+4)(a5)		#,
 1524 10ec 97000000 		call	__ltdf2		#
 1524      E7800000 
 1525 10f4 E35605D6 		bge	a0,zero,.L114	#, tmp251,,
 1526              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1527 10f8 8325C100 		lw	a1,12(sp)		#, %sfp
 1528 10fc 13050900 		mv	a0,s2	#, d
 1529 1100 97000000 		call	__mulsf3		#
 1529      E7800000 
 1530              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1531 1108 83250101 		lw	a1,16(sp)		#, %sfp
 1532 110c 97000000 		call	__addsf3		#
 1532      E7800000 
 1533              	# main_raytrace.c:156:     if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 1534 1114 B7070000 		lui	a5,%hi(.LC7)	# tmp185,
 1535 1118 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 1536              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1537 111c 130B0500 		mv	s6,a0	# tmp183, tmp252
 1538              	# main_raytrace.c:156:     if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 1539 1120 97000000 		call	__ltsf2		#
 1539      E7800000 
 1540 1128 E35C05D2 		bge	a0,zero,.L114	#, tmp253,,
 1541              	# main_raytrace.c:156:     if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 1542 112c B7070000 		lui	a5,%hi(.LC8)	# tmp188,
 1543 1130 83A50700 		lw	a1,%lo(.LC8)(a5)		#,
 1544 1134 13050B00 		mv	a0,s6	#, tmp183
 1545 1138 97000000 		call	__gtsf2		#
 1545      E7800000 
 1546 1140 E350A0D2 		ble	a0,zero,.L114	#, tmp254,,
 1547              	# main_raytrace.c:156:     if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 1548 1144 93050900 		mv	a1,s2	#, d
 1549 1148 13850900 		mv	a0,s3	#, spheres_dist
 1550 114c 97000000 		call	__gtsf2		#
 1550      E7800000 
 1551 1154 E356A0D0 		ble	a0,zero,.L114	#, tmp255,,
 1552              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1553 1158 93850A00 		mv	a1,s5	#, dir$y
 1554              	# main_raytrace.c:158:       *hit = pt;
 1555 115c 2320A401 		sw	s10,0(s0)	# tmp177, hit_42(D)->x
 1556              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1557 1160 13050900 		mv	a0,s2	#, d
 1558 1164 97000000 		call	__mulsf3		#
 1558      E7800000 
 1559              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1560 116c 93850B00 		mv	a1,s7	#, orig$y
 1561 1170 97000000 		call	__addsf3		#
 1561      E7800000 
 1562              	# main_raytrace.c:159:       *N = make_vec3(0,1,0);
 1563 1178 13070000 		mv	a4,zero	# tmp278,
 1564              	# main_raytrace.c:158:       *hit = pt;
 1565 117c 2322A400 		sw	a0,4(s0)	# tmp256, hit_42(D)->y
 1566 1180 23246401 		sw	s6,8(s0)	# tmp183, hit_42(D)->z
 1567              	# main_raytrace.c:159:       *N = make_vec3(0,1,0);
 1568 1184 B7070000 		lui	a5,%hi(.LC0)	# tmp193,
 1569 1188 2320EA00 		sw	a4,0(s4)	# tmp278, N_43(D)->x
 1570 118c 83A70700 		lw	a5,%lo(.LC0)(a5)		# tmp194,
 1571              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1572 1190 03250400 		lw	a0,0(s0)		#, hit_42(D)->x
 1573              	# main_raytrace.c:159:       *N = make_vec3(0,1,0);
 1574 1194 2324EA00 		sw	a4,8(s4)	# tmp279, N_43(D)->z
 1575 1198 2322FA00 		sw	a5,4(s4)	# tmp194, N_43(D)->y
 1576              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1577 119c 97000000 		call	__extendsfdf2		#
 1577      E7800000 
 1578              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1579 11a4 B70A0000 		lui	s5,%hi(.LC9)	# tmp196,
 1580 11a8 03A60A00 		lw	a2,%lo(.LC9)(s5)		#,
 1581 11ac 83A64A00 		lw	a3,%lo(.LC9+4)(s5)		#,
 1582 11b0 97000000 		call	__muldf3		#
 1582      E7800000 
 1583              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1584 11b8 B7070000 		lui	a5,%hi(.LC10)	# tmp198,
 1585 11bc 03A60700 		lw	a2,%lo(.LC10)(a5)		#,
 1586 11c0 83A64700 		lw	a3,%lo(.LC10+4)(a5)		#,
 1587 11c4 97000000 		call	__adddf3		#
 1587      E7800000 
 1588              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1589 11cc 97000000 		call	__fixdfsi		#
 1589      E7800000 
 1590 11d4 130A0500 		mv	s4,a0	# tmp200, tmp257
 1591              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1592 11d8 03258400 		lw	a0,8(s0)		#, hit_42(D)->z
 1593 11dc 97000000 		call	__extendsfdf2		#
 1593      E7800000 
 1594              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1595 11e4 03A60A00 		lw	a2,%lo(.LC9)(s5)		#,
 1596 11e8 83A64A00 		lw	a3,%lo(.LC9+4)(s5)		#,
 1597 11ec 97000000 		call	__muldf3		#
 1597      E7800000 
 1598              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1599 11f4 97000000 		call	__fixdfsi		#
 1599      E7800000 
 1600 11fc B7070000 		lui	a5,%hi(.LC11)	# tmp226,
 1601              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1602 1200 83A70700 		lw	a5,%lo(.LC11)(a5)		# tmp208,
 1603              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1604 1204 330AAA00 		add	s4,s4,a0	# tmp258, tmp205, tmp200
 1605              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1606 1208 137A1A00 		andi	s4,s4,1	#, tmp206, tmp205
 1607              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1608 120c 23AAF400 		sw	a5,20(s1)	# tmp208, material_44(D)->diffuse_color.x
 1609              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1610 1210 63080A00 		beq	s4,zero,.L120	#, tmp206,,
 1611              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1612 1214 23ACF400 		sw	a5,24(s1)	# tmp208, material_44(D)->diffuse_color.y
 1613              	.L133:
 1614              	# main_raytrace.c:160:       material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) 
 1615 1218 23AEF400 		sw	a5,28(s1)	# tmp218, material_44(D)->diffuse_color.z
 1616 121c 6FF0DFC4 		j	.L113		#
 1617              	.L120:
 1618 1220 B7070000 		lui	a5,%hi(.LC12)	# tmp215,
 1619 1224 83A70700 		lw	a5,%lo(.LC12)(a5)		# tmp216,
 1620 1228 23ACF400 		sw	a5,24(s1)	# tmp216, material_44(D)->diffuse_color.y
 1621 122c B7070000 		lui	a5,%hi(.LC13)	# tmp217,
 1622 1230 83A70700 		lw	a5,%lo(.LC13)(a5)		# tmp218,
 1623 1234 6FF05FFE 		j	.L133		#
 1625              		.globl	__fixsfsi
 1626              		.align	2
 1627              		.globl	my_pow
 1629              	my_pow:
 1630 1238 130101FD 		addi	sp,sp,-48	#,,
 1631 123c 23286101 		sw	s6,16(sp)	#,
 1632 1240 130B0500 		mv	s6,a0	# x, tmp93
 1633              	# main_raytrace.c:170:   int Y = (int)y;
 1634 1244 13850500 		mv	a0,a1	#, tmp94
 1635              	# main_raytrace.c:168: float my_pow(float x, float y) {
 1636 1248 23248102 		sw	s0,40(sp)	#,
 1637 124c 23229102 		sw	s1,36(sp)	#,
 1638 1250 23202103 		sw	s2,32(sp)	#,
 1639 1254 232E3101 		sw	s3,28(sp)	#,
 1640 1258 232C4101 		sw	s4,24(sp)	#,
 1641 125c 232A5101 		sw	s5,20(sp)	#,
 1642 1260 23248101 		sw	s8,8(sp)	#,
 1643 1264 23261102 		sw	ra,44(sp)	#,
 1644 1268 23267101 		sw	s7,12(sp)	#,
 1645 126c 23229101 		sw	s9,4(sp)	#,
 1646              	# main_raytrace.c:170:   int Y = (int)y;
 1647 1270 97000000 		call	__fixsfsi		#
 1647      E7800000 
 1648              	# main_raytrace.c:173:     if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 1649 1278 B7070000 		lui	a5,%hi(.LC15)	# tmp89,
 1650 127c 03A90700 		lw	s2,%lo(.LC15)(a5)		# tmp90,
 1651 1280 83A94700 		lw	s3,%lo(.LC15+4)(a5)		#,
 1652              	# main_raytrace.c:173:     if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 1653 1284 B7070000 		lui	a5,%hi(.LC16)	# tmp91,
 1654 1288 03AA0700 		lw	s4,%lo(.LC16)(a5)		# tmp92,
 1655 128c 83AA4700 		lw	s5,%lo(.LC16+4)(a5)		#,
 1656              	# main_raytrace.c:170:   int Y = (int)y;
 1657 1290 93040500 		mv	s1,a0	# Y, tmp95
 1658              	# main_raytrace.c:169:   float alu_rslt = x;
 1659 1294 13040B00 		mv	s0,s6	# <retval>, x
 1660              	# main_raytrace.c:171:   while(Y > 2) {
 1661 1298 130C2000 		li	s8,2		# tmp85,
 1662              	.L135:
 1663 129c 63409C02 		bgt	s1,s8,.L137	#, Y, tmp85,
 1664              	# main_raytrace.c:177:   while(Y > 1) {
 1665 12a0 639A8407 		bne	s1,s8,.L134	#, Y, tmp85,
 1666              	# main_raytrace.c:178:     Y--; alu_rslt *= x;
 1667 12a4 13050400 		mv	a0,s0	#, <retval>
 1668 12a8 93050B00 		mv	a1,s6	#, x
 1669 12ac 97000000 		call	__mulsf3		#
 1669      E7800000 
 1670 12b4 13040500 		mv	s0,a0	# <retval>, tmp100
 1671 12b8 6F00C005 		j	.L134		#
 1672              	.L137:
 1673              	# main_raytrace.c:172:     Y /= 2; alu_rslt *= alu_rslt;
 1674 12bc 93050400 		mv	a1,s0	#, <retval>
 1675 12c0 13050400 		mv	a0,s0	#, tmp11
 1676 12c4 97000000 		call	__mulsf3		#
 1676      E7800000 
 1677 12cc 13040500 		mv	s0,a0	# <retval>, tmp96
 1678              	# main_raytrace.c:173:     if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 1679 12d0 97000000 		call	__extendsfdf2		#
 1679      E7800000 
 1680              	# main_raytrace.c:173:     if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 1681 12d8 13060900 		mv	a2,s2	#, tmp90
 1682 12dc 93860900 		mv	a3,s3	#,
 1683              	# main_raytrace.c:172:     Y /= 2; alu_rslt *= alu_rslt;
 1684 12e0 93D41440 		srai	s1,s1,1	#, Y, Y
 1685              	# main_raytrace.c:173:     if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 1686 12e4 930C0500 		mv	s9,a0	# _1, tmp103
 1687 12e8 938B0500 		mv	s7,a1	# _1, tmp104
 1688              	# main_raytrace.c:173:     if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 1689 12ec 97000000 		call	__ltdf2		#
 1689      E7800000 
 1690 12f4 63400502 		blt	a0,zero,.L134	#, tmp98,,
 1691              	# main_raytrace.c:173:     if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 1692 12f8 13060A00 		mv	a2,s4	#, tmp92
 1693 12fc 93860A00 		mv	a3,s5	#,
 1694 1300 13850C00 		mv	a0,s9	# tmp105, _1
 1695 1304 93850B00 		mv	a1,s7	#, _1
 1696 1308 97000000 		call	__gtdf2		#
 1696      E7800000 
 1697 1310 E356A0F8 		ble	a0,zero,.L135	#, tmp99,,
 1698              	.L134:
 1699              	# main_raytrace.c:184: }
 1700 1314 8320C102 		lw	ra,44(sp)		#,
 1701 1318 13050400 		mv	a0,s0	#, <retval>
 1702 131c 03248102 		lw	s0,40(sp)		#,
 1703 1320 83244102 		lw	s1,36(sp)		#,
 1704 1324 03290102 		lw	s2,32(sp)		#,
 1705 1328 8329C101 		lw	s3,28(sp)		#,
 1706 132c 032A8101 		lw	s4,24(sp)		#,
 1707 1330 832A4101 		lw	s5,20(sp)		#,
 1708 1334 032B0101 		lw	s6,16(sp)		#,
 1709 1338 832BC100 		lw	s7,12(sp)		#,
 1710 133c 032C8100 		lw	s8,8(sp)		#,
 1711 1340 832C4100 		lw	s9,4(sp)		#,
 1712 1344 13010103 		addi	sp,sp,48	#,,
 1713 1348 67800000 		jr	ra		#
 1715              		.globl	__truncdfsf2
 1716              		.align	2
 1717              		.globl	cast_ray
 1719              	cast_ray:
 1720 134c 130101E4 		addi	sp,sp,-448	#,,
 1721 1350 232C811A 		sw	s0,440(sp)	#,
 1722 1354 13840700 		mv	s0,a5	# lights, tmp505
 1723 1358 83274600 		lw	a5,4(a2)		# dir$y, dir.y
 1724 135c 232A911A 		sw	s1,436(sp)	#,
 1725 1360 232E111A 		sw	ra,444(sp)	#,
 1726 1364 2328F102 		sw	a5,48(sp)	# dir$y, %sfp
 1727              	# main_raytrace.c:96:   return M;
 1728 1368 B7070000 		lui	a5,%hi(.LC0)	# tmp239,
 1729 136c 83A40700 		lw	s1,%lo(.LC0)(a5)		# tmp240,
 1730 1370 93070000 		mv	a5,zero	# tmp614,
 1731 1374 2320F114 		sw	a5,320(sp)	# tmp614, material.albedo.y
 1732 1378 2322F114 		sw	a5,324(sp)	# tmp615, material.albedo.z
 1733 137c 2324F114 		sw	a5,328(sp)	# tmp616, material.albedo.w
 1734 1380 2326F114 		sw	a5,332(sp)	# tmp617, material.diffuse_color.x
 1735 1384 2328F114 		sw	a5,336(sp)	# tmp618, material.diffuse_color.y
 1736 1388 232AF114 		sw	a5,340(sp)	# tmp619, material.diffuse_color.z
 1737 138c 232CF114 		sw	a5,344(sp)	# tmp620, material.specular_exponent
 1738              	# main_raytrace.c:187: vec3 cast_ray(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, Light* l
 1739 1390 2328211B 		sw	s2,432(sp)	#,
 1740 1394 2326311B 		sw	s3,428(sp)	#,
 1741 1398 2324411B 		sw	s4,424(sp)	#,
 1742 139c 2322511B 		sw	s5,420(sp)	#,
 1743 13a0 2320611B 		sw	s6,416(sp)	#,
 1744 13a4 232E7119 		sw	s7,412(sp)	#,
 1745 13a8 232C8119 		sw	s8,408(sp)	#,
 1746 13ac 232A9119 		sw	s9,404(sp)	#,
 1747 13b0 2328A119 		sw	s10,400(sp)	#,
 1748 13b4 2326B119 		sw	s11,396(sp)	#,
 1749              	# main_raytrace.c:187: vec3 cast_ray(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, Light* l
 1750 13b8 2328A100 		sw	a0,16(sp)	# tmp501, %sfp
 1751 13bc 232AD100 		sw	a3,20(sp)	# tmp503, %sfp
 1752 13c0 232CE100 		sw	a4,24(sp)	# tmp504, %sfp
 1753 13c4 23260103 		sw	a6,44(sp)	# tmp506, %sfp
 1754              	# main_raytrace.c:96:   return M;
 1755 13c8 232C9112 		sw	s1,312(sp)	# tmp240, material.refractive_index
 1756 13cc 232E9112 		sw	s1,316(sp)	# tmp240, material.albedo.x
 1757              	# main_raytrace.c:190:   if (depth>2 || !scene_intersect(orig, dir, spheres, nb_spheres, &point, &N
 1758 13d0 93072000 		li	a5,2		# tmp243,
 1759 13d4 63D41713 		ble	a7,a5,.L143	#, depth, tmp243,
 1760              	.L145:
 1761              	# main_raytrace.c:191:     float s = 0.5*(dir.y + 1.0);
 1762 13d8 03250103 		lw	a0,48(sp)		#, %sfp
 1763 13dc 97000000 		call	__extendsfdf2		#
 1763      E7800000 
 1764              	# main_raytrace.c:191:     float s = 0.5*(dir.y + 1.0);
 1765 13e4 B7070000 		lui	a5,%hi(.LC17)	# tmp245,
 1766 13e8 03A60700 		lw	a2,%lo(.LC17)(a5)		#,
 1767 13ec 83A64700 		lw	a3,%lo(.LC17+4)(a5)		#,
 1768 13f0 97000000 		call	__adddf3		#
 1768      E7800000 
 1769              	# main_raytrace.c:191:     float s = 0.5*(dir.y + 1.0);
 1770 13f8 B7070000 		lui	a5,%hi(.LC9)	# tmp247,
 1771 13fc 03A60700 		lw	a2,%lo(.LC9)(a5)		#,
 1772 1400 83A64700 		lw	a3,%lo(.LC9+4)(a5)		#,
 1773 1404 97000000 		call	__muldf3		#
 1773      E7800000 
 1774              	# main_raytrace.c:191:     float s = 0.5*(dir.y + 1.0);
 1775 140c 97000000 		call	__truncdfsf2		#
 1775      E7800000 
 1776              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1777 1414 93050000 		mv	a1,zero	#,
 1778              	# main_raytrace.c:191:     float s = 0.5*(dir.y + 1.0);
 1779 1418 13090500 		mv	s2,a0	# tmp249, tmp508
 1780              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1781 141c 97000000 		call	__mulsf3		#
 1781      E7800000 
 1782 1424 B7070000 		lui	a5,%hi(.LC12)	# tmp251,
 1783 1428 83A50700 		lw	a1,%lo(.LC12)(a5)		#,
 1784 142c 13040500 		mv	s0,a0	# tmp250, tmp509
 1785 1430 13050900 		mv	a0,s2	#, tmp249
 1786 1434 97000000 		call	__mulsf3		#
 1786      E7800000 
 1787              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1788 143c 93050400 		mv	a1,s0	#, tmp250
 1789 1440 97000000 		call	__addsf3		#
 1789      E7800000 
 1790              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1791 1448 B7070000 		lui	a5,%hi(.LC18)	# tmp254,
 1792 144c 83A50700 		lw	a1,%lo(.LC18)(a5)		#,
 1793              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1794 1450 93040500 		mv	s1,a0	# _397, tmp510
 1795              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1796 1454 13050900 		mv	a0,s2	#, tmp249
 1797 1458 97000000 		call	__mulsf3		#
 1797      E7800000 
 1798              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1799 1460 93050400 		mv	a1,s0	#, tmp250
 1800 1464 97000000 		call	__addsf3		#
 1800      E7800000 
 1801              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1802 146c B7070000 		lui	a5,%hi(.LC19)	# tmp257,
 1803 1470 83A50700 		lw	a1,%lo(.LC19)(a5)		#,
 1804              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1805 1474 13040500 		mv	s0,a0	# _399, tmp511
 1806              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1807 1478 13050900 		mv	a0,s2	#, tmp249
 1808 147c 97000000 		call	__mulsf3		#
 1808      E7800000 
 1809 1484 B7070000 		lui	a5,%hi(.LC20)	# tmp259,
 1810 1488 83A50700 		lw	a1,%lo(.LC20)(a5)		#,
 1811 148c 93090500 		mv	s3,a0	# tmp258, tmp512
 1812 1490 13050900 		mv	a0,s2	#, tmp249
 1813 1494 97000000 		call	__mulsf3		#
 1813      E7800000 
 1814 149c 93050500 		mv	a1,a0	# tmp513,
 1815              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 1816 14a0 13850900 		mv	a0,s3	#, tmp258
 1817              	.L180:
 1818 14a4 97000000 		call	__addsf3		#
 1818      E7800000 
 1819              	# main_raytrace.c:41:   return V;
 1820 14ac 83270101 		lw	a5,16(sp)		# .result_ptr, %sfp
 1821              	# main_raytrace.c:229: }
 1822 14b0 8320C11B 		lw	ra,444(sp)		#,
 1823 14b4 0329011B 		lw	s2,432(sp)		#,
 1824              	# main_raytrace.c:41:   return V;
 1825 14b8 23A28700 		sw	s0,4(a5)	# _399, <retval>.y
 1826              	# main_raytrace.c:229: }
 1827 14bc 0324811B 		lw	s0,440(sp)		#,
 1828              	# main_raytrace.c:41:   return V;
 1829 14c0 23A09700 		sw	s1,0(a5)	# _397, <retval>.x
 1830 14c4 23A4A700 		sw	a0,8(a5)	# _35, <retval>.z
 1831              	# main_raytrace.c:229: }
 1832 14c8 8324411B 		lw	s1,436(sp)		#,
 1833 14cc 8329C11A 		lw	s3,428(sp)		#,
 1834 14d0 032A811A 		lw	s4,424(sp)		#,
 1835 14d4 832A411A 		lw	s5,420(sp)		#,
 1836 14d8 032B011A 		lw	s6,416(sp)		#,
 1837 14dc 832BC119 		lw	s7,412(sp)		#,
 1838 14e0 032C8119 		lw	s8,408(sp)		#,
 1839 14e4 832C4119 		lw	s9,404(sp)		#,
 1840 14e8 032D0119 		lw	s10,400(sp)		#,
 1841 14ec 832DC118 		lw	s11,396(sp)		#,
 1842 14f0 13850700 		mv	a0,a5	#, .result_ptr
 1843 14f4 1301011C 		addi	sp,sp,448	#,,
 1844 14f8 67800000 		jr	ra		#
 1845              	.L143:
 1846 14fc 930A0600 		mv	s5,a2	# tmp233, tmp502
 1847              	# main_raytrace.c:190:   if (depth>2 || !scene_intersect(orig, dir, spheres, nb_spheres, &point, &N
 1848 1500 13050105 		addi	a0,sp,80	#, tmp621,
 1849 1504 1306C000 		li	a2,12		#,
 1850 1508 138B0800 		mv	s6,a7	# depth, tmp507
 1851 150c 97000000 		call	memcpy		#
 1851      E7800000 
 1852 1514 1306C000 		li	a2,12		#,
 1853 1518 93850A00 		mv	a1,s5	#, tmp233
 1854 151c 13050104 		addi	a0,sp,64	#,,
 1855 1520 97000000 		call	memcpy		#
 1855      E7800000 
 1856 1528 83268101 		lw	a3,24(sp)		#, %sfp
 1857 152c 03264101 		lw	a2,20(sp)		#, %sfp
 1858 1530 13088113 		addi	a6,sp,312	#,,
 1859 1534 93078107 		addi	a5,sp,120	#, tmp622,
 1860 1538 1307C106 		addi	a4,sp,108	#,,
 1861 153c 93050104 		addi	a1,sp,64	#,,
 1862 1540 13050105 		addi	a0,sp,80	#, tmp623,
 1863 1544 97000000 		call	scene_intersect		#
 1863      E7800000 
 1864              	# main_raytrace.c:190:   if (depth>2 || !scene_intersect(orig, dir, spheres, nb_spheres, &point, &N
 1865 154c E30605E8 		beq	a0,zero,.L145	#, tmp515,,
 1866              	# main_raytrace.c:195:   vec3 reflect_dir = vec3_normalize(reflect(dir, N));
 1867 1550 1306C000 		li	a2,12		#,
 1868 1554 93850A00 		mv	a1,s5	#, tmp233
 1869 1558 13050105 		addi	a0,sp,80	#, tmp624,
 1870 155c 97000000 		call	memcpy		#
 1870      E7800000 
 1871 1564 1306C000 		li	a2,12		#,
 1872 1568 93058107 		addi	a1,sp,120	#, tmp625,
 1873 156c 13050104 		addi	a0,sp,64	#,,
 1874 1570 97000000 		call	memcpy		#
 1874      E7800000 
 1875 1578 13060104 		addi	a2,sp,64	#,,
 1876 157c 93050105 		addi	a1,sp,80	#, tmp626,
 1877 1580 1305C10F 		addi	a0,sp,252	#, tmp627,
 1878 1584 97000000 		call	reflect		#
 1878      E7800000 
 1879 158c 1306C000 		li	a2,12		#,
 1880 1590 9305C10F 		addi	a1,sp,252	#, tmp628,
 1881 1594 13050105 		addi	a0,sp,80	#, tmp629,
 1882 1598 97000000 		call	memcpy		#
 1882      E7800000 
 1883 15a0 93050105 		addi	a1,sp,80	#, tmp630,
 1884 15a4 13054108 		addi	a0,sp,132	#,,
 1885 15a8 97000000 		call	vec3_normalize		#
 1885      E7800000 
 1886              	# main_raytrace.c:196:   vec3 refract_dir = vec3_normalize(refract(dir, N, material.refractive_inde
 1887 15b0 1306C000 		li	a2,12		#,
 1888 15b4 93850A00 		mv	a1,s5	#, tmp233
 1889 15b8 13050105 		addi	a0,sp,80	#, tmp631,
 1890 15bc 97000000 		call	memcpy		#
 1890      E7800000 
 1891 15c4 1306C000 		li	a2,12		#,
 1892 15c8 93058107 		addi	a1,sp,120	#, tmp632,
 1893 15cc 13050104 		addi	a0,sp,64	#,,
 1894 15d0 97000000 		call	memcpy		#
 1894      E7800000 
 1895 15d8 83268113 		lw	a3,312(sp)		#, material.refractive_index
 1896 15dc 13870400 		mv	a4,s1	#, tmp240
 1897 15e0 13060104 		addi	a2,sp,64	#,,
 1898 15e4 93050105 		addi	a1,sp,80	#, tmp633,
 1899 15e8 13058110 		addi	a0,sp,264	#, tmp634,
 1900 15ec 97000000 		call	refract		#
 1900      E7800000 
 1901 15f4 1306C000 		li	a2,12		#,
 1902 15f8 93058110 		addi	a1,sp,264	#, tmp635,
 1903 15fc 13050105 		addi	a0,sp,80	#, tmp636,
 1904 1600 97000000 		call	memcpy		#
 1904      E7800000 
 1905 1608 93050105 		addi	a1,sp,80	#, tmp637,
 1906 160c 13050109 		addi	a0,sp,144	#,,
 1907 1610 97000000 		call	vec3_normalize		#
 1907      E7800000 
 1908 1618 832B8107 		lw	s7,120(sp)		# V$x, N.x
 1909              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1910 161c 83254108 		lw	a1,132(sp)		#, reflect_dir.x
 1911 1620 832CC107 		lw	s9,124(sp)		# V$y, N.y
 1912 1624 13850B00 		mv	a0,s7	#, V$x
 1913 1628 97000000 		call	__mulsf3		#
 1913      E7800000 
 1914              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1915 1630 83258108 		lw	a1,136(sp)		#, reflect_dir.y
 1916              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1917 1634 93040500 		mv	s1,a0	# tmp312, tmp516
 1918              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1919 1638 13850C00 		mv	a0,s9	#, V$y
 1920 163c 97000000 		call	__mulsf3		#
 1920      E7800000 
 1921 1644 93050500 		mv	a1,a0	# tmp517,
 1922              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1923 1648 13850400 		mv	a0,s1	#, tmp312
 1924 164c 97000000 		call	__addsf3		#
 1924      E7800000 
 1925 1654 032C0108 		lw	s8,128(sp)		# V$z, N.z
 1926              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1927 1658 8325C108 		lw	a1,140(sp)		#, reflect_dir.z
 1928              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1929 165c 93040500 		mv	s1,a0	# tmp314, tmp518
 1930              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1931 1660 13050C00 		mv	a0,s8	#, V$z
 1932 1664 97000000 		call	__mulsf3		#
 1932      E7800000 
 1933 166c 93050500 		mv	a1,a0	# tmp519,
 1934              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1935 1670 13850400 		mv	a0,s1	#, tmp314
 1936 1674 97000000 		call	__addsf3		#
 1936      E7800000 
 1937              	# main_raytrace.c:198:   vec3 reflect_orig = vec3_dot(reflect_dir,N) < 0 ? vec3_sub(point,vec3_scal
 1938 167c 93050000 		mv	a1,zero	#,
 1939 1680 97000000 		call	__ltsf2		#
 1939      E7800000 
 1940 1688 B7040000 		lui	s1,%hi(.LC21)	# tmp492,
 1941 168c 0329C106 		lw	s2,108(sp)		# pretmp_406, point.x
 1942 1690 83290107 		lw	s3,112(sp)		# pretmp_407, point.y
 1943 1694 032A4107 		lw	s4,116(sp)		# pretmp_408, point.z
 1944              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1945 1698 83A50400 		lw	a1,%lo(.LC21)(s1)		#,
 1946              	# main_raytrace.c:198:   vec3 reflect_orig = vec3_dot(reflect_dir,N) < 0 ? vec3_sub(point,vec3_scal
 1947 169c 635C0536 		bge	a0,zero,.L175	#, tmp520,,
 1948              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1949 16a0 13850B00 		mv	a0,s7	#, V$x
 1950 16a4 97000000 		call	__mulsf3		#
 1950      E7800000 
 1951 16ac 93050500 		mv	a1,a0	# tmp521,
 1952              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1953 16b0 13050900 		mv	a0,s2	#, pretmp_406
 1954 16b4 97000000 		call	__subsf3		#
 1954      E7800000 
 1955              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1956 16bc 83A50400 		lw	a1,%lo(.LC21)(s1)		#,
 1957              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1958 16c0 930D0500 		mv	s11,a0	# _381, tmp522
 1959              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1960 16c4 13850C00 		mv	a0,s9	#, V$y
 1961 16c8 97000000 		call	__mulsf3		#
 1961      E7800000 
 1962 16d0 93050500 		mv	a1,a0	# tmp523,
 1963              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1964 16d4 13850900 		mv	a0,s3	#, pretmp_407
 1965 16d8 97000000 		call	__subsf3		#
 1965      E7800000 
 1966              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1967 16e0 83A50400 		lw	a1,%lo(.LC21)(s1)		#,
 1968              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1969 16e4 130D0500 		mv	s10,a0	# _383, tmp524
 1970              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1971 16e8 13050C00 		mv	a0,s8	#, V$z
 1972 16ec 97000000 		call	__mulsf3		#
 1972      E7800000 
 1973 16f4 93050500 		mv	a1,a0	# tmp525,
 1974              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 1975 16f8 13050A00 		mv	a0,s4	#, pretmp_408
 1976 16fc 97000000 		call	__subsf3		#
 1976      E7800000 
 1977              	.L148:
 1978              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1979 1704 83A50400 		lw	a1,%lo(.LC21)(s1)		#,
 1980              	# main_raytrace.c:41:   return V;
 1981 1708 2322A10A 		sw	a0,164(sp)	# _385, reflect_orig.z
 1982              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1983 170c 13850B00 		mv	a0,s7	#, V$x
 1984              	# main_raytrace.c:41:   return V;
 1985 1710 232EB109 		sw	s11,156(sp)	# _381, reflect_orig.x
 1986 1714 2320A10B 		sw	s10,160(sp)	# _383, reflect_orig.y
 1987              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 1988 1718 97000000 		call	__mulsf3		#
 1988      E7800000 
 1989 1720 83A50400 		lw	a1,%lo(.LC21)(s1)		#,
 1990 1724 2322A100 		sw	a0,4(sp)	# tmp530, %sfp
 1991 1728 13850C00 		mv	a0,s9	#, V$y
 1992 172c 97000000 		call	__mulsf3		#
 1992      E7800000 
 1993 1734 83A50400 		lw	a1,%lo(.LC21)(s1)		#,
 1994 1738 2324A100 		sw	a0,8(sp)	# tmp531, %sfp
 1995 173c 13050C00 		mv	a0,s8	#, V$z
 1996 1740 97000000 		call	__mulsf3		#
 1996      E7800000 
 1997              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 1998 1748 83250109 		lw	a1,144(sp)		#, refract_dir.x
 1999              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2000 174c 2326A100 		sw	a0,12(sp)	# tmp532, %sfp
 2001              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2002 1750 13850B00 		mv	a0,s7	#, V$x
 2003 1754 97000000 		call	__mulsf3		#
 2003      E7800000 
 2004              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2005 175c 83254109 		lw	a1,148(sp)		#, refract_dir.y
 2006              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2007 1760 93040500 		mv	s1,a0	# tmp342, tmp533
 2008              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2009 1764 13850C00 		mv	a0,s9	#, V$y
 2010 1768 97000000 		call	__mulsf3		#
 2010      E7800000 
 2011 1770 93050500 		mv	a1,a0	# tmp534,
 2012              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2013 1774 13850400 		mv	a0,s1	#, tmp342
 2014 1778 97000000 		call	__addsf3		#
 2014      E7800000 
 2015              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2016 1780 83258109 		lw	a1,152(sp)		#, refract_dir.z
 2017              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2018 1784 93040500 		mv	s1,a0	# tmp344, tmp535
 2019              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2020 1788 13050C00 		mv	a0,s8	#, V$z
 2021 178c 97000000 		call	__mulsf3		#
 2021      E7800000 
 2022 1794 93050500 		mv	a1,a0	# tmp536,
 2023              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2024 1798 13850400 		mv	a0,s1	#, tmp344
 2025 179c 97000000 		call	__addsf3		#
 2025      E7800000 
 2026              	# main_raytrace.c:199:   vec3 refract_orig = vec3_dot(refract_dir,N) < 0 ? vec3_sub(point,vec3_scal
 2027 17a4 93050000 		mv	a1,zero	#,
 2028 17a8 97000000 		call	__ltsf2		#
 2028      E7800000 
 2029 17b0 6350052C 		bge	a0,zero,.L176	#, tmp537,,
 2030              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 2031 17b4 83254100 		lw	a1,4(sp)		#, %sfp
 2032 17b8 13050900 		mv	a0,s2	#, pretmp_406
 2033 17bc 97000000 		call	__subsf3		#
 2033      E7800000 
 2034 17c4 83258100 		lw	a1,8(sp)		#, %sfp
 2035 17c8 130D0500 		mv	s10,a0	# _387, tmp538
 2036 17cc 13850900 		mv	a0,s3	#, pretmp_407
 2037 17d0 97000000 		call	__subsf3		#
 2037      E7800000 
 2038 17d8 8325C100 		lw	a1,12(sp)		#, %sfp
 2039 17dc 93040500 		mv	s1,a0	# _389, tmp539
 2040 17e0 13050A00 		mv	a0,s4	#, pretmp_408
 2041 17e4 97000000 		call	__subsf3		#
 2041      E7800000 
 2042              	.L151:
 2043              	# main_raytrace.c:41:   return V;
 2044 17ec 2328A10A 		sw	a0,176(sp)	# _391, refract_orig.z
 2045              	# main_raytrace.c:200:   vec3 reflect_color = cast_ray(reflect_orig, reflect_dir, spheres, nb_spher
 2046 17f0 1306C000 		li	a2,12		#,
 2047 17f4 9305C109 		addi	a1,sp,156	#,,
 2048 17f8 13050105 		addi	a0,sp,80	#, tmp638,
 2049              	# main_raytrace.c:41:   return V;
 2050 17fc 2326910A 		sw	s1,172(sp)	# _389, refract_orig.y
 2051 1800 2324A10B 		sw	s10,168(sp)	# _387, refract_orig.x
 2052              	# main_raytrace.c:200:   vec3 reflect_color = cast_ray(reflect_orig, reflect_dir, spheres, nb_spher
 2053 1804 97000000 		call	memcpy		#
 2053      E7800000 
 2054 180c 1306C000 		li	a2,12		#,
 2055 1810 93054108 		addi	a1,sp,132	#,,
 2056 1814 13050104 		addi	a0,sp,64	#,,
 2057 1818 97000000 		call	memcpy		#
 2057      E7800000 
 2058 1820 0328C102 		lw	a6,44(sp)		#, %sfp
 2059 1824 03278101 		lw	a4,24(sp)		#, %sfp
 2060 1828 83264101 		lw	a3,20(sp)		#, %sfp
 2061 182c 130B1B00 		addi	s6,s6,1	#, _8, depth
 2062 1830 93080B00 		mv	a7,s6	#, _8
 2063 1834 93070400 		mv	a5,s0	#, lights
 2064 1838 13060104 		addi	a2,sp,64	#,,
 2065 183c 93050105 		addi	a1,sp,80	#, tmp639,
 2066 1840 1305410B 		addi	a0,sp,180	#,,
 2067 1844 97000000 		call	cast_ray		#
 2067      E7800000 
 2068              	# main_raytrace.c:201:   vec3 refract_color = cast_ray(refract_orig, refract_dir, spheres, nb_spher
 2069 184c 1306C000 		li	a2,12		#,
 2070 1850 9305810A 		addi	a1,sp,168	#,,
 2071 1854 13050105 		addi	a0,sp,80	#, tmp640,
 2072 1858 97000000 		call	memcpy		#
 2072      E7800000 
 2073 1860 1306C000 		li	a2,12		#,
 2074 1864 93050109 		addi	a1,sp,144	#,,
 2075 1868 13050104 		addi	a0,sp,64	#,,
 2076 186c 97000000 		call	memcpy		#
 2076      E7800000 
 2077 1874 0328C102 		lw	a6,44(sp)		#, %sfp
 2078 1878 03278101 		lw	a4,24(sp)		#, %sfp
 2079 187c 83264101 		lw	a3,20(sp)		#, %sfp
 2080 1880 93080B00 		mv	a7,s6	#, _8
 2081 1884 93070400 		mv	a5,s0	#, lights
 2082 1888 13060104 		addi	a2,sp,64	#,,
 2083 188c 93050105 		addi	a1,sp,80	#, tmp641,
 2084 1890 1305010C 		addi	a0,sp,192	#,,
 2085              	# main_raytrace.c:203:   float diffuse_light_intensity = 0, specular_light_intensity = 0;
 2086 1894 93040000 		mv	s1,zero	# specular_light_intensity,
 2087              	# main_raytrace.c:201:   vec3 refract_color = cast_ray(refract_orig, refract_dir, spheres, nb_spher
 2088 1898 97000000 		call	cast_ray		#
 2088      E7800000 
 2089              	# main_raytrace.c:203:   float diffuse_light_intensity = 0, specular_light_intensity = 0;
 2090 18a0 138B0400 		mv	s6,s1	# diffuse_light_intensity,
 2091              	# main_raytrace.c:204:   for (int i=0; i<nb_lights; i++) {
 2092 18a4 232E0100 		sw	zero,28(sp)	#, %sfp
 2093              	.L152:
 2094              	# main_raytrace.c:204:   for (int i=0; i<nb_lights; i++) {
 2095 18a8 8327C101 		lw	a5,28(sp)		# i, %sfp
 2096 18ac 0327C102 		lw	a4,44(sp)		# nb_lights, %sfp
 2097 18b0 63CEE71E 		blt	a5,a4,.L162	#, i, nb_lights,
 2098              	# main_raytrace.c:224:   vec3 alu_rslt = vec3_scale(diffuse_light_intensity * material.albedo.x, ma
 2099 18b4 8325C113 		lw	a1,316(sp)		#, material.albedo.x
 2100 18b8 13050B00 		mv	a0,s6	#, diffuse_light_intensity
 2101 18bc 97000000 		call	__mulsf3		#
 2101      E7800000 
 2102              	# main_raytrace.c:225:   alu_rslt = vec3_add(alu_rslt, vec3_scale(specular_light_intensity * materi
 2103 18c4 83250114 		lw	a1,320(sp)		#, material.albedo.y
 2104              	# main_raytrace.c:224:   vec3 alu_rslt = vec3_scale(diffuse_light_intensity * material.albedo.x, ma
 2105 18c8 93090500 		mv	s3,a0	# tmp471, tmp595
 2106              	# main_raytrace.c:225:   alu_rslt = vec3_add(alu_rslt, vec3_scale(specular_light_intensity * materi
 2107 18cc 13850400 		mv	a0,s1	#, specular_light_intensity
 2108 18d0 97000000 		call	__mulsf3		#
 2108      E7800000 
 2109              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2110 18d8 8325C114 		lw	a1,332(sp)		#, material.diffuse_color.x
 2111              	# main_raytrace.c:225:   alu_rslt = vec3_add(alu_rslt, vec3_scale(specular_light_intensity * materi
 2112 18dc 13090500 		mv	s2,a0	# tmp472, tmp596
 2113              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2114 18e0 13850900 		mv	a0,s3	#, tmp471
 2115 18e4 97000000 		call	__mulsf3		#
 2115      E7800000 
 2116              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2117 18ec 93050900 		mv	a1,s2	#, tmp472
 2118 18f0 97000000 		call	__addsf3		#
 2118      E7800000 
 2119              	# main_raytrace.c:226:   alu_rslt = vec3_add(alu_rslt, vec3_scale(material.albedo.z, reflect_color)
 2120 18f8 832A4114 		lw	s5,324(sp)		# _24, material.albedo.z
 2121              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2122 18fc 8325410B 		lw	a1,180(sp)		#, reflect_color.x
 2123              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2124 1900 13040500 		mv	s0,a0	# tmp474, tmp597
 2125              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2126 1904 13850A00 		mv	a0,s5	#, _24
 2127 1908 97000000 		call	__mulsf3		#
 2127      E7800000 
 2128 1910 93050500 		mv	a1,a0	# tmp598,
 2129              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2130 1914 13050400 		mv	a0,s0	#, tmp474
 2131 1918 97000000 		call	__addsf3		#
 2131      E7800000 
 2132              	# main_raytrace.c:227:   alu_rslt = vec3_add(alu_rslt, vec3_scale(material.albedo.w, refract_color)
 2133 1920 032A8114 		lw	s4,328(sp)		# _25, material.albedo.w
 2134              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2135 1924 8325010C 		lw	a1,192(sp)		#, refract_color.x
 2136              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2137 1928 13040500 		mv	s0,a0	# tmp476, tmp599
 2138              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2139 192c 13050A00 		mv	a0,s4	#, _25
 2140 1930 97000000 		call	__mulsf3		#
 2140      E7800000 
 2141 1938 93050500 		mv	a1,a0	# tmp600,
 2142              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2143 193c 13050400 		mv	a0,s0	#, tmp476
 2144 1940 97000000 		call	__addsf3		#
 2144      E7800000 
 2145              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2146 1948 83250115 		lw	a1,336(sp)		#, material.diffuse_color.y
 2147              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2148 194c 93040500 		mv	s1,a0	# _397, tmp601
 2149              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2150 1950 13850900 		mv	a0,s3	#, tmp471
 2151 1954 97000000 		call	__mulsf3		#
 2151      E7800000 
 2152              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2153 195c 93050900 		mv	a1,s2	#, tmp472
 2154 1960 97000000 		call	__addsf3		#
 2154      E7800000 
 2155              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2156 1968 8325810B 		lw	a1,184(sp)		#, reflect_color.y
 2157              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2158 196c 13040500 		mv	s0,a0	# tmp480, tmp602
 2159              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2160 1970 13850A00 		mv	a0,s5	#, _24
 2161 1974 97000000 		call	__mulsf3		#
 2161      E7800000 
 2162 197c 93050500 		mv	a1,a0	# tmp603,
 2163              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2164 1980 13050400 		mv	a0,s0	#, tmp480
 2165 1984 97000000 		call	__addsf3		#
 2165      E7800000 
 2166              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2167 198c 8325410C 		lw	a1,196(sp)		#, refract_color.y
 2168              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2169 1990 13040500 		mv	s0,a0	# tmp482, tmp604
 2170              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2171 1994 13050A00 		mv	a0,s4	#, _25
 2172 1998 97000000 		call	__mulsf3		#
 2172      E7800000 
 2173 19a0 93050500 		mv	a1,a0	# tmp605,
 2174              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2175 19a4 13050400 		mv	a0,s0	#, tmp482
 2176 19a8 97000000 		call	__addsf3		#
 2176      E7800000 
 2177              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2178 19b0 83254115 		lw	a1,340(sp)		#, material.diffuse_color.z
 2179              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2180 19b4 13040500 		mv	s0,a0	# _399, tmp606
 2181              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2182 19b8 13850900 		mv	a0,s3	#, tmp471
 2183 19bc 97000000 		call	__mulsf3		#
 2183      E7800000 
 2184              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2185 19c4 93050900 		mv	a1,s2	#, tmp472
 2186 19c8 97000000 		call	__addsf3		#
 2186      E7800000 
 2187              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2188 19d0 8325C10B 		lw	a1,188(sp)		#, reflect_color.z
 2189              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2190 19d4 13090500 		mv	s2,a0	# tmp486, tmp607
 2191              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2192 19d8 13850A00 		mv	a0,s5	#, _24
 2193 19dc 97000000 		call	__mulsf3		#
 2193      E7800000 
 2194 19e4 93050500 		mv	a1,a0	# tmp608,
 2195              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2196 19e8 13050900 		mv	a0,s2	#, tmp486
 2197 19ec 97000000 		call	__addsf3		#
 2197      E7800000 
 2198              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2199 19f4 8325810C 		lw	a1,200(sp)		#, refract_color.z
 2200              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2201 19f8 13090500 		mv	s2,a0	# tmp488, tmp609
 2202              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2203 19fc 13050A00 		mv	a0,s4	#, _25
 2204 1a00 97000000 		call	__mulsf3		#
 2204      E7800000 
 2205 1a08 93050500 		mv	a1,a0	# tmp610,
 2206              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2207 1a0c 13050900 		mv	a0,s2	#, tmp488
 2208 1a10 6FF05FA9 		j	.L180		#
 2209              	.L175:
 2210              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2211 1a14 13850B00 		mv	a0,s7	#, V$x
 2212 1a18 97000000 		call	__mulsf3		#
 2212      E7800000 
 2213              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2214 1a20 93050900 		mv	a1,s2	#, pretmp_406
 2215 1a24 97000000 		call	__addsf3		#
 2215      E7800000 
 2216              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2217 1a2c 83A50400 		lw	a1,%lo(.LC21)(s1)		#,
 2218              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2219 1a30 930D0500 		mv	s11,a0	# _381, tmp527
 2220              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2221 1a34 13850C00 		mv	a0,s9	#, V$y
 2222 1a38 97000000 		call	__mulsf3		#
 2222      E7800000 
 2223              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2224 1a40 93850900 		mv	a1,s3	#, pretmp_407
 2225 1a44 97000000 		call	__addsf3		#
 2225      E7800000 
 2226              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2227 1a4c 83A50400 		lw	a1,%lo(.LC21)(s1)		#,
 2228              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2229 1a50 130D0500 		mv	s10,a0	# _383, tmp528
 2230              	# main_raytrace.c:54: static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.
 2231 1a54 13050C00 		mv	a0,s8	#, V$z
 2232 1a58 97000000 		call	__mulsf3		#
 2232      E7800000 
 2233              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2234 1a60 93050A00 		mv	a1,s4	#, pretmp_408
 2235 1a64 97000000 		call	__addsf3		#
 2235      E7800000 
 2236 1a6c 6FF09FC9 		j	.L148		#
 2237              	.L176:
 2238 1a70 03254100 		lw	a0,4(sp)		#, %sfp
 2239 1a74 93050900 		mv	a1,s2	#, pretmp_406
 2240 1a78 97000000 		call	__addsf3		#
 2240      E7800000 
 2241 1a80 130D0500 		mv	s10,a0	# _387, tmp541
 2242 1a84 03258100 		lw	a0,8(sp)		#, %sfp
 2243 1a88 93850900 		mv	a1,s3	#, pretmp_407
 2244 1a8c 97000000 		call	__addsf3		#
 2244      E7800000 
 2245 1a94 93040500 		mv	s1,a0	# _389, tmp542
 2246 1a98 0325C100 		lw	a0,12(sp)		#, %sfp
 2247 1a9c 93050A00 		mv	a1,s4	#, pretmp_408
 2248 1aa0 97000000 		call	__addsf3		#
 2248      E7800000 
 2249 1aa8 6FF05FD4 		j	.L151		#
 2250              	.L162:
 2251              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 2252 1aac 03254400 		lw	a0,4(s0)		#, MEM[(float *)_211 + 4B]
 2253 1ab0 93850900 		mv	a1,s3	#, pretmp_407
 2254 1ab4 97000000 		call	__subsf3		#
 2254      E7800000 
 2255 1abc 930D0500 		mv	s11,a0	# tmp376, tmp544
 2256 1ac0 03258400 		lw	a0,8(s0)		#, MEM[(float *)_211 + 8B]
 2257 1ac4 93050A00 		mv	a1,s4	#, pretmp_408
 2258 1ac8 97000000 		call	__subsf3		#
 2258      E7800000 
 2259 1ad0 130D0500 		mv	s10,a0	# tmp377, tmp545
 2260 1ad4 03250400 		lw	a0,0(s0)		#, MEM[(float *)_211]
 2261 1ad8 93050900 		mv	a1,s2	#, pretmp_406
 2262 1adc 97000000 		call	__subsf3		#
 2262      E7800000 
 2263              	# main_raytrace.c:205:     vec3  light_dir = vec3_normalize(vec3_sub(lights[i].position,point));
 2264 1ae4 1306C000 		li	a2,12		#,
 2265              	# main_raytrace.c:41:   return V;
 2266 1ae8 232AA110 		sw	a0,276(sp)	# tmp546, D.2133.x
 2267              	# main_raytrace.c:205:     vec3  light_dir = vec3_normalize(vec3_sub(lights[i].position,point));
 2268 1aec 93054111 		addi	a1,sp,276	#, tmp642,
 2269 1af0 13050105 		addi	a0,sp,80	#, tmp643,
 2270              	# main_raytrace.c:41:   return V;
 2271 1af4 232CB111 		sw	s11,280(sp)	# tmp376, D.2133.y
 2272 1af8 232EA111 		sw	s10,284(sp)	# tmp377, D.2133.z
 2273              	# main_raytrace.c:205:     vec3  light_dir = vec3_normalize(vec3_sub(lights[i].position,point));
 2274 1afc 97000000 		call	memcpy		#
 2274      E7800000 
 2275 1b04 93050105 		addi	a1,sp,80	#, tmp644,
 2276 1b08 1305C10C 		addi	a0,sp,204	#, tmp645,
 2277 1b0c 97000000 		call	vec3_normalize		#
 2277      E7800000 
 2278              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 2279 1b14 03250400 		lw	a0,0(s0)		#, MEM[(float *)_211]
 2280 1b18 93050900 		mv	a1,s2	#, pretmp_406
 2281 1b1c 97000000 		call	__subsf3		#
 2281      E7800000 
 2282 1b24 130D0500 		mv	s10,a0	# tmp385, tmp547
 2283 1b28 03254400 		lw	a0,4(s0)		#, MEM[(float *)_211 + 4B]
 2284 1b2c 93850900 		mv	a1,s3	#, pretmp_407
 2285 1b30 97000000 		call	__subsf3		#
 2285      E7800000 
 2286 1b38 2320A102 		sw	a0,32(sp)	# tmp386, %sfp
 2287 1b3c 03258400 		lw	a0,8(s0)		#, MEM[(float *)_211 + 8B]
 2288 1b40 93050A00 		mv	a1,s4	#, pretmp_408
 2289 1b44 97000000 		call	__subsf3		#
 2289      E7800000 
 2290 1b4c 930D0500 		mv	s11,a0	# tmp387, tmp549
 2291              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2292 1b50 93050D00 		mv	a1,s10	#, tmp385
 2293 1b54 13050D00 		mv	a0,s10	#, tmp11
 2294 1b58 97000000 		call	__mulsf3		#
 2294      E7800000 
 2295              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2296 1b60 83270102 		lw	a5,32(sp)		# tmp386, %sfp
 2297              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2298 1b64 130D0500 		mv	s10,a0	# tmp388, tmp550
 2299              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2300 1b68 93850700 		mv	a1,a5	#, tmp386
 2301 1b6c 13850700 		mv	a0,a5	#, tmp11
 2302 1b70 97000000 		call	__mulsf3		#
 2302      E7800000 
 2303 1b78 93050500 		mv	a1,a0	# tmp551,
 2304              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2305 1b7c 13050D00 		mv	a0,s10	#, tmp388
 2306 1b80 97000000 		call	__addsf3		#
 2306      E7800000 
 2307 1b88 130D0500 		mv	s10,a0	# tmp390, tmp552
 2308              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2309 1b8c 93850D00 		mv	a1,s11	#, tmp387
 2310 1b90 13850D00 		mv	a0,s11	#, tmp11
 2311 1b94 97000000 		call	__mulsf3		#
 2311      E7800000 
 2312 1b9c 93050500 		mv	a1,a0	# tmp553,
 2313              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2314 1ba0 13050D00 		mv	a0,s10	#, tmp390
 2315 1ba4 97000000 		call	__addsf3		#
 2315      E7800000 
 2316 1bac 97000000 		call	sqrtf		#
 2316      E7800000 
 2317 1bb4 8327C10C 		lw	a5,204(sp)		# U$x, light_dir.x
 2318 1bb8 232AA102 		sw	a0,52(sp)	# tmp554, %sfp
 2319              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2320 1bbc 13850B00 		mv	a0,s7	#, V$x
 2321 1bc0 2320F102 		sw	a5,32(sp)	# U$x, %sfp
 2322 1bc4 8327010D 		lw	a5,208(sp)		# U$y, light_dir.y
 2323 1bc8 83250102 		lw	a1,32(sp)		#, %sfp
 2324 1bcc 2322F102 		sw	a5,36(sp)	# U$y, %sfp
 2325 1bd0 8327410D 		lw	a5,212(sp)		# U$z, light_dir.z
 2326 1bd4 2324F102 		sw	a5,40(sp)	# U$z, %sfp
 2327 1bd8 97000000 		call	__mulsf3		#
 2327      E7800000 
 2328              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2329 1be0 83254102 		lw	a1,36(sp)		#, %sfp
 2330              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2331 1be4 130D0500 		mv	s10,a0	# tmp393, tmp555
 2332              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2333 1be8 13850C00 		mv	a0,s9	#, V$y
 2334 1bec 97000000 		call	__mulsf3		#
 2334      E7800000 
 2335 1bf4 93050500 		mv	a1,a0	# tmp556,
 2336              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2337 1bf8 13050D00 		mv	a0,s10	#, tmp393
 2338 1bfc 97000000 		call	__addsf3		#
 2338      E7800000 
 2339              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2340 1c04 83258102 		lw	a1,40(sp)		#, %sfp
 2341              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2342 1c08 130D0500 		mv	s10,a0	# tmp395, tmp557
 2343              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2344 1c0c 13050C00 		mv	a0,s8	#, V$z
 2345 1c10 97000000 		call	__mulsf3		#
 2345      E7800000 
 2346 1c18 93050500 		mv	a1,a0	# tmp558,
 2347              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2348 1c1c 13050D00 		mv	a0,s10	#, tmp395
 2349 1c20 97000000 		call	__addsf3		#
 2349      E7800000 
 2350              	# main_raytrace.c:208:     vec3 shadow_orig = vec3_dot(light_dir,N) < 0 ? vec3_sub(point,vec3_scale
 2351 1c28 93050000 		mv	a1,zero	#,
 2352 1c2c 97000000 		call	__ltsf2		#
 2352      E7800000 
 2353 1c34 635A0534 		bge	a0,zero,.L177	#, tmp559,,
 2354              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 2355 1c38 83254100 		lw	a1,4(sp)		#, %sfp
 2356 1c3c 13050900 		mv	a0,s2	#, pretmp_406
 2357 1c40 97000000 		call	__subsf3		#
 2357      E7800000 
 2358 1c48 83258100 		lw	a1,8(sp)		#, %sfp
 2359 1c4c 130D0500 		mv	s10,a0	# shadow_orig$x, tmp560
 2360 1c50 13850900 		mv	a0,s3	#, pretmp_407
 2361 1c54 97000000 		call	__subsf3		#
 2361      E7800000 
 2362 1c5c 8325C100 		lw	a1,12(sp)		#, %sfp
 2363 1c60 930D0500 		mv	s11,a0	# shadow_orig$y, tmp561
 2364 1c64 13050A00 		mv	a0,s4	#, pretmp_408
 2365 1c68 97000000 		call	__subsf3		#
 2365      E7800000 
 2366              	.L179:
 2367              	# main_raytrace.c:212:     if (scene_intersect(shadow_orig, light_dir, spheres, nb_spheres, &shadow
 2368 1c70 2320A10E 		sw	a0,224(sp)	# shadow_orig$z, shadow_orig.z
 2369 1c74 232CA102 		sw	a0,56(sp)	# shadow_orig$z, %sfp
 2370 1c78 1306C000 		li	a2,12		#,
 2371 1c7c 9305810D 		addi	a1,sp,216	#, tmp649,
 2372 1c80 13050105 		addi	a0,sp,80	#, tmp650,
 2373 1c84 232CA10D 		sw	s10,216(sp)	# shadow_orig$x, shadow_orig.x
 2374 1c88 232EB10D 		sw	s11,220(sp)	# shadow_orig$y, shadow_orig.y
 2375 1c8c 97000000 		call	memcpy		#
 2375      E7800000 
 2376 1c94 1306C000 		li	a2,12		#,
 2377 1c98 9305C10C 		addi	a1,sp,204	#, tmp651,
 2378 1c9c 13050104 		addi	a0,sp,64	#,,
 2379 1ca0 97000000 		call	memcpy		#
 2379      E7800000 
 2380 1ca8 83268101 		lw	a3,24(sp)		#, %sfp
 2381 1cac 03264101 		lw	a2,20(sp)		#, %sfp
 2382 1cb0 1308C115 		addi	a6,sp,348	#, tmp652,
 2383 1cb4 9307010F 		addi	a5,sp,240	#, tmp653,
 2384 1cb8 1307410E 		addi	a4,sp,228	#, tmp654,
 2385 1cbc 93050104 		addi	a1,sp,64	#,,
 2386 1cc0 13050105 		addi	a0,sp,80	#, tmp655,
 2387 1cc4 97000000 		call	scene_intersect		#
 2387      E7800000 
 2388              	# main_raytrace.c:212:     if (scene_intersect(shadow_orig, light_dir, spheres, nb_spheres, &shadow
 2389 1ccc 83288103 		lw	a7,56(sp)		# shadow_orig$z, %sfp
 2390 1cd0 6300050C 		beq	a0,zero,.L156	#, tmp566,,
 2391              	# main_raytrace.c:52: static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.
 2392 1cd4 0325410E 		lw	a0,228(sp)		#, shadow_pt.x
 2393 1cd8 93050D00 		mv	a1,s10	#, shadow_orig$x
 2394 1cdc 232E1103 		sw	a7,60(sp)	# shadow_orig$z, %sfp
 2395 1ce0 97000000 		call	__subsf3		#
 2395      E7800000 
 2396 1ce8 130D0500 		mv	s10,a0	# tmp418, tmp567
 2397 1cec 0325810E 		lw	a0,232(sp)		#, shadow_pt.y
 2398 1cf0 93850D00 		mv	a1,s11	#, shadow_orig$y
 2399 1cf4 97000000 		call	__subsf3		#
 2399      E7800000 
 2400 1cfc 8328C103 		lw	a7,60(sp)		# shadow_orig$z, %sfp
 2401 1d00 232CA102 		sw	a0,56(sp)	# tmp419, %sfp
 2402 1d04 0325C10E 		lw	a0,236(sp)		#, shadow_pt.z
 2403 1d08 93850800 		mv	a1,a7	#, shadow_orig$z
 2404 1d0c 97000000 		call	__subsf3		#
 2404      E7800000 
 2405 1d14 930D0500 		mv	s11,a0	# tmp420, tmp569
 2406              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2407 1d18 93050D00 		mv	a1,s10	#, tmp418
 2408 1d1c 13050D00 		mv	a0,s10	#, tmp11
 2409 1d20 97000000 		call	__mulsf3		#
 2409      E7800000 
 2410              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2411 1d28 83278103 		lw	a5,56(sp)		# tmp419, %sfp
 2412              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2413 1d2c 130D0500 		mv	s10,a0	# tmp421, tmp570
 2414              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2415 1d30 93850700 		mv	a1,a5	#, tmp419
 2416 1d34 13850700 		mv	a0,a5	#, tmp11
 2417 1d38 97000000 		call	__mulsf3		#
 2417      E7800000 
 2418 1d40 93050500 		mv	a1,a0	# tmp571,
 2419              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2420 1d44 13050D00 		mv	a0,s10	#, tmp421
 2421 1d48 97000000 		call	__addsf3		#
 2421      E7800000 
 2422 1d50 130D0500 		mv	s10,a0	# tmp423, tmp572
 2423              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2424 1d54 93850D00 		mv	a1,s11	#, tmp420
 2425 1d58 13850D00 		mv	a0,s11	#, tmp11
 2426 1d5c 97000000 		call	__mulsf3		#
 2426      E7800000 
 2427 1d64 93050500 		mv	a1,a0	# tmp573,
 2428              	# main_raytrace.c:55: static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y
 2429 1d68 13050D00 		mv	a0,s10	#, tmp423
 2430 1d6c 97000000 		call	__addsf3		#
 2430      E7800000 
 2431 1d74 97000000 		call	sqrtf		#
 2431      E7800000 
 2432 1d7c 93050500 		mv	a1,a0	# tmp574,
 2433              	# main_raytrace.c:212:     if (scene_intersect(shadow_orig, light_dir, spheres, nb_spheres, &shadow
 2434 1d80 03254103 		lw	a0,52(sp)		#, %sfp
 2435 1d84 97000000 		call	__gtsf2		#
 2435      E7800000 
 2436 1d8c 6344A01E 		bgt	a0,zero,.L157	#, tmp575,,
 2437              	.L156:
 2438              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2439 1d90 83258107 		lw	a1,120(sp)		#, N.x
 2440 1d94 03250102 		lw	a0,32(sp)		#, %sfp
 2441              	# main_raytrace.c:216:     diffuse_light_intensity  += lights[i].intensity * max(0.f, vec3_dot(ligh
 2442 1d98 832DC400 		lw	s11,12(s0)		# _15, MEM[(float *)_211 + 12B]
 2443              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2444 1d9c 97000000 		call	__mulsf3		#
 2444      E7800000 
 2445 1da4 130D0500 		mv	s10,a0	# tmp427, tmp576
 2446              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2447 1da8 8325C107 		lw	a1,124(sp)		#, N.y
 2448 1dac 03254102 		lw	a0,36(sp)		#, %sfp
 2449 1db0 97000000 		call	__mulsf3		#
 2449      E7800000 
 2450 1db8 93050500 		mv	a1,a0	# tmp577,
 2451              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2452 1dbc 13050D00 		mv	a0,s10	#, tmp427
 2453 1dc0 97000000 		call	__addsf3		#
 2453      E7800000 
 2454 1dc8 130D0500 		mv	s10,a0	# tmp429, tmp578
 2455              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2456 1dcc 83250108 		lw	a1,128(sp)		#, N.z
 2457 1dd0 03258102 		lw	a0,40(sp)		#, %sfp
 2458 1dd4 97000000 		call	__mulsf3		#
 2458      E7800000 
 2459 1ddc 93050500 		mv	a1,a0	# tmp579,
 2460              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2461 1de0 13050D00 		mv	a0,s10	#, tmp429
 2462 1de4 97000000 		call	__addsf3		#
 2462      E7800000 
 2463              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2464 1dec 93050000 		mv	a1,zero	#,
 2465              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2466 1df0 130D0500 		mv	s10,a0	# iftmp.9_173, tmp580
 2467              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2468 1df4 97000000 		call	__ltsf2		#
 2468      E7800000 
 2469 1dfc 63540500 		bge	a0,zero,.L158	#, tmp581,,
 2470 1e00 130D0000 		mv	s10,zero	# iftmp.9_173,
 2471              	.L158:
 2472              	# main_raytrace.c:216:     diffuse_light_intensity  += lights[i].intensity * max(0.f, vec3_dot(ligh
 2473 1e04 93050D00 		mv	a1,s10	#, iftmp.9_173
 2474 1e08 13850D00 		mv	a0,s11	#, _15
 2475 1e0c 97000000 		call	__mulsf3		#
 2475      E7800000 
 2476 1e14 93050500 		mv	a1,a0	# tmp582,
 2477              	# main_raytrace.c:216:     diffuse_light_intensity  += lights[i].intensity * max(0.f, vec3_dot(ligh
 2478 1e18 13050B00 		mv	a0,s6	#, diffuse_light_intensity
 2479 1e1c 97000000 		call	__addsf3		#
 2479      E7800000 
 2480              	# main_raytrace.c:50: static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y,
 2481 1e24 83270102 		lw	a5,32(sp)		# tmp656, %sfp
 2482 1e28 370D0080 		li	s10,-2147483648		# tmp435,
 2483              	# main_raytrace.c:218:     float abc = max(0.f, vec3_dot(vec3_neg(reflect(vec3_neg(light_dir), N)),
 2484 1e2c 1306C000 		li	a2,12		#,
 2485              	# main_raytrace.c:50: static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y,
 2486 1e30 B347FD00 		xor	a5,s10,a5	# tmp656, tmp436, tmp435
 2487              	# main_raytrace.c:41:   return V;
 2488 1e34 2320F112 		sw	a5,288(sp)	# tmp436, D.2146.x
 2489              	# main_raytrace.c:50: static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y,
 2490 1e38 83274102 		lw	a5,36(sp)		# tmp657, %sfp
 2491              	# main_raytrace.c:218:     float abc = max(0.f, vec3_dot(vec3_neg(reflect(vec3_neg(light_dir), N)),
 2492 1e3c 93050112 		addi	a1,sp,288	#,,
 2493              	# main_raytrace.c:216:     diffuse_light_intensity  += lights[i].intensity * max(0.f, vec3_dot(ligh
 2494 1e40 130B0500 		mv	s6,a0	# diffuse_light_intensity, tmp583
 2495              	# main_raytrace.c:50: static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y,
 2496 1e44 B347FD00 		xor	a5,s10,a5	# tmp657, tmp438, tmp435
 2497              	# main_raytrace.c:41:   return V;
 2498 1e48 2322F112 		sw	a5,292(sp)	# tmp438, D.2146.y
 2499              	# main_raytrace.c:50: static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y,
 2500 1e4c 83278102 		lw	a5,40(sp)		# tmp658, %sfp
 2501              	# main_raytrace.c:218:     float abc = max(0.f, vec3_dot(vec3_neg(reflect(vec3_neg(light_dir), N)),
 2502 1e50 13050105 		addi	a0,sp,80	#, tmp659,
 2503              	# main_raytrace.c:50: static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y,
 2504 1e54 B347FD00 		xor	a5,s10,a5	# tmp658, tmp440, tmp435
 2505              	# main_raytrace.c:41:   return V;
 2506 1e58 2324F112 		sw	a5,296(sp)	# tmp440, D.2146.z
 2507              	# main_raytrace.c:218:     float abc = max(0.f, vec3_dot(vec3_neg(reflect(vec3_neg(light_dir), N)),
 2508 1e5c 97000000 		call	memcpy		#
 2508      E7800000 
 2509 1e64 1306C000 		li	a2,12		#,
 2510 1e68 93058107 		addi	a1,sp,120	#,,
 2511 1e6c 13050104 		addi	a0,sp,64	#,,
 2512 1e70 97000000 		call	memcpy		#
 2512      E7800000 
 2513 1e78 13060104 		addi	a2,sp,64	#,,
 2514 1e7c 93050105 		addi	a1,sp,80	#, tmp660,
 2515 1e80 1305C112 		addi	a0,sp,300	#,,
 2516 1e84 97000000 		call	reflect		#
 2516      E7800000 
 2517              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2518 1e8c 0325C112 		lw	a0,300(sp)		# D.2147.x, D.2147.x
 2519 1e90 83A50A00 		lw	a1,0(s5)		#, dir.x
 2520 1e94 3345A501 		xor	a0,a0,s10	# tmp435,, D.2147.x
 2521 1e98 97000000 		call	__mulsf3		#
 2521      E7800000 
 2522 1ea0 2320A102 		sw	a0,32(sp)	# tmp455, %sfp
 2523              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2524 1ea4 03250113 		lw	a0,304(sp)		# D.2147.y, D.2147.y
 2525 1ea8 83250103 		lw	a1,48(sp)		#, %sfp
 2526 1eac 3345A501 		xor	a0,a0,s10	# tmp435,, D.2147.y
 2527 1eb0 97000000 		call	__mulsf3		#
 2527      E7800000 
 2528              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2529 1eb8 83270102 		lw	a5,32(sp)		# tmp455, %sfp
 2530              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2531 1ebc 93050500 		mv	a1,a0	# tmp585,
 2532              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2533 1ec0 13850700 		mv	a0,a5	#, tmp455
 2534 1ec4 97000000 		call	__addsf3		#
 2534      E7800000 
 2535 1ecc 2320A102 		sw	a0,32(sp)	# tmp460, %sfp
 2536              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2537 1ed0 03254113 		lw	a0,308(sp)		# D.2147.z, D.2147.z
 2538 1ed4 83A58A00 		lw	a1,8(s5)		#, dir.z
 2539 1ed8 3345A501 		xor	a0,a0,s10	# tmp435,, D.2147.z
 2540 1edc 97000000 		call	__mulsf3		#
 2540      E7800000 
 2541              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2542 1ee4 83270102 		lw	a5,32(sp)		# tmp460, %sfp
 2543              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2544 1ee8 93050500 		mv	a1,a0	# tmp587,
 2545              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2546 1eec 13850700 		mv	a0,a5	#, tmp460
 2547 1ef0 97000000 		call	__addsf3		#
 2547      E7800000 
 2548              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2549 1ef8 93050000 		mv	a1,zero	#,
 2550              	# main_raytrace.c:53: static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V
 2551 1efc 130D0500 		mv	s10,a0	# tmp465, tmp588
 2552              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2553 1f00 97000000 		call	__ltsf2		#
 2553      E7800000 
 2554 1f08 63460506 		blt	a0,zero,.L157	#, tmp589,,
 2555              	# main_raytrace.c:220:     if(abc > 0.0f && def > 0.0f) {
 2556 1f0c 93050000 		mv	a1,zero	#,
 2557 1f10 13050D00 		mv	a0,s10	#, tmp465
 2558 1f14 97000000 		call	__gtsf2		#
 2558      E7800000 
 2559 1f1c 635CA004 		ble	a0,zero,.L157	#, tmp590,,
 2560              	# main_raytrace.c:219:     float def = material.specular_exponent;
 2561 1f20 83278115 		lw	a5,344(sp)		# def, material.specular_exponent
 2562              	# main_raytrace.c:220:     if(abc > 0.0f && def > 0.0f) {
 2563 1f24 93050000 		mv	a1,zero	#,
 2564 1f28 13850700 		mv	a0,a5	#, def
 2565 1f2c 2320F102 		sw	a5,32(sp)	# def, %sfp
 2566 1f30 97000000 		call	__gtsf2		#
 2566      E7800000 
 2567 1f38 635EA002 		ble	a0,zero,.L157	#, tmp591,,
 2568              	# main_raytrace.c:221:        specular_light_intensity += my_pow(abc,def)*lights[i].intensity;
 2569 1f3c 83270102 		lw	a5,32(sp)		# def, %sfp
 2570 1f40 13050D00 		mv	a0,s10	#, tmp465
 2571 1f44 93850700 		mv	a1,a5	#, def
 2572 1f48 97000000 		call	my_pow		#
 2572      E7800000 
 2573 1f50 93050500 		mv	a1,a0	# tmp592,
 2574              	# main_raytrace.c:221:        specular_light_intensity += my_pow(abc,def)*lights[i].intensity;
 2575 1f54 13850D00 		mv	a0,s11	#, _15
 2576 1f58 97000000 		call	__mulsf3		#
 2576      E7800000 
 2577 1f60 93050500 		mv	a1,a0	# tmp593,
 2578              	# main_raytrace.c:221:        specular_light_intensity += my_pow(abc,def)*lights[i].intensity;
 2579 1f64 13850400 		mv	a0,s1	#, specular_light_intensity
 2580 1f68 97000000 		call	__addsf3		#
 2580      E7800000 
 2581 1f70 93040500 		mv	s1,a0	# specular_light_intensity, tmp594
 2582              	.L157:
 2583              	# main_raytrace.c:204:   for (int i=0; i<nb_lights; i++) {
 2584 1f74 8327C101 		lw	a5,28(sp)		# i, %sfp
 2585 1f78 13040401 		addi	s0,s0,16	#, ivtmp.569, ivtmp.569
 2586 1f7c 93871700 		addi	a5,a5,1	#, i, i
 2587 1f80 232EF100 		sw	a5,28(sp)	# i, %sfp
 2588 1f84 6FF05F92 		j	.L152		#
 2589              	.L177:
 2590              	# main_raytrace.c:51: static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.
 2591 1f88 03254100 		lw	a0,4(sp)		#, %sfp
 2592 1f8c 93050900 		mv	a1,s2	#, pretmp_406
 2593 1f90 97000000 		call	__addsf3		#
 2593      E7800000 
 2594 1f98 130D0500 		mv	s10,a0	# shadow_orig$x, tmp563
 2595 1f9c 03258100 		lw	a0,8(sp)		#, %sfp
 2596 1fa0 93850900 		mv	a1,s3	#, pretmp_407
 2597 1fa4 97000000 		call	__addsf3		#
 2597      E7800000 
 2598 1fac 930D0500 		mv	s11,a0	# shadow_orig$y, tmp564
 2599 1fb0 0325C100 		lw	a0,12(sp)		#, %sfp
 2600 1fb4 93050A00 		mv	a1,s4	#, pretmp_408
 2601 1fb8 97000000 		call	__addsf3		#
 2601      E7800000 
 2602 1fc0 6FF01FCB 		j	.L179		#
 2604              		.globl	__fixunssfsi
 2605              		.globl	__floatsisf
 2606              		.align	2
 2607              		.globl	set_pixel
 2609              	set_pixel:
 2610 1fc4 130101FD 		addi	sp,sp,-48	#,,
 2611 1fc8 23286101 		sw	s6,16(sp)	#,
 2612              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2613 1fcc 370B0000 		lui	s6,%hi(.LC0)	# tmp127,
 2614              	# main_raytrace.c:239: void set_pixel(volatile Pixel *fb, int x, int y, float r, float g, float b) 
 2615 1fd0 23267101 		sw	s7,12(sp)	#,
 2616              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2617 1fd4 832B0B00 		lw	s7,%lo(.LC0)(s6)		# tmp126,
 2618              	# main_raytrace.c:239: void set_pixel(volatile Pixel *fb, int x, int y, float r, float g, float b) 
 2619 1fd8 23229102 		sw	s1,36(sp)	#,
 2620 1fdc 232E3101 		sw	s3,28(sp)	#,
 2621 1fe0 93840500 		mv	s1,a1	# x, tmp205
 2622 1fe4 93090500 		mv	s3,a0	# fb, tmp204
 2623              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2624 1fe8 93850B00 		mv	a1,s7	#, tmp126
 2625 1fec 13850600 		mv	a0,a3	#, r
 2626              	# main_raytrace.c:239: void set_pixel(volatile Pixel *fb, int x, int y, float r, float g, float b) 
 2627 1ff0 23248102 		sw	s0,40(sp)	#,
 2628 1ff4 23202103 		sw	s2,32(sp)	#,
 2629 1ff8 232C4101 		sw	s4,24(sp)	#,
 2630 1ffc 232A5101 		sw	s5,20(sp)	#,
 2631 2000 23261102 		sw	ra,44(sp)	#,
 2632 2004 23248101 		sw	s8,8(sp)	#,
 2633 2008 23229101 		sw	s9,4(sp)	#,
 2634              	# main_raytrace.c:239: void set_pixel(volatile Pixel *fb, int x, int y, float r, float g, float b) 
 2635 200c 13090600 		mv	s2,a2	# y, tmp206
 2636 2010 938A0600 		mv	s5,a3	# r, tmp207
 2637 2014 130A0700 		mv	s4,a4	# g, tmp208
 2638 2018 13840700 		mv	s0,a5	# b, tmp209
 2639              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2640 201c 97000000 		call	__gtsf2		#
 2640      E7800000 
 2641 2024 634AA020 		bgt	a0,zero,.L188	#, tmp210,,
 2642              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2643 2028 93050000 		mv	a1,zero	#,
 2644 202c 13850A00 		mv	a0,s5	#, r
 2645 2030 97000000 		call	__ltsf2		#
 2645      E7800000 
 2646 2038 63440520 		blt	a0,zero,.L189	#, tmp211,,
 2647              	.L182:
 2648              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2649 203c 832B0B00 		lw	s7,%lo(.LC0)(s6)		# tmp130,
 2650 2040 13050A00 		mv	a0,s4	#, g
 2651 2044 93850B00 		mv	a1,s7	#, tmp130
 2652 2048 97000000 		call	__gtsf2		#
 2652      E7800000 
 2653 2050 634CA01E 		bgt	a0,zero,.L190	#, tmp212,,
 2654              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2655 2054 93050000 		mv	a1,zero	#,
 2656 2058 13050A00 		mv	a0,s4	#, g
 2657 205c 97000000 		call	__ltsf2		#
 2657      E7800000 
 2658 2064 6346051E 		blt	a0,zero,.L191	#, tmp213,,
 2659              	.L183:
 2660              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2661 2068 032B0B00 		lw	s6,%lo(.LC0)(s6)		# tmp134,
 2662 206c 13050400 		mv	a0,s0	#, b
 2663 2070 93050B00 		mv	a1,s6	#, tmp134
 2664 2074 97000000 		call	__gtsf2		#
 2664      E7800000 
 2665 207c 634EA01C 		bgt	a0,zero,.L192	#, tmp214,,
 2666              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2667 2080 93050000 		mv	a1,zero	#,
 2668 2084 13050400 		mv	a0,s0	#, b
 2669 2088 97000000 		call	__ltsf2		#
 2669      E7800000 
 2670 2090 6348051C 		blt	a0,zero,.L193	#, tmp215,,
 2671              	.L184:
 2672              	# main_raytrace.c:243:      uint8_t R = (uint8_t)(255.0f * r);
 2673 2094 B70B0000 		lui	s7,%hi(.LC23)	# tmp138,
 2674 2098 83A50B00 		lw	a1,%lo(.LC23)(s7)		#,
 2675 209c 13850A00 		mv	a0,s5	#, r
 2676 20a0 97000000 		call	__mulsf3		#
 2676      E7800000 
 2677              	# main_raytrace.c:243:      uint8_t R = (uint8_t)(255.0f * r);
 2678 20a8 97000000 		call	__fixunssfsi		#
 2678      E7800000 
 2679              	# main_raytrace.c:244:      uint8_t G = (uint8_t)(255.0f * g);
 2680 20b0 83A50B00 		lw	a1,%lo(.LC23)(s7)		#,
 2681              	# main_raytrace.c:243:      uint8_t R = (uint8_t)(255.0f * r);
 2682 20b4 137BF50F 		andi	s6,a0,0xff	# R, tmp216
 2683              	# main_raytrace.c:244:      uint8_t G = (uint8_t)(255.0f * g);
 2684 20b8 13050A00 		mv	a0,s4	#, g
 2685 20bc 97000000 		call	__mulsf3		#
 2685      E7800000 
 2686              	# main_raytrace.c:244:      uint8_t G = (uint8_t)(255.0f * g);
 2687 20c4 97000000 		call	__fixunssfsi		#
 2687      E7800000 
 2688              	# main_raytrace.c:245:      uint8_t B = (uint8_t)(255.0f * b);
 2689 20cc 83A50B00 		lw	a1,%lo(.LC23)(s7)		#,
 2690              	# main_raytrace.c:244:      uint8_t G = (uint8_t)(255.0f * g);
 2691 20d0 937AF50F 		andi	s5,a0,0xff	# G, tmp217
 2692              	# main_raytrace.c:245:      uint8_t B = (uint8_t)(255.0f * b);
 2693 20d4 13050400 		mv	a0,s0	#, b
 2694 20d8 97000000 		call	__mulsf3		#
 2694      E7800000 
 2695              	# main_raytrace.c:245:      uint8_t B = (uint8_t)(255.0f * b);
 2696 20e0 97000000 		call	__fixunssfsi		#
 2696      E7800000 
 2697              	# main_raytrace.c:246:      uint8_t ROFF = (R & 15) > dither[x&3][y&3];
 2698 20e8 13F73400 		andi	a4,s1,3	#, tmp152, x
 2699              	# main_raytrace.c:246:      uint8_t ROFF = (R & 15) > dither[x&3][y&3];
 2700 20ec B7070000 		lui	a5,%hi(.LANCHOR0)	# tmp151,
 2701 20f0 13172700 		slli	a4,a4,2	#, tmp154, tmp152
 2702 20f4 93870700 		addi	a5,a5,%lo(.LANCHOR0)	# tmp150, tmp151,
 2703              	# main_raytrace.c:246:      uint8_t ROFF = (R & 15) > dither[x&3][y&3];
 2704 20f8 93763900 		andi	a3,s2,3	#, tmp153, y
 2705              	# main_raytrace.c:246:      uint8_t ROFF = (R & 15) > dither[x&3][y&3];
 2706 20fc B387E700 		add	a5,a5,a4	# tmp154, tmp155, tmp150
 2707 2100 B387D700 		add	a5,a5,a3	# tmp153, tmp156, tmp155
 2708 2104 83C70700 		lbu	a5,0(a5)	# _7, dither[_5][_6]
 2709              	# main_raytrace.c:246:      uint8_t ROFF = (R & 15) > dither[x&3][y&3];
 2710 2108 1377FB00 		andi	a4,s6,15	#, tmp167, R
 2711              	# main_raytrace.c:245:      uint8_t B = (uint8_t)(255.0f * b);
 2712 210c 937BF50F 		andi	s7,a0,0xff	# B, tmp218
 2713              	# main_raytrace.c:247:      uint8_t GOFF = (G & 15) > dither[x&3][y&3];
 2714 2110 13FCFA00 		andi	s8,s5,15	#, tmp159, G
 2715              	# main_raytrace.c:248:      uint8_t BOFF = (B & 15) > dither[x&3][y&3];
 2716 2114 1375F500 		andi	a0,a0,15	#, tmp163, tmp218
 2717 2118 33BAA700 		sltu	s4,a5,a0	# tmp163, _10, _7
 2718              	# main_raytrace.c:247:      uint8_t GOFF = (G & 15) > dither[x&3][y&3];
 2719 211c 33BC8701 		sgtu	s8,s8,a5	# _9, tmp159, _7
 2720              	# main_raytrace.c:249:      R = min((R>>4) + ROFF, 15);
 2721 2120 13554B00 		srli	a0,s6,4	#, tmp170, R
 2722              	# main_raytrace.c:246:      uint8_t ROFF = (R & 15) > dither[x&3][y&3];
 2723 2124 B3B7E700 		sltu	a5,a5,a4	# tmp167, tmp168, _7
 2724              	# main_raytrace.c:249:      R = min((R>>4) + ROFF, 15);
 2725 2128 3385A700 		add	a0,a5,a0	# tmp170,, tmp168
 2726              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2727 212c 370B0000 		lui	s6,%hi(.LC22)	# tmp173,
 2728              	# main_raytrace.c:249:      R = min((R>>4) + ROFF, 15);
 2729 2130 97000000 		call	__floatsisf		#
 2729      E7800000 
 2730              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2731 2138 832C0B00 		lw	s9,%lo(.LC22)(s6)		# tmp172,
 2732              	# main_raytrace.c:249:      R = min((R>>4) + ROFF, 15);
 2733 213c 13040500 		mv	s0,a0	# _15, tmp219
 2734              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2735 2140 93850C00 		mv	a1,s9	#, tmp172
 2736 2144 97000000 		call	__ltsf2		#
 2736      E7800000 
 2737 214c 63440500 		blt	a0,zero,.L185	#, tmp220,,
 2738 2150 13840C00 		mv	s0,s9	# _15, tmp172
 2739              	.L185:
 2740              	# main_raytrace.c:249:      R = min((R>>4) + ROFF, 15);
 2741 2154 13050400 		mv	a0,s0	#, _15
 2742 2158 97000000 		call	__fixunssfsi		#
 2742      E7800000 
 2743 2160 1374F50F 		andi	s0,a0,0xff	# R, tmp221
 2744              	# main_raytrace.c:250:      G = min((G>>4) + GOFF, 15);
 2745 2164 13D54A00 		srli	a0,s5,4	#, tmp178, G
 2746              	# main_raytrace.c:250:      G = min((G>>4) + GOFF, 15);
 2747 2168 33058501 		add	a0,a0,s8	# _9,, tmp178
 2748 216c 97000000 		call	__floatsisf		#
 2748      E7800000 
 2749              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2750 2174 032C0B00 		lw	s8,%lo(.LC22)(s6)		# tmp180,
 2751              	# main_raytrace.c:250:      G = min((G>>4) + GOFF, 15);
 2752 2178 930A0500 		mv	s5,a0	# _20, tmp222
 2753              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2754 217c 93050C00 		mv	a1,s8	#, tmp180
 2755 2180 97000000 		call	__ltsf2		#
 2755      E7800000 
 2756 2188 63440500 		blt	a0,zero,.L186	#, tmp223,,
 2757 218c 930A0C00 		mv	s5,s8	# _20, tmp180
 2758              	.L186:
 2759              	# main_raytrace.c:250:      G = min((G>>4) + GOFF, 15);
 2760 2190 13850A00 		mv	a0,s5	#, _20
 2761 2194 97000000 		call	__fixunssfsi		#
 2761      E7800000 
 2762 219c 937AF50F 		andi	s5,a0,0xff	# G, tmp224
 2763              	# main_raytrace.c:251:      B = min((B>>4) + BOFF, 15);
 2764 21a0 13D54B00 		srli	a0,s7,4	#, tmp186, B
 2765              	# main_raytrace.c:251:      B = min((B>>4) + BOFF, 15);
 2766 21a4 33054501 		add	a0,a0,s4	# _10,, tmp186
 2767 21a8 97000000 		call	__floatsisf		#
 2767      E7800000 
 2768              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2769 21b0 032B0B00 		lw	s6,%lo(.LC22)(s6)		# tmp188,
 2770              	# main_raytrace.c:251:      B = min((B>>4) + BOFF, 15);
 2771 21b4 130A0500 		mv	s4,a0	# _25, tmp225
 2772              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2773 21b8 93050B00 		mv	a1,s6	#, tmp188
 2774 21bc 97000000 		call	__ltsf2		#
 2774      E7800000 
 2775 21c4 63440500 		blt	a0,zero,.L187	#, tmp226,,
 2776 21c8 130A0B00 		mv	s4,s6	# _25, tmp188
 2777              	.L187:
 2778              	# main_raytrace.c:251:      B = min((B>>4) + BOFF, 15);
 2779 21cc 13050A00 		mv	a0,s4	#, _25
 2780 21d0 97000000 		call	__fixunssfsi		#
 2780      E7800000 
 2781              	# main_raytrace.c:253:      setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 2782 21d8 939A6A00 		slli	s5,s5,6	#, tmp192, G
 2783              	# main_raytrace.c:253:      setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 2784 21dc 1314B400 		slli	s0,s0,11	#, tmp191, R
 2785              	# main_raytrace.c:253:      setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 2786 21e0 33645401 		or	s0,s0,s5	# tmp192, tmp195, tmp191
 2787              	# main_raytrace.c:253:      setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 2788 21e4 1375F50F 		andi	a0,a0,0xff	# B, tmp227
 2789 21e8 3364A400 		or	s0,s0,a0	# B, tmp200, tmp195
 2790 21ec 93160401 		slli	a3,s0,16	#,, tmp200
 2791              	# main_raytrace.c:287: }
 2792 21f0 03248102 		lw	s0,40(sp)		#,
 2793 21f4 8320C102 		lw	ra,44(sp)		#,
 2794 21f8 032A8101 		lw	s4,24(sp)		#,
 2795 21fc 832A4101 		lw	s5,20(sp)		#,
 2796 2200 032B0101 		lw	s6,16(sp)		#,
 2797 2204 832BC100 		lw	s7,12(sp)		#,
 2798 2208 032C8100 		lw	s8,8(sp)		#,
 2799 220c 832C4100 		lw	s9,4(sp)		#,
 2800              	# main_raytrace.c:253:      setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 2801 2210 13060900 		mv	a2,s2	#, y
 2802 2214 93850400 		mv	a1,s1	#, x
 2803              	# main_raytrace.c:287: }
 2804 2218 03290102 		lw	s2,32(sp)		#,
 2805 221c 83244102 		lw	s1,36(sp)		#,
 2806              	# main_raytrace.c:253:      setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 2807 2220 13850900 		mv	a0,s3	#, fb
 2808              	# main_raytrace.c:287: }
 2809 2224 8329C101 		lw	s3,28(sp)		#,
 2810              	# main_raytrace.c:253:      setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 2811 2228 93D60641 		srai	a3,a3,16	#,,
 2812              	# main_raytrace.c:287: }
 2813 222c 13010103 		addi	sp,sp,48	#,,
 2814              	# main_raytrace.c:253:      setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 2815 2230 17030000 		tail	setpixel		#
 2815      67000300 
 2816              	.L188:
 2817              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2818 2238 938A0B00 		mv	s5,s7	# r, tmp126
 2819 223c 6FF01FE0 		j	.L182		#
 2820              	.L189:
 2821              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2822 2240 930A0000 		mv	s5,zero	# r,
 2823 2244 6FF09FDF 		j	.L182		#
 2824              	.L190:
 2825              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2826 2248 138A0B00 		mv	s4,s7	# g, tmp130
 2827 224c 6FF0DFE1 		j	.L183		#
 2828              	.L191:
 2829              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2830 2250 130A0000 		mv	s4,zero	# g,
 2831 2254 6FF05FE1 		j	.L183		#
 2832              	.L192:
 2833              	# main_raytrace.c:33: static inline float min(float x, float y) { return x<y?x:y; }
 2834 2258 13040B00 		mv	s0,s6	# b, tmp134
 2835 225c 6FF09FE3 		j	.L184		#
 2836              	.L193:
 2837              	# main_raytrace.c:32: static inline float max(float x, float y) { return x>y?x:y; }
 2838 2260 13040000 		mv	s0,zero	# b,
 2839 2264 6FF01FE3 		j	.L184		#
 2841              		.section	.rodata.str1.4
 2842 0011 000000   		.align	2
 2843              	.LC24:
 2844 0014 72646379 		.string	"rdcycle       :"
 2844      636C6520 
 2844      20202020 
 2844      20203A00 
 2845              		.align	2
 2846              	.LC25:
 2847 0024 7264696E 		.string	"rdinstret     :"
 2847      73747265 
 2847      74202020 
 2847      20203A00 
 2848              		.text
 2849              		.align	2
 2850              		.globl	show_csr_timer_cnt
 2852              	show_csr_timer_cnt:
 2853 2268 130101FD 		addi	sp,sp,-48	#,,
 2854 226c 23261102 		sw	ra,44(sp)	#,
 2855 2270 23248102 		sw	s0,40(sp)	#,
 2856 2274 23229102 		sw	s1,36(sp)	#,
 2857 2278 23202103 		sw	s2,32(sp)	#,
 2858              	# main_raytrace.c:295:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 2859              	 #APP
 2860              	# 295 "main_raytrace.c" 1
   1              	/* A port of Dmitry Sokolov's tiny raytracer to C and to FemtoRV32 */
   2              	/* Displays on the small OLED display and/or HDMI                  */
   3              	/* Bruno Levy, 2020                                                */
   4              	/* Original tinyraytracer: https://github.com/ssloy/tinyraytracer  */
   5              	/* adapted for kianv riscv soc Hirosh Dabui, 2021 */
   6              	
   7              	#include <stdint.h>
   8              	#include <math.h>
   9              	#include <fenv.h>
  10              	#include "kianv_stdlib.h"
  11              	
  12              	typedef short Pixel;
  13              	
  14              	
  15              	//const int HRES = 640;
  16              	//const int VRES = 480;
  17              	
  18              	//const int HRENDER = 640;
  19              	//const int VRENDER = 480;
  20              	
  21              	const int HRES = 96;
  22              	const int VRES = 64;
  23              	
  24              	const int HRENDER = 96;
  25              	const int VRENDER = 64;
  26              	
  27              	
  28              	int __errno; // needed when compiling to hex, not needed otherwise.
  29              	
  30              	typedef int BOOL;
  31              	
  32              	static inline float max(float x, float y) { return x>y?x:y; }
  33              	static inline float min(float x, float y) { return x<y?x:y; }
  34              	
  35              	typedef struct { float x,y,z; }   vec3;
  36              	typedef struct { float x,y,z,w; } vec4;
  37              	
  38              	static inline vec3 make_vec3(float x, float y, float z) {
  39              	  vec3 V;
  40              	  V.x = x; V.y = y; V.z = z;
  41              	  return V;
  42              	}
  43              	
  44              	static inline vec4 make_vec4(float x, float y, float z, float w) {
  45              	  vec4 V;
  46              	  V.x = x; V.y = y; V.z = z; V.w = w;
  47              	  return V;
  48              	}
  49              	
  50              	static inline vec3 vec3_neg(vec3 V)            { return make_vec3(-V.x, -V.y, -V.z); }
  51              	static inline vec3 vec3_add(vec3 U, vec3 V)    { return make_vec3(U.x+V.x, U.y+V.y, U.z+V.z); }
  52              	static inline vec3 vec3_sub(vec3 U, vec3 V)    { return make_vec3(U.x-V.x, U.y-V.y, U.z-V.z); }
  53              	static inline float vec3_dot(vec3 U, vec3 V)   { return U.x*V.x+U.y*V.y+U.z*V.z; }
  54              	static inline vec3 vec3_scale(float s, vec3 U) { return make_vec3(s*U.x, s*U.y, s*U.z); }
  55              	static inline float vec3_length(vec3 U)        { return sqrtf(U.x*U.x+U.y*U.y+U.z*U.z); }
  56              	static inline vec3 vec3_normalize(vec3 U)      { return vec3_scale(1.0f/vec3_length(U),U); }
  57              	
  58              	/*************************************************************************/
  59              	
  60              	typedef struct Light {
  61              	  vec3 position;
  62              	  float intensity;
  63              	} Light;
  64              	
  65              	Light make_Light(vec3 position, float intensity) {
  66              	  Light L;
  67              	  L.position = position;
  68              	  L.intensity = intensity;
  69              	  return L;
  70              	}
  71              	
  72              	/*************************************************************************/
  73              	
  74              	typedef struct {
  75              	  float refractive_index;
  76              	  vec4  albedo;
  77              	  vec3  diffuse_color;
  78              	  float specular_exponent;
  79              	} Material;
  80              	
  81              	Material make_Material(float r, vec4 a, vec3 color, float spec) {
  82              	  Material M;
  83              	  M.refractive_index = r;
  84              	  M.albedo = a;
  85              	  M.diffuse_color = color;
  86              	  M.specular_exponent = spec;
  87              	  return M;
  88              	}
  89              	
  90              	Material make_Material_default() {
  91              	  Material M;
  92              	  M.refractive_index = 1;
  93              	  M.albedo = make_vec4(1,0,0,0);
  94              	  M.diffuse_color = make_vec3(0,0,0);
  95              	  M.specular_exponent = 0;
  96              	  return M;
  97              	}
  98              	
  99              	/*************************************************************************/
 100              	
 101              	typedef struct {
 102              	  vec3 center;
 103              	  float radius;
 104              	  Material material;
 105              	} Sphere;
 106              	
 107              	Sphere make_Sphere(vec3 c, float r, Material M) {
 108              	  Sphere S;
 109              	  S.center = c;
 110              	  S.radius = r;
 111              	  S.material = M;
 112              	  return S;
 113              	}
 114              	
 115              	BOOL Sphere_ray_intersect(Sphere* S, vec3 orig, vec3 dir, float* t0) {
 116              	  vec3 L = vec3_sub(S->center, orig);
 117              	  float tca = vec3_dot(L,dir);
 118              	  float d2 = vec3_dot(L,L) - tca*tca;
 119              	  float r2 = S->radius*S->radius;
 120              	  if (d2 > r2) return 0;
 121              	  float thc = sqrtf(r2 - d2);
 122              	  *t0       = tca - thc;
 123              	  float t1 = tca + thc;
 124              	  if (*t0 < 0) *t0 = t1;
 125              	  if (*t0 < 0) return 0;
 126              	  return 1;
 127              	}
 128              	
 129              	vec3 reflect(vec3 I, vec3 N) { return vec3_sub(I, vec3_scale(2.f*vec3_dot(I,N),N)); }
 130              	
 131              	vec3 refract(vec3 I, vec3 N, float eta_t, float eta_i /* =1.f */) { // Snell's law
 132              	  float cosi = -max(-1.f, min(1.f, vec3_dot(I,N)));
 133              	  if (cosi<0) return refract(I, vec3_neg(N), eta_i, eta_t); // if the ray comes from the inside the
 134              	  float eta = eta_i / eta_t;
 135              	  float k = 1 - eta*eta*(1 - cosi*cosi);
 136              	  return k<0 ? make_vec3(1,0,0) : vec3_add(vec3_scale(eta,I),vec3_scale((eta*cosi - sqrtf(k)),N));
 137              	  // k<0 = total reflection, no ray to refract. I refract it anyways, this has no physical meaning
 138              	}
 139              	
 140              	BOOL scene_intersect(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, vec3* hit, vec3* N, Mate
 141              	BOOL scene_intersect(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, vec3* hit, vec3* N, Mate
 142              	  float spheres_dist = 1e30;
 143              	  for(int i=0; i<nb_spheres; ++i) {
 144              	    float dist_i;
 145              	    if(Sphere_ray_intersect(&spheres[i], orig, dir, &dist_i) && (dist_i < spheres_dist)) {
 146              	      spheres_dist = dist_i;
 147              	      *hit = vec3_add(orig,vec3_scale(dist_i,dir));
 148              	      *N = vec3_normalize(vec3_sub(*hit, spheres[i].center));
 149              	      *material = spheres[i].material;
 150              	    }
 151              	  }
 152              	  float checkerboard_dist = 1e30;
 153              	  if (fabs(dir.y)>1e-3)  {
 154              	    float d = -(orig.y+4)/dir.y; // the checkerboard plane has equation y = -4
 155              	    vec3 pt = vec3_add(orig, vec3_scale(d,dir));
 156              	    if (d>0 && fabs(pt.x)<10 && pt.z<-10 && pt.z>-30 && d<spheres_dist) {
 157              	      checkerboard_dist = d;
 158              	      *hit = pt;
 159              	      *N = make_vec3(0,1,0);
 160              	      material->diffuse_color = (((int)(.5*hit->x+1000) + (int)(.5*hit->z)) & 1) ? make_vec3(.3, .3
 161              	    }
 162              	  }
 163              	  return min(spheres_dist, checkerboard_dist)<1000;
 164              	}
 165              	
 166              	/* It crashes when I call powf(), because it probably underflows, and I do not know how to disable 
 167              	float my_pow(float x, float y) RV32_FASTCODE;
 168              	float my_pow(float x, float y) {
 169              	  float alu_rslt = x;
 170              	  int Y = (int)y;
 171              	  while(Y > 2) {
 172              	    Y /= 2; alu_rslt *= alu_rslt;
 173              	    if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 174              	      return alu_rslt;
 175              	    }
 176              	  }
 177              	  while(Y > 1) {
 178              	    Y--; alu_rslt *= x;
 179              	    if(alu_rslt < 1e-100 || alu_rslt > 1e100) {
 180              	      return alu_rslt;
 181              	    }
 182              	  }
 183              	  return alu_rslt;
 184              	}
 185              	
 186              	vec3 cast_ray(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, Light* lights, int nb_lights, i
 187              	vec3 cast_ray(vec3 orig, vec3 dir, Sphere* spheres, int nb_spheres, Light* lights, int nb_lights, i
 188              	  vec3 point,N;
 189              	  Material material = make_Material_default();
 190              	  if (depth>2 || !scene_intersect(orig, dir, spheres, nb_spheres, &point, &N, &material)) {
 191              	    float s = 0.5*(dir.y + 1.0);
 192              	    return vec3_add(vec3_scale(s,make_vec3(0.2, 0.7, 0.8)),vec3_scale(s,make_vec3(0.0, 0.0, 0.5)));
 193              	  }
 194              	
 195              	  vec3 reflect_dir = vec3_normalize(reflect(dir, N));
 196              	  vec3 refract_dir = vec3_normalize(refract(dir, N, material.refractive_index, 1));
 197              	  // offset the original point to avoid occlusion by the object itself
 198              	  vec3 reflect_orig = vec3_dot(reflect_dir,N) < 0 ? vec3_sub(point,vec3_scale(1e-3,N)) : vec3_add(p
 199              	  vec3 refract_orig = vec3_dot(refract_dir,N) < 0 ? vec3_sub(point,vec3_scale(1e-3,N)) : vec3_add(p
 200              	  vec3 reflect_color = cast_ray(reflect_orig, reflect_dir, spheres, nb_spheres, lights, nb_lights, 
 201              	  vec3 refract_color = cast_ray(refract_orig, refract_dir, spheres, nb_spheres, lights, nb_lights, 
 202              	
 203              	  float diffuse_light_intensity = 0, specular_light_intensity = 0;
 204              	  for (int i=0; i<nb_lights; i++) {
 205              	    vec3  light_dir = vec3_normalize(vec3_sub(lights[i].position,point));
 206              	    float light_distance = vec3_length(vec3_sub(lights[i].position,point));
 207              	
 208              	    vec3 shadow_orig = vec3_dot(light_dir,N) < 0 ? vec3_sub(point,vec3_scale(1e-3,N)) : vec3_add(po
 209              	        // checking if the point lies in the shadow of the lights[i]
 210              	    vec3 shadow_pt, shadow_N;
 211              	    Material tmpmaterial;
 212              	    if (scene_intersect(shadow_orig, light_dir, spheres, nb_spheres, &shadow_pt, &shadow_N, &tmpmat
 213              		vec3_length(vec3_sub(shadow_pt,shadow_orig)) < light_distance
 214              	    ) continue ;
 215              	
 216              	    diffuse_light_intensity  += lights[i].intensity * max(0.f, vec3_dot(light_dir,N));
 217              	
 218              	    float abc = max(0.f, vec3_dot(vec3_neg(reflect(vec3_neg(light_dir), N)),dir));
 219              	    float def = material.specular_exponent;
 220              	    if(abc > 0.0f && def > 0.0f) {
 221              	       specular_light_intensity += my_pow(abc,def)*lights[i].intensity;
 222              	    }
 223              	  }
 224              	  vec3 alu_rslt = vec3_scale(diffuse_light_intensity * material.albedo.x, material.diffuse_color);
 225              	  alu_rslt = vec3_add(alu_rslt, vec3_scale(specular_light_intensity * material.albedo.y, make_vec3(
 226              	  alu_rslt = vec3_add(alu_rslt, vec3_scale(material.albedo.z, reflect_color));
 227              	  alu_rslt = vec3_add(alu_rslt, vec3_scale(material.albedo.w, refract_color));
 228              	  return alu_rslt;
 229              	}
 230              	
 231              	const uint8_t dither[4][4] = {
 232              	  { 0, 8, 2,10},
 233              	  {12, 4,14, 6},
 234              	  { 3,11, 1, 9},
 235              	  {15, 7,13, 5}
 236              	};
 237              	
 238              	void set_pixel(volatile Pixel *fb, int x, int y, float r, float g, float b) RV32_FASTCODE;
 239              	void set_pixel(volatile Pixel *fb, int x, int y, float r, float g, float b) {
 240              	   r = max(0.0f, min(1.0f, r));
 241              	   g = max(0.0f, min(1.0f, g));
 242              	   b = max(0.0f, min(1.0f, b));
 243              	     uint8_t R = (uint8_t)(255.0f * r);
 244              	     uint8_t G = (uint8_t)(255.0f * g);
 245              	     uint8_t B = (uint8_t)(255.0f * b);
 246              	     uint8_t ROFF = (R & 15) > dither[x&3][y&3];
 247              	     uint8_t GOFF = (G & 15) > dither[x&3][y&3];
 248              	     uint8_t BOFF = (B & 15) > dither[x&3][y&3];
 249              	     R = min((R>>4) + ROFF, 15);
 250              	     G = min((G>>4) + GOFF, 15);
 251              	     B = min((B>>4) + BOFF, 15);
 252              	     //setpixel(fb, x, y, (R<<8) | (G<<4) | B );
 253              	     setpixel(fb, x, y, (R<<11) | (G<<6) | B );
 254              	     //float gray = 0.2126f * r + 0.7152f * g + 0.0722 * b;
 255              	     //setpixel(fb, x, y, (uint16_t) (gray*255.0f));
 256              	
 257              	     // printf("x:%d y:%d r:%d g:%d b:%d\n",x, y,  R, B, B);
 258              	  /*
 259              	   r = max(0.0f, min(1.0f, r));
 260              	   g = max(0.0f, min(1.0f, g));
 261              	   b = max(0.0f, min(1.0f, b));
 262              	   switch(FGA_mode) {
 263              	   case GL_MODE_OLED: {
 264              	     uint8_t R = (uint8_t)(255.0f * r);
 265              	     uint8_t G = (uint8_t)(255.0f * g);
 266              	     uint8_t B = (uint8_t)(255.0f * b);
 267              	     GL_setpixel(x,y,GL_RGB(R,G,B));
 268              	   } break;
 269              	   case FGA_MODE_320x200x16bpp: {
 270              	     uint8_t R = (uint8_t)(255.0f * r);
 271              	     uint8_t G = (uint8_t)(255.0f * g);
 272              	     uint8_t B = (uint8_t)(255.0f * b);
 273              	     FGA_setpixel(x,y,GL_RGB(R,G,B));
 274              	   } break;
 275              	   case FGA_MODE_320x200x8bpp: {
 276              	     float gray = 0.2126f * r + 0.7152f * g + 0.0722 * b;
 277              	     FGA_setpixel(x,y,(uint16_t)(gray*255.0f));
 278              	   } break;
 279              	   case FGA_MODE_640x400x4bpp: {
 280              	     float gray = 0.2126f * r + 0.7152f * g + 0.0722 * b;
 281              	     uint16_t GRAY = (uint16_t)(gray*255.0f);
 282              	     uint16_t OFF = (GRAY & 15) > dither[x&3][y&3];
 283              	     FGA_setpixel(x,y,MIN((GRAY>>4)+OFF,15));
 284              	   } break;
 285              	   }
 286              	   */
 287              	}
 288              	
 289              	void show_csr_timer_cnt() {
 290              	  volatile uint32_t tmph0;
 291              	  volatile uint32_t tmpl0;
 292              	  volatile uint32_t tmph1;
 293              	  volatile uint32_t tmpl1;
 294              	
 295 227c F32700C8 	  asm volatile ("rdcycleh %0" : "=r"(tmph0));
 296              	  asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 2861              		rdcycleh a5	# tmp84
 2862              	# 0 "" 2
 2863              	 #NO_APP
 2864 2280 2328F100 		sw	a5,16(sp)	# tmp84, tmph0
 2865              	# main_raytrace.c:296:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 2866              	 #APP
 2867              	# 296 "main_raytrace.c" 1
 297              	
 2868              		rdcycle  a5	# tmp85
 2869              	# 0 "" 2
 2870              	 #NO_APP
 2871 2288 232AF100 		sw	a5,20(sp)	# tmp85, tmpl0
 2872              	# main_raytrace.c:298:   asm volatile ("rdinstreth %0" : "=r"(tmph1));
 2873              	 #APP
 2874              	# 298 "main_raytrace.c" 1
 298 228c F32720C8 	  asm volatile ("rdinstreth %0" : "=r"(tmph1));
 299              	  asm volatile ("rdinstret %0"  : "=r"(tmpl1));
 2875              		rdinstreth a5	# tmp86
 2876              	# 0 "" 2
 2877              	 #NO_APP
 2878 2290 232CF100 		sw	a5,24(sp)	# tmp86, tmph1
 2879              	# main_raytrace.c:299:   asm volatile ("rdinstret %0"  : "=r"(tmpl1));
 2880              	 #APP
 2881              	# 299 "main_raytrace.c" 1
 300              	
 2882              		rdinstret a5	# tmp87
 2883              	# 0 "" 2
 2884              	 #NO_APP
 2885 2298 232EF100 		sw	a5,28(sp)	# tmp87, tmpl1
 2886              	# main_raytrace.c:301:   uint64_t rdcycles    = ((uint64_t)(tmph0)<<32) + tmpl0;
 2887 229c 83250101 		lw	a1,16(sp)		# tmph0.19_1, tmph0
 2888              	# main_raytrace.c:304:   putchar(10);
 2889 22a0 1305A000 		li	a0,10		#,
 2890              	# main_raytrace.c:301:   uint64_t rdcycles    = ((uint64_t)(tmph0)<<32) + tmpl0;
 2891 22a4 03294101 		lw	s2,20(sp)		# tmpl0.20_4, tmpl0
 2892              	# main_raytrace.c:301:   uint64_t rdcycles    = ((uint64_t)(tmph0)<<32) + tmpl0;
 2893 22a8 2326B100 		sw	a1,12(sp)	# tmph0.19_1, %sfp
 2894              	# main_raytrace.c:302:   uint64_t rdinstret = ((uint64_t)(tmph1)<<32) + tmpl1;
 2895 22ac 03248101 		lw	s0,24(sp)		# tmph1.21_6, tmph1
 2896              	# main_raytrace.c:302:   uint64_t rdinstret = ((uint64_t)(tmph1)<<32) + tmpl1;
 2897 22b0 8324C101 		lw	s1,28(sp)		# tmpl1.22_9, tmpl1
 2898              	# main_raytrace.c:304:   putchar(10);
 2899 22b4 97000000 		call	putchar		#
 2899      E7800000 
 2900              	# main_raytrace.c:305:   print_str("rdcycle       :");
 2901 22bc 37050000 		lui	a0,%hi(.LC24)	# tmp104,
 2902 22c0 13050500 		addi	a0,a0,%lo(.LC24)	#, tmp104,
 2903 22c4 97000000 		call	print_str		#
 2903      E7800000 
 2904              	# main_raytrace.c:306:   print_dec64(rdcycles);
 2905 22cc 8325C100 		lw	a1,12(sp)		# tmph0.19_1, %sfp
 2906 22d0 13050900 		mv	a0,s2	#, tmpl0.20_4
 2907 22d4 97000000 		call	print_dec64		#
 2907      E7800000 
 2908              	# main_raytrace.c:307:   putchar(10);
 2909 22dc 1305A000 		li	a0,10		#,
 2910 22e0 97000000 		call	putchar		#
 2910      E7800000 
 2911              	# main_raytrace.c:308:   print_str("rdinstret     :");
 2912 22e8 37050000 		lui	a0,%hi(.LC25)	# tmp105,
 2913 22ec 13050500 		addi	a0,a0,%lo(.LC25)	#, tmp105,
 2914 22f0 97000000 		call	print_str		#
 2914      E7800000 
 2915              	# main_raytrace.c:309:   print_dec64(rdinstret);
 2916 22f8 13850400 		mv	a0,s1	#, tmpl1.22_9
 2917 22fc 93050400 		mv	a1,s0	#, tmph1.21_6
 2918 2300 97000000 		call	print_dec64		#
 2918      E7800000 
 2919              	# main_raytrace.c:310:   putchar(10);
 2920 2308 1305A000 		li	a0,10		#,
 2921 230c 97000000 		call	putchar		#
 2921      E7800000 
 2922              	# main_raytrace.c:312: }
 2923 2314 03248102 		lw	s0,40(sp)		#,
 2924 2318 8320C102 		lw	ra,44(sp)		#,
 2925 231c 83244102 		lw	s1,36(sp)		#,
 2926 2320 03290102 		lw	s2,32(sp)		#,
 2927              	# main_raytrace.c:311:   putchar(10);
 2928 2324 1305A000 		li	a0,10		#,
 2929              	# main_raytrace.c:312: }
 2930 2328 13010103 		addi	sp,sp,48	#,,
 2931              	# main_raytrace.c:311:   putchar(10);
 2932 232c 17030000 		tail	putchar		#
 2932      67000300 
 2934              		.section	.rodata.str1.4
 2935              		.align	2
 2936              	.LC26:
 2937 0034 593A00   		.string	"Y:"
 2938              		.globl	__floatsidf
 2939              		.globl	__subdf3
 2940              		.globl	__divdf3
 2941              		.text
 2942              		.align	2
 2943              		.globl	render
 2945              	render:
 2946 2334 130101F5 		addi	sp,sp,-176	#,,
 2947              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 2948 2338 B7070000 		lui	a5,%hi(.LC27)	# tmp97,
 2949              	# main_raytrace.c:315: void render(volatile Pixel *fb, Sphere* spheres, int nb_spheres, Light* ligh
 2950 233c 23248109 		sw	s8,136(sp)	#,
 2951 2340 23229109 		sw	s9,132(sp)	#,
 2952              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 2953 2344 03AC0700 		lw	s8,%lo(.LC27)(a5)		# tmp96,
 2954 2348 83AC4700 		lw	s9,%lo(.LC27+4)(a5)		#,
 2955              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 2956 234c B7070000 		lui	a5,%hi(.LC9)	# tmp99,
 2957              	# main_raytrace.c:315: void render(volatile Pixel *fb, Sphere* spheres, int nb_spheres, Light* ligh
 2958 2350 2324810A 		sw	s0,168(sp)	#,
 2959 2354 2322910A 		sw	s1,164(sp)	#,
 2960              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 2961 2358 03A40700 		lw	s0,%lo(.LC9)(a5)		# tmp136,
 2962 235c 83A44700 		lw	s1,%lo(.LC9+4)(a5)		#,
 2963              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 2964 2360 B7070000 		lui	a5,%hi(.LC28)	# tmp101,
 2965 2364 03A84700 		lw	a6,%lo(.LC28+4)(a5)		#,
 2966 2368 83A70700 		lw	a5,%lo(.LC28)(a5)		# tmp137,
 2967              	# main_raytrace.c:315: void render(volatile Pixel *fb, Sphere* spheres, int nb_spheres, Light* ligh
 2968 236c 232C4109 		sw	s4,152(sp)	#,
 2969 2370 232A5109 		sw	s5,148(sp)	#,
 2970              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 2971 2374 2328F100 		sw	a5,16(sp)	# tmp137, %sfp
 2972              	# main_raytrace.c:336:       float dir_y = -(j + 0.5) + VRENDER/2.;    // this flips the image at t
 2973 2378 B7070000 		lui	a5,%hi(.LC29)	# tmp107,
 2974 237c 03AA0700 		lw	s4,%lo(.LC29)(a5)		# tmp139,
 2975 2380 83AA4700 		lw	s5,%lo(.LC29+4)(a5)		#,
 2976              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 2977 2384 B7070000 		lui	a5,%hi(.LC30)	# tmp111,
 2978              	# main_raytrace.c:315: void render(volatile Pixel *fb, Sphere* spheres, int nb_spheres, Light* ligh
 2979 2388 23286109 		sw	s6,144(sp)	#,
 2980 238c 23267109 		sw	s7,140(sp)	#,
 2981              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 2982 2390 03AB0700 		lw	s6,%lo(.LC30)(a5)		# tmp140,
 2983 2394 83AB4700 		lw	s7,%lo(.LC30+4)(a5)		#,
 2984              	# main_raytrace.c:315: void render(volatile Pixel *fb, Sphere* spheres, int nb_spheres, Light* ligh
 2985 2398 2320A109 		sw	s10,128(sp)	#,
 2986 239c 232EB107 		sw	s11,124(sp)	#,
 2987 23a0 2326110A 		sw	ra,172(sp)	#,
 2988 23a4 2320210B 		sw	s2,160(sp)	#,
 2989 23a8 232E3109 		sw	s3,156(sp)	#,
 2990              	# main_raytrace.c:315: void render(volatile Pixel *fb, Sphere* spheres, int nb_spheres, Light* ligh
 2991 23ac 2320A100 		sw	a0,0(sp)	# tmp141, %sfp
 2992 23b0 2322B100 		sw	a1,4(sp)	# tmp142, %sfp
 2993 23b4 2324C100 		sw	a2,8(sp)	# tmp143, %sfp
 2994 23b8 2326D100 		sw	a3,12(sp)	# tmp144, %sfp
 2995 23bc 232CE100 		sw	a4,24(sp)	# tmp145, %sfp
 2996              	# main_raytrace.c:322:   for (int j = 0; j<VRENDER; j++) { // actual rendering loop
 2997 23c0 130D0000 		li	s10,0		# j,
 2998              	# main_raytrace.c:323:     print_str("Y:");
 2999 23c4 B70D0000 		lui	s11,%hi(.LC26)	# tmp95,
 3000              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 3001 23c8 232A0101 		sw	a6,20(sp)	#, %sfp
 3002              	.L199:
 3003              	# main_raytrace.c:323:     print_str("Y:");
 3004 23cc 13850D00 		addi	a0,s11,%lo(.LC26)	#, tmp95,
 3005 23d0 97000000 		call	print_str		#
 3005      E7800000 
 3006              	# main_raytrace.c:324:     print_dec(j);
 3007 23d8 13050D00 		mv	a0,s10	#, j
 3008 23dc 97000000 		call	print_dec		#
 3008      E7800000 
 3009              	# main_raytrace.c:325:     putchar(10);
 3010 23e4 1305A000 		li	a0,10		#,
 3011 23e8 97000000 		call	putchar		#
 3011      E7800000 
 3012              	# main_raytrace.c:334:     for (int i = 0; i<HRENDER; i++) {
 3013 23f0 13090000 		li	s2,0		# i,
 3014              	# main_raytrace.c:326:     show_csr_timer_cnt();
 3015 23f4 97000000 		call	show_csr_timer_cnt		#
 3015      E7800000 
 3016              	.L198:
 3017              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 3018 23fc 13050C00 		mv	a0,s8	#, tmp96
 3019 2400 93850C00 		mv	a1,s9	#,
 3020 2404 97000000 		call	tan		#
 3020      E7800000 
 3021              	# main_raytrace.c:41:   return V;
 3022 240c 93070000 		mv	a5,zero	# tmp160,
 3023              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 3024 2410 232EA100 		sw	a0,28(sp)	# _8, %sfp
 3025              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 3026 2414 13050900 		mv	a0,s2	#, i
 3027              	# main_raytrace.c:41:   return V;
 3028 2418 2326F104 		sw	a5,76(sp)	# tmp160, D.2162.x
 3029 241c 2328F104 		sw	a5,80(sp)	# tmp161, D.2162.y
 3030 2420 232AF104 		sw	a5,84(sp)	# tmp162, D.2162.z
 3031              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 3032 2424 93890500 		mv	s3,a1	# _8, tmp155
 3033              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 3034 2428 97000000 		call	__floatsidf		#
 3034      E7800000 
 3035 2430 13060400 		mv	a2,s0	#, tmp136
 3036 2434 93860400 		mv	a3,s1	#,
 3037 2438 97000000 		call	__adddf3		#
 3037      E7800000 
 3038              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 3039 2440 03260101 		lw	a2,16(sp)		#, %sfp
 3040 2444 83264101 		lw	a3,20(sp)		#, %sfp
 3041 2448 97000000 		call	__subdf3		#
 3041      E7800000 
 3042              	# main_raytrace.c:335:       float dir_x =  (i + 0.5) - HRENDER/2.;
 3043 2450 97000000 		call	__truncdfsf2		#
 3043      E7800000 
 3044 2458 232CA104 		sw	a0,88(sp)	# tmp147, D.2163.x
 3045              	# main_raytrace.c:336:       float dir_y = -(j + 0.5) + VRENDER/2.;    // this flips the image at t
 3046 245c 13050D00 		mv	a0,s10	#, j
 3047 2460 97000000 		call	__floatsidf		#
 3047      E7800000 
 3048 2468 13060400 		mv	a2,s0	#, tmp136
 3049 246c 93860400 		mv	a3,s1	#,
 3050 2470 97000000 		call	__adddf3		#
 3050      E7800000 
 3051 2478 13060500 		mv	a2,a0	# tmp148,
 3052 247c 93860500 		mv	a3,a1	#,
 3053              	# main_raytrace.c:336:       float dir_y = -(j + 0.5) + VRENDER/2.;    // this flips the image at t
 3054 2480 13050A00 		mv	a0,s4	#, tmp139
 3055 2484 93850A00 		mv	a1,s5	#,
 3056 2488 97000000 		call	__subdf3		#
 3056      E7800000 
 3057              	# main_raytrace.c:336:       float dir_y = -(j + 0.5) + VRENDER/2.;    // this flips the image at t
 3058 2490 97000000 		call	__truncdfsf2		#
 3058      E7800000 
 3059              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 3060 2498 0327C101 		lw	a4,28(sp)		# _8, %sfp
 3061              	# main_raytrace.c:336:       float dir_y = -(j + 0.5) + VRENDER/2.;    // this flips the image at t
 3062 249c 232EA104 		sw	a0,92(sp)	# tmp149, D.2163.y
 3063              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 3064 24a0 93860900 		mv	a3,s3	#, _8
 3065 24a4 13060700 		mv	a2,a4	# tmp156, _8
 3066 24a8 13050700 		mv	a0,a4	# tmp157, _8
 3067 24ac 93850900 		mv	a1,s3	#, _8
 3068 24b0 97000000 		call	__adddf3		#
 3068      E7800000 
 3069 24b8 93860500 		mv	a3,a1	#,
 3070 24bc 13060500 		mv	a2,a0	# tmp150,
 3071              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 3072 24c0 93850B00 		mv	a1,s7	#,
 3073 24c4 13050B00 		mv	a0,s6	#, tmp140
 3074 24c8 97000000 		call	__divdf3		#
 3074      E7800000 
 3075              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 3076 24d0 97000000 		call	__truncdfsf2		#
 3076      E7800000 
 3077              	# main_raytrace.c:338:       vec3 C = cast_ray(make_vec3(0,0,0), vec3_normalize(make_vec3(dir_x, di
 3078 24d8 1306C000 		li	a2,12		#,
 3079              	# main_raytrace.c:337:       float dir_z = -VRENDER/(2.*tan(fov/2.));
 3080 24dc 2320A106 		sw	a0,96(sp)	# tmp151, D.2163.z
 3081              	# main_raytrace.c:338:       vec3 C = cast_ray(make_vec3(0,0,0), vec3_normalize(make_vec3(dir_x, di
 3082 24e0 93058105 		addi	a1,sp,88	#,,
 3083 24e4 13050103 		addi	a0,sp,48	#, tmp163,
 3084 24e8 97000000 		call	memcpy		#
 3084      E7800000 
 3085 24f0 93050103 		addi	a1,sp,48	#, tmp164,
 3086 24f4 13054106 		addi	a0,sp,100	#, tmp165,
 3087 24f8 97000000 		call	vec3_normalize		#
 3087      E7800000 
 3088 2500 1306C000 		li	a2,12		#,
 3089 2504 9305C104 		addi	a1,sp,76	#,,
 3090 2508 13050103 		addi	a0,sp,48	#, tmp166,
 3091 250c 97000000 		call	memcpy		#
 3091      E7800000 
 3092 2514 1306C000 		li	a2,12		#,
 3093 2518 93054106 		addi	a1,sp,100	#, tmp167,
 3094 251c 13050102 		addi	a0,sp,32	#,,
 3095 2520 97000000 		call	memcpy		#
 3095      E7800000 
 3096 2528 03288101 		lw	a6,24(sp)		#, %sfp
 3097 252c 8327C100 		lw	a5,12(sp)		#, %sfp
 3098 2530 03278100 		lw	a4,8(sp)		#, %sfp
 3099 2534 83264100 		lw	a3,4(sp)		#, %sfp
 3100 2538 93080000 		li	a7,0		#,
 3101 253c 13060102 		addi	a2,sp,32	#,,
 3102 2540 93050103 		addi	a1,sp,48	#, tmp168,
 3103 2544 13050104 		addi	a0,sp,64	#,,
 3104 2548 97000000 		call	cast_ray		#
 3104      E7800000 
 3105              	# main_raytrace.c:339:       set_pixel(fb, i,j,C.x,C.y,C.z);
 3106 2550 83278104 		lw	a5,72(sp)		#, C.z
 3107 2554 03274104 		lw	a4,68(sp)		#, C.y
 3108 2558 83260104 		lw	a3,64(sp)		#, C.x
 3109 255c 03250100 		lw	a0,0(sp)		#, %sfp
 3110 2560 93050900 		mv	a1,s2	#, i
 3111 2564 13060D00 		mv	a2,s10	#, j
 3112 2568 97000000 		call	set_pixel		#
 3112      E7800000 
 3113              	# main_raytrace.c:334:     for (int i = 0; i<HRENDER; i++) {
 3114 2570 13091900 		addi	s2,s2,1	#, i, i
 3115              	# main_raytrace.c:334:     for (int i = 0; i<HRENDER; i++) {
 3116 2574 93070006 		li	a5,96		# tmp134,
 3117 2578 E312F9E8 		bne	s2,a5,.L198	#, i, tmp134,
 3118              	# main_raytrace.c:322:   for (int j = 0; j<VRENDER; j++) { // actual rendering loop
 3119 257c 130D1D00 		addi	s10,s10,1	#, j, j
 3120              	# main_raytrace.c:322:   for (int j = 0; j<VRENDER; j++) { // actual rendering loop
 3121 2580 93070004 		li	a5,64		# tmp135,
 3122 2584 E314FDE4 		bne	s10,a5,.L199	#, j, tmp135,
 3123              	# main_raytrace.c:357: }
 3124 2588 8320C10A 		lw	ra,172(sp)		#,
 3125 258c 0324810A 		lw	s0,168(sp)		#,
 3126 2590 8324410A 		lw	s1,164(sp)		#,
 3127 2594 0329010A 		lw	s2,160(sp)		#,
 3128 2598 8329C109 		lw	s3,156(sp)		#,
 3129 259c 032A8109 		lw	s4,152(sp)		#,
 3130 25a0 832A4109 		lw	s5,148(sp)		#,
 3131 25a4 032B0109 		lw	s6,144(sp)		#,
 3132 25a8 832BC108 		lw	s7,140(sp)		#,
 3133 25ac 032C8108 		lw	s8,136(sp)		#,
 3134 25b0 832C4108 		lw	s9,132(sp)		#,
 3135 25b4 032D0108 		lw	s10,128(sp)		#,
 3136 25b8 832DC107 		lw	s11,124(sp)		#,
 3137 25bc 1301010B 		addi	sp,sp,176	#,,
 3138 25c0 67800000 		jr	ra		#
 3140              		.align	2
 3141              		.globl	init_scene
 3143              	init_scene:
 3144 25c4 130101E3 		addi	sp,sp,-464	#,,
 3145              	# main_raytrace.c:47:   return V;
 3146 25c8 B7070000 		lui	a5,%hi(.LC31)	# tmp72,
 3147              	# main_raytrace.c:365: void init_scene() {
 3148 25cc 232E311B 		sw	s3,444(sp)	#,
 3149              	# main_raytrace.c:47:   return V;
 3150 25d0 83A90700 		lw	s3,%lo(.LC31)(a5)		# tmp73,
 3151 25d4 B7070000 		lui	a5,%hi(.LC11)	# tmp74,
 3152              	# main_raytrace.c:365: void init_scene() {
 3153 25d8 232C411B 		sw	s4,440(sp)	#,
 3154              	# main_raytrace.c:47:   return V;
 3155 25dc 03AA0700 		lw	s4,%lo(.LC11)(a5)		# tmp75,
 3156 25e0 B7070000 		lui	a5,%hi(.LC13)	# tmp76,
 3157              	# main_raytrace.c:365: void init_scene() {
 3158 25e4 2322911C 		sw	s1,452(sp)	#,
 3159              	# main_raytrace.c:47:   return V;
 3160 25e8 83A40700 		lw	s1,%lo(.LC13)(a5)		# tmp77,
 3161              	# main_raytrace.c:41:   return V;
 3162 25ec B7070000 		lui	a5,%hi(.LC32)	# tmp78,
 3163 25f0 83A70700 		lw	a5,%lo(.LC32)(a5)		# tmp79,
 3164              	# main_raytrace.c:365: void init_scene() {
 3165 25f4 2328611B 		sw	s6,432(sp)	#,
 3166              	# main_raytrace.c:366:     Material      ivory = make_Material(1.0, make_vec4(0.6,  0.3, 0.1, 0.0),
 3167 25f8 9305010E 		addi	a1,sp,224	#,,
 3168              	# main_raytrace.c:47:   return V;
 3169 25fc 130B0000 		mv	s6,zero	# tmp306,
 3170              	# main_raytrace.c:366:     Material      ivory = make_Material(1.0, make_vec4(0.6,  0.3, 0.1, 0.0),
 3171 2600 13060001 		li	a2,16		#,
 3172 2604 13050104 		addi	a0,sp,64	#, tmp307,
 3173              	# main_raytrace.c:365: void init_scene() {
 3174 2608 2326111C 		sw	ra,460(sp)	#,
 3175 260c 2324811C 		sw	s0,456(sp)	#,
 3176 2610 2320211D 		sw	s2,448(sp)	#,
 3177 2614 232A511B 		sw	s5,436(sp)	#,
 3178              	# main_raytrace.c:41:   return V;
 3179 2618 232EF104 		sw	a5,92(sp)	# tmp79, D.2166.x
 3180 261c 2320F106 		sw	a5,96(sp)	# tmp79, D.2166.y
 3181              	# main_raytrace.c:47:   return V;
 3182 2620 2320310F 		sw	s3,224(sp)	# tmp73, D.2165.x
 3183 2624 2322410F 		sw	s4,228(sp)	# tmp75, D.2165.y
 3184 2628 2324910E 		sw	s1,232(sp)	# tmp77, D.2165.z
 3185 262c 2326610F 		sw	s6,236(sp)	# tmp306, D.2165.w
 3186              	# main_raytrace.c:41:   return V;
 3187 2630 23224107 		sw	s4,100(sp)	# tmp75, D.2166.z
 3188              	# main_raytrace.c:366:     Material      ivory = make_Material(1.0, make_vec4(0.6,  0.3, 0.1, 0.0),
 3189 2634 97000000 		call	memcpy		#
 3189      E7800000 
 3190 263c 9305C105 		addi	a1,sp,92	#,,
 3191 2640 1306C000 		li	a2,12		#,
 3192 2644 13050103 		addi	a0,sp,48	#, tmp308,
 3193 2648 97000000 		call	memcpy		#
 3193      E7800000 
 3194 2650 B7070000 		lui	a5,%hi(.LC33)	# tmp94,
 3195 2654 83AA0700 		lw	s5,%lo(.LC33)(a5)		# tmp93,
 3196 2658 B7070000 		lui	a5,%hi(.LC0)	# tmp98,
 3197 265c 03A40700 		lw	s0,%lo(.LC0)(a5)		# tmp97,
 3198 2660 13870A00 		mv	a4,s5	#, tmp93
 3199 2664 93060103 		addi	a3,sp,48	#, tmp309,
 3200 2668 13060104 		addi	a2,sp,64	#, tmp310,
 3201 266c 93050400 		mv	a1,s0	#, tmp97
 3202 2670 13050112 		addi	a0,sp,288	#, tmp311,
 3203 2674 97000000 		call	make_Material		#
 3203      E7800000 
 3204              	# main_raytrace.c:47:   return V;
 3205 267c B7070000 		lui	a5,%hi(.LC19)	# tmp99,
 3206 2680 83A70700 		lw	a5,%lo(.LC19)(a5)		# tmp100,
 3207              	# main_raytrace.c:367:     Material      glass = make_Material(1.5, make_vec4(0.0,  0.5, 0.1, 0.8),
 3208 2684 9305010F 		addi	a1,sp,240	#,,
 3209 2688 13060001 		li	a2,16		#,
 3210              	# main_raytrace.c:47:   return V;
 3211 268c 232AF10E 		sw	a5,244(sp)	# tmp100, D.2167.y
 3212 2690 B7070000 		lui	a5,%hi(.LC20)	# tmp103,
 3213 2694 03A90700 		lw	s2,%lo(.LC20)(a5)		# tmp104,
 3214              	# main_raytrace.c:41:   return V;
 3215 2698 B7070000 		lui	a5,%hi(.LC18)	# tmp107,
 3216 269c 83A70700 		lw	a5,%lo(.LC18)(a5)		# tmp108,
 3217              	# main_raytrace.c:367:     Material      glass = make_Material(1.5, make_vec4(0.0,  0.5, 0.1, 0.8),
 3218 26a0 13050104 		addi	a0,sp,64	#, tmp313,
 3219              	# main_raytrace.c:47:   return V;
 3220 26a4 2328610F 		sw	s6,240(sp)	# tmp312, D.2167.x
 3221              	# main_raytrace.c:41:   return V;
 3222 26a8 2326F106 		sw	a5,108(sp)	# tmp108, D.2168.y
 3223              	# main_raytrace.c:47:   return V;
 3224 26ac 232C910E 		sw	s1,248(sp)	# tmp77, D.2167.z
 3225 26b0 232E210F 		sw	s2,252(sp)	# tmp104, D.2167.w
 3226              	# main_raytrace.c:41:   return V;
 3227 26b4 23243107 		sw	s3,104(sp)	# tmp73, D.2168.x
 3228 26b8 23282107 		sw	s2,112(sp)	# tmp104, D.2168.z
 3229              	# main_raytrace.c:367:     Material      glass = make_Material(1.5, make_vec4(0.0,  0.5, 0.1, 0.8),
 3230 26bc 97000000 		call	memcpy		#
 3230      E7800000 
 3231 26c4 93058106 		addi	a1,sp,104	#,,
 3232 26c8 1306C000 		li	a2,12		#,
 3233 26cc 13050103 		addi	a0,sp,48	#, tmp314,
 3234 26d0 97000000 		call	memcpy		#
 3234      E7800000 
 3235 26d8 B7070000 		lui	a5,%hi(.LC35)	# tmp125,
 3236 26dc 83A90700 		lw	s3,%lo(.LC35)(a5)		# tmp124,
 3237 26e0 B7070000 		lui	a5,%hi(.LC34)	# tmp121,
 3238 26e4 03A70700 		lw	a4,%lo(.LC34)(a5)		#,
 3239 26e8 93060103 		addi	a3,sp,48	#, tmp315,
 3240 26ec 13060104 		addi	a2,sp,64	#, tmp316,
 3241 26f0 93850900 		mv	a1,s3	#, tmp124
 3242 26f4 13054114 		addi	a0,sp,324	#, tmp317,
 3243 26f8 97000000 		call	make_Material		#
 3243      E7800000 
 3244              	# main_raytrace.c:47:   return V;
 3245 2700 B7070000 		lui	a5,%hi(.LC36)	# tmp126,
 3246 2704 83A70700 		lw	a5,%lo(.LC36)(a5)		# tmp127,
 3247              	# main_raytrace.c:368:     Material red_rubber = make_Material(1.0, make_vec4(0.9,  0.1, 0.0, 0.0),
 3248 2708 93050110 		addi	a1,sp,256	#,,
 3249 270c 13060001 		li	a2,16		#,
 3250 2710 13050104 		addi	a0,sp,64	#, tmp320,
 3251              	# main_raytrace.c:47:   return V;
 3252 2714 2320F110 		sw	a5,256(sp)	# tmp127, D.2169.x
 3253 2718 23229110 		sw	s1,260(sp)	# tmp77, D.2169.y
 3254 271c 23246111 		sw	s6,264(sp)	# tmp318, D.2169.z
 3255 2720 23266111 		sw	s6,268(sp)	# tmp319, D.2169.w
 3256              	# main_raytrace.c:41:   return V;
 3257 2724 232A4107 		sw	s4,116(sp)	# tmp75, D.2170.x
 3258 2728 232C9106 		sw	s1,120(sp)	# tmp77, D.2170.y
 3259 272c 232E9106 		sw	s1,124(sp)	# tmp77, D.2170.z
 3260              	# main_raytrace.c:368:     Material red_rubber = make_Material(1.0, make_vec4(0.9,  0.1, 0.0, 0.0),
 3261 2730 97000000 		call	memcpy		#
 3261      E7800000 
 3262 2738 93054107 		addi	a1,sp,116	#,,
 3263 273c 1306C000 		li	a2,12		#,
 3264 2740 13050103 		addi	a0,sp,48	#, tmp321,
 3265 2744 97000000 		call	memcpy		#
 3265      E7800000 
 3266 274c B7070000 		lui	a5,%hi(.LC37)	# tmp146,
 3267 2750 83A40700 		lw	s1,%lo(.LC37)(a5)		# tmp145,
 3268 2754 93060103 		addi	a3,sp,48	#, tmp322,
 3269 2758 13060104 		addi	a2,sp,64	#, tmp323,
 3270 275c 13870400 		mv	a4,s1	#, tmp145
 3271 2760 93050400 		mv	a1,s0	#, tmp97
 3272 2764 13058116 		addi	a0,sp,360	#, tmp324,
 3273 2768 97000000 		call	make_Material		#
 3273      E7800000 
 3274              	# main_raytrace.c:369:     Material     mirror = make_Material(1.0, make_vec4(0.0, 10.0, 0.8, 0.0),
 3275 2770 93050111 		addi	a1,sp,272	#,,
 3276 2774 13060001 		li	a2,16		#,
 3277 2778 13050104 		addi	a0,sp,64	#, tmp327,
 3278              	# main_raytrace.c:47:   return V;
 3279 277c 23286111 		sw	s6,272(sp)	# tmp325, D.2171.x
 3280 2780 232A9110 		sw	s1,276(sp)	# tmp145, D.2171.y
 3281 2784 232C2111 		sw	s2,280(sp)	# tmp104, D.2171.z
 3282 2788 232E6111 		sw	s6,284(sp)	# tmp326, D.2171.w
 3283              	# main_raytrace.c:41:   return V;
 3284 278c 23208108 		sw	s0,128(sp)	# tmp97, D.2172.x
 3285 2790 23228108 		sw	s0,132(sp)	# tmp97, D.2172.y
 3286 2794 23248108 		sw	s0,136(sp)	# tmp97, D.2172.z
 3287              	# main_raytrace.c:369:     Material     mirror = make_Material(1.0, make_vec4(0.0, 10.0, 0.8, 0.0),
 3288 2798 97000000 		call	memcpy		#
 3288      E7800000 
 3289 27a0 93050108 		addi	a1,sp,128	#,,
 3290 27a4 1306C000 		li	a2,12		#,
 3291 27a8 13050103 		addi	a0,sp,48	#, tmp328,
 3292 27ac 97000000 		call	memcpy		#
 3292      E7800000 
 3293 27b4 B7070000 		lui	a5,%hi(.LC38)	# tmp171,
 3294 27b8 03A70700 		lw	a4,%lo(.LC38)(a5)		#,
 3295 27bc 93060103 		addi	a3,sp,48	#, tmp329,
 3296 27c0 13060104 		addi	a2,sp,64	#, tmp330,
 3297 27c4 93050400 		mv	a1,s0	#, tmp97
 3298 27c8 1305C118 		addi	a0,sp,396	#, tmp331,
 3299 27cc 97000000 		call	make_Material		#
 3299      E7800000 
 3300              	# main_raytrace.c:41:   return V;
 3301 27d4 B7070000 		lui	a5,%hi(.LC39)	# tmp176,
 3302 27d8 83A70700 		lw	a5,%lo(.LC39)(a5)		# tmp177,
 3303              	# main_raytrace.c:371:     spheres[0] = make_Sphere(make_vec3(-3,    0,   -16), 2,      ivory);
 3304 27dc 9305C108 		addi	a1,sp,140	#,,
 3305 27e0 1306C000 		li	a2,12		#,
 3306              	# main_raytrace.c:41:   return V;
 3307 27e4 2326F108 		sw	a5,140(sp)	# tmp177, D.2173.x
 3308 27e8 B7070000 		lui	a5,%hi(.LC40)	# tmp178,
 3309 27ec 83A70700 		lw	a5,%lo(.LC40)(a5)		# tmp179,
 3310              	# main_raytrace.c:371:     spheres[0] = make_Sphere(make_vec3(-3,    0,   -16), 2,      ivory);
 3311 27f0 13050103 		addi	a0,sp,48	#, tmp333,
 3312              	# main_raytrace.c:41:   return V;
 3313 27f4 23286109 		sw	s6,144(sp)	# tmp332, D.2173.y
 3314 27f8 232AF108 		sw	a5,148(sp)	# tmp179, D.2173.z
 3315              	# main_raytrace.c:371:     spheres[0] = make_Sphere(make_vec3(-3,    0,   -16), 2,      ivory);
 3316 27fc 97000000 		call	memcpy		#
 3316      E7800000 
 3317 2804 93050112 		addi	a1,sp,288	#, tmp334,
 3318 2808 13064002 		li	a2,36		#,
 3319 280c 13050100 		mv	a0,sp	#,
 3320 2810 97000000 		call	memcpy		#
 3320      E7800000 
 3321 2818 B7070000 		lui	a5,%hi(.LC41)	# tmp192,
 3322 281c 83A40700 		lw	s1,%lo(.LC41)(a5)		# tmp191,
 3323 2820 37090000 		lui	s2,%hi(.LANCHOR1)	# tmp181,
 3324 2824 93060100 		mv	a3,sp	#,
 3325 2828 13860400 		mv	a2,s1	#, tmp191
 3326 282c 93050103 		addi	a1,sp,48	#, tmp335,
 3327 2830 13050900 		addi	a0,s2,%lo(.LANCHOR1)	#, tmp181,
 3328 2834 97000000 		call	make_Sphere		#
 3328      E7800000 
 3329              	# main_raytrace.c:41:   return V;
 3330 283c B7070000 		lui	a5,%hi(.LC2)	# tmp194,
 3331 2840 83A70700 		lw	a5,%lo(.LC2)(a5)		# tmp195,
 3332              	# main_raytrace.c:372:     spheres[1] = make_Sphere(make_vec3(-1.0, -1.5, -12), 2,      glass);
 3333 2844 93058109 		addi	a1,sp,152	#,,
 3334 2848 1306C000 		li	a2,12		#,
 3335              	# main_raytrace.c:41:   return V;
 3336 284c 232CF108 		sw	a5,152(sp)	# tmp195, D.2174.x
 3337 2850 B7070000 		lui	a5,%hi(.LC42)	# tmp196,
 3338 2854 83A70700 		lw	a5,%lo(.LC42)(a5)		# tmp197,
 3339              	# main_raytrace.c:372:     spheres[1] = make_Sphere(make_vec3(-1.0, -1.5, -12), 2,      glass);
 3340 2858 13050103 		addi	a0,sp,48	#, tmp336,
 3341              	# main_raytrace.c:371:     spheres[0] = make_Sphere(make_vec3(-3,    0,   -16), 2,      ivory);
 3342 285c 13040900 		addi	s0,s2,%lo(.LANCHOR1)	# tmp180, tmp181,
 3343              	# main_raytrace.c:41:   return V;
 3344 2860 232EF108 		sw	a5,156(sp)	# tmp197, D.2174.y
 3345 2864 B7070000 		lui	a5,%hi(.LC43)	# tmp198,
 3346 2868 83A70700 		lw	a5,%lo(.LC43)(a5)		# tmp199,
 3347              	# main_raytrace.c:372:     spheres[1] = make_Sphere(make_vec3(-1.0, -1.5, -12), 2,      glass);
 3348 286c 13094403 		addi	s2,s0,52	#, tmp202, tmp180
 3349              	# main_raytrace.c:41:   return V;
 3350 2870 2320F10A 		sw	a5,160(sp)	# tmp199, D.2174.z
 3351              	# main_raytrace.c:372:     spheres[1] = make_Sphere(make_vec3(-1.0, -1.5, -12), 2,      glass);
 3352 2874 97000000 		call	memcpy		#
 3352      E7800000 
 3353 287c 93054114 		addi	a1,sp,324	#, tmp337,
 3354 2880 13064002 		li	a2,36		#,
 3355 2884 13050100 		mv	a0,sp	#,
 3356 2888 97000000 		call	memcpy		#
 3356      E7800000 
 3357 2890 93060100 		mv	a3,sp	#,
 3358 2894 13860400 		mv	a2,s1	#, tmp191
 3359 2898 93050103 		addi	a1,sp,48	#, tmp338,
 3360 289c 13050900 		mv	a0,s2	#, tmp202
 3361 28a0 97000000 		call	make_Sphere		#
 3361      E7800000 
 3362              	# main_raytrace.c:41:   return V;
 3363 28a8 B7070000 		lui	a5,%hi(.LC44)	# tmp217,
 3364 28ac 83A70700 		lw	a5,%lo(.LC44)(a5)		# tmp218,
 3365              	# main_raytrace.c:373:     spheres[2] = make_Sphere(make_vec3( 1.5, -0.5, -18), 3, red_rubber);
 3366 28b0 9305410A 		addi	a1,sp,164	#,,
 3367 28b4 1306C000 		li	a2,12		#,
 3368              	# main_raytrace.c:41:   return V;
 3369 28b8 2324F10A 		sw	a5,168(sp)	# tmp218, D.2175.y
 3370 28bc B7070000 		lui	a5,%hi(.LC45)	# tmp219,
 3371 28c0 83A40700 		lw	s1,%lo(.LC45)(a5)		# tmp220,
 3372              	# main_raytrace.c:373:     spheres[2] = make_Sphere(make_vec3( 1.5, -0.5, -18), 3, red_rubber);
 3373 28c4 13050103 		addi	a0,sp,48	#, tmp339,
 3374              	# main_raytrace.c:41:   return V;
 3375 28c8 2322310B 		sw	s3,164(sp)	# tmp124, D.2175.x
 3376 28cc 2326910A 		sw	s1,172(sp)	# tmp220, D.2175.z
 3377              	# main_raytrace.c:373:     spheres[2] = make_Sphere(make_vec3( 1.5, -0.5, -18), 3, red_rubber);
 3378 28d0 97000000 		call	memcpy		#
 3378      E7800000 
 3379 28d8 93058116 		addi	a1,sp,360	#, tmp340,
 3380 28dc 13064002 		li	a2,36		#,
 3381 28e0 13050100 		mv	a0,sp	#,
 3382 28e4 97000000 		call	memcpy		#
 3382      E7800000 
 3383 28ec B7070000 		lui	a5,%hi(.LC46)	# tmp234,
 3384 28f0 03A60700 		lw	a2,%lo(.LC46)(a5)		#,
 3385 28f4 13098406 		addi	s2,s0,104	#, tmp223, tmp180
 3386 28f8 93060100 		mv	a3,sp	#,
 3387 28fc 93050103 		addi	a1,sp,48	#, tmp341,
 3388 2900 13050900 		mv	a0,s2	#, tmp223
 3389 2904 97000000 		call	make_Sphere		#
 3389      E7800000 
 3390              	# main_raytrace.c:41:   return V;
 3391 290c B7070000 		lui	a5,%hi(.LC47)	# tmp236,
 3392 2910 83A70700 		lw	a5,%lo(.LC47)(a5)		# tmp237,
 3393              	# main_raytrace.c:374:     spheres[3] = make_Sphere(make_vec3( 7,    5,   -18), 4,     mirror);
 3394 2914 9305010B 		addi	a1,sp,176	#,,
 3395 2918 1306C000 		li	a2,12		#,
 3396              	# main_raytrace.c:41:   return V;
 3397 291c 2328F10A 		sw	a5,176(sp)	# tmp237, D.2176.x
 3398 2920 B7070000 		lui	a5,%hi(.LC48)	# tmp238,
 3399 2924 83A70700 		lw	a5,%lo(.LC48)(a5)		# tmp239,
 3400              	# main_raytrace.c:374:     spheres[3] = make_Sphere(make_vec3( 7,    5,   -18), 4,     mirror);
 3401 2928 13050103 		addi	a0,sp,48	#, tmp342,
 3402              	# main_raytrace.c:41:   return V;
 3403 292c 232C910A 		sw	s1,184(sp)	# tmp220, D.2176.z
 3404 2930 232AF10A 		sw	a5,180(sp)	# tmp239, D.2176.y
 3405              	# main_raytrace.c:374:     spheres[3] = make_Sphere(make_vec3( 7,    5,   -18), 4,     mirror);
 3406 2934 97000000 		call	memcpy		#
 3406      E7800000 
 3407 293c 9305C118 		addi	a1,sp,396	#, tmp343,
 3408 2940 13064002 		li	a2,36		#,
 3409 2944 13050100 		mv	a0,sp	#,
 3410 2948 97000000 		call	memcpy		#
 3410      E7800000 
 3411 2950 B7070000 		lui	a5,%hi(.LC5)	# tmp255,
 3412 2954 03A60700 		lw	a2,%lo(.LC5)(a5)		#,
 3413 2958 9304C409 		addi	s1,s0,156	#, tmp244, tmp180
 3414 295c 93060100 		mv	a3,sp	#,
 3415 2960 93050103 		addi	a1,sp,48	#, tmp344,
 3416 2964 13850400 		mv	a0,s1	#, tmp244
 3417 2968 97000000 		call	make_Sphere		#
 3417      E7800000 
 3418              	# main_raytrace.c:41:   return V;
 3419 2970 B7070000 		lui	a5,%hi(.LC49)	# tmp257,
 3420 2974 83A70700 		lw	a5,%lo(.LC49)(a5)		# tmp258,
 3421              	# main_raytrace.c:376:     lights[0] = make_Light(make_vec3(-20, 20,  20), 1.5);
 3422 2978 9305C10B 		addi	a1,sp,188	#,,
 3423 297c 1306C000 		li	a2,12		#,
 3424              	# main_raytrace.c:41:   return V;
 3425 2980 232EF10A 		sw	a5,188(sp)	# tmp258, D.2177.x
 3426 2984 B7070000 		lui	a5,%hi(.LC50)	# tmp259,
 3427 2988 03A90700 		lw	s2,%lo(.LC50)(a5)		# tmp260,
 3428              	# main_raytrace.c:376:     lights[0] = make_Light(make_vec3(-20, 20,  20), 1.5);
 3429 298c 13050103 		addi	a0,sp,48	#, tmp345,
 3430 2990 9304040D 		addi	s1,s0,208	#, tmp265, tmp180
 3431              	# main_raytrace.c:41:   return V;
 3432 2994 2320210D 		sw	s2,192(sp)	# tmp260, D.2177.y
 3433 2998 2322210D 		sw	s2,196(sp)	# tmp260, D.2177.z
 3434              	# main_raytrace.c:376:     lights[0] = make_Light(make_vec3(-20, 20,  20), 1.5);
 3435 299c 97000000 		call	memcpy		#
 3435      E7800000 
 3436 29a4 13860900 		mv	a2,s3	#, tmp124
 3437 29a8 93050103 		addi	a1,sp,48	#, tmp346,
 3438 29ac 13850400 		mv	a0,s1	#, tmp265
 3439 29b0 97000000 		call	make_Light		#
 3439      E7800000 
 3440              	# main_raytrace.c:41:   return V;
 3441 29b8 B7070000 		lui	a5,%hi(.LC51)	# tmp273,
 3442 29bc 83A40700 		lw	s1,%lo(.LC51)(a5)		# tmp274,
 3443 29c0 B7070000 		lui	a5,%hi(.LC52)	# tmp277,
 3444 29c4 83A70700 		lw	a5,%lo(.LC52)(a5)		# tmp278,
 3445              	# main_raytrace.c:377:     lights[1] = make_Light(make_vec3( 30, 50, -25), 1.8);
 3446 29c8 9305810C 		addi	a1,sp,200	#,,
 3447 29cc 1306C000 		li	a2,12		#,
 3448 29d0 13050103 		addi	a0,sp,48	#, tmp347,
 3449              	# main_raytrace.c:41:   return V;
 3450 29d4 2324910C 		sw	s1,200(sp)	# tmp274, D.2178.x
 3451 29d8 2326510D 		sw	s5,204(sp)	# tmp93, D.2178.y
 3452 29dc 2328F10C 		sw	a5,208(sp)	# tmp278, D.2178.z
 3453              	# main_raytrace.c:377:     lights[1] = make_Light(make_vec3( 30, 50, -25), 1.8);
 3454 29e0 97000000 		call	memcpy		#
 3454      E7800000 
 3455 29e8 B7070000 		lui	a5,%hi(.LC53)	# tmp287,
 3456 29ec 03A60700 		lw	a2,%lo(.LC53)(a5)		#,
 3457 29f0 9309040E 		addi	s3,s0,224	#, tmp281, tmp180
 3458 29f4 93050103 		addi	a1,sp,48	#, tmp348,
 3459 29f8 13850900 		mv	a0,s3	#, tmp281
 3460 29fc 97000000 		call	make_Light		#
 3460      E7800000 
 3461              	# main_raytrace.c:378:     lights[2] = make_Light(make_vec3( 30, 20,  30), 1.7);
 3462 2a04 9305410D 		addi	a1,sp,212	#,,
 3463 2a08 1306C000 		li	a2,12		#,
 3464 2a0c 13050103 		addi	a0,sp,48	#, tmp349,
 3465              	# main_raytrace.c:41:   return V;
 3466 2a10 232A910C 		sw	s1,212(sp)	# tmp274, D.2179.x
 3467 2a14 232C210D 		sw	s2,216(sp)	# tmp260, D.2179.y
 3468 2a18 232E910C 		sw	s1,220(sp)	# tmp274, D.2179.z
 3469              	# main_raytrace.c:378:     lights[2] = make_Light(make_vec3( 30, 20,  30), 1.7);
 3470 2a1c 97000000 		call	memcpy		#
 3470      E7800000 
 3471 2a24 B7070000 		lui	a5,%hi(.LC54)	# tmp303,
 3472 2a28 03A60700 		lw	a2,%lo(.LC54)(a5)		#,
 3473 2a2c 1304040F 		addi	s0,s0,240	#, tmp297, tmp180
 3474 2a30 93050103 		addi	a1,sp,48	#, tmp350,
 3475 2a34 13050400 		mv	a0,s0	#, tmp297
 3476 2a38 97000000 		call	make_Light		#
 3476      E7800000 
 3477              	# main_raytrace.c:379: }
 3478 2a40 8320C11C 		lw	ra,460(sp)		#,
 3479 2a44 0324811C 		lw	s0,456(sp)		#,
 3480 2a48 8324411C 		lw	s1,452(sp)		#,
 3481 2a4c 0329011C 		lw	s2,448(sp)		#,
 3482 2a50 8329C11B 		lw	s3,444(sp)		#,
 3483 2a54 032A811B 		lw	s4,440(sp)		#,
 3484 2a58 832A411B 		lw	s5,436(sp)		#,
 3485 2a5c 032B011B 		lw	s6,432(sp)		#,
 3486 2a60 1301011D 		addi	sp,sp,464	#,,
 3487 2a64 67800000 		jr	ra		#
 3489              		.align	2
 3490              		.globl	fill_oled
 3492              	fill_oled:
 3493              	# main_raytrace.c:384:       *((volatile uint32_t*) VIDEO) = (((uint32_t) rgb & 0xffff) << 16Ul) | 
 3494 2a68 13150501 		slli	a0,a0,16	#, _2, tmp84
 3495              	# main_raytrace.c:382:   for (int y = 0; y < 64; y++) {
 3496 2a6c 13070000 		li	a4,0		# y,
 3497              	# main_raytrace.c:384:       *((volatile uint32_t*) VIDEO) = (((uint32_t) rgb & 0xffff) << 16Ul) | 
 3498 2a70 37060030 		li	a2,805306368		# tmp81,
 3499              	# main_raytrace.c:383:     for (int x = 0; x < 96; x++) {
 3500 2a74 B7650000 		li	a1,24576		# tmp82,
 3501              	# main_raytrace.c:382:   for (int y = 0; y < 64; y++) {
 3502 2a78 13080004 		li	a6,64		# tmp83,
 3503              	.L206:
 3504 2a7c B366A700 		or	a3,a4,a0	# _2, _20, y
 3505              	# main_raytrace.c:381: void fill_oled(int rgb) {
 3506 2a80 93070000 		li	a5,0		# ivtmp.600,
 3507              	.L207:
 3508              	# main_raytrace.c:384:       *((volatile uint32_t*) VIDEO) = (((uint32_t) rgb & 0xffff) << 16Ul) | 
 3509 2a84 B3E8D700 		or	a7,a5,a3	# _20, _9, ivtmp.600
 3510              	# main_raytrace.c:384:       *((volatile uint32_t*) VIDEO) = (((uint32_t) rgb & 0xffff) << 16Ul) | 
 3511 2a88 23241601 		sw	a7,8(a2)	# _9, MEM[(volatile uint32_t *)805306376B]
 3512              	# main_raytrace.c:383:     for (int x = 0; x < 96; x++) {
 3513 2a8c 93870710 		addi	a5,a5,256	#, ivtmp.600, ivtmp.600
 3514 2a90 E39AB7FE 		bne	a5,a1,.L207	#, ivtmp.600, tmp82,
 3515              	# main_raytrace.c:382:   for (int y = 0; y < 64; y++) {
 3516 2a94 13071700 		addi	a4,a4,1	#, y, y
 3517              	# main_raytrace.c:382:   for (int y = 0; y < 64; y++) {
 3518 2a98 E31207FF 		bne	a4,a6,.L206	#, y, tmp83,
 3519              	# main_raytrace.c:387: }
 3520 2a9c 67800000 		ret	
 3522              		.section	.rodata.str1.4
 3523 0037 00       		.align	2
 3524              	.LC55:
 3525 0038 646F6E65 		.string	"done======================="
 3525      3D3D3D3D 
 3525      3D3D3D3D 
 3525      3D3D3D3D 
 3525      3D3D3D3D 
 3526              		.section	.text.startup,"ax",@progbits
 3527              		.align	2
 3528              		.globl	main
 3530              	main:
 3531 0000 130101FD 		addi	sp,sp,-48	#,,
 3532 0004 23248102 		sw	s0,40(sp)	#,
 3533              	# main_raytrace.c:406:     render(fb, spheres, nb_spheres, lights, nb_lights);
 3534 0008 37040000 		lui	s0,%hi(.LANCHOR1)	# tmp78,
 3535              	# main_raytrace.c:391: void main() {
 3536 000c 23202103 		sw	s2,32(sp)	#,
 3537              	# main_raytrace.c:406:     render(fb, spheres, nb_spheres, lights, nb_lights);
 3538 0010 13040400 		addi	s0,s0,%lo(.LANCHOR1)	# tmp77, tmp78,
 3539              	# main_raytrace.c:410:     wait_cycles(40000000*5);
 3540 0014 37C9EB0B 		li	s2,199999488		# tmp87,
 3541              	# main_raytrace.c:391: void main() {
 3542 0018 23229102 		sw	s1,36(sp)	#,
 3543 001c 232E3101 		sw	s3,28(sp)	#,
 3544 0020 232C4101 		sw	s4,24(sp)	#,
 3545 0024 232A5101 		sw	s5,20(sp)	#,
 3546 0028 23286101 		sw	s6,16(sp)	#,
 3547 002c 23267101 		sw	s7,12(sp)	#,
 3548 0030 23261102 		sw	ra,44(sp)	#,
 3549              	# main_raytrace.c:406:     render(fb, spheres, nb_spheres, lights, nb_lights);
 3550 0034 B70B0000 		lui	s7,%hi(nb_lights)	# tmp75,
 3551 0038 130B040D 		addi	s6,s0,208	#, tmp79, tmp77
 3552 003c B70A0000 		lui	s5,%hi(nb_spheres)	# tmp80,
 3553 0040 370A0000 		lui	s4,%hi(fb)	# tmp84,
 3554              	# main_raytrace.c:407:     print_str("done=======================");
 3555 0044 B7040000 		lui	s1,%hi(.LC55)	# tmp86,
 3556              	# main_raytrace.c:410:     wait_cycles(40000000*5);
 3557 0048 13090920 		addi	s2,s2,512	#, tmp87, tmp87
 3558 004c 93090000 		li	s3,0		#,
 3559              	.L211:
 3560              	# main_raytrace.c:404:     fill_oled(0);
 3561 0050 13050000 		li	a0,0		#,
 3562 0054 97000000 		call	fill_oled		#
 3562      E7800000 
 3563              	# main_raytrace.c:405:     init_scene();
 3564 005c 97000000 		call	init_scene		#
 3564      E7800000 
 3565              	# main_raytrace.c:406:     render(fb, spheres, nb_spheres, lights, nb_lights);
 3566 0064 03A70B00 		lw	a4,%lo(nb_lights)(s7)		#, nb_lights
 3567 0068 03A60A00 		lw	a2,%lo(nb_spheres)(s5)		#, nb_spheres
 3568 006c 03250A00 		lw	a0,%lo(fb)(s4)		#, fb
 3569 0070 93050400 		mv	a1,s0	#, tmp77
 3570 0074 93060B00 		mv	a3,s6	#, tmp79
 3571 0078 97000000 		call	render		#
 3571      E7800000 
 3572              	# main_raytrace.c:407:     print_str("done=======================");
 3573 0080 13850400 		addi	a0,s1,%lo(.LC55)	#, tmp86,
 3574 0084 97000000 		call	print_str		#
 3574      E7800000 
 3575              	# main_raytrace.c:408:     putchar(10);
 3576 008c 1305A000 		li	a0,10		#,
 3577 0090 97000000 		call	putchar		#
 3577      E7800000 
 3578              	# main_raytrace.c:409:     show_csr_timer_cnt();
 3579 0098 97000000 		call	show_csr_timer_cnt		#
 3579      E7800000 
 3580              	# main_raytrace.c:410:     wait_cycles(40000000*5);
 3581 00a0 13050900 		mv	a0,s2	#, tmp87
 3582 00a4 93850900 		mv	a1,s3	#,
 3583 00a8 97000000 		call	wait_cycles		#
 3583      E7800000 
 3584 00b0 6FF01FFA 		j	.L211		#
 3586              		.globl	fb
 3587              		.globl	lights
 3588              		.globl	nb_lights
 3589              		.globl	spheres
 3590              		.globl	nb_spheres
 3591              		.globl	dither
 3592              		.globl	__errno
 3593              		.globl	VRENDER
 3594              		.globl	HRENDER
 3595              		.globl	VRES
 3596              		.globl	HRES
 3597              		.section	.srodata.cst4,"aM",@progbits,4
 3598              		.align	2
 3599              	.LC0:
 3600 0000 0000803F 		.word	1065353216
 3601              		.align	2
 3602              	.LC2:
 3603 0004 000080BF 		.word	-1082130432
 3604              		.align	2
 3605              	.LC3:
 3606 0008 CAF24971 		.word	1900671690
 3607              		.section	.srodata.cst8,"aM",@progbits,8
 3608              		.align	3
 3609              	.LC4:
 3610 0000 FCA9F1D2 		.word	-755914244
 3611 0004 4D62503F 		.word	1062232653
 3612              		.section	.srodata.cst4
 3613              		.align	2
 3614              	.LC5:
 3615 000c 00008040 		.word	1082130432
 3616              		.section	.srodata.cst8
 3617              		.align	3
 3618              	.LC6:
 3619 0008 00000000 		.word	0
 3620 000c 00002440 		.word	1076101120
 3621              		.section	.srodata.cst4
 3622              		.align	2
 3623              	.LC7:
 3624 0010 000020C1 		.word	-1054867456
 3625              		.align	2
 3626              	.LC8:
 3627 0014 0000F0C1 		.word	-1041235968
 3628              		.section	.srodata.cst8
 3629              		.align	3
 3630              	.LC9:
 3631 0010 00000000 		.word	0
 3632 0014 0000E03F 		.word	1071644672
 3633              		.align	3
 3634              	.LC10:
 3635 0018 00000000 		.word	0
 3636 001c 00408F40 		.word	1083129856
 3637              		.section	.srodata.cst4
 3638              		.align	2
 3639              	.LC11:
 3640 0018 9A99993E 		.word	1050253722
 3641              		.align	2
 3642              	.LC12:
 3643 001c CDCC4C3E 		.word	1045220557
 3644              		.align	2
 3645              	.LC13:
 3646 0020 CDCCCC3D 		.word	1036831949
 3647              		.align	2
 3648              	.LC14:
 3649 0024 00007A44 		.word	1148846080
 3650              		.section	.srodata.cst8
 3651              		.align	3
 3652              	.LC15:
 3653 0020 30058EE4 		.word	-460454608
 3654 0024 2EFF2B2B 		.word	724303662
 3655              		.align	3
 3656              	.LC16:
 3657 0028 7DC39425 		.word	630506365
 3658 002c AD49B254 		.word	1420970413
 3659              		.align	3
 3660              	.LC17:
 3661 0030 00000000 		.word	0
 3662 0034 0000F03F 		.word	1072693248
 3663              		.section	.srodata.cst4
 3664              		.align	2
 3665              	.LC18:
 3666 0028 3333333F 		.word	1060320051
 3667              		.align	2
 3668              	.LC19:
 3669 002c 0000003F 		.word	1056964608
 3670              		.align	2
 3671              	.LC20:
 3672 0030 CDCC4C3F 		.word	1061997773
 3673              		.align	2
 3674              	.LC21:
 3675 0034 6F12833A 		.word	981668463
 3676              		.align	2
 3677              	.LC22:
 3678 0038 00007041 		.word	1097859072
 3679              		.align	2
 3680              	.LC23:
 3681 003c 00007F43 		.word	1132396544
 3682              		.section	.srodata.cst8
 3683              		.align	3
 3684              	.LC27:
 3685 0038 00000040 		.word	1073741824
 3686 003c 52C1E03F 		.word	1071694162
 3687              		.align	3
 3688              	.LC28:
 3689 0040 00000000 		.word	0
 3690 0044 00004840 		.word	1078460416
 3691              		.align	3
 3692              	.LC29:
 3693 0048 00000000 		.word	0
 3694 004c 00004040 		.word	1077936128
 3695              		.align	3
 3696              	.LC30:
 3697 0050 00000000 		.word	0
 3698 0054 000050C0 		.word	-1068498944
 3699              		.section	.srodata.cst4
 3700              		.align	2
 3701              	.LC31:
 3702 0040 9A99193F 		.word	1058642330
 3703              		.align	2
 3704              	.LC32:
 3705 0044 CDCCCC3E 		.word	1053609165
 3706              		.align	2
 3707              	.LC33:
 3708 0048 00004842 		.word	1112014848
 3709              		.align	2
 3710              	.LC34:
 3711 004c 0000FA42 		.word	1123680256
 3712              		.align	2
 3713              	.LC35:
 3714 0050 0000C03F 		.word	1069547520
 3715              		.align	2
 3716              	.LC36:
 3717 0054 6666663F 		.word	1063675494
 3718              		.align	2
 3719              	.LC37:
 3720 0058 00002041 		.word	1092616192
 3721              		.align	2
 3722              	.LC38:
 3723 005c 00000E43 		.word	1124990976
 3724              		.align	2
 3725              	.LC39:
 3726 0060 000040C0 		.word	-1069547520
 3727              		.align	2
 3728              	.LC40:
 3729 0064 000080C1 		.word	-1048576000
 3730              		.set	.LC41,.LC27
 3731              		.align	2
 3732              	.LC42:
 3733 0068 0000C0BF 		.word	-1077936128
 3734              		.align	2
 3735              	.LC43:
 3736 006c 000040C1 		.word	-1052770304
 3737              		.align	2
 3738              	.LC44:
 3739 0070 000000BF 		.word	-1090519040
 3740              		.align	2
 3741              	.LC45:
 3742 0074 000090C1 		.word	-1047527424
 3743              		.set	.LC46,.LC29+4
 3744              		.align	2
 3745              	.LC47:
 3746 0078 0000E040 		.word	1088421888
 3747              		.align	2
 3748              	.LC48:
 3749 007c 0000A040 		.word	1084227584
 3750              		.align	2
 3751              	.LC49:
 3752 0080 0000A0C1 		.word	-1046478848
 3753              		.align	2
 3754              	.LC50:
 3755 0084 0000A041 		.word	1101004800
 3756              		.align	2
 3757              	.LC51:
 3758 0088 0000F041 		.word	1106247680
 3759              		.align	2
 3760              	.LC52:
 3761 008c 0000C8C1 		.word	-1043857408
 3762              		.align	2
 3763              	.LC53:
 3764 0090 6666E63F 		.word	1072064102
 3765              		.align	2
 3766              	.LC54:
 3767 0094 9A99D93F 		.word	1071225242
 3768              		.section	.rodata
 3769              		.align	2
 3770              		.set	.LANCHOR0,. + 0
 3773              	dither:
 3774 0000 00       		.string	""
 3775 0001 08020A   		.ascii	"\b\002\n"
 3776 0004 0C040E06 		.ascii	"\f\004\016\006"
 3777 0008 030B0109 		.ascii	"\003\013\001\t"
 3778 000c 0F070D05 		.ascii	"\017\007\r\005"
 3779              		.bss
 3780              		.align	2
 3781              		.set	.LANCHOR1,. + 0
 3784              	spheres:
 3785 0000 00000000 		.zero	208
 3785      00000000 
 3785      00000000 
 3785      00000000 
 3785      00000000 
 3788              	lights:
 3789 00d0 00000000 		.zero	48
 3789      00000000 
 3789      00000000 
 3789      00000000 
 3789      00000000 
 3790              		.section	.sbss,"aw",@nobits
 3791              		.align	2
 3794              	__errno:
 3795 0000 00000000 		.zero	4
 3796              		.section	.sdata,"aw"
 3797              		.align	2
 3800              	fb:
 3801 0000 00000010 		.word	268435456
 3804              	nb_lights:
 3805 0004 03000000 		.word	3
 3808              	nb_spheres:
 3809 0008 04000000 		.word	4
 3810              		.section	.srodata,"a"
 3811              		.align	2
 3814              	VRENDER:
 3815 0000 40000000 		.word	64
 3818              	HRENDER:
 3819 0004 60000000 		.word	96
 3822              	VRES:
 3823 0008 40000000 		.word	64
 3826              	HRES:
 3827 000c 60000000 		.word	96
 3828              		.ident	"GCC: (GNU) 11.1.0"
