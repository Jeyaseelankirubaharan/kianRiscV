   1              		.file	"main_house3d_rotate.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              	# GNU C17 (GCC) version 11.1.0 (riscv32-unknown-elf)
   7              	#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   8              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   9              	# options passed: -march=rv32im -mabi=ilp32 -mtune=rocket -march=rv32im -O3 -fno-pic -fno-stack-pro
  10              		.text
  11              		.align	2
  13              	fb_draw_bresenham.constprop.0:
  14 0000 130101FE 		addi	sp,sp,-32	#,,
  15 0004 232A9100 		sw	s1,20(sp)	#,
  16 0008 93040500 		mv	s1,a0	# x0, tmp124
  17              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  18 000c 3305A640 		sub	a0,a2,a0	#, x1, x0
  19              	# gfx_lib.h:194: void fb_draw_bresenham(uint16_t *fb, int x0, int y0, int x1, int y1, short color)
  20 0010 232E1100 		sw	ra,28(sp)	#,
  21 0014 232C8100 		sw	s0,24(sp)	#,
  22 0018 23282101 		sw	s2,16(sp)	#,
  23 001c 13840500 		mv	s0,a1	# y0, tmp125
  24 0020 23263101 		sw	s3,12(sp)	#,
  25 0024 23244101 		sw	s4,8(sp)	#,
  26 0028 93090600 		mv	s3,a2	# x1, tmp126
  27 002c 23225101 		sw	s5,4(sp)	#,
  28              	# gfx_lib.h:194: void fb_draw_bresenham(uint16_t *fb, int x0, int y0, int x1, int y1, short color)
  29 0030 938A0600 		mv	s5,a3	# y1, tmp127
  30              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  31 0034 97000000 		call	abs		#
  31      E7800000 
  32 003c 13090500 		mv	s2,a0	# tmp128,
  33              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  34 0040 33858A40 		sub	a0,s5,s0	#, y1, y0
  35 0044 97000000 		call	abs		#
  35      E7800000 
  36              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  37 004c 33AA3401 		sgt	s4,s3,s1	# tmp112, x1, x0
  38              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  39 0050 B32E5401 		sgt	t4,s5,s0	# tmp116, y1, y0
  40              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  41 0054 131A1A00 		slli	s4,s4,1	#, iftmp.52_16, tmp112
  42              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  43 0058 939E1E00 		slli	t4,t4,1	#, iftmp.53_20, tmp116
  44              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  45 005c 37060000 		lui	a2,%hi(framebuffer)	# tmp121,
  46              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  47 0060 130AFAFF 		addi	s4,s4,-1	#, iftmp.52_16, iftmp.52_16
  48              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  49 0064 330EA040 		neg	t3,a0	# dy, _8
  50              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  51 0068 938EFEFF 		addi	t4,t4,-1	#, iftmp.53_20, iftmp.53_20
  52 006c 3307A940 		sub	a4,s2,a0	# err, dx, _8
  53 0070 1388F4FF 		addi	a6,s1,-1	#, tmp110, x0
  54              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
  55 0074 1303E005 		li	t1,94		# tmp97,
  56              	# gfx_lib.h:190:   if  ( y <= 0) return;
  57 0078 9306E003 		li	a3,62		# tmp120,
  58              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  59 007c 13060600 		addi	a2,a2,%lo(framebuffer)	# tmp122, tmp121,
  60 0080 130FF00E 		li	t5,239		# tmp123,
  61              	.L4:
  62              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  63 0084 93171400 		slli	a5,s0,1	#, tmp101, y0
  64 0088 B3878700 		add	a5,a5,s0	# y0, tmp102, tmp101
  65 008c 93975700 		slli	a5,a5,5	#, tmp103, tmp102
  66 0090 B3879700 		add	a5,a5,s1	# x0, tmp104, tmp103
  67              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  68 0094 93971700 		slli	a5,a5,1	#, tmp105, tmp104
  69              	# gfx_lib.h:205:     e2 = 2*err;
  70 0098 93151700 		slli	a1,a4,1	#, e2, err
  71              	# gfx_lib.h:190:   if  ( y <= 0) return;
  72 009c 9308F4FF 		addi	a7,s0,-1	#, tmp98, y0
  73              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  74 00a0 B387C700 		add	a5,a5,a2	# tmp122, tmp106, tmp105
  75              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
  76 00a4 63660301 		bgtu	a6,t1,.L5	#, tmp110, tmp97,
  77              	# gfx_lib.h:190:   if  ( y <= 0) return;
  78 00a8 63E41601 		bgtu	a7,a3,.L5	#, tmp98, tmp120,
  79              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  80 00ac 2390E701 		sh	t5,0(a5)	# tmp123, *_36
  81              	.L5:
  82              	# gfx_lib.h:203:     if (x0 == x1 && y0 == y1) break;
  83 00b0 63829902 		beq	s3,s1,.L14	#, x1, x0,
  84              	.L6:
  85              	# gfx_lib.h:206:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
  86 00b4 63C8C501 		bgt	t3,a1,.L8	#, dy, e2,
  87              	# gfx_lib.h:206:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
  88 00b8 B3844401 		add	s1,s1,s4	# iftmp.52_16, x0, x0
  89 00bc 3307A740 		sub	a4,a4,a0	# err, err, _8
  90 00c0 1388F4FF 		addi	a6,s1,-1	#, tmp110, x0
  91              	.L8:
  92              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  93 00c4 E340B9FC 		blt	s2,a1,.L4	#, dx, e2,
  94              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  95 00c8 33072701 		add	a4,a4,s2	# dx, err, err
  96              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  97 00cc 3304D401 		add	s0,s0,t4	# iftmp.53_20, y0, y0
  98 00d0 6FF05FFB 		j	.L4		#
  99              	.L14:
 100              	# gfx_lib.h:203:     if (x0 == x1 && y0 == y1) break;
 101 00d4 E3908AFE 		bne	s5,s0,.L6	#, y1, y0,
 102              	# gfx_lib.h:209: }
 103 00d8 8320C101 		lw	ra,28(sp)		#,
 104 00dc 03248101 		lw	s0,24(sp)		#,
 105 00e0 83244101 		lw	s1,20(sp)		#,
 106 00e4 03290101 		lw	s2,16(sp)		#,
 107 00e8 8329C100 		lw	s3,12(sp)		#,
 108 00ec 032A8100 		lw	s4,8(sp)		#,
 109 00f0 832A4100 		lw	s5,4(sp)		#,
 110 00f4 13010102 		addi	sp,sp,32	#,,
 111 00f8 67800000 		jr	ra		#
 113              		.align	2
 114              		.globl	set_reg
 116              	set_reg:
 117              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 118 00fc 03270500 		lw	a4,0(a0)		# _1,* p
 119              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 120 0100 93071000 		li	a5,1		# tmp85,
 121 0104 B397B700 		sll	a5,a5,a1	# tmp88, _12, tmp85
 122              	# kianv_stdlib.h:42:     if (bit) {
 123 0108 63080600 		beq	a2,zero,.L16	#, tmp89,,
 124              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 125 010c B3E7E700 		or	a5,a5,a4	# _1, _5, _12
 126 0110 2320F500 		sw	a5,0(a0)	# _5,* p
 127 0114 67800000 		ret	
 128              	.L16:
 129              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 130 0118 93C7F7FF 		not	a5,a5	# tmp86, _12
 131              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 132 011c B3F7E700 		and	a5,a5,a4	# _13, _18, tmp86
 133 0120 2320F500 		sw	a5,0(a0)	# _18,* p
 134              	# kianv_stdlib.h:47: }
 135 0124 67800000 		ret	
 137              		.align	2
 138              		.globl	gpio_set_value
 140              	gpio_set_value:
 141              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 142 0128 37070030 		li	a4,805306368		# tmp86,
 143 012c 8326C701 		lw	a3,28(a4)		# _7,
 144              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 145 0130 93071000 		li	a5,1		# tmp84,
 146 0134 B397A700 		sll	a5,a5,a0	# tmp94, _6, tmp84
 147              	# kianv_stdlib.h:42:     if (bit) {
 148 0138 63880500 		beq	a1,zero,.L19	#, tmp95,,
 149              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 150 013c B3E7D700 		or	a5,a5,a3	# _7, _11, _6
 151 0140 232EF700 		sw	a5,28(a4)	# _11,
 152              	# kianv_stdlib.h:51: }
 153 0144 67800000 		ret	
 154              	.L19:
 155              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 156 0148 93C7F7FF 		not	a5,a5	# tmp91, _6
 157              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 158 014c B3F7D700 		and	a5,a5,a3	# _12, _17, tmp91
 159 0150 232EF700 		sw	a5,28(a4)	# _17,
 160              	# kianv_stdlib.h:51: }
 161 0154 67800000 		ret	
 163              		.align	2
 164              		.globl	gpio_get_input_value
 166              	gpio_get_input_value:
 167              	# kianv_stdlib.h:54:   uint32_t read = IO_IN(GPIO_INPUT);
 168 0158 B7070030 		li	a5,805306368		# tmp77,
 169 015c 83A70702 		lw	a5,32(a5)		# read, MEM[(volatile uint32_t *)805306400B]
 170              	# kianv_stdlib.h:57:   return ((read >> gpio) & 0x01);
 171 0160 33D5A700 		srl	a0,a5,a0	# tmp80, tmp79, read
 172              	# kianv_stdlib.h:58: }
 173 0164 13751500 		andi	a0,a0,1	#,, tmp79
 174 0168 67800000 		ret	
 176              		.align	2
 177              		.globl	gpio_set_direction
 179              	gpio_set_direction:
 180              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 181 016c 37070030 		li	a4,805306368		# tmp86,
 182 0170 83264701 		lw	a3,20(a4)		# _4,
 183              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 184 0174 93071000 		li	a5,1		# tmp84,
 185 0178 B397A700 		sll	a5,a5,a0	# tmp94, _19, tmp84
 186              	# kianv_stdlib.h:42:     if (bit) {
 187 017c 63880500 		beq	a1,zero,.L23	#, tmp95,,
 188              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 189 0180 B3E7D700 		or	a5,a5,a3	# _4, _8, _19
 190 0184 232AF700 		sw	a5,20(a4)	# _8,
 191 0188 67800000 		ret	
 192              	.L23:
 193              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 194 018c 93C7F7FF 		not	a5,a5	# tmp91, _19
 195              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 196 0190 B3F7D700 		and	a5,a5,a3	# _12, _17, tmp91
 197 0194 232AF700 		sw	a5,20(a4)	# _17,
 198              	# kianv_stdlib.h:62: }
 199 0198 67800000 		ret	
 201              		.align	2
 202              		.globl	get_cycles
 204              	get_cycles:
 205 019c 130101FF 		addi	sp,sp,-16	#,,
 206              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 207              	 #APP
 208              	# 68 "kianv_stdlib.h" 1
   1              	#include <stdint.h>
   2              	#include <math.h>
   3              	
   4              	/* kian hardware register */
   5              	#define IO_BASE 0x30000000
   6              	#define UART_TX             (volatile uint32_t *) (IO_BASE + 0x0000)
   7              	#define UART_READY          (volatile uint32_t *) (IO_BASE + 0x0000)
   8              	#define VIDEOENABLE         (volatile uint32_t *) (IO_BASE + 0x0008)
   9              	#define VIDEO               (volatile uint32_t *) (IO_BASE + 0x0008)
  10              	#define VIDEO_RAW           (volatile uint32_t *) (IO_BASE + 0x000C)
  11              	#define CPU_FREQ            (volatile uint32_t *) (IO_BASE + 0x0010)
  12              	// gpio hack stuff
  13              	#define GPIO_DIR            ( volatile uint32_t  *) (IO_BASE + 0x0014)
  14              	#define GPIO_PULLUP         ( volatile uint32_t  *) (IO_BASE + 0x0018) // not implemented
  15              	#define GPIO_OUTPUT         ( volatile uint32_t  *) (IO_BASE + 0x001C)
  16              	#define GPIO_INPUT          ( volatile uint32_t  *) (IO_BASE + 0x0020)
  17              	#define IO_OUT(reg, value) *((volatile uint32_t  *) (reg)) = (value)
  18              	#define IO_IN(reg)         *((volatile uint32_t  *) reg)
  19              	
  20              	#define GPIO_INPUT_PIN  0
  21              	#define GPIO_OUTPUT_PIN 1
  22              	//#define RV32_FASTCODE __attribute((section(".fastcode")))
  23              	#define RV32_FASTCODE
  24              	
  25              	//__attribute((section(".fastcode")))
  26              	
  27              	#define RED   "\x1B[31m"
  28              	#define GRN   "\x1B[32m"
  29              	#define YEL   "\x1B[33m"
  30              	#define BLU   "\x1B[34m"
  31              	#define MAG   "\x1B[35m"
  32              	#define CYN   "\x1B[36m"
  33              	#define WHT   "\x1B[37m"
  34              	#define RESET "\x1B[0m"
  35              	
  36              	#define CLS       "\x1B[2J"
  37              	#define BOLD      "\x1B[1m"
  38              	#define BLINK     "\x1B[5m"
  39              	#define BLINK_OFF "\x1B[25m"
  40              	
  41              	void set_reg(volatile uint32_t *p, int gpio, int bit) {
  42              	    if (bit) {
  43              	      *p |=  (0x01 << (gpio & 0x1f));
  44              	    } else {
  45              	      *p &= ~( 0x01 << (gpio & 0x1f));
  46              	    }
  47              	}
  48              	
  49              	void gpio_set_value(int gpio, int bit) {
  50              	    set_reg(GPIO_OUTPUT, gpio, bit);
  51              	}
  52              	
  53              	uint32_t gpio_get_input_value(int gpio) {
  54              	  uint32_t read = IO_IN(GPIO_INPUT);
  55              	
  56              	  //  return ((read & (1<<gpio)) >> gpio);
  57              	  return ((read >> gpio) & 0x01);
  58              	}
  59              	
  60              	void gpio_set_direction(int gpio, int bit) {
  61              	    set_reg(GPIO_DIR, gpio, bit);
  62              	}
  63              	
  64              	uint64_t get_cycles() {
  65              	  volatile uint32_t tmph0;
  66              	  volatile uint32_t tmpl0;
  67              	
  68 01a0 F32700C8 	  asm volatile ("rdcycleh %0" : "=r"(tmph0));
  69              	  asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 209              		rdcycleh a5	# tmp78
 210              	# 0 "" 2
 211              	 #NO_APP
 212 01a4 2324F100 		sw	a5,8(sp)	# tmp78, tmph0
 213              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 214              	 #APP
 215              	# 69 "kianv_stdlib.h" 1
  70              	
 216              		rdcycle  a5	# tmp79
 217              	# 0 "" 2
 218              	 #NO_APP
 219 01ac 2326F100 		sw	a5,12(sp)	# tmp79, tmpl0
 220              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 221 01b0 83258100 		lw	a1,8(sp)		# tmph0.0_1, tmph0
 222              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 223 01b4 0325C100 		lw	a0,12(sp)		# tmpl0.1_4, tmpl0
 224              	# kianv_stdlib.h:73: }
 225 01b8 13010101 		addi	sp,sp,16	#,,
 226 01bc 67800000 		jr	ra		#
 228              		.align	2
 229              		.globl	wait_cycles
 231              	wait_cycles:
 232 01c0 130101FF 		addi	sp,sp,-16	#,,
 233              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 234              	 #APP
 235              	# 68 "kianv_stdlib.h" 1
 236              		rdcycleh a5	# tmp86
 237              	# 0 "" 2
 238              	 #NO_APP
 239 01c8 2320F100 		sw	a5,0(sp)	# tmp86, tmph0
 240              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 241              	 #APP
 242              	# 69 "kianv_stdlib.h" 1
 243              		rdcycle  a5	# tmp87
 244              	# 0 "" 2
 245              	 #NO_APP
 246 01d0 2322F100 		sw	a5,4(sp)	# tmp87, tmpl0
 247              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 248 01d4 83270100 		lw	a5,0(sp)		# tmph0.0_5, tmph0
 249              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 250 01d8 03264100 		lw	a2,4(sp)		# tmpl0.1_8, tmpl0
 251              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 252 01dc B387B700 		add	a5,a5,a1	# wait, tmp126, tmph0.0_5
 253 01e0 3306C500 		add	a2,a0,a2	# tmpl0.1_8, tmp129, wait
 254 01e4 3335A600 		sltu	a0,a2,a0	# wait, tmp98, tmp129
 255 01e8 3307F500 		add	a4,a0,a5	# tmp126, tmp100, tmp98
 256              	.L30:
 257              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 258              	 #APP
 259              	# 68 "kianv_stdlib.h" 1
 260              		rdcycleh a5	# tmp101
 261              	# 0 "" 2
 262              	 #NO_APP
 263 01f0 2324F100 		sw	a5,8(sp)	# tmp101, tmph0
 264              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 265              	 #APP
 266              	# 69 "kianv_stdlib.h" 1
 267              		rdcycle  a5	# tmp102
 268              	# 0 "" 2
 269              	 #NO_APP
 270 01f8 2326F100 		sw	a5,12(sp)	# tmp102, tmpl0
 271              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 272 01fc 83278100 		lw	a5,8(sp)		# tmph0.0_11, tmph0
 273              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 274 0200 8326C100 		lw	a3,12(sp)		# tmpl0.1_14, tmpl0
 275              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 276 0204 E3E4E7FE 		bgtu	a4,a5,.L30	#, tmp100, tmph0.0_11,
 277 0208 6314F700 		bne	a4,a5,.L27	#, tmp100, tmph0.0_11,
 278 020c E3E0C6FE 		bgtu	a2,a3,.L30	#, tmp129, tmpl0.1_14,
 279              	.L27:
 280              	# kianv_stdlib.h:83: }
 281 0210 13010101 		addi	sp,sp,16	#,,
 282 0214 67800000 		jr	ra		#
 284              		.align	2
 285              		.globl	usleep
 287              	usleep:
 288              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 289 0218 63080506 		beq	a0,zero,.L41	#, us,,
 290              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 291 021c B7070030 		li	a5,805306368		# tmp91,
 292              	# kianv_stdlib.h:85: void usleep(uint32_t us) {
 293 0220 130101FF 		addi	sp,sp,-16	#,,
 294              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 295 0224 83A70701 		lw	a5,16(a5)		# _20, MEM[(volatile uint32_t *)805306384B]
 296              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 297              	 #APP
 298              	# 68 "kianv_stdlib.h" 1
 299              		rdcycleh a4	# tmp92
 300              	# 0 "" 2
 301              	 #NO_APP
 302 022c 2324E100 		sw	a4,8(sp)	# tmp92, tmph0
 303              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 304              	 #APP
 305              	# 69 "kianv_stdlib.h" 1
 306              		rdcycle  a3	# tmp93
 307              	# 0 "" 2
 308              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 309              	 #NO_APP
 310 0234 37470F00 		li	a4,999424		# tmp97,
 311 0238 13070724 		addi	a4,a4,576	#, tmp96, tmp97
 312 023c B3D7E702 		divu	a5,a5,a4	# tmp96, tmp95, _20
 313              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 314 0240 2326D100 		sw	a3,12(sp)	# tmp93, tmpl0
 315              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 316 0244 03278100 		lw	a4,8(sp)		# tmph0.0_7, tmph0
 317              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 318 0248 0326C100 		lw	a2,12(sp)		# tmpl0.1_10, tmpl0
 319              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 320 024c B387A702 		mul	a5,a5,a0	# tmp98, tmp95, us
 321              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 322 0250 3386C700 		add	a2,a5,a2	# tmpl0.1_10, tmp141, tmp98
 323 0254 B337F600 		sltu	a5,a2,a5	# tmp98, tmp110, tmp141
 324 0258 B387E700 		add	a5,a5,a4	# tmph0.0_7, tmp112, tmp110
 325              	.L38:
 326              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 327              	 #APP
 328              	# 68 "kianv_stdlib.h" 1
 329              		rdcycleh a4	# tmp113
 330              	# 0 "" 2
 331              	 #NO_APP
 332 0260 2320E100 		sw	a4,0(sp)	# tmp113, tmph0
 333              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 334              	 #APP
 335              	# 69 "kianv_stdlib.h" 1
 336              		rdcycle  a4	# tmp114
 337              	# 0 "" 2
 338              	 #NO_APP
 339 0268 2322E100 		sw	a4,4(sp)	# tmp114, tmpl0
 340              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 341 026c 03270100 		lw	a4,0(sp)		# tmph0.0_14, tmph0
 342              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 343 0270 83264100 		lw	a3,4(sp)		# tmpl0.1_17, tmpl0
 344              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 345 0274 E364F7FE 		bgtu	a5,a4,.L38	#, tmp112, tmph0.0_14,
 346 0278 6394E700 		bne	a5,a4,.L32	#, tmp112, tmph0.0_14,
 347 027c E3E0C6FE 		bgtu	a2,a3,.L38	#, tmp141, tmpl0.1_17,
 348              	.L32:
 349              	# kianv_stdlib.h:87: }
 350 0280 13010101 		addi	sp,sp,16	#,,
 351 0284 67800000 		jr	ra		#
 352              	.L41:
 353 0288 67800000 		ret	
 355              		.align	2
 356              		.globl	msleep
 358              	msleep:
 359              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 360 028c 63060506 		beq	a0,zero,.L53	#, ms,,
 361              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 362 0290 B7070030 		li	a5,805306368		# tmp91,
 363              	# kianv_stdlib.h:89: void msleep(uint32_t ms) {
 364 0294 130101FF 		addi	sp,sp,-16	#,,
 365              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 366 0298 83A70701 		lw	a5,16(a5)		# _20, MEM[(volatile uint32_t *)805306384B]
 367              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 368              	 #APP
 369              	# 68 "kianv_stdlib.h" 1
 370              		rdcycleh a4	# tmp92
 371              	# 0 "" 2
 372              	 #NO_APP
 373 02a0 2324E100 		sw	a4,8(sp)	# tmp92, tmph0
 374              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 375              	 #APP
 376              	# 69 "kianv_stdlib.h" 1
 377              		rdcycle  a4	# tmp93
 378              	# 0 "" 2
 379              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 380              	 #NO_APP
 381 02a8 9306803E 		li	a3,1000		# tmp95,
 382 02ac B3D7D702 		divu	a5,a5,a3	# tmp95, tmp96, _20
 383              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 384 02b0 2326E100 		sw	a4,12(sp)	# tmp93, tmpl0
 385              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 386 02b4 03278100 		lw	a4,8(sp)		# tmph0.0_7, tmph0
 387              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 388 02b8 0326C100 		lw	a2,12(sp)		# tmpl0.1_10, tmpl0
 389              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 390 02bc B387A702 		mul	a5,a5,a0	# tmp97, tmp96, ms
 391              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 392 02c0 3386C700 		add	a2,a5,a2	# tmpl0.1_10, tmp140, tmp97
 393 02c4 B337F600 		sltu	a5,a2,a5	# tmp97, tmp109, tmp140
 394 02c8 B387E700 		add	a5,a5,a4	# tmph0.0_7, tmp111, tmp109
 395              	.L50:
 396              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 397              	 #APP
 398              	# 68 "kianv_stdlib.h" 1
 399              		rdcycleh a4	# tmp112
 400              	# 0 "" 2
 401              	 #NO_APP
 402 02d0 2320E100 		sw	a4,0(sp)	# tmp112, tmph0
 403              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 404              	 #APP
 405              	# 69 "kianv_stdlib.h" 1
 406              		rdcycle  a4	# tmp113
 407              	# 0 "" 2
 408              	 #NO_APP
 409 02d8 2322E100 		sw	a4,4(sp)	# tmp113, tmpl0
 410              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 411 02dc 03270100 		lw	a4,0(sp)		# tmph0.0_14, tmph0
 412              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 413 02e0 83264100 		lw	a3,4(sp)		# tmpl0.1_17, tmpl0
 414              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 415 02e4 E364F7FE 		bgtu	a5,a4,.L50	#, tmp111, tmph0.0_14,
 416 02e8 6394E700 		bne	a5,a4,.L44	#, tmp111, tmph0.0_14,
 417 02ec E3E0C6FE 		bgtu	a2,a3,.L50	#, tmp140, tmpl0.1_17,
 418              	.L44:
 419              	# kianv_stdlib.h:91: }
 420 02f0 13010101 		addi	sp,sp,16	#,,
 421 02f4 67800000 		jr	ra		#
 422              	.L53:
 423 02f8 67800000 		ret	
 425              		.align	2
 426              		.globl	sleep
 428              	sleep:
 429              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 430 02fc 63020506 		beq	a0,zero,.L65	#, sec,,
 431              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 432 0300 B7070030 		li	a5,805306368		# tmp90,
 433              	# kianv_stdlib.h:93: void sleep(uint32_t sec) {
 434 0304 130101FF 		addi	sp,sp,-16	#,,
 435              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 436 0308 03A70701 		lw	a4,16(a5)		# _19, MEM[(volatile uint32_t *)805306384B]
 437              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 438              	 #APP
 439              	# 68 "kianv_stdlib.h" 1
 440              		rdcycleh a5	# tmp91
 441              	# 0 "" 2
 442              	 #NO_APP
 443 0310 2324F100 		sw	a5,8(sp)	# tmp91, tmph0
 444              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 445              	 #APP
 446              	# 69 "kianv_stdlib.h" 1
 447              		rdcycle  a5	# tmp92
 448              	# 0 "" 2
 449              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 450              	 #NO_APP
 451 0318 3305E502 		mul	a0,a0,a4	# tmp101, sec, _19
 452              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 453 031c 2326F100 		sw	a5,12(sp)	# tmp92, tmpl0
 454              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 455 0320 83278100 		lw	a5,8(sp)		# tmph0.0_6, tmph0
 456              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 457 0324 0327C100 		lw	a4,12(sp)		# tmpl0.1_9, tmpl0
 458              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 459 0328 3305A700 		add	a0,a4,a0	# tmp101, tmp136, tmpl0.1_9
 460 032c 3337E500 		sltu	a4,a0,a4	# tmpl0.1_9, tmp105, tmp136
 461 0330 3307F700 		add	a4,a4,a5	# tmph0.0_6, tmp107, tmp105
 462              	.L62:
 463              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 464              	 #APP
 465              	# 68 "kianv_stdlib.h" 1
 466              		rdcycleh a5	# tmp108
 467              	# 0 "" 2
 468              	 #NO_APP
 469 0338 2320F100 		sw	a5,0(sp)	# tmp108, tmph0
 470              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 471              	 #APP
 472              	# 69 "kianv_stdlib.h" 1
 473              		rdcycle  a5	# tmp109
 474              	# 0 "" 2
 475              	 #NO_APP
 476 0340 2322F100 		sw	a5,4(sp)	# tmp109, tmpl0
 477              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 478 0344 83270100 		lw	a5,0(sp)		# tmph0.0_13, tmph0
 479              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 480 0348 83264100 		lw	a3,4(sp)		# tmpl0.1_16, tmpl0
 481              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 482 034c E3E4E7FE 		bgtu	a4,a5,.L62	#, tmp107, tmph0.0_13,
 483 0350 6314F700 		bne	a4,a5,.L56	#, tmp107, tmph0.0_13,
 484 0354 E3E0A6FE 		bgtu	a0,a3,.L62	#, tmp136, tmpl0.1_16,
 485              	.L56:
 486              	# kianv_stdlib.h:95: }
 487 0358 13010101 		addi	sp,sp,16	#,,
 488 035c 67800000 		jr	ra		#
 489              	.L65:
 490 0360 67800000 		ret	
 492              		.globl	__udivdi3
 493              		.align	2
 494              		.globl	nanoseconds
 496              	nanoseconds:
 497 0364 130101FE 		addi	sp,sp,-32	#,,
 498 0368 232E1100 		sw	ra,28(sp)	#,
 499              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 500              	 #APP
 501              	# 68 "kianv_stdlib.h" 1
 502              		rdcycleh a5	# tmp82
 503              	# 0 "" 2
 504              	 #NO_APP
 505 0370 2324F100 		sw	a5,8(sp)	# tmp82, tmph0
 506              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 507              	 #APP
 508              	# 69 "kianv_stdlib.h" 1
 509              		rdcycle  a5	# tmp83
 510              	# 0 "" 2
 511              	 #NO_APP
 512 0378 2326F100 		sw	a5,12(sp)	# tmp83, tmpl0
 513              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 514 037c B7070030 		li	a5,805306368		# tmp85,
 515              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 516 0380 83258100 		lw	a1,8(sp)		# tmph0.0_6, tmph0
 517              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 518 0384 0325C100 		lw	a0,12(sp)		# tmpl0.1_9, tmpl0
 519              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 520 0388 03A60701 		lw	a2,16(a5)		# _5, MEM[(volatile uint32_t *)805306384B]
 521              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 522 038c B7470F00 		li	a5,999424		# tmp98,
 523 0390 93870724 		addi	a5,a5,576	#, tmp97, tmp98
 524              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 525 0394 3356F602 		divu	a2,a2,a5	# tmp97,, _5
 526 0398 93060000 		li	a3,0		#,
 527 039c 97000000 		call	__udivdi3		#
 527      E7800000 
 528              	# kianv_stdlib.h:99: }
 529 03a4 8320C101 		lw	ra,28(sp)		#,
 530 03a8 13010102 		addi	sp,sp,32	#,,
 531 03ac 67800000 		jr	ra		#
 533              		.align	2
 534              		.globl	milliseconds
 536              	milliseconds:
 537 03b0 130101FE 		addi	sp,sp,-32	#,,
 538 03b4 232E1100 		sw	ra,28(sp)	#,
 539              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 540              	 #APP
 541              	# 68 "kianv_stdlib.h" 1
 542              		rdcycleh a5	# tmp82
 543              	# 0 "" 2
 544              	 #NO_APP
 545 03bc 2324F100 		sw	a5,8(sp)	# tmp82, tmph0
 546              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 547              	 #APP
 548              	# 69 "kianv_stdlib.h" 1
 549              		rdcycle  a5	# tmp83
 550              	# 0 "" 2
 551              	 #NO_APP
 552 03c4 2326F100 		sw	a5,12(sp)	# tmp83, tmpl0
 553              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 554 03c8 B7070030 		li	a5,805306368		# tmp85,
 555              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 556 03cc 83258100 		lw	a1,8(sp)		# tmph0.0_6, tmph0
 557              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 558 03d0 0325C100 		lw	a0,12(sp)		# tmpl0.1_9, tmpl0
 559              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 560 03d4 03A60701 		lw	a2,16(a5)		# _5, MEM[(volatile uint32_t *)805306384B]
 561              	# kianv_stdlib.h:102:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 562 03d8 9307803E 		li	a5,1000		# tmp96,
 563 03dc 93060000 		li	a3,0		#,
 564 03e0 3356F602 		divu	a2,a2,a5	# tmp96,, _5
 565 03e4 97000000 		call	__udivdi3		#
 565      E7800000 
 566              	# kianv_stdlib.h:103: }
 567 03ec 8320C101 		lw	ra,28(sp)		#,
 568 03f0 13010102 		addi	sp,sp,32	#,,
 569 03f4 67800000 		jr	ra		#
 571              		.align	2
 572              		.globl	seconds
 574              	seconds:
 575 03f8 130101FE 		addi	sp,sp,-32	#,,
 576 03fc 232E1100 		sw	ra,28(sp)	#,
 577              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 578              	 #APP
 579              	# 68 "kianv_stdlib.h" 1
 580              		rdcycleh a5	# tmp81
 581              	# 0 "" 2
 582              	 #NO_APP
 583 0404 2324F100 		sw	a5,8(sp)	# tmp81, tmph0
 584              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 585              	 #APP
 586              	# 69 "kianv_stdlib.h" 1
 587              		rdcycle  a5	# tmp82
 588              	# 0 "" 2
 589              	 #NO_APP
 590 040c 2326F100 		sw	a5,12(sp)	# tmp82, tmpl0
 591              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 592 0410 B7070030 		li	a5,805306368		# tmp84,
 593              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 594 0414 83258100 		lw	a1,8(sp)		# tmph0.0_5, tmph0
 595              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 596 0418 0325C100 		lw	a0,12(sp)		# tmpl0.1_8, tmpl0
 597              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 598 041c 03A60701 		lw	a2,16(a5)		# _4, MEM[(volatile uint32_t *)805306384B]
 599              	# kianv_stdlib.h:106:   return get_cycles() / (uint64_t) (get_cpu_freq());
 600 0420 93060000 		li	a3,0		#,
 601 0424 97000000 		call	__udivdi3		#
 601      E7800000 
 602              	# kianv_stdlib.h:107: }
 603 042c 8320C101 		lw	ra,28(sp)		#,
 604 0430 13010102 		addi	sp,sp,32	#,,
 605 0434 67800000 		jr	ra		#
 607              		.align	2
 608              		.globl	putchar
 610              	putchar:
 611              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 612 0438 37070030 		li	a4,805306368		# tmp75,
 613              	.L75:
 614              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 615 043c 83270700 		lw	a5,0(a4)		# _1, MEM[(volatile uint32_t *)805306368B]
 616              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 617 0440 E38E07FE 		beq	a5,zero,.L75	#, _1,,
 618              	# kianv_stdlib.h:112:   *((volatile uint32_t*) UART_TX) = c;
 619 0444 2320A700 		sw	a0,0(a4)	# c, MEM[(volatile uint32_t *)805306368B]
 620              	# kianv_stdlib.h:113: }
 621 0448 67800000 		ret	
 623              		.align	2
 624              		.globl	print_chr
 626              	print_chr:
 627 044c 37070030 		li	a4,805306368		# tmp75,
 628              	.L79:
 629 0450 83270700 		lw	a5,0(a4)		# _4, MEM[(volatile uint32_t *)805306368B]
 630 0454 E38E07FE 		beq	a5,zero,.L79	#, _4,,
 631 0458 2320A700 		sw	a0,0(a4)	# ch, MEM[(volatile uint32_t *)805306368B]
 632 045c 67800000 		ret	
 634              		.align	2
 635              		.globl	print_str
 637              	print_str:
 638              	# kianv_stdlib.h:122:   while (*p != 0) {
 639 0460 83460500 		lbu	a3,0(a0)	# _3, *p_6(D)
 640              	# kianv_stdlib.h:122:   while (*p != 0) {
 641 0464 63800602 		beq	a3,zero,.L82	#, _3,,
 642              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 643 0468 37070030 		li	a4,805306368		# tmp76,
 644              	.L84:
 645              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 646 046c 83270700 		lw	a5,0(a4)		# _1, MEM[(volatile uint32_t *)805306368B]
 647              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 648 0470 E38E07FE 		beq	a5,zero,.L84	#, _1,,
 649              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 650 0474 13051500 		addi	a0,a0,1	#, p, p
 651              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 652 0478 2320D700 		sw	a3,0(a4)	# _3, MEM[(volatile uint32_t *)805306368B]
 653              	# kianv_stdlib.h:122:   while (*p != 0) {
 654 047c 83460500 		lbu	a3,0(a0)	# _3, MEM[(char *)p_8]
 655              	# kianv_stdlib.h:122:   while (*p != 0) {
 656 0480 E39606FE 		bne	a3,zero,.L84	#, _3,,
 657              	.L82:
 658              	# kianv_stdlib.h:127: }
 659 0484 67800000 		ret	
 661              		.align	2
 662              		.globl	print_str_ln
 664              	print_str_ln:
 665              	# kianv_stdlib.h:122:   while (*p != 0) {
 666 0488 83460500 		lbu	a3,0(a0)	# _7, *p_2(D)
 667              	# kianv_stdlib.h:122:   while (*p != 0) {
 668 048c 63800602 		beq	a3,zero,.L93	#, _7,,
 669              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 670 0490 37070030 		li	a4,805306368		# tmp77,
 671              	.L94:
 672 0494 83270700 		lw	a5,0(a4)		# _4, MEM[(volatile uint32_t *)805306368B]
 673              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 674 0498 E38E07FE 		beq	a5,zero,.L94	#, _4,,
 675              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 676 049c 13051500 		addi	a0,a0,1	#, p, p
 677              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 678 04a0 2320D700 		sw	a3,0(a4)	# _7, MEM[(volatile uint32_t *)805306368B]
 679              	# kianv_stdlib.h:122:   while (*p != 0) {
 680 04a4 83460500 		lbu	a3,0(a0)	# _7, MEM[(char *)p_6]
 681              	# kianv_stdlib.h:122:   while (*p != 0) {
 682 04a8 E39606FE 		bne	a3,zero,.L94	#, _7,,
 683              	.L93:
 684              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 685 04ac 37070030 		li	a4,805306368		# tmp79,
 686              	.L96:
 687 04b0 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 688              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 689 04b4 E38E07FE 		beq	a5,zero,.L96	#, _3,,
 690              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 691 04b8 9307A000 		li	a5,10		# tmp81,
 692 04bc 2320F700 		sw	a5,0(a4)	# tmp81, MEM[(volatile uint32_t *)805306368B]
 693              	# kianv_stdlib.h:131: }
 694 04c0 67800000 		ret	
 696              		.align	2
 697              		.globl	print_dec
 699              	print_dec:
 700 04c4 130101FF 		addi	sp,sp,-16	#,,
 701              	# kianv_stdlib.h:135:   char *p = buffer;
 702 04c8 13064100 		addi	a2,sp,4	#, tmp92,
 703 04cc 13070600 		mv	a4,a2	# p, tmp92
 704              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 705 04d0 9307A000 		li	a5,10		# tmp93,
 706              	.L106:
 707              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 708 04d4 63140500 		bne	a0,zero,.L107	#, val,,
 709              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 710 04d8 631CC700 		bne	a4,a2,.L114	#, p, tmp92,
 711              	.L107:
 712              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 713 04dc B376F502 		remu	a3,a0,a5	# tmp93, tmp83, val
 714              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 715 04e0 13071700 		addi	a4,a4,1	#, p, p
 716              	# kianv_stdlib.h:138:     val = val / 10;
 717 04e4 3355F502 		divu	a0,a0,a5	# tmp93, val, val
 718              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 719 04e8 A30FD7FE 		sb	a3,-1(a4)	# tmp83, MEM[(char *)p_18 + 4294967295B]
 720 04ec 6FF09FFE 		j	.L106		#
 721              	.L114:
 722              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 723 04f0 B7060030 		li	a3,805306368		# tmp88,
 724              	.L108:
 725              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 726 04f4 83A70600 		lw	a5,0(a3)		# _3, MEM[(volatile uint32_t *)805306368B]
 727              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 728 04f8 E38E07FE 		beq	a5,zero,.L108	#, _3,,
 729              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 730 04fc 8347F7FF 		lbu	a5,-1(a4)	# MEM[(char *)p_16], MEM[(char *)p_16]
 731              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 732 0500 1307F7FF 		addi	a4,a4,-1	#, p, p
 733              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 734 0504 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 735              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 736 0508 23A0F600 		sw	a5,0(a3)	# _7, MEM[(volatile uint32_t *)805306368B]
 737              	# kianv_stdlib.h:141:   while (p != buffer) {
 738 050c E314C7FE 		bne	a4,a2,.L108	#, p, tmp92,
 739              	# kianv_stdlib.h:146: }
 740 0510 13010101 		addi	sp,sp,16	#,,
 741 0514 67800000 		jr	ra		#
 743              		.align	2
 744              		.globl	print_dec64
 746              	print_dec64:
 747 0518 130101FE 		addi	sp,sp,-32	#,,
 748              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 749 051c B7DECCCC 		li	t4,-858992640		# tmp258,
 750              	# kianv_stdlib.h:150:   char *p = buffer;
 751 0520 130EC100 		addi	t3,sp,12	#, tmp254,
 752              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 753 0524 37030010 		li	t1,268435456		# tmp255,
 754 0528 9388DECC 		addi	a7,t4,-819	#, tmp259, tmp258
 755              	# kianv_stdlib.h:148: void print_dec64(uint64_t val) {
 756 052c 13070500 		mv	a4,a0	# val, tmp261
 757 0530 13880500 		mv	a6,a1	# val, tmp262
 758              	# kianv_stdlib.h:150:   char *p = buffer;
 759 0534 13060E00 		mv	a2,t3	# p, tmp254
 760              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 761 0538 1303F3FF 		addi	t1,t1,-1	#, tmp256, tmp255
 762 053c 130F5000 		li	t5,5		# tmp257,
 763 0540 938ECECC 		addi	t4,t4,-820	#, tmp260, tmp258
 764              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 765 0544 6F008005 		j	.L116		#
 766              	.L117:
 767              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 768 0548 B3F7E703 		remu	a5,a5,t5	# tmp257, tmp97, tmp94
 769              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 770 054c 13061600 		addi	a2,a2,1	#, p, p
 771              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 772 0550 B307F740 		sub	a5,a4,a5	# tmp214, val, tmp97
 773 0554 B335F700 		sgtu	a1,a5,a4	# tmp101, tmp214, val
 774 0558 B305B840 		sub	a1,a6,a1	# tmp103, val, tmp101
 775 055c 3385D703 		mul	a0,a5,t4	# tmp107, tmp214, tmp260
 776 0560 B3851503 		mul	a1,a1,a7	# tmp104, tmp103, tmp259
 777 0564 B3B61703 		mulhu	a3,a5,a7	# tmp217, tmp214, tmp259
 778 0568 B385A500 		add	a1,a1,a0	# tmp107, tmp110, tmp104
 779 056c B3871703 		mul	a5,a5,a7	# tmp114, tmp214, tmp259
 780 0570 B385D500 		add	a1,a1,a3	# tmp217, tmp115, tmp110
 781 0574 9396F501 		slli	a3,a1,31	#, tmp133, tmp115
 782              	# kianv_stdlib.h:153:     val = val / 10;
 783 0578 13D81500 		srli	a6,a1,1	#, val, tmp115
 784              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 785 057c 93D71700 		srli	a5,a5,1	#, tmp224, tmp114
 786 0580 B3E7F600 		or	a5,a3,a5	# tmp224, tmp224, tmp133
 787 0584 13952700 		slli	a0,a5,2	#, tmp228, tmp224
 788 0588 3305F500 		add	a0,a0,a5	# tmp224, tmp230, tmp228
 789 058c 13151500 		slli	a0,a0,1	#, tmp232, tmp230
 790 0590 3305A740 		sub	a0,a4,a0	# tmp234, val, tmp232
 791              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 792 0594 A30FA6FE 		sb	a0,-1(a2)	# tmp234, MEM[(char *)p_18 + 4294967295B]
 793              	# kianv_stdlib.h:153:     val = val / 10;
 794 0598 13870700 		mv	a4,a5	# val, tmp224
 795              	.L116:
 796              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 797 059c 93174800 		slli	a5,a6,4	#, tmp88, val
 798 05a0 9356C701 		srli	a3,a4,28	#, tmp208, val
 799 05a4 B3E6D700 		or	a3,a5,a3	# tmp208, tmp208, tmp88
 800 05a8 B3F66600 		and	a3,a3,t1	# tmp256, tmp89, tmp208
 801 05ac B3776700 		and	a5,a4,t1	# tmp256, tmp84, val
 802 05b0 B387D700 		add	a5,a5,a3	# tmp89, tmp92, tmp84
 803 05b4 93558801 		srli	a1,a6,24	#, tmp210, val
 804              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 805 05b8 B3660701 		or	a3,a4,a6	# val, val, val
 806              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 807 05bc B387B700 		add	a5,a5,a1	# tmp210, tmp94, tmp92
 808              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 809 05c0 E39406F8 		bne	a3,zero,.L117	#, val,,
 810              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 811 05c4 E302C6F9 		beq	a2,t3,.L117	#, p, tmp254,
 812              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 813 05c8 37070030 		li	a4,805306368		# tmp202,
 814              	.L118:
 815              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 816 05cc 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 817              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 818 05d0 E38E07FE 		beq	a5,zero,.L118	#, _3,,
 819              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 820 05d4 8347F6FF 		lbu	a5,-1(a2)	# MEM[(char *)p_16], MEM[(char *)p_16]
 821              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 822 05d8 1306F6FF 		addi	a2,a2,-1	#, p, p
 823              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 824 05dc 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 825              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 826 05e0 2320F700 		sw	a5,0(a4)	# _7, MEM[(volatile uint32_t *)805306368B]
 827              	# kianv_stdlib.h:156:   while (p != buffer) {
 828 05e4 E314C6FF 		bne	a2,t3,.L118	#, p, tmp254,
 829              	# kianv_stdlib.h:161: }
 830 05e8 13010102 		addi	sp,sp,32	#,,
 831 05ec 67800000 		jr	ra		#
 833              		.section	.rodata.str1.4,"aMS",@progbits,1
 834              		.align	2
 835              	.LC0:
 836 0000 30313233 		.string	"0123456789ABCDEF"
 836      34353637 
 836      38394142 
 836      43444546 
 836      00
 837              		.text
 838              		.align	2
 839              		.globl	print_hex
 841              	print_hex:
 842              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 843 05f0 9386F5FF 		addi	a3,a1,-1	#, tmp85, tmp98
 844              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 845 05f4 93962600 		slli	a3,a3,2	#, i, tmp85
 846              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 847 05f8 63CC0602 		blt	a3,zero,.L124	#, i,,
 848 05fc 37060000 		lui	a2,%hi(.LC0)	# tmp95,
 849 0600 9305C0FF 		li	a1,-4		# _8,
 850 0604 13060600 		addi	a2,a2,%lo(.LC0)	# tmp94, tmp95,
 851              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 852 0608 37070030 		li	a4,805306368		# tmp87,
 853              	.L126:
 854              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 855 060c 83270700 		lw	a5,0(a4)		# _2, MEM[(volatile uint32_t *)805306368B]
 856              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 857 0610 E38E07FE 		beq	a5,zero,.L126	#, _2,,
 858              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 859 0614 B357D500 		srl	a5,a0,a3	# i, tmp90, val
 860              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 861 0618 93F7F700 		andi	a5,a5,15	#, tmp91, tmp90
 862              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 863 061c B307F600 		add	a5,a2,a5	# tmp91, tmp92, tmp94
 864 0620 83C70700 		lbu	a5,0(a5)	# _6, "0123456789ABCDEF"[_4]
 865              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 866 0624 9386C6FF 		addi	a3,a3,-4	#, i, i
 867              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 868 0628 2320F700 		sw	a5,0(a4)	# _6, MEM[(volatile uint32_t *)805306368B]
 869              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 870 062c E390D5FE 		bne	a1,a3,.L126	#, _8, i,
 871              	.L124:
 872              	# kianv_stdlib.h:169: }
 873 0630 67800000 		ret	
 875              		.align	2
 876              		.globl	setpixel
 878              	setpixel:
 879              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 880 0634 B7070100 		li	a5,65536		# tmp88,
 881 0638 9387F7FF 		addi	a5,a5,-1	#, tmp87, tmp88
 882 063c 93958500 		slli	a1,a1,8	#, tmp85, tmp94
 883 0640 B3F5F500 		and	a1,a1,a5	# tmp87, tmp86, tmp85
 884              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 885 0644 93960601 		slli	a3,a3,16	#, tmp89, tmp96
 886              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 887 0648 B3E5D500 		or	a1,a1,a3	# tmp89, tmp90, tmp86
 888              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 889 064c 1376F60F 		andi	a2,a2,0xff	# tmp91, tmp95
 890              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 891 0650 B3E5C500 		or	a1,a1,a2	# tmp91, _9, tmp90
 892              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 893 0654 B7070030 		li	a5,805306368		# tmp93,
 894 0658 23A4B700 		sw	a1,8(a5)	# _9, MEM[(volatile uint32_t *)805306376B]
 895              	# kianv_stdlib.h:184: }
 896 065c 67800000 		ret	
 898              		.align	2
 899              		.globl	draw_bresenham
 901              	draw_bresenham:
 902 0660 130101FE 		addi	sp,sp,-32	#,,
 903              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 904 0664 3385B640 		sub	a0,a3,a1	#, x1, x0
 905              	# kianv_stdlib.h:187: {
 906 0668 232E1100 		sw	ra,28(sp)	#,
 907 066c 232C8100 		sw	s0,24(sp)	#,
 908 0670 232A9100 		sw	s1,20(sp)	#,
 909 0674 13840500 		mv	s0,a1	# x0, tmp114
 910 0678 93040600 		mv	s1,a2	# y0, tmp115
 911 067c 23282101 		sw	s2,16(sp)	#,
 912 0680 23263101 		sw	s3,12(sp)	#,
 913 0684 23244101 		sw	s4,8(sp)	#,
 914 0688 93890700 		mv	s3,a5	# color, tmp118
 915 068c 138A0600 		mv	s4,a3	# x1, tmp116
 916 0690 23225101 		sw	s5,4(sp)	#,
 917 0694 23206101 		sw	s6,0(sp)	#,
 918              	# kianv_stdlib.h:187: {
 919 0698 130B0700 		mv	s6,a4	# y1, tmp117
 920              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 921 069c 97000000 		call	abs		#
 921      E7800000 
 922 06a4 13090500 		mv	s2,a0	# tmp119,
 923              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 924 06a8 33059B40 		sub	a0,s6,s1	#, y1, y0
 925 06ac 97000000 		call	abs		#
 925      E7800000 
 926              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 927 06b4 B32A4401 		sgt	s5,s4,s0	# tmp109, x1, x0
 928              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 929 06b8 33AF6401 		sgt	t5,s6,s1	# tmp112, y1, y0
 930              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 931 06bc 939A1A00 		slli	s5,s5,1	#, iftmp.6_9, tmp109
 932              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 933 06c0 131F1F00 		slli	t5,t5,1	#, iftmp.7_10, tmp112
 934              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 935 06c4 B7060100 		li	a3,65536		# tmp103,
 936              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 937 06c8 938AFAFF 		addi	s5,s5,-1	#, iftmp.6_9, iftmp.6_9
 938              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 939 06cc B30EA040 		neg	t4,a0	# dy, _3
 940              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 941 06d0 130FFFFF 		addi	t5,t5,-1	#, iftmp.7_10, iftmp.7_10
 942 06d4 3308A940 		sub	a6,s2,a0	# err, dx, _3
 943              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 944 06d8 13930901 		slli	t1,s3,16	#, _33, color
 945 06dc 93F8F40F 		andi	a7,s1,255	#, tmp106, y0
 946 06e0 93158400 		slli	a1,s0,8	#, tmp107, x0
 947              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 948 06e4 9386F6FF 		addi	a3,a3,-1	#, tmp102, tmp103
 949              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 950 06e8 370E0030 		li	t3,805306368		# tmp105,
 951              	.L135:
 952              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 953 06ec B3E76800 		or	a5,a7,t1	# _33, tmp99, tmp106
 954              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 955 06f0 33F6D500 		and	a2,a1,a3	# tmp102, tmp101, tmp107
 956              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 957 06f4 B3E7C700 		or	a5,a5,a2	# tmp101, _40, tmp99
 958              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 959 06f8 2324FE00 		sw	a5,8(t3)	# _40, MEM[(volatile uint32_t *)805306376B]
 960              	# kianv_stdlib.h:198:     e2 = 2*err;
 961 06fc 93171800 		slli	a5,a6,1	#, e2, err
 962              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 963 0700 630E4403 		beq	s0,s4,.L143	#, x0, x1,
 964              	.L136:
 965              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 966 0704 63C8D701 		bgt	t4,a5,.L138	#, dy, e2,
 967              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 968 0708 33045401 		add	s0,s0,s5	# iftmp.6_9, x0, x0
 969 070c 3308A840 		sub	a6,a6,a0	# err, err, _3
 970 0710 93158400 		slli	a1,s0,8	#, tmp107, x0
 971              	.L138:
 972              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 973 0714 E34CF9FC 		blt	s2,a5,.L135	#, dx, e2,
 974              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 975 0718 B384E401 		add	s1,s1,t5	# iftmp.7_10, y0, y0
 976 071c 93F8F40F 		andi	a7,s1,255	#, tmp106, y0
 977              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 978 0720 B3E76800 		or	a5,a7,t1	# _33, tmp99, tmp106
 979              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 980 0724 33F6D500 		and	a2,a1,a3	# tmp102, tmp101, tmp107
 981              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 982 0728 B3E7C700 		or	a5,a5,a2	# tmp101, _40, tmp99
 983              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 984 072c 33082801 		add	a6,a6,s2	# dx, err, err
 985              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 986 0730 2324FE00 		sw	a5,8(t3)	# _40, MEM[(volatile uint32_t *)805306376B]
 987              	# kianv_stdlib.h:198:     e2 = 2*err;
 988 0734 93171800 		slli	a5,a6,1	#, e2, err
 989              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 990 0738 E31644FD 		bne	s0,s4,.L136	#, x0, x1,
 991              	.L143:
 992              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 993 073c E39464FD 		bne	s1,s6,.L136	#, y0, y1,
 994              	# kianv_stdlib.h:202: }
 995 0740 8320C101 		lw	ra,28(sp)		#,
 996 0744 03248101 		lw	s0,24(sp)		#,
 997 0748 83244101 		lw	s1,20(sp)		#,
 998 074c 03290101 		lw	s2,16(sp)		#,
 999 0750 8329C100 		lw	s3,12(sp)		#,
 1000 0754 032A8100 		lw	s4,8(sp)		#,
 1001 0758 832A4100 		lw	s5,4(sp)		#,
 1002 075c 032B0100 		lw	s6,0(sp)		#,
 1003 0760 13010102 		addi	sp,sp,32	#,,
 1004 0764 67800000 		jr	ra		#
 1006              		.align	2
 1007              		.globl	time
 1009              	time:
 1010              	# stdlib.c:33: 	asm volatile ("rdcycle %0" : "=r"(cycles));
 1011              	 #APP
 1012              	# 33 "stdlib.c" 1
   1              	// This is free and unencumbered software released into the public domain.
   2              	//
   3              	// Anyone is free to copy, modify, publish, use, compile, sell, or
   4              	// distribute this software, either in source code form or as a compiled
   5              	// binary, for any purpose, commercial or non-commercial, and by any
   6              	// means.
   7              	
   8              	#ifndef KV_STDLIB_H
   9              	#define KV_STDLIB_H
  10              	
  11              	#include <stdarg.h>
  12              	#include <stdint.h>
  13              	#include "kianv_stdlib.h"
  14              	extern long time();
  15              	extern long insn();
  16              	
  17              	#if defined(NOT_USE_MYSTDLIB)
  18              	#else
  19              	extern char *malloc();
  20              	extern int printf(const char *format, ...);
  21              	
  22              	extern void *memcpy(void *dest, const void *src, long n);
  23              	extern char *strcpy(char *dest, const char *src);
  24              	extern int strcmp(const char *s1, const char *s2);
  25              	
  26              	char heap_memory[1024];
  27              	int heap_memory_used = 0;
  28              	#endif
  29              	
  30              	long time()
  31              	{
  32              		int cycles;
  33 0768 732500C0 		asm volatile ("rdcycle %0" : "=r"(cycles));
  34              		// printf("[time() -> %d]", cycles);
 1013              		rdcycle a0	# cycles
 1014              	# 0 "" 2
 1015              	# stdlib.c:36: }
 1016              	 #NO_APP
 1017 076c 67800000 		ret	
 1019              		.align	2
 1020              		.globl	insn
 1022              	insn:
 1023              	# stdlib.c:41: 	asm volatile ("rdinstret %0" : "=r"(insns));
 1024              	 #APP
 1025              	# 41 "stdlib.c" 1
  35              		return cycles;
  36              	}
  37              	
  38              	long insn()
  39              	{
  40              		int insns;
  41 0770 732520C0 		asm volatile ("rdinstret %0" : "=r"(insns));
  42              		// printf("[insn() -> %d]", insns);
 1026              		rdinstret a0	# insns
 1027              	# 0 "" 2
 1028              	# stdlib.c:44: }
 1029              	 #NO_APP
 1030 0774 67800000 		ret	
 1032              		.align	2
 1033              		.globl	printf
 1035              	printf:
 1036 0778 130101FB 		addi	sp,sp,-80	#,,
 1037              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1038 077c 03430500 		lbu	t1,0(a0)	# _14, *format_22(D)
 1039              	# stdlib.c:90: {
 1040 0780 2322F104 		sw	a5,68(sp)	#,
 1041              	# stdlib.c:94: 	va_start(ap, format);
 1042 0784 93074103 		addi	a5,sp,52	#, tmp118,
 1043              	# stdlib.c:90: {
 1044 0788 232AB102 		sw	a1,52(sp)	#,
 1045 078c 232CC102 		sw	a2,56(sp)	#,
 1046 0790 232ED102 		sw	a3,60(sp)	#,
 1047 0794 2320E104 		sw	a4,64(sp)	#,
 1048 0798 23240105 		sw	a6,72(sp)	#,
 1049 079c 23261105 		sw	a7,76(sp)	#,
 1050              	# stdlib.c:94: 	va_start(ap, format);
 1051 07a0 2326F100 		sw	a5,12(sp)	# tmp118, MEM[(void * *)&ap]
 1052              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1053 07a4 63060304 		beq	t1,zero,.L147	#, _14,,
 1054              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1055 07a8 93060000 		li	a3,0		# i,
 1056              	# stdlib.c:97: 		if (format[i] == '%') {
 1057 07ac 93025002 		li	t0,37		# tmp119,
 1058              	# stdlib.c:99: 				if (format[i] == 'c') {
 1059 07b0 93083006 		li	a7,99		# tmp186,
 1060              	# stdlib.c:103: 				if (format[i] == 's') {
 1061 07b4 130E3007 		li	t3,115		# tmp187,
 1062              	# stdlib.c:107: 				if (format[i] == 'd') {
 1063 07b8 930E4006 		li	t4,100		# tmp188,
 1064              	# stdlib.c:111: 				if (format[i] == 'u') {
 1065 07bc 130F5007 		li	t5,117		# tmp189,
 1066              	# stdlib.c:78: 	char *p = buffer;
 1067 07c0 930F0101 		addi	t6,sp,16	#, tmp194,
 1068              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1069 07c4 9305A000 		li	a1,10		# tmp195,
 1070              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1071 07c8 B7070030 		li	a5,805306368		# tmp196,
 1072              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1073 07cc 9303D002 		li	t2,45		# tmp198,
 1074              	.L168:
 1075              	# stdlib.c:97: 		if (format[i] == '%') {
 1076 07d0 630E5302 		beq	t1,t0,.L148	#, _14, tmp119,
 1077              	.L149:
 1078              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1079 07d4 03A70700 		lw	a4,0(a5)		# _41, MEM[(volatile uint32_t *)805306368B]
 1080              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1081 07d8 E30E07FE 		beq	a4,zero,.L149	#, _41,,
 1082              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1083 07dc 23A06700 		sw	t1,0(a5)	# _14, MEM[(volatile uint32_t *)805306368B]
 1084              	.L152:
 1085              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1086 07e0 93861600 		addi	a3,a3,1	#, i, i
 1087              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1088 07e4 3307D500 		add	a4,a0,a3	# i, tmp177, format
 1089 07e8 03430700 		lbu	t1,0(a4)	# _14, *_13
 1090              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1091 07ec E31203FE 		bne	t1,zero,.L168	#, _14,,
 1092              	.L147:
 1093              	# stdlib.c:121: }
 1094 07f0 13050000 		li	a0,0		#,
 1095 07f4 13010105 		addi	sp,sp,80	#,,
 1096 07f8 67800000 		jr	ra		#
 1097              	.L167:
 1098              	# stdlib.c:99: 				if (format[i] == 'c') {
 1099 07fc 63021703 		beq	a4,a7,.L194	#, _10, tmp186,
 1100              	# stdlib.c:103: 				if (format[i] == 's') {
 1101 0800 6302C705 		beq	a4,t3,.L195	#, _10, tmp187,
 1102              	# stdlib.c:107: 				if (format[i] == 'd') {
 1103 0804 630AD707 		beq	a4,t4,.L196	#, _10, tmp188,
 1104              	# stdlib.c:111: 				if (format[i] == 'u') {
 1105 0808 630EE70D 		beq	a4,t5,.L197	#, _10, tmp189,
 1106              	.L148:
 1107              	# stdlib.c:98: 			while (format[++i]) {
 1108 080c 93861600 		addi	a3,a3,1	#, i, i
 1109              	# stdlib.c:98: 			while (format[++i]) {
 1110 0810 3307D500 		add	a4,a0,a3	# i, tmp174, format
 1111 0814 03470700 		lbu	a4,0(a4)	# _10, MEM[(const char *)_125]
 1112              	# stdlib.c:98: 			while (format[++i]) {
 1113 0818 E31207FE 		bne	a4,zero,.L167	#, _10,,
 1114 081c 6FF05FFC 		j	.L152		#
 1115              	.L194:
 1116              	# stdlib.c:100: 					printf_c(va_arg(ap,int));
 1117 0820 0327C100 		lw	a4,12(sp)		# D.2650, ap
 1118 0824 03260700 		lw	a2,0(a4)		# _4, MEM[(int *)_109]
 1119 0828 13074700 		addi	a4,a4,4	#, D.2651, D.2650
 1120 082c 2326E100 		sw	a4,12(sp)	# D.2651, ap
 1121              	.L151:
 1122              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1123 0830 03A70700 		lw	a4,0(a5)		# _33, MEM[(volatile uint32_t *)805306368B]
 1124              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1125 0834 E30E07FE 		beq	a4,zero,.L151	#, _33,,
 1126              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1127 0838 1377F60F 		andi	a4,a2,255	#, _35, _4
 1128 083c 23A0E700 		sw	a4,0(a5)	# _35, MEM[(volatile uint32_t *)805306368B]
 1129              	# stdlib.c:50: }
 1130 0840 6FF01FFA 		j	.L152		#
 1131              	.L195:
 1132              	# stdlib.c:104: 					printf_s(va_arg(ap,char*));
 1133 0844 0327C100 		lw	a4,12(sp)		# D.2652, ap
 1134 0848 03280700 		lw	a6,0(a4)		# p, MEM[(char * *)_78]
 1135 084c 13074700 		addi	a4,a4,4	#, D.2653, D.2652
 1136 0850 2326E100 		sw	a4,12(sp)	# D.2653, ap
 1137              	# stdlib.c:54: 	while (*p)
 1138 0854 03460800 		lbu	a2,0(a6)	# _39,* p
 1139 0858 E30406F8 		beq	a2,zero,.L152	#, _39,,
 1140              	.L155:
 1141              	# stdlib.c:56:     print_chr(*(p++));
 1142 085c 13081800 		addi	a6,a6,1	#, p, p
 1143              	.L154:
 1144              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1145 0860 03A70700 		lw	a4,0(a5)		# _38, MEM[(volatile uint32_t *)805306368B]
 1146              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1147 0864 E30E07FE 		beq	a4,zero,.L154	#, _38,,
 1148              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1149 0868 23A0C700 		sw	a2,0(a5)	# _39, MEM[(volatile uint32_t *)805306368B]
 1150              	# stdlib.c:54: 	while (*p)
 1151 086c 03460800 		lbu	a2,0(a6)	# _39,* p
 1152 0870 E31606FE 		bne	a2,zero,.L155	#, _39,,
 1153 0874 6FF0DFF6 		j	.L152		#
 1154              	.L196:
 1155              	# stdlib.c:108: 					printf_d(va_arg(ap,int));
 1156 0878 0326C100 		lw	a2,12(sp)		# D.2654, ap
 1157 087c 03270600 		lw	a4,0(a2)		# val, MEM[(int *)_110]
 1158 0880 13064600 		addi	a2,a2,4	#, D.2655, D.2654
 1159 0884 2326C100 		sw	a2,12(sp)	# D.2655, ap
 1160              	# stdlib.c:63: 	if (val < 0) {
 1161 0888 63440702 		blt	a4,zero,.L158	#, val,,
 1162              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1163 088c 13860F00 		mv	a2,t6	# p, tmp194
 1164              	.L159:
 1165              	# stdlib.c:67: 	while (val || p == buffer) {
 1166 0890 63140700 		bne	a4,zero,.L160	#, val,,
 1167 0894 631EF603 		bne	a2,t6,.L162	#, p, tmp194,
 1168              	.L160:
 1169              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1170 0898 3368B702 		rem	a6,a4,a1	# tmp195, tmp138, val
 1171              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1172 089c 13061600 		addi	a2,a2,1	#, p, p
 1173              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1174 08a0 13080803 		addi	a6,a6,48	#, tmp140, tmp138
 1175              	# stdlib.c:69: 		val = val / 10;
 1176 08a4 3347B702 		div	a4,a4,a1	# tmp195, val, val
 1177              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1178 08a8 A30F06FF 		sb	a6,-1(a2)	# tmp140, MEM[(char *)p_53 + 4294967295B]
 1179 08ac 6FF05FFE 		j	.L159		#
 1180              	.L158:
 1181              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1182 08b0 03A60700 		lw	a2,0(a5)		# _47, MEM[(volatile uint32_t *)805306368B]
 1183              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1184 08b4 E30E06FE 		beq	a2,zero,.L158	#, _47,,
 1185              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1186 08b8 23A07700 		sw	t2,0(a5)	# tmp198, MEM[(volatile uint32_t *)805306368B]
 1187              	# stdlib.c:65: 		val = -val;
 1188 08bc 3307E040 		neg	a4,a4	# val, val
 1189              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1190 08c0 13860F00 		mv	a2,t6	# p, tmp194
 1191 08c4 6FF0DFFC 		j	.L159		#
 1192              	.L198:
 1193              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1194 08c8 23A00701 		sw	a6,0(a5)	# _58, MEM[(volatile uint32_t *)805306368B]
 1195              	# stdlib.c:71: 	while (p != buffer)
 1196 08cc E30AF6F1 		beq	a2,t6,.L152	#, p, tmp194,
 1197              	.L162:
 1198              	# stdlib.c:72: 		printf_c(*(--p));
 1199 08d0 0348F6FF 		lbu	a6,-1(a2)	# _58, MEM[(char *)p_57]
 1200              	# stdlib.c:72: 		printf_c(*(--p));
 1201 08d4 1306F6FF 		addi	a2,a2,-1	#, p, p
 1202              	.L161:
 1203              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1204 08d8 03A70700 		lw	a4,0(a5)		# _59, MEM[(volatile uint32_t *)805306368B]
 1205              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1206 08dc E30E07FE 		beq	a4,zero,.L161	#, _59,,
 1207 08e0 6FF09FFE 		j	.L198		#
 1208              	.L197:
 1209              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 1210 08e4 0328C100 		lw	a6,12(sp)		# D.2656, ap
 1211              	# stdlib.c:78: 	char *p = buffer;
 1212 08e8 13860F00 		mv	a2,t6	# p, tmp194
 1213              	# stdlib.c:80:   val = val >= 0 ? val : -val;
 1214 08ec 03270800 		lw	a4,0(a6)		# MEM[(int *)_113], MEM[(int *)_113]
 1215              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 1216 08f0 13084800 		addi	a6,a6,4	#, D.2657, D.2656
 1217 08f4 23260101 		sw	a6,12(sp)	# D.2657, ap
 1218              	# stdlib.c:80:   val = val >= 0 ? val : -val;
 1219 08f8 1358F741 		srai	a6,a4,31	#, tmp153, MEM[(int *)_113]
 1220 08fc 3347E800 		xor	a4,a6,a4	# MEM[(int *)_113], val, tmp153
 1221 0900 33070741 		sub	a4,a4,a6	# val, val, tmp153
 1222              	.L163:
 1223              	# stdlib.c:81: 	while (val || p == buffer) {
 1224 0904 63140700 		bne	a4,zero,.L164	#, val,,
 1225 0908 6312F603 		bne	a2,t6,.L166	#, p, tmp194,
 1226              	.L164:
 1227              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1228 090c 3368B702 		rem	a6,a4,a1	# tmp195, tmp161, val
 1229              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1230 0910 13061600 		addi	a2,a2,1	#, p, p
 1231              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1232 0914 13080803 		addi	a6,a6,48	#, tmp163, tmp161
 1233              	# stdlib.c:83: 		val = val / 10;
 1234 0918 3347B702 		div	a4,a4,a1	# tmp195, val, val
 1235              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1236 091c A30F06FF 		sb	a6,-1(a2)	# tmp163, MEM[(char *)p_68 + 4294967295B]
 1237 0920 6FF05FFE 		j	.L163		#
 1238              	.L199:
 1239              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1240 0924 23A00701 		sw	a6,0(a5)	# _73, MEM[(volatile uint32_t *)805306368B]
 1241              	# stdlib.c:85: 	while (p != buffer)
 1242 0928 E30CF6EB 		beq	a2,t6,.L152	#, p, tmp194,
 1243              	.L166:
 1244              	# stdlib.c:86: 		printf_c(*(--p));
 1245 092c 0348F6FF 		lbu	a6,-1(a2)	# _73, MEM[(char *)p_72]
 1246              	# stdlib.c:86: 		printf_c(*(--p));
 1247 0930 1306F6FF 		addi	a2,a2,-1	#, p, p
 1248              	.L165:
 1249              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1250 0934 03A70700 		lw	a4,0(a5)		# _74, MEM[(volatile uint32_t *)805306368B]
 1251              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1252 0938 E30E07FE 		beq	a4,zero,.L165	#, _74,,
 1253 093c 6FF09FFE 		j	.L199		#
 1255              		.align	2
 1256              		.globl	malloc
 1258              	malloc:
 1259              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1260 0940 B7060000 		lui	a3,%hi(heap_memory_used)	# tmp77,
 1261 0944 03A70600 		lw	a4,%lo(heap_memory_used)(a3)		# heap_memory_used.19_1, heap_memory_used
 1262              	# stdlib.c:128: 	heap_memory_used += size;
 1263 0948 B307A700 		add	a5,a4,a0	# tmp83, _3, heap_memory_used.19_1
 1264              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1265 094c 37050000 		lui	a0,%hi(.LANCHOR0)	# tmp79,
 1266              	# stdlib.c:128: 	heap_memory_used += size;
 1267 0950 23A0F600 		sw	a5,%lo(heap_memory_used)(a3)	# _3, heap_memory_used
 1268              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1269 0954 13050500 		addi	a0,a0,%lo(.LANCHOR0)	# tmp78, tmp79,
 1270              	# stdlib.c:129: 	if (heap_memory_used > 1024)
 1271 0958 93060040 		li	a3,1024		# tmp81,
 1272              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1273 095c 3305E500 		add	a0,a0,a4	# heap_memory_used.19_1, <retval>, tmp78
 1274              	# stdlib.c:129: 	if (heap_memory_used > 1024)
 1275 0960 63D4F600 		ble	a5,a3,.L200	#, _3, tmp81,
 1276              	# stdlib.c:130: 		asm volatile ("ebreak");
 1277              	 #APP
 1278              	# 130 "stdlib.c" 1
  43              		return insns;
  44              	}
  45              	
  46              	static void printf_c(int c)
  47              	{
  48              		//*((volatile int*)0x10000000) = c;
  49              	    print_chr(c);
  50              	}
  51              	
  52              	static void printf_s(char *p)
  53              	{
  54              		while (*p)
  55              			//*((volatile int*)0x10000000) = *(p++);
  56              	    print_chr(*(p++));
  57              	}
  58              	
  59              	static void printf_d(int val)
  60              	{
  61              		char buffer[32];
  62              		char *p = buffer;
  63              		if (val < 0) {
  64              			printf_c('-');
  65              			val = -val;
  66              		}
  67              		while (val || p == buffer) {
  68              			*(p++) = '0' + val % 10;
  69              			val = val / 10;
  70              		}
  71              		while (p != buffer)
  72              			printf_c(*(--p));
  73              	}
  74              	
  75              	static void printf_u(int val)
  76              	{
  77              		char buffer[32];
  78              		char *p = buffer;
  79              	
  80              	  val = val >= 0 ? val : -val;
  81              		while (val || p == buffer) {
  82              			*(p++) = '0' + val % 10;
  83              			val = val / 10;
  84              		}
  85              		while (p != buffer)
  86              			printf_c(*(--p));
  87              	}
  88              	
  89              	int printf(const char *format, ...)
  90              	{
  91              		int i;
  92              		va_list ap;
  93              	
  94              		va_start(ap, format);
  95              	
  96              		for (i = 0; format[i]; i++)
  97              			if (format[i] == '%') {
  98              				while (format[++i]) {
  99              					if (format[i] == 'c') {
 100              						printf_c(va_arg(ap,int));
 101              						break;
 102              					}
 103              					if (format[i] == 's') {
 104              						printf_s(va_arg(ap,char*));
 105              						break;
 106              					}
 107              					if (format[i] == 'd') {
 108              						printf_d(va_arg(ap,int));
 109              						break;
 110              					}
 111              					if (format[i] == 'u') {
 112              						printf_u(va_arg(ap,int));
 113              						break;
 114              					}
 115              				}
 116              			} else
 117              				printf_c(format[i]);
 118              	
 119              		va_end(ap);
 120              	  return 0;
 121              	}
 122              	
 123              	#if !defined(NOT_USE_MYSTDLIB)
 124              	char *malloc(int size)
 125              	{
 126              		char *p = heap_memory + heap_memory_used;
 127              		// printf("[malloc(%d) -> %d (%d..%d)]", size, (int)p, heap_memory_used, heap_memory_used + size);
 128              		heap_memory_used += size;
 129              		if (heap_memory_used > 1024)
 130 0964 73001000 			asm volatile ("ebreak");
 131              		return p;
 1279              		ebreak
 1280              	# 0 "" 2
 1281              	 #NO_APP
 1282              	.L200:
 1283              	# stdlib.c:132: }
 1284 0968 67800000 		ret	
 1286              		.align	2
 1287              		.globl	memcpy
 1289              	memcpy:
 1290              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1291 096c 9308F6FF 		addi	a7,a2,-1	#, n, n
 1292              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1293 0970 6306060A 		beq	a2,zero,.L203	#, n,,
 1294 0974 13871500 		addi	a4,a1,1	#, bb, bb
 1295 0978 B307E540 		sub	a5,a0,a4	# tmp111, aa, bb
 1296 097c 93B73700 		sltiu	a5,a5,3	#, tmp114, tmp111
 1297 0980 93B67800 		sltiu	a3,a7,7	#, tmp117, n
 1298 0984 93C71700 		xori	a5,a5,1	#, tmp113, tmp114
 1299 0988 93C61600 		xori	a3,a3,1	#, tmp116, tmp117
 1300 098c B3F7D700 		and	a5,a5,a3	# tmp116, tmp120, tmp113
 1301 0990 63880706 		beq	a5,zero,.L204	#, tmp120,,
 1302 0994 B367B500 		or	a5,a0,a1	# bb, tmp121, aa
 1303 0998 93F73700 		andi	a5,a5,3	#, tmp122, tmp121
 1304 099c 63920706 		bne	a5,zero,.L204	#, tmp122,,
 1305 09a0 1378C6FF 		andi	a6,a2,-4	#, tmp127, n
 1306 09a4 93870500 		mv	a5,a1	# ivtmp.316, bb
 1307 09a8 13070500 		mv	a4,a0	# ivtmp.319, aa
 1308 09ac 3308B800 		add	a6,a6,a1	# bb, _77, tmp127
 1309              	.L205:
 1310              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1311 09b0 83A60700 		lw	a3,0(a5)		# vect__1.302, MEM <const vector(4) char> [(const char *)_43]
 1312 09b4 93874700 		addi	a5,a5,4	#, ivtmp.316, ivtmp.316
 1313 09b8 13074700 		addi	a4,a4,4	#, ivtmp.319, ivtmp.319
 1314              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1315 09bc 232ED7FE 		sw	a3,-4(a4)	# vect__1.302, MEM <vector(4) char> [(char *)_45]
 1316 09c0 E39807FF 		bne	a5,a6,.L205	#, ivtmp.316, _77,
 1317 09c4 9377C6FF 		andi	a5,a2,-4	#, niters_vector_mult_vf.296, n
 1318 09c8 3307F500 		add	a4,a0,a5	# niters_vector_mult_vf.296, tmp.297, aa
 1319 09cc B385F500 		add	a1,a1,a5	# niters_vector_mult_vf.296, tmp.298, bb
 1320 09d0 B388F840 		sub	a7,a7,a5	# tmp.299, n, niters_vector_mult_vf.296
 1321 09d4 6304F604 		beq	a2,a5,.L203	#, n, niters_vector_mult_vf.296,
 1322              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1323 09d8 83C70500 		lbu	a5,0(a1)	# _10, *tmp.298_55
 1324              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1325 09dc 2300F700 		sb	a5,0(a4)	# _10, *tmp.297_54
 1326              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1327 09e0 638E0802 		beq	a7,zero,.L203	#, tmp.299,,
 1328              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1329 09e4 83C61500 		lbu	a3,1(a1)	# _72, MEM[(const char *)tmp.298_55 + 1B]
 1330              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1331 09e8 93071000 		li	a5,1		# tmp128,
 1332              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1333 09ec A300D700 		sb	a3,1(a4)	# _72, MEM[(char *)tmp.297_54 + 1B]
 1334              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1335 09f0 6386F802 		beq	a7,a5,.L203	#, tmp.299, tmp128,
 1336              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1337 09f4 83C72500 		lbu	a5,2(a1)	# _48, MEM[(const char *)tmp.298_55 + 2B]
 1338              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1339 09f8 2301F700 		sb	a5,2(a4)	# _48, MEM[(char *)tmp.297_54 + 2B]
 1340 09fc 67800000 		ret	
 1341              	.L204:
 1342 0a00 3306C500 		add	a2,a0,a2	# n, _23, aa
 1343              	# stdlib.c:138: 	char *a = (char *) aa;
 1344 0a04 93070500 		mv	a5,a0	# a, aa
 1345              	.L207:
 1346              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1347 0a08 8346F7FF 		lbu	a3,-1(a4)	# _37, MEM[(const char *)b_35 + 4294967295B]
 1348              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1349 0a0c 93871700 		addi	a5,a5,1	#, a, a
 1350 0a10 13071700 		addi	a4,a4,1	#, bb, bb
 1351              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1352 0a14 A38FD7FE 		sb	a3,-1(a5)	# _37, MEM[(char *)a_36 + 4294967295B]
 1353              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1354 0a18 E318F6FE 		bne	a2,a5,.L207	#, _23, a,
 1355              	.L203:
 1356              	# stdlib.c:142: }
 1357 0a1c 67800000 		ret	
 1359              		.align	2
 1360              		.globl	strcpy
 1362              	strcpy:
 1363              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1364 0a20 93070500 		mv	a5,a0	# dst, dst
 1365 0a24 6F008001 		j	.L224		#
 1366              	.L226:
 1367              	# stdlib.c:150: 		char c = *(src++);
 1368 0a28 03C70500 		lbu	a4,0(a1)	# c, MEM[(const char *)src_40 + 4294967295B]
 1369              	# stdlib.c:151: 		*(dst++) = c;
 1370 0a2c 93871700 		addi	a5,a5,1	#, dst, dst
 1371              	# stdlib.c:150: 		char c = *(src++);
 1372 0a30 93851500 		addi	a1,a1,1	#, src, src
 1373              	# stdlib.c:151: 		*(dst++) = c;
 1374 0a34 A38FE7FE 		sb	a4,-1(a5)	# c, MEM[(char *)dst_42 + 4294967295B]
 1375              	# stdlib.c:152: 		if (!c) return r;
 1376 0a38 63040708 		beq	a4,zero,.L228	#, c,,
 1377              	.L224:
 1378              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1379 0a3c 33E7B700 		or	a4,a5,a1	# src, tmp101, dst
 1380              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1381 0a40 13773700 		andi	a4,a4,3	#, tmp102, tmp101
 1382              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1383 0a44 E31207FE 		bne	a4,zero,.L226	#, tmp102,,
 1384              	# stdlib.c:157: 		uint32_t v = *(uint32_t*)src;
 1385 0a48 83A60500 		lw	a3,0(a1)		# v, MEM[(uint32_t *)src_20]
 1386              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1387 0a4c B708FFFE 		li	a7,-16842752		# tmp105,
 1388 0a50 9388F8EF 		addi	a7,a7,-257	#, tmp104, tmp105
 1389 0a54 33871601 		add	a4,a3,a7	# tmp104, tmp103, v
 1390              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1391 0a58 13C6F6FF 		not	a2,a3	# tmp106, v
 1392              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1393 0a5c 37888080 		li	a6,-2139062272		# tmp110,
 1394              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1395 0a60 3377C700 		and	a4,a4,a2	# tmp106, tmp107, tmp103
 1396              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1397 0a64 13080808 		addi	a6,a6,128	#, tmp109, tmp110
 1398 0a68 33770701 		and	a4,a4,a6	# tmp109, tmp108, tmp107
 1399              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1400 0a6c 63140702 		bne	a4,zero,.L229	#, tmp108,,
 1401              	.L227:
 1402              	# stdlib.c:180: 		*(uint32_t*)dst = v;
 1403 0a70 23A0D700 		sw	a3,0(a5)	# v, MEM[(uint32_t *)dst_51]
 1404              	# stdlib.c:157: 		uint32_t v = *(uint32_t*)src;
 1405 0a74 83A64500 		lw	a3,4(a1)		# v, MEM[(uint32_t *)src_31]
 1406              	# stdlib.c:182: 		dst += 4;
 1407 0a78 93874700 		addi	a5,a5,4	#, dst, dst
 1408              	# stdlib.c:181: 		src += 4;
 1409 0a7c 93854500 		addi	a1,a1,4	#, src, src
 1410              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1411 0a80 33871601 		add	a4,a3,a7	# tmp104, tmp115, v
 1412              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1413 0a84 13C6F6FF 		not	a2,a3	# tmp118, v
 1414              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1415 0a88 3377C700 		and	a4,a4,a2	# tmp118, tmp119, tmp115
 1416              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1417 0a8c 33770701 		and	a4,a4,a6	# tmp109, tmp120, tmp119
 1418              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1419 0a90 E30007FE 		beq	a4,zero,.L227	#, tmp120,,
 1420              	.L229:
 1421              	# stdlib.c:161: 			dst[0] = v & 0xff;
 1422 0a94 2380D700 		sb	a3,0(a5)	# v, *dst_50
 1423              	# stdlib.c:162: 			if ((v & 0xff) == 0)
 1424 0a98 13F7F60F 		andi	a4,a3,255	#, tmp111, v
 1425              	# stdlib.c:162: 			if ((v & 0xff) == 0)
 1426 0a9c 63020702 		beq	a4,zero,.L228	#, tmp111,,
 1427              	# stdlib.c:164: 			v = v >> 8;
 1428 0aa0 13D78600 		srli	a4,a3,8	#, v, v
 1429              	# stdlib.c:166: 			dst[1] = v & 0xff;
 1430 0aa4 A380E700 		sb	a4,1(a5)	# v, MEM[(char *)dst_50 + 1B]
 1431              	# stdlib.c:167: 			if ((v & 0xff) == 0)
 1432 0aa8 1377F70F 		andi	a4,a4,255	#, tmp112, v
 1433              	# stdlib.c:167: 			if ((v & 0xff) == 0)
 1434 0aac 630A0700 		beq	a4,zero,.L228	#, tmp112,,
 1435              	# stdlib.c:169: 			v = v >> 8;
 1436 0ab0 13D70601 		srli	a4,a3,16	#, v, v
 1437              	# stdlib.c:171: 			dst[2] = v & 0xff;
 1438 0ab4 2381E700 		sb	a4,2(a5)	# v, MEM[(char *)dst_50 + 2B]
 1439              	# stdlib.c:172: 			if ((v & 0xff) == 0)
 1440 0ab8 1377F70F 		andi	a4,a4,255	#, tmp113, v
 1441              	# stdlib.c:172: 			if ((v & 0xff) == 0)
 1442 0abc 63140700 		bne	a4,zero,.L244	#, tmp113,,
 1443              	.L228:
 1444              	# stdlib.c:184: }
 1445 0ac0 67800000 		ret	
 1446              	.L244:
 1447              	# stdlib.c:174: 			v = v >> 8;
 1448 0ac4 93D68601 		srli	a3,a3,24	#, v, v
 1449              	# stdlib.c:176: 			dst[3] = v & 0xff;
 1450 0ac8 A381D700 		sb	a3,3(a5)	# v, MEM[(char *)dst_50 + 3B]
 1451              	# stdlib.c:177: 			return r;
 1452 0acc 67800000 		ret	
 1454              		.align	2
 1455              		.globl	strcmp
 1457              	strcmp:
 1458              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1459 0ad0 6F00C001 		j	.L246		#
 1460              	.L250:
 1461              	# stdlib.c:190: 		char c1 = *(s1++);
 1462 0ad4 83470500 		lbu	a5,0(a0)	# c1, MEM[(const char *)s1_48 + 4294967295B]
 1463              	# stdlib.c:191: 		char c2 = *(s2++);
 1464 0ad8 03C70500 		lbu	a4,0(a1)	# c2, MEM[(const char *)s2_50 + 4294967295B]
 1465              	# stdlib.c:190: 		char c1 = *(s1++);
 1466 0adc 13051500 		addi	a0,a0,1	#, s1, s1
 1467              	# stdlib.c:191: 		char c2 = *(s2++);
 1468 0ae0 93851500 		addi	a1,a1,1	#, s2, s2
 1469              	# stdlib.c:193: 		if (c1 != c2)
 1470 0ae4 6392E706 		bne	a5,a4,.L275	#, c1, c2,
 1471              	# stdlib.c:195: 		else if (!c1)
 1472 0ae8 638C0704 		beq	a5,zero,.L265	#, c1,,
 1473              	.L246:
 1474              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1475 0aec B367B500 		or	a5,a0,a1	# s2, tmp101, s1
 1476              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1477 0af0 93F73700 		andi	a5,a5,3	#, tmp102, tmp101
 1478              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1479 0af4 E39007FE 		bne	a5,zero,.L250	#, tmp102,,
 1480              	# stdlib.c:201: 		uint32_t v1 = *(uint32_t*)s1;
 1481 0af8 83270500 		lw	a5,0(a0)		# v1, MEM[(uint32_t *)s1_14]
 1482              	# stdlib.c:202: 		uint32_t v2 = *(uint32_t*)s2;
 1483 0afc 03A70500 		lw	a4,0(a1)		# v2, MEM[(uint32_t *)s2_16]
 1484              	# stdlib.c:204: 		if (__builtin_expect(v1 != v2, 0))
 1485 0b00 639CE704 		bne	a5,a4,.L255	#, v1, v2,
 1486              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1487 0b04 3706FFFE 		li	a2,-16842752		# tmp111,
 1488              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1489 0b08 B7868080 		li	a3,-2139062272		# tmp116,
 1490              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1491 0b0c 1306F6EF 		addi	a2,a2,-257	#, tmp110, tmp111
 1492              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1493 0b10 93860608 		addi	a3,a3,128	#, tmp115, tmp116
 1494 0b14 6F000001 		j	.L251		#
 1495              	.L276:
 1496              	# stdlib.c:201: 		uint32_t v1 = *(uint32_t*)s1;
 1497 0b18 83270500 		lw	a5,0(a0)		# v1, MEM[(uint32_t *)s1_29]
 1498              	# stdlib.c:202: 		uint32_t v2 = *(uint32_t*)s2;
 1499 0b1c 03A70500 		lw	a4,0(a1)		# v2, MEM[(uint32_t *)s2_30]
 1500              	# stdlib.c:204: 		if (__builtin_expect(v1 != v2, 0))
 1501 0b20 639CE702 		bne	a5,a4,.L255	#, v1, v2,
 1502              	.L251:
 1503              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1504 0b24 3387C700 		add	a4,a5,a2	# tmp110, tmp109, v1
 1505              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1506 0b28 93C7F7FF 		not	a5,a5	# tmp112, v1
 1507              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1508 0b2c B377F700 		and	a5,a4,a5	# tmp112, tmp113, tmp109
 1509              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1510 0b30 B3F7D700 		and	a5,a5,a3	# tmp115, tmp114, tmp113
 1511              	# stdlib.c:231: 		s1 += 4;
 1512 0b34 13054500 		addi	a0,a0,4	#, s1, s1
 1513              	# stdlib.c:232: 		s2 += 4;
 1514 0b38 93854500 		addi	a1,a1,4	#, s2, s2
 1515              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1516 0b3c E38E07FC 		beq	a5,zero,.L276	#, tmp114,,
 1517              	.L265:
 1518              	# stdlib.c:196: 			return 0;
 1519 0b40 13050000 		li	a0,0		# <retval>,
 1520              	.L245:
 1521              	# stdlib.c:234: }
 1522 0b44 67800000 		ret	
 1523              	.L275:
 1524              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1525 0b48 33B5E700 		sltu	a0,a5,a4	# c2, tmp119, c1
 1526 0b4c 3305A040 		neg	a0,a0	# tmp120, tmp119
 1527 0b50 13651500 		ori	a0,a0,1	#, <retval>, tmp120
 1528 0b54 67800000 		ret	
 1529              	.L255:
 1530              	# stdlib.c:208: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1531 0b58 93F6F70F 		andi	a3,a5,0xff	# c1, v1
 1532              	# stdlib.c:208: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1533 0b5c 1376F70F 		andi	a2,a4,0xff	# c2, v2
 1534              	# stdlib.c:209: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1535 0b60 639AC604 		bne	a3,a2,.L273	#, c1, c2,
 1536              	# stdlib.c:196: 			return 0;
 1537 0b64 13050000 		li	a0,0		# <retval>,
 1538              	# stdlib.c:210: 			if (!c1) return 0;
 1539 0b68 E38E06FC 		beq	a3,zero,.L245	#, c1,,
 1540              	# stdlib.c:211: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1541 0b6c 93D68700 		srli	a3,a5,8	#, v1, v1
 1542              	# stdlib.c:211: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1543 0b70 13568700 		srli	a2,a4,8	#, v2, v2
 1544              	# stdlib.c:213: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1545 0b74 93F6F60F 		andi	a3,a3,0xff	# c1, v1
 1546              	# stdlib.c:213: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1547 0b78 1376F60F 		andi	a2,a2,0xff	# c2, v2
 1548              	# stdlib.c:214: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1549 0b7c 639CC602 		bne	a3,a2,.L273	#, c1, c2,
 1550              	# stdlib.c:215: 			if (!c1) return 0;
 1551 0b80 E38206FC 		beq	a3,zero,.L245	#, c1,,
 1552              	# stdlib.c:216: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1553 0b84 93D60701 		srli	a3,a5,16	#, v1, v1
 1554              	# stdlib.c:216: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1555 0b88 13560701 		srli	a2,a4,16	#, v2, v2
 1556              	# stdlib.c:218: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1557 0b8c 93F6F60F 		andi	a3,a3,0xff	# c1, v1
 1558              	# stdlib.c:218: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1559 0b90 1376F60F 		andi	a2,a2,0xff	# c2, v2
 1560              	# stdlib.c:219: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1561 0b94 6390C602 		bne	a3,a2,.L273	#, c1, c2,
 1562              	# stdlib.c:220: 			if (!c1) return 0;
 1563 0b98 E38606FA 		beq	a3,zero,.L245	#, c1,,
 1564              	# stdlib.c:223: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1565 0b9c 93D78701 		srli	a5,a5,24	#, c1, v1
 1566              	# stdlib.c:223: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1567 0ba0 13578701 		srli	a4,a4,24	#, c2, v2
 1568              	# stdlib.c:224: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1569 0ba4 E380E7FA 		beq	a5,a4,.L245	#, c1, c2,
 1570              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1571 0ba8 13051000 		li	a0,1		# <retval>,
 1572              	# stdlib.c:224: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1573 0bac E3FCE7F8 		bgeu	a5,a4,.L245	#, c1, c2,
 1574 0bb0 6F00C000 		j	.L271		#
 1575              	.L273:
 1576              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1577 0bb4 13051000 		li	a0,1		# <retval>,
 1578              	# stdlib.c:219: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1579 0bb8 E3F6C6F8 		bgeu	a3,a2,.L245	#, c1, c2,
 1580              	.L271:
 1581              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1582 0bbc 1305F0FF 		li	a0,-1		# <retval>,
 1583 0bc0 67800000 		ret	
 1585              		.align	2
 1586              		.globl	sin1
 1588              	sin1:
 1589              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1590 0bc4 635A0500 		bge	a0,zero,.L278	#, angle,,
 1591              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1592 0bc8 B787FFFF 		li	a5,-32768		# tmp96,
 1593 0bcc 3305F500 		add	a0,a0,a5	# tmp96, tmp98, angle
 1594 0bd0 13150501 		slli	a0,a0,16	#, angle, tmp98
 1595 0bd4 13550541 		srai	a0,a0,16	#, angle, angle
 1596              	.L278:
 1597              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 1598 0bd8 93578540 		srai	a5,a0,8	#, v0, angle
 1599              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1600 0bdc 93960701 		slli	a3,a5,16	#, v0.41_4, v0
 1601              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1602 0be0 13F70702 		andi	a4,a5,32	#, tmp102, v0
 1603              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1604 0be4 93D60601 		srli	a3,a3,16	#, v0.41_4, v0.41_4
 1605              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1606 0be8 630A0700 		beq	a4,zero,.L279	#, tmp102,,
 1607              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1608 0bec 93C7F7FF 		not	a5,a5	# tmp104, v0
 1609 0bf0 93970701 		slli	a5,a5,16	#, v0, tmp104
 1610 0bf4 93D70741 		srai	a5,a5,16	#, v0, v0
 1611              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1612 0bf8 1345F5FF 		not	a0,a0	# angle, angle
 1613              	.L279:
 1614              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1615 0bfc 93F7F701 		andi	a5,a5,31	#, _6, v0
 1616              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1617 0c00 13861700 		addi	a2,a5,1	#, tmp114, _6
 1618              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1619 0c04 37070000 		lui	a4,%hi(.LANCHOR1)	# tmp109,
 1620 0c08 13070700 		addi	a4,a4,%lo(.LANCHOR1)	# tmp108, tmp109,
 1621              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1622 0c0c 13161600 		slli	a2,a2,1	#, tmp115, tmp114
 1623              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1624 0c10 93971700 		slli	a5,a5,1	#, tmp110, _6
 1625 0c14 B307F700 		add	a5,a4,a5	# tmp110, tmp111, tmp108
 1626              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1627 0c18 3307C700 		add	a4,a4,a2	# tmp115, tmp116, tmp108
 1628              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1629 0c1c 03960700 		lh	a2,0(a5)		# _7, sin90[_6]
 1630              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1631 0c20 83170700 		lh	a5,0(a4)		# sin90[_9], sin90[_9]
 1632              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1633 0c24 1377F50F 		andi	a4,a0,0xff	# tmp121, angle
 1634              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1635 0c28 93F60604 		andi	a3,a3,64	#, tmp129, v0.41_4
 1636              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1637 0c2c 3385C740 		sub	a0,a5,a2	# tmp118, sin90[_9], _7
 1638              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1639 0c30 3305E502 		mul	a0,a0,a4	# tmp122, tmp118, tmp121
 1640              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1641 0c34 13558540 		srai	a0,a0,8	#, tmp123, tmp122
 1642              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1643 0c38 3305C500 		add	a0,a0,a2	# _7, tmp126, tmp123
 1644 0c3c 13150501 		slli	a0,a0,16	#, _5, tmp126
 1645 0c40 13550501 		srli	a0,a0,16	#, _5, _5
 1646              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1647 0c44 63880600 		beq	a3,zero,.L280	#, tmp129,,
 1648              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1649 0c48 3305A040 		neg	a0,a0	# tmp131, _5
 1650 0c4c 13150501 		slli	a0,a0,16	#, _5, tmp131
 1651 0c50 13550501 		srli	a0,a0,16	#, _5, _5
 1652              	.L280:
 1653              	# gfx_lib.h:94: }
 1654 0c54 13150501 		slli	a0,a0,16	#,, _5
 1655 0c58 13550541 		srai	a0,a0,16	#,,
 1656 0c5c 67800000 		ret	
 1658              		.align	2
 1659              		.globl	cos1
 1661              	cos1:
 1662              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1663 0c60 13160501 		slli	a2,a0,16	#, prephitmp_78, angle
 1664 0c64 13560601 		srli	a2,a2,16	#, prephitmp_78, prephitmp_78
 1665              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1666 0c68 63560500 		bge	a0,zero,.L288	#, angle,,
 1667              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1668 0c6c B7870000 		li	a5,32768		# tmp98,
 1669 0c70 3346F600 		xor	a2,a2,a5	# tmp98, prephitmp_78, prephitmp_78
 1670              	.L288:
 1671              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1672 0c74 B7A7FFFF 		li	a5,-24576		# tmp101,
 1673 0c78 93871700 		addi	a5,a5,1	#, tmp100, tmp101
 1674 0c7c B307F600 		add	a5,a2,a5	# tmp100, tmp99, prephitmp_78
 1675              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1676 0c80 93960701 		slli	a3,a5,16	#, angle, tmp99
 1677              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1678 0c84 13970701 		slli	a4,a5,16	#, _4, tmp99
 1679              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1680 0c88 93D60641 		srai	a3,a3,16	#, angle, angle
 1681              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1682 0c8c 13570701 		srli	a4,a4,16	#, _4, _4
 1683              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1684 0c90 63D00602 		bge	a3,zero,.L289	#, angle,,
 1685              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1686 0c94 B7270000 		li	a5,8192		# tmp104,
 1687 0c98 93871700 		addi	a5,a5,1	#, tmp103, tmp104
 1688 0c9c 3306F600 		add	a2,a2,a5	# tmp103, tmp102, prephitmp_78
 1689 0ca0 13170601 		slli	a4,a2,16	#, _4, tmp102
 1690 0ca4 93160601 		slli	a3,a2,16	#, angle, tmp102
 1691 0ca8 13570701 		srli	a4,a4,16	#, _4, _4
 1692 0cac 93D60641 		srai	a3,a3,16	#, angle, angle
 1693              	.L289:
 1694              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 1695 0cb0 93D78640 		srai	a5,a3,8	#, v0, angle
 1696              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1697 0cb4 13960701 		slli	a2,a5,16	#, v0.41_16, v0
 1698              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1699 0cb8 93F50702 		andi	a1,a5,32	#, tmp108, v0
 1700              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1701 0cbc 13560601 		srli	a2,a2,16	#, v0.41_16, v0.41_16
 1702              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1703 0cc0 638A0500 		beq	a1,zero,.L290	#, tmp108,,
 1704              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1705 0cc4 93C6F6FF 		not	a3,a3	# tmp112, angle
 1706              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1707 0cc8 13970601 		slli	a4,a3,16	#, _4, tmp112
 1708              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1709 0ccc 93C7F7FF 		not	a5,a5	# v0, v0
 1710              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1711 0cd0 13570701 		srli	a4,a4,16	#, _4, _4
 1712              	.L290:
 1713              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1714 0cd4 93F7F701 		andi	a5,a5,31	#, _22, v0
 1715              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1716 0cd8 93851700 		addi	a1,a5,1	#, tmp120, _22
 1717              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1718 0cdc B7060000 		lui	a3,%hi(.LANCHOR1)	# tmp115,
 1719 0ce0 93860600 		addi	a3,a3,%lo(.LANCHOR1)	# tmp114, tmp115,
 1720              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1721 0ce4 93951500 		slli	a1,a1,1	#, tmp121, tmp120
 1722              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1723 0ce8 93971700 		slli	a5,a5,1	#, tmp116, _22
 1724 0cec B387F600 		add	a5,a3,a5	# tmp116, tmp117, tmp114
 1725              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1726 0cf0 B386B600 		add	a3,a3,a1	# tmp121, tmp122, tmp114
 1727 0cf4 03950600 		lh	a0,0(a3)		# sin90[_25], sin90[_25]
 1728              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1729 0cf8 83950700 		lh	a1,0(a5)		# _23, sin90[_22]
 1730              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1731 0cfc 9377F70F 		andi	a5,a4,0xff	# tmp126, _4
 1732              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1733 0d00 13770604 		andi	a4,a2,64	#, tmp134, v0.41_16
 1734              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1735 0d04 3305B540 		sub	a0,a0,a1	# tmp124, sin90[_25], _23
 1736              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1737 0d08 3305F502 		mul	a0,a0,a5	# tmp127, tmp124, tmp126
 1738              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1739 0d0c 13558540 		srai	a0,a0,8	#, tmp128, tmp127
 1740              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1741 0d10 3305B500 		add	a0,a0,a1	# _23, tmp131, tmp128
 1742 0d14 13150501 		slli	a0,a0,16	#, _37, tmp131
 1743 0d18 13550501 		srli	a0,a0,16	#, _37, _37
 1744              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1745 0d1c 63080700 		beq	a4,zero,.L291	#, tmp134,,
 1746              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1747 0d20 3305A040 		neg	a0,a0	# tmp136, _37
 1748 0d24 13150501 		slli	a0,a0,16	#, _37, tmp136
 1749 0d28 13550501 		srli	a0,a0,16	#, _37, _37
 1750              	.L291:
 1751              	# gfx_lib.h:110: }
 1752 0d2c 13150501 		slli	a0,a0,16	#,, _37
 1753 0d30 13550541 		srai	a0,a0,16	#,,
 1754 0d34 67800000 		ret	
 1756              		.align	2
 1757              		.globl	oled_spi_tx
 1759              	oled_spi_tx:
 1760              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1761 0d38 93958500 		slli	a1,a1,8	#, tmp80, tmp85
 1762 0d3c 93F50510 		andi	a1,a1,256	#, tmp81, tmp80
 1763              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1764 0d40 B3E5A500 		or	a1,a1,a0	# tmp84, _6, tmp81
 1765              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1766 0d44 B7070030 		li	a5,805306368		# tmp83,
 1767 0d48 23A6B700 		sw	a1,12(a5)	# _6, MEM[(volatile uint32_t *)805306380B]
 1768              	# gfx_lib.h:115: }
 1769 0d4c 67800000 		ret	
 1771              		.align	2
 1772              		.globl	oled_max_window
 1774              	oled_max_window:
 1775              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1776 0d50 B7070030 		li	a5,805306368		# tmp73,
 1777 0d54 13075001 		li	a4,21		# tmp74,
 1778 0d58 23A6E700 		sw	a4,12(a5)	# tmp74, MEM[(volatile uint32_t *)805306380B]
 1779 0d5c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1780 0d60 1307F005 		li	a4,95		# tmp79,
 1781 0d64 23A6E700 		sw	a4,12(a5)	# tmp79, MEM[(volatile uint32_t *)805306380B]
 1782 0d68 13075007 		li	a4,117		# tmp82,
 1783 0d6c 23A6E700 		sw	a4,12(a5)	# tmp82, MEM[(volatile uint32_t *)805306380B]
 1784 0d70 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1785 0d74 1307F003 		li	a4,63		# tmp87,
 1786 0d78 23A6E700 		sw	a4,12(a5)	# tmp87, MEM[(volatile uint32_t *)805306380B]
 1787              	# gfx_lib.h:120: }
 1788 0d7c 67800000 		ret	
 1790              		.align	2
 1791              		.globl	oled_show_fb_8or16
 1793              	oled_show_fb_8or16:
 1794              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1795 0d80 B7070030 		li	a5,805306368		# tmp94,
 1796 0d84 93065001 		li	a3,21		# tmp95,
 1797 0d88 23A6D700 		sw	a3,12(a5)	# tmp95, MEM[(volatile uint32_t *)805306380B]
 1798 0d8c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1799 0d90 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1800 0d94 13075007 		li	a4,117		# tmp102,
 1801 0d98 23A6E700 		sw	a4,12(a5)	# tmp102, MEM[(volatile uint32_t *)805306380B]
 1802 0d9c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1803 0da0 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1804 0da4 23A6D700 		sw	a3,12(a5)	# tmp95, MEM[(volatile uint32_t *)805306380B]
 1805 0da8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1806 0dac 9306F005 		li	a3,95		# tmp114,
 1807 0db0 23A6D700 		sw	a3,12(a5)	# tmp114, MEM[(volatile uint32_t *)805306380B]
 1808 0db4 23A6E700 		sw	a4,12(a5)	# tmp102, MEM[(volatile uint32_t *)805306380B]
 1809 0db8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1810 0dbc 1307F003 		li	a4,63		# tmp122,
 1811 0dc0 23A6E700 		sw	a4,12(a5)	# tmp122, MEM[(volatile uint32_t *)805306380B]
 1812              	# gfx_lib.h:122: void oled_show_fb_8or16(uint16_t *framebuffer, int _8bit) {
 1813 0dc4 93070500 		mv	a5,a0	# framebuffer, tmp154
 1814 0dc8 638A0504 		beq	a1,zero,.L301	#, tmp155,,
 1815 0dcc B7360000 		li	a3,12288		# tmp123,
 1816 0dd0 B306D500 		add	a3,a0,a3	# tmp123, _27, ivtmp.374
 1817              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1818 0dd4 37060030 		li	a2,805306368		# tmp128,
 1819              	.L302:
 1820              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1821 0dd8 03C70700 		lbu	a4,0(a5)	# MEM[(uint16_t *)_46], MEM[(uint16_t *)_46]
 1822              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1823 0ddc 93872700 		addi	a5,a5,2	#, ivtmp.374, ivtmp.374
 1824              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1825 0de0 13670710 		ori	a4,a4,256	#, _23, MEM[(uint16_t *)_46]
 1826              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1827 0de4 2326E600 		sw	a4,12(a2)	# _23, MEM[(volatile uint32_t *)805306380B]
 1828              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1829 0de8 E398D7FE 		bne	a5,a3,.L302	#, ivtmp.374, _27,
 1830              	.L303:
 1831              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1832 0dec B7070030 		li	a5,805306368		# tmp139,
 1833 0df0 13075001 		li	a4,21		# tmp140,
 1834 0df4 23A6E700 		sw	a4,12(a5)	# tmp140, MEM[(volatile uint32_t *)805306380B]
 1835 0df8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1836 0dfc 1307F005 		li	a4,95		# tmp145,
 1837 0e00 23A6E700 		sw	a4,12(a5)	# tmp145, MEM[(volatile uint32_t *)805306380B]
 1838 0e04 13075007 		li	a4,117		# tmp148,
 1839 0e08 23A6E700 		sw	a4,12(a5)	# tmp148, MEM[(volatile uint32_t *)805306380B]
 1840 0e0c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1841 0e10 1307F003 		li	a4,63		# tmp153,
 1842 0e14 23A6E700 		sw	a4,12(a5)	# tmp153, MEM[(volatile uint32_t *)805306380B]
 1843              	# gfx_lib.h:144: }
 1844 0e18 67800000 		ret	
 1845              	.L301:
 1846 0e1c B7350000 		li	a1,12288		# tmp129,
 1847 0e20 B305B500 		add	a1,a0,a1	# tmp129, _19, ivtmp.380
 1848              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1849 0e24 37060030 		li	a2,805306368		# tmp135,
 1850              	.L304:
 1851              	# gfx_lib.h:133:       buf[0] = (framebuffer[i] >> 8) & 0xff;
 1852 0e28 03D70700 		lhu	a4,0(a5)	# pretmp_64, MEM[(uint16_t *)_4]
 1853              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1854 0e2c 93872700 		addi	a5,a5,2	#, ivtmp.380, ivtmp.380
 1855              	# gfx_lib.h:133:       buf[0] = (framebuffer[i] >> 8) & 0xff;
 1856 0e30 93568700 		srli	a3,a4,8	#, tmp131, pretmp_64
 1857              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1858 0e34 93E60610 		ori	a3,a3,256	#, _24, tmp131
 1859 0e38 1377F70F 		andi	a4,a4,0xff	# pretmp_64, pretmp_64
 1860 0e3c 13670710 		ori	a4,a4,256	#, _68, pretmp_64
 1861              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1862 0e40 2326D600 		sw	a3,12(a2)	# _24, MEM[(volatile uint32_t *)805306380B]
 1863 0e44 2326E600 		sw	a4,12(a2)	# _68, MEM[(volatile uint32_t *)805306380B]
 1864              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1865 0e48 E390B7FE 		bne	a5,a1,.L304	#, ivtmp.380, _19,
 1866 0e4c 6FF01FFA 		j	.L303		#
 1868              		.align	2
 1869              		.globl	oled_show_fb
 1871              	oled_show_fb:
 1872              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1873 0e50 B7070030 		li	a5,805306368		# tmp85,
 1874 0e54 93065001 		li	a3,21		# tmp86,
 1875 0e58 23A6D700 		sw	a3,12(a5)	# tmp86, MEM[(volatile uint32_t *)805306380B]
 1876 0e5c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1877 0e60 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1878 0e64 13075007 		li	a4,117		# tmp93,
 1879 0e68 23A6E700 		sw	a4,12(a5)	# tmp93, MEM[(volatile uint32_t *)805306380B]
 1880 0e6c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1881 0e70 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1882 0e74 23A6D700 		sw	a3,12(a5)	# tmp86, MEM[(volatile uint32_t *)805306380B]
 1883 0e78 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1884 0e7c 9306F005 		li	a3,95		# tmp105,
 1885 0e80 23A6D700 		sw	a3,12(a5)	# tmp105, MEM[(volatile uint32_t *)805306380B]
 1886 0e84 23A6E700 		sw	a4,12(a5)	# tmp93, MEM[(volatile uint32_t *)805306380B]
 1887 0e88 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1888 0e8c 1307F003 		li	a4,63		# tmp113,
 1889 0e90 B7350000 		li	a1,12288		# tmp114,
 1890 0e94 23A6E700 		sw	a4,12(a5)	# tmp113, MEM[(volatile uint32_t *)805306380B]
 1891 0e98 B305B500 		add	a1,a0,a1	# tmp114, _54, ivtmp.389
 1892 0e9c B7060030 		li	a3,805306368		# tmp119,
 1893              	.L308:
 1894              	# gfx_lib.h:133:       buf[0] = (framebuffer[i] >> 8) & 0xff;
 1895 0ea0 83570500 		lhu	a5,0(a0)	# _8, MEM[(uint16_t *)_56]
 1896              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1897 0ea4 13052500 		addi	a0,a0,2	#, ivtmp.389, ivtmp.389
 1898              	# gfx_lib.h:133:       buf[0] = (framebuffer[i] >> 8) & 0xff;
 1899 0ea8 13D78700 		srli	a4,a5,8	#, tmp115, _8
 1900              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1901 0eac 13670710 		ori	a4,a4,256	#, _13, tmp115
 1902 0eb0 93F7F70F 		andi	a5,a5,0xff	# _8, _8
 1903              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1904 0eb4 23A6E600 		sw	a4,12(a3)	# _13, MEM[(volatile uint32_t *)805306380B]
 1905              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1906 0eb8 93E70710 		ori	a5,a5,256	#, _16, _8
 1907              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1908 0ebc 23A6F600 		sw	a5,12(a3)	# _16, MEM[(volatile uint32_t *)805306380B]
 1909              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1910 0ec0 E390A5FE 		bne	a1,a0,.L308	#, _54, ivtmp.389,
 1911              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1912 0ec4 93075001 		li	a5,21		# tmp125,
 1913 0ec8 23A6F600 		sw	a5,12(a3)	# tmp125, MEM[(volatile uint32_t *)805306380B]
 1914 0ecc 23A60600 		sw	zero,12(a3)	#, MEM[(volatile uint32_t *)805306380B]
 1915 0ed0 9307F005 		li	a5,95		# tmp130,
 1916 0ed4 23A6F600 		sw	a5,12(a3)	# tmp130, MEM[(volatile uint32_t *)805306380B]
 1917 0ed8 93075007 		li	a5,117		# tmp133,
 1918 0edc 23A6F600 		sw	a5,12(a3)	# tmp133, MEM[(volatile uint32_t *)805306380B]
 1919 0ee0 23A60600 		sw	zero,12(a3)	#, MEM[(volatile uint32_t *)805306380B]
 1920 0ee4 9307F003 		li	a5,63		# tmp138,
 1921 0ee8 23A6F600 		sw	a5,12(a3)	# tmp138, MEM[(volatile uint32_t *)805306380B]
 1922              	# gfx_lib.h:149: }
 1923 0eec 67800000 		ret	
 1925              		.align	2
 1926              		.globl	init_oled8bit_colors
 1928              	init_oled8bit_colors:
 1929 0ef0 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp78,
 1930 0ef4 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# ivtmp.399, tmp78,
 1931 0ef8 13865702 		addi	a2,a5,37	#, _15, ivtmp.399
 1932              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1933 0efc B7060030 		li	a3,805306368		# tmp80,
 1934              	.L311:
 1935              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1936 0f00 03C70700 		lbu	a4,0(a5)	# _7, MEM[(char *)_13]
 1937              	# gfx_lib.h:177:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 1938 0f04 93871700 		addi	a5,a5,1	#, ivtmp.399, ivtmp.399
 1939              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1940 0f08 23A6E600 		sw	a4,12(a3)	# _7, MEM[(volatile uint32_t *)805306380B]
 1941              	# gfx_lib.h:177:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 1942 0f0c E39AC7FE 		bne	a5,a2,.L311	#, ivtmp.399, _15,
 1943              	# gfx_lib.h:183: }
 1944 0f10 67800000 		ret	
 1946              		.align	2
 1947              		.globl	fb_setpixel
 1949              	fb_setpixel:
 1950              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
 1951 0f14 1387F5FF 		addi	a4,a1,-1	#, tmp86, x
 1952 0f18 9307E005 		li	a5,94		# tmp87,
 1953 0f1c 63E6E702 		bgtu	a4,a5,.L313	#, tmp86, tmp87,
 1954              	# gfx_lib.h:190:   if  ( y <= 0) return;
 1955 0f20 9307F6FF 		addi	a5,a2,-1	#, tmp88, y
 1956 0f24 1307E003 		li	a4,62		# tmp89,
 1957 0f28 6360F702 		bgtu	a5,a4,.L313	#, tmp88, tmp89,
 1958              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 1959 0f2c 93171600 		slli	a5,a2,1	#, tmp91, y
 1960 0f30 B387C700 		add	a5,a5,a2	# y, tmp92, tmp91
 1961 0f34 93975700 		slli	a5,a5,5	#, tmp93, tmp92
 1962 0f38 B387B700 		add	a5,a5,a1	# x, tmp94, tmp93
 1963              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 1964 0f3c 93971700 		slli	a5,a5,1	#, tmp95, tmp94
 1965 0f40 3305F500 		add	a0,a0,a5	# tmp95, tmp96, fb
 1966 0f44 2310D500 		sh	a3,0(a0)	# color, *_12
 1967              	.L313:
 1968              	# gfx_lib.h:192: }
 1969 0f48 67800000 		ret	
 1971              		.align	2
 1972              		.globl	fb_draw_bresenham
 1974              	fb_draw_bresenham:
 1975 0f4c 130101FD 		addi	sp,sp,-48	#,,
 1976 0f50 232C4101 		sw	s4,24(sp)	#,
 1977 0f54 130A0500 		mv	s4,a0	# tmp121, fb
 1978              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 1979 0f58 3385B640 		sub	a0,a3,a1	#, x1, x0
 1980              	# gfx_lib.h:195: {
 1981 0f5c 23261102 		sw	ra,44(sp)	#,
 1982 0f60 23248102 		sw	s0,40(sp)	#,
 1983 0f64 23229102 		sw	s1,36(sp)	#,
 1984 0f68 13040600 		mv	s0,a2	# y0, tmp123
 1985 0f6c 93840500 		mv	s1,a1	# x0, tmp122
 1986 0f70 23202103 		sw	s2,32(sp)	#,
 1987 0f74 232E3101 		sw	s3,28(sp)	#,
 1988 0f78 232A5101 		sw	s5,20(sp)	#,
 1989 0f7c 93890600 		mv	s3,a3	# x1, tmp124
 1990 0f80 23286101 		sw	s6,16(sp)	#,
 1991 0f84 23267101 		sw	s7,12(sp)	#,
 1992              	# gfx_lib.h:195: {
 1993 0f88 130B0700 		mv	s6,a4	# y1, tmp125
 1994 0f8c 938B0700 		mv	s7,a5	# color, tmp126
 1995              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 1996 0f90 97000000 		call	abs		#
 1996      E7800000 
 1997 0f98 13090500 		mv	s2,a0	# tmp127,
 1998              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 1999 0f9c 33058B40 		sub	a0,s6,s0	#, y1, y0
 2000 0fa0 97000000 		call	abs		#
 2000      E7800000 
 2001              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2002 0fa8 B3AA3401 		sgt	s5,s3,s1	# tmp112, x1, x0
 2003              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2004 0fac B32E6401 		sgt	t4,s6,s0	# tmp116, y1, y0
 2005              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2006 0fb0 939A1A00 		slli	s5,s5,1	#, iftmp.52_9, tmp112
 2007              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2008 0fb4 939E1E00 		slli	t4,t4,1	#, iftmp.53_10, tmp116
 2009              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2010 0fb8 938AFAFF 		addi	s5,s5,-1	#, iftmp.52_9, iftmp.52_9
 2011              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2012 0fbc 330EA040 		neg	t3,a0	# dy, _3
 2013              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2014 0fc0 938EFEFF 		addi	t4,t4,-1	#, iftmp.53_10, iftmp.53_10
 2015 0fc4 3306A940 		sub	a2,s2,a0	# err, dx, _3
 2016 0fc8 9388F4FF 		addi	a7,s1,-1	#, tmp110, x0
 2017              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
 2018 0fcc 9306E005 		li	a3,94		# tmp100,
 2019              	# gfx_lib.h:190:   if  ( y <= 0) return;
 2020 0fd0 9307E003 		li	a5,62		# tmp120,
 2021              	.L318:
 2022              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 2023 0fd4 13181400 		slli	a6,s0,1	#, tmp104, y0
 2024 0fd8 33088800 		add	a6,a6,s0	# y0, tmp105, tmp104
 2025 0fdc 13185800 		slli	a6,a6,5	#, tmp106, tmp105
 2026 0fe0 33089800 		add	a6,a6,s1	# x0, tmp107, tmp106
 2027              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 2028 0fe4 13181800 		slli	a6,a6,1	#, tmp108, tmp107
 2029              	# gfx_lib.h:205:     e2 = 2*err;
 2030 0fe8 93151600 		slli	a1,a2,1	#, e2, err
 2031              	# gfx_lib.h:190:   if  ( y <= 0) return;
 2032 0fec 1303F4FF 		addi	t1,s0,-1	#, tmp101, y0
 2033              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 2034 0ff0 33080A01 		add	a6,s4,a6	# tmp108, tmp109, fb
 2035              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
 2036 0ff4 63E61601 		bgtu	a7,a3,.L319	#, tmp110, tmp100,
 2037              	# gfx_lib.h:190:   if  ( y <= 0) return;
 2038 0ff8 63E46700 		bgtu	t1,a5,.L319	#, tmp101, tmp120,
 2039              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 2040 0ffc 23107801 		sh	s7,0(a6)	# color, *_38
 2041              	.L319:
 2042              	# gfx_lib.h:203:     if (x0 == x1 && y0 == y1) break;
 2043 1000 63823403 		beq	s1,s3,.L327	#, x0, x1,
 2044              	.L320:
 2045              	# gfx_lib.h:206:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 2046 1004 63C8C501 		bgt	t3,a1,.L322	#, dy, e2,
 2047              	# gfx_lib.h:206:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 2048 1008 B3845401 		add	s1,s1,s5	# iftmp.52_9, x0, x0
 2049 100c 3306A640 		sub	a2,a2,a0	# err, err, _3
 2050 1010 9388F4FF 		addi	a7,s1,-1	#, tmp110, x0
 2051              	.L322:
 2052              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2053 1014 E340B9FC 		blt	s2,a1,.L318	#, dx, e2,
 2054              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2055 1018 33062601 		add	a2,a2,s2	# dx, err, err
 2056              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2057 101c 3304D401 		add	s0,s0,t4	# iftmp.53_10, y0, y0
 2058 1020 6FF05FFB 		j	.L318		#
 2059              	.L327:
 2060              	# gfx_lib.h:203:     if (x0 == x1 && y0 == y1) break;
 2061 1024 E31064FF 		bne	s0,s6,.L320	#, y0, y1,
 2062              	# gfx_lib.h:209: }
 2063 1028 8320C102 		lw	ra,44(sp)		#,
 2064 102c 03248102 		lw	s0,40(sp)		#,
 2065 1030 83244102 		lw	s1,36(sp)		#,
 2066 1034 03290102 		lw	s2,32(sp)		#,
 2067 1038 8329C101 		lw	s3,28(sp)		#,
 2068 103c 032A8101 		lw	s4,24(sp)		#,
 2069 1040 832A4101 		lw	s5,20(sp)		#,
 2070 1044 032B0101 		lw	s6,16(sp)		#,
 2071 1048 832BC100 		lw	s7,12(sp)		#,
 2072 104c 13010103 		addi	sp,sp,48	#,,
 2073 1050 67800000 		jr	ra		#
 2075              		.align	2
 2076              		.globl	fill_oled
 2078              	fill_oled:
 2079 1054 93571500 		srli	a5,a0,1	#, tmp95, framebuffer
 2080              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 2081 1058 93960501 		slli	a3,a1,16	#, _14, tmp116
 2082 105c 93F71700 		andi	a5,a5,1	#, prolog_loop_niters.410, tmp95
 2083 1060 93D60601 		srli	a3,a3,16	#, _14, _14
 2084              	# gfx_lib.h:212:   for (int i = 0; i < (VRES*HRES); i++) {
 2085 1064 13070000 		li	a4,0		# i,
 2086 1068 63860700 		beq	a5,zero,.L329	#, prolog_loop_niters.410,,
 2087              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 2088 106c 2310D500 		sh	a3,0(a0)	# _14, *framebuffer_8(D)
 2089              	# gfx_lib.h:212:   for (int i = 0; i < (VRES*HRES); i++) {
 2090 1070 13071000 		li	a4,1		# i,
 2091              	.L329:
 2092 1074 37280000 		li	a6,8192		# tmp98,
 2093 1078 13080880 		addi	a6,a6,-2048	#, tmp97, tmp98
 2094 107c 3308F840 		sub	a6,a6,a5	# niters.411, tmp97, prolog_loop_niters.410
 2095 1080 13561800 		srli	a2,a6,1	#, bnd.412, niters.411
 2096 1084 93971700 		slli	a5,a5,1	#, tmp108, prolog_loop_niters.410
 2097 1088 93950601 		slli	a1,a3,16	#, tmp103, _14
 2098 108c B307F500 		add	a5,a0,a5	# tmp108, ivtmp.420, framebuffer
 2099 1090 13162600 		slli	a2,a2,2	#, tmp110, bnd.412
 2100 1094 B3E5B600 		or	a1,a3,a1	# tmp103, tmp107, _14
 2101 1098 3306F600 		add	a2,a2,a5	# ivtmp.420, _26, tmp110
 2102              	.L330:
 2103              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 2104 109c 23A0B700 		sw	a1,0(a5)	# tmp107, MEM <vector(2) short unsigned int> [(uint16_t *)_22]
 2105 10a0 93874700 		addi	a5,a5,4	#, ivtmp.420, ivtmp.420
 2106 10a4 E39CC7FE 		bne	a5,a2,.L330	#, ivtmp.420, _26,
 2107 10a8 1376E8FF 		andi	a2,a6,-2	#, niters_vector_mult_vf.413, niters.411
 2108 10ac B307E600 		add	a5,a2,a4	# i, tmp.414, niters_vector_mult_vf.413
 2109 10b0 6308C800 		beq	a6,a2,.L328	#, niters.411, niters_vector_mult_vf.413,
 2110              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 2111 10b4 93971700 		slli	a5,a5,1	#, tmp111, tmp.414
 2112 10b8 3305F500 		add	a0,a0,a5	# tmp111, tmp112, framebuffer
 2113 10bc 2310D500 		sh	a3,0(a0)	# _14, *_42
 2114              	.L328:
 2115              	# gfx_lib.h:215: }
 2116 10c0 67800000 		ret	
 2118              		.align	2
 2119              		.globl	mirror_x_axis
 2121              	mirror_x_axis:
 2122              	# gfx_lib.h:218:   point transformed = {p->x, 1.0 * p->y};
 2123 10c4 03A74500 		lw	a4,4(a1)		# vect__1.430, MEM[(int *)p_4(D) + 4B]
 2124              	# gfx_lib.h:219:   return transformed;
 2125 10c8 83A60500 		lw	a3,0(a1)		# MEM[(int *)p_4(D)], MEM[(int *)p_4(D)]
 2126 10cc 23240500 		sw	zero,8(a0)	#, <retval>.z
 2127 10d0 2322E500 		sw	a4,4(a0)	# vect__1.430, MEM[(int *)&<retval> + 4B]
 2128 10d4 2320D500 		sw	a3,0(a0)	# MEM[(int *)p_4(D)], MEM[(int *)&<retval>]
 2129              	# gfx_lib.h:220: }
 2130 10d8 67800000 		ret	
 2132              		.globl	__floatsidf
 2133              		.globl	__fixdfsi
 2134              		.align	2
 2135              		.globl	mirror_y_axis
 2137              	mirror_y_axis:
 2138 10dc 130101FF 		addi	sp,sp,-16	#,,
 2139 10e0 23248100 		sw	s0,8(sp)	#,
 2140 10e4 13040500 		mv	s0,a0	# tmp88, .result_ptr
 2141              	# gfx_lib.h:223:   point transformed = {-1.0 * p->x, p->y};
 2142 10e8 03A50500 		lw	a0,0(a1)		#, p_7(D)->x
 2143              	# gfx_lib.h:222: point mirror_y_axis(point *p) {
 2144 10ec 23261100 		sw	ra,12(sp)	#,
 2145 10f0 23229100 		sw	s1,4(sp)	#,
 2146              	# gfx_lib.h:223:   point transformed = {-1.0 * p->x, p->y};
 2147 10f4 83A44500 		lw	s1,4(a1)		# _5, p_7(D)->y
 2148              	# gfx_lib.h:223:   point transformed = {-1.0 * p->x, p->y};
 2149 10f8 97000000 		call	__floatsidf		#
 2149      E7800000 
 2150              	# gfx_lib.h:223:   point transformed = {-1.0 * p->x, p->y};
 2151 1100 B7070080 		li	a5,-2147483648		# tmp81,
 2152 1104 13070500 		mv	a4,a0	# tmp93, tmp90
 2153 1108 B3C7B700 		xor	a5,a5,a1	# tmp91, tmp94, tmp81
 2154 110c 13050700 		mv	a0,a4	# tmp95, tmp93
 2155 1110 93850700 		mv	a1,a5	#, tmp94
 2156 1114 97000000 		call	__fixdfsi		#
 2156      E7800000 
 2157 111c 2320A400 		sw	a0,0(s0)	# tmp92, <retval>.x
 2158              	# gfx_lib.h:224:   return transformed;
 2159 1120 23229400 		sw	s1,4(s0)	# _5, <retval>.y
 2160              	# gfx_lib.h:225: }
 2161 1124 8320C100 		lw	ra,12(sp)		#,
 2162              	# gfx_lib.h:224:   return transformed;
 2163 1128 23240400 		sw	zero,8(s0)	#, <retval>.z
 2164              	# gfx_lib.h:225: }
 2165 112c 13050400 		mv	a0,s0	#, .result_ptr
 2166 1130 03248100 		lw	s0,8(sp)		#,
 2167 1134 83244100 		lw	s1,4(sp)		#,
 2168 1138 13010101 		addi	sp,sp,16	#,,
 2169 113c 67800000 		jr	ra		#
 2171              		.align	2
 2172              		.globl	mirror_z_axis
 2174              	mirror_z_axis:
 2175 1140 130101FF 		addi	sp,sp,-16	#,,
 2176 1144 23248100 		sw	s0,8(sp)	#,
 2177 1148 13040500 		mv	s0,a0	# tmp89, .result_ptr
 2178              	# gfx_lib.h:228:   point transformed = {p->x, p->y, -1.0 * p->z};
 2179 114c 03A58500 		lw	a0,8(a1)		#, p_8(D)->z
 2180              	# gfx_lib.h:227: point mirror_z_axis(point *p) {
 2181 1150 23261100 		sw	ra,12(sp)	#,
 2182 1154 23229100 		sw	s1,4(sp)	#,
 2183 1158 23202101 		sw	s2,0(sp)	#,
 2184              	# gfx_lib.h:227: point mirror_z_axis(point *p) {
 2185 115c 93840500 		mv	s1,a1	# p, tmp90
 2186              	# gfx_lib.h:228:   point transformed = {p->x, p->y, -1.0 * p->z};
 2187 1160 03A94500 		lw	s2,4(a1)		# vect__1.442, MEM[(int *)p_8(D) + 4B]
 2188              	# gfx_lib.h:228:   point transformed = {p->x, p->y, -1.0 * p->z};
 2189 1164 97000000 		call	__floatsidf		#
 2189      E7800000 
 2190              	# gfx_lib.h:228:   point transformed = {p->x, p->y, -1.0 * p->z};
 2191 116c B7070080 		li	a5,-2147483648		# tmp82,
 2192 1170 B3C7B700 		xor	a5,a5,a1	# tmp92, tmp95, tmp82
 2193 1174 13070500 		mv	a4,a0	# tmp94, tmp91
 2194 1178 93850700 		mv	a1,a5	#, tmp95
 2195 117c 13050700 		mv	a0,a4	# tmp96, tmp94
 2196 1180 97000000 		call	__fixdfsi		#
 2196      E7800000 
 2197              	# gfx_lib.h:229:   return transformed;
 2198 1188 83A70400 		lw	a5,0(s1)		# MEM[(int *)p_8(D)], MEM[(int *)p_8(D)]
 2199 118c 23222401 		sw	s2,4(s0)	# vect__1.442, MEM[(int *)&<retval> + 4B]
 2200 1190 2324A400 		sw	a0,8(s0)	# tmp93, <retval>.z
 2201              	# gfx_lib.h:230: }
 2202 1194 8320C100 		lw	ra,12(sp)		#,
 2203              	# gfx_lib.h:229:   return transformed;
 2204 1198 2320F400 		sw	a5,0(s0)	# MEM[(int *)p_8(D)], MEM[(int *)&<retval>]
 2205              	# gfx_lib.h:230: }
 2206 119c 13050400 		mv	a0,s0	#, .result_ptr
 2207 11a0 03248100 		lw	s0,8(sp)		#,
 2208 11a4 83244100 		lw	s1,4(sp)		#,
 2209 11a8 03290100 		lw	s2,0(sp)		#,
 2210 11ac 13010101 		addi	sp,sp,16	#,,
 2211 11b0 67800000 		jr	ra		#
 2213              		.globl	__floatsisf
 2214              		.globl	__mulsf3
 2215              		.globl	__fixsfsi
 2216              		.align	2
 2217              		.globl	scale
 2219              	scale:
 2220 11b4 130101FE 		addi	sp,sp,-32	#,,
 2221 11b8 232C8100 		sw	s0,24(sp)	#,
 2222 11bc 13040500 		mv	s0,a0	# tmp96, .result_ptr
 2223              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2224 11c0 03A54500 		lw	a0,4(a1)		#, p_14(D)->y
 2225              	# gfx_lib.h:232: point scale(point *p, float sx, float sy, float sz) {
 2226 11c4 232E1100 		sw	ra,28(sp)	#,
 2227 11c8 232A9100 		sw	s1,20(sp)	#,
 2228 11cc 23282101 		sw	s2,16(sp)	#,
 2229 11d0 23263101 		sw	s3,12(sp)	#,
 2230 11d4 13890600 		mv	s2,a3	# sy, tmp99
 2231 11d8 93090600 		mv	s3,a2	# sx, tmp98
 2232 11dc 23244101 		sw	s4,8(sp)	#,
 2233              	# gfx_lib.h:232: point scale(point *p, float sx, float sy, float sz) {
 2234 11e0 93840500 		mv	s1,a1	# p, tmp97
 2235 11e4 130A0700 		mv	s4,a4	# sz, tmp100
 2236              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2237 11e8 97000000 		call	__floatsisf		#
 2237      E7800000 
 2238 11f0 93050900 		mv	a1,s2	#, sy
 2239 11f4 97000000 		call	__mulsf3		#
 2239      E7800000 
 2240              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2241 11fc 97000000 		call	__fixsfsi		#
 2241      E7800000 
 2242 1204 13090500 		mv	s2,a0	# tmp101,
 2243              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2244 1208 03A58400 		lw	a0,8(s1)		#, p_14(D)->z
 2245 120c 97000000 		call	__floatsisf		#
 2245      E7800000 
 2246 1214 93050A00 		mv	a1,s4	#, sz
 2247 1218 97000000 		call	__mulsf3		#
 2247      E7800000 
 2248              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2249 1220 97000000 		call	__fixsfsi		#
 2249      E7800000 
 2250 1228 93070500 		mv	a5,a0	# tmp102,
 2251              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2252 122c 03A50400 		lw	a0,0(s1)		#, p_14(D)->x
 2253              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2254 1230 93840700 		mv	s1,a5	# _12, tmp102
 2255              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2256 1234 97000000 		call	__floatsisf		#
 2256      E7800000 
 2257 123c 93850900 		mv	a1,s3	#, sx
 2258 1240 97000000 		call	__mulsf3		#
 2258      E7800000 
 2259              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2260 1248 97000000 		call	__fixsfsi		#
 2260      E7800000 
 2261 1250 2320A400 		sw	a0,0(s0)	# tmp103, <retval>.x
 2262              	# gfx_lib.h:234:   return transformed;
 2263 1254 23222401 		sw	s2,4(s0)	# _8, <retval>.y
 2264 1258 23249400 		sw	s1,8(s0)	# _12, <retval>.z
 2265              	# gfx_lib.h:235: }
 2266 125c 8320C101 		lw	ra,28(sp)		#,
 2267 1260 13050400 		mv	a0,s0	#, .result_ptr
 2268 1264 03248101 		lw	s0,24(sp)		#,
 2269 1268 83244101 		lw	s1,20(sp)		#,
 2270 126c 03290101 		lw	s2,16(sp)		#,
 2271 1270 8329C100 		lw	s3,12(sp)		#,
 2272 1274 032A8100 		lw	s4,8(sp)		#,
 2273 1278 13010102 		addi	sp,sp,32	#,,
 2274 127c 67800000 		jr	ra		#
 2276              		.align	2
 2277              		.globl	translate
 2279              	translate:
 2280              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2281 1280 83A84500 		lw	a7,4(a1)		# p_8(D)->y, p_8(D)->y
 2282              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2283 1284 03A88500 		lw	a6,8(a1)		# p_8(D)->z, p_8(D)->z
 2284              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2285 1288 83A50500 		lw	a1,0(a1)		# p_8(D)->x, p_8(D)->x
 2286              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2287 128c B3861601 		add	a3,a3,a7	# p_8(D)->y, _4, tmp90
 2288              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2289 1290 33070701 		add	a4,a4,a6	# p_8(D)->z, _6, tmp91
 2290              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2291 1294 B385C500 		add	a1,a1,a2	# tmp89, tmp85, p_8(D)->x
 2292              	# gfx_lib.h:239:   return transformed;
 2293 1298 2320B500 		sw	a1,0(a0)	# tmp85, <retval>.x
 2294 129c 2322D500 		sw	a3,4(a0)	# _4, <retval>.y
 2295 12a0 2324E500 		sw	a4,8(a0)	# _6, <retval>.z
 2296              	# gfx_lib.h:240: }
 2297 12a4 67800000 		ret	
 2299              		.globl	__muldf3
 2300              		.globl	__divdf3
 2301              		.globl	__truncdfsf2
 2302              		.globl	__subsf3
 2303              		.globl	__addsf3
 2304              		.align	2
 2305              		.globl	rotateX_pivot
 2307              	rotateX_pivot:
 2308 12a8 130101FD 		addi	sp,sp,-48	#,,
 2309 12ac 23248102 		sw	s0,40(sp)	#,
 2310 12b0 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2311              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2312 12b4 13850600 		mv	a0,a3	#, tmp262
 2313              	# gfx_lib.h:243: point rotateX_pivot(point *p, point *pivot, int angle) {
 2314 12b8 23261102 		sw	ra,44(sp)	#,
 2315 12bc 23229102 		sw	s1,36(sp)	#,
 2316 12c0 23202103 		sw	s2,32(sp)	#,
 2317              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2318 12c4 83A48500 		lw	s1,8(a1)		# p_32(D)->z, p_32(D)->z
 2319              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2320 12c8 03A94500 		lw	s2,4(a1)		# p_32(D)->y, p_32(D)->y
 2321              	# gfx_lib.h:243: point rotateX_pivot(point *p, point *pivot, int angle) {
 2322 12cc 232E3101 		sw	s3,28(sp)	#,
 2323 12d0 232C4101 		sw	s4,24(sp)	#,
 2324              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2325 12d4 83298600 		lw	s3,8(a2)		# _6, pivot_33(D)->z
 2326              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2327 12d8 032A4600 		lw	s4,4(a2)		# _3, pivot_33(D)->y
 2328              	# gfx_lib.h:243: point rotateX_pivot(point *p, point *pivot, int angle) {
 2329 12dc 23286101 		sw	s6,16(sp)	#,
 2330 12e0 23248101 		sw	s8,8(sp)	#,
 2331              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2332 12e4 03AB0500 		lw	s6,0(a1)		# _1, p_32(D)->x
 2333              	# gfx_lib.h:243: point rotateX_pivot(point *p, point *pivot, int angle) {
 2334 12e8 232A5101 		sw	s5,20(sp)	#,
 2335 12ec 23267101 		sw	s7,12(sp)	#,
 2336 12f0 23229101 		sw	s9,4(sp)	#,
 2337              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2338 12f4 97000000 		call	__floatsidf		#
 2338      E7800000 
 2339 12fc B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 2340 1300 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 2341 1304 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 2342              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2343 1308 33094941 		sub	s2,s2,s4	# _4, p_32(D)->y, _3
 2344              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2345 130c B3843441 		sub	s1,s1,s3	# _7, p_32(D)->z, _6
 2346              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2347 1310 97000000 		call	__muldf3		#
 2347      E7800000 
 2348 1318 B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 2349 131c 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 2350 1320 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 2351 1324 97000000 		call	__divdf3		#
 2351      E7800000 
 2352 132c 97000000 		call	__fixdfsi		#
 2352      E7800000 
 2353 1334 13170501 		slli	a4,a0,16	#, angle, tmp263
 2354              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2355 1338 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 2356              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2357 133c 13570741 		srai	a4,a4,16	#, angle, angle
 2358              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2359 1340 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 2360              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2361 1344 635A0700 		bge	a4,zero,.L344	#, angle,,
 2362              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2363 1348 B7870000 		li	a5,32768		# tmp163,
 2364 134c 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 2365 1350 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 2366 1354 13570741 		srai	a4,a4,16	#, angle, angle
 2367              	.L344:
 2368              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2369 1358 93578740 		srai	a5,a4,8	#, v0, angle
 2370              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2371 135c 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 2372              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2373 1360 93F50702 		andi	a1,a5,32	#, tmp167, v0
 2374              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2375 1364 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 2376 1368 93060C00 		mv	a3,s8	# _235, prephitmp_203
 2377              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2378 136c 638A0500 		beq	a1,zero,.L345	#, tmp167,,
 2379              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2380 1370 1347F7FF 		not	a4,a4	# tmp171, angle
 2381              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2382 1374 93160701 		slli	a3,a4,16	#, _235, tmp171
 2383              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2384 1378 93C7F7FF 		not	a5,a5	# v0, v0
 2385              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2386 137c 93D60601 		srli	a3,a3,16	#, _235, _235
 2387              	.L345:
 2388              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2389 1380 93F7F701 		andi	a5,a5,31	#, _59, v0
 2390              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2391 1384 13871700 		addi	a4,a5,1	#, tmp179, _59
 2392              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2393 1388 B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 2394 138c 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 2395 1390 93971700 		slli	a5,a5,1	#, tmp175, _59
 2396              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2397 1394 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 2398              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2399 1398 B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 2400              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2401 139c 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 2402              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2403 13a0 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 2404              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2405 13a4 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 2406              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2407 13a8 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 2408              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2409 13ac 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 2410              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2411 13b0 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 2412              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2413 13b4 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 2414              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2415 13b8 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 2416              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2417 13bc 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 2418 13c0 13150501 		slli	a0,a0,16	#, _74, tmp190
 2419 13c4 13550501 		srli	a0,a0,16	#, _74, _74
 2420              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2421 13c8 63880700 		beq	a5,zero,.L346	#, tmp193,,
 2422              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2423 13cc 3305A040 		neg	a0,a0	# tmp195, _74
 2424 13d0 13150501 		slli	a0,a0,16	#, _74, tmp195
 2425 13d4 13550501 		srli	a0,a0,16	#, _74, _74
 2426              	.L346:
 2427              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2428 13d8 13150501 		slli	a0,a0,16	#,, _74
 2429 13dc 13550541 		srai	a0,a0,16	#,,
 2430 13e0 97000000 		call	__floatsidf		#
 2430      E7800000 
 2431 13e8 B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 2432 13ec 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2433 13f0 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2434 13f4 97000000 		call	__muldf3		#
 2434      E7800000 
 2435              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2436 13fc 97000000 		call	__truncdfsf2		#
 2436      E7800000 
 2437              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2438 1404 B7A7FFFF 		li	a5,-24576		# tmp203,
 2439 1408 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 2440 140c B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 2441              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2442 1410 93960701 		slli	a3,a5,16	#, angle, tmp201
 2443              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2444 1414 13970701 		slli	a4,a5,16	#, _42, tmp201
 2445              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2446 1418 93D60641 		srai	a3,a3,16	#, angle, angle
 2447              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2448 141c 930C0500 		mv	s9,a0	# sin_theta, tmp264
 2449              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2450 1420 13570701 		srli	a4,a4,16	#, _42, _42
 2451              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2452 1424 63D00602 		bge	a3,zero,.L347	#, angle,,
 2453              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2454 1428 B7270000 		li	a5,8192		# tmp206,
 2455 142c 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 2456 1430 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 2457 1434 13170C01 		slli	a4,s8,16	#, _42, tmp204
 2458 1438 93160C01 		slli	a3,s8,16	#, angle, tmp204
 2459 143c 13570701 		srli	a4,a4,16	#, _42, _42
 2460 1440 93D60641 		srai	a3,a3,16	#, angle, angle
 2461              	.L347:
 2462              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2463 1444 93D78640 		srai	a5,a3,8	#, v0, angle
 2464              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2465 1448 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 2466              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2467 144c 93F50702 		andi	a1,a5,32	#, tmp210, v0
 2468              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2469 1450 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 2470              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2471 1454 638A0500 		beq	a1,zero,.L348	#, tmp210,,
 2472              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2473 1458 93C6F6FF 		not	a3,a3	# tmp214, angle
 2474              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2475 145c 13970601 		slli	a4,a3,16	#, _42, tmp214
 2476              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2477 1460 93C7F7FF 		not	a5,a5	# v0, v0
 2478              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2479 1464 13570701 		srli	a4,a4,16	#, _42, _42
 2480              	.L348:
 2481              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2482 1468 93F7F701 		andi	a5,a5,31	#, _90, v0
 2483              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2484 146c 93861700 		addi	a3,a5,1	#, tmp222, _90
 2485 1470 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 2486              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2487 1474 93971700 		slli	a5,a5,1	#, tmp218, _90
 2488 1478 B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 2489              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2490 147c B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 2491              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2492 1480 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 2493              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2494 1484 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 2495              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2496 1488 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 2497              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2498 148c 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 2499              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2500 1490 B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 2501              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2502 1494 B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 2503              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2504 1498 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 2505              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2506 149c B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 2507 14a0 93970701 		slli	a5,a5,16	#, _105, tmp233
 2508 14a4 93D70701 		srli	a5,a5,16	#, _105, _105
 2509              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2510 14a8 63880600 		beq	a3,zero,.L349	#, tmp236,,
 2511              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2512 14ac B307F040 		neg	a5,a5	# tmp238, _105
 2513 14b0 93970701 		slli	a5,a5,16	#, _105, tmp238
 2514 14b4 93D70701 		srli	a5,a5,16	#, _105, _105
 2515              	.L349:
 2516              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 2517 14b8 13950701 		slli	a0,a5,16	#,, _105
 2518 14bc 13550541 		srai	a0,a0,16	#,,
 2519 14c0 97000000 		call	__floatsidf		#
 2519      E7800000 
 2520 14c8 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2521 14cc 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2522 14d0 97000000 		call	__muldf3		#
 2522      E7800000 
 2523              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 2524 14d8 97000000 		call	__truncdfsf2		#
 2524      E7800000 
 2525 14e0 93070500 		mv	a5,a0	# tmp265,
 2526              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2527 14e4 13050900 		mv	a0,s2	#, _4
 2528              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 2529 14e8 13890700 		mv	s2,a5	# tmp243, tmp265
 2530              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2531 14ec 97000000 		call	__floatsisf		#
 2531      E7800000 
 2532 14f4 930A0500 		mv	s5,a0	# tmp266,
 2533              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2534 14f8 13850400 		mv	a0,s1	#, _7
 2535 14fc 97000000 		call	__floatsisf		#
 2535      E7800000 
 2536 1504 93040500 		mv	s1,a0	# tmp267,
 2537              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2538 1508 93050900 		mv	a1,s2	#, tmp243
 2539              	# gfx_lib.h:255:   return transformed;
 2540 150c 23206401 		sw	s6,0(s0)	# _1, <retval>.x
 2541              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2542 1510 13850A00 		mv	a0,s5	#, _18
 2543 1514 97000000 		call	__mulsf3		#
 2543      E7800000 
 2544 151c 130B0500 		mv	s6,a0	# tmp244, tmp268
 2545              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2546 1520 93850C00 		mv	a1,s9	#, sin_theta
 2547 1524 13850400 		mv	a0,s1	#, _20
 2548 1528 97000000 		call	__mulsf3		#
 2548      E7800000 
 2549 1530 93050500 		mv	a1,a0	# tmp269,
 2550              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2551 1534 13050B00 		mv	a0,s6	#, tmp244
 2552 1538 97000000 		call	__subsf3		#
 2552      E7800000 
 2553 1540 130B0500 		mv	s6,a0	# tmp246, tmp270
 2554              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2555 1544 13050A00 		mv	a0,s4	#, _3
 2556 1548 97000000 		call	__floatsisf		#
 2556      E7800000 
 2557 1550 93050500 		mv	a1,a0	# tmp271,
 2558 1554 13050B00 		mv	a0,s6	#, tmp246
 2559 1558 97000000 		call	__addsf3		#
 2559      E7800000 
 2560              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2561 1560 97000000 		call	__fixsfsi		#
 2561      E7800000 
 2562              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2563 1568 93850C00 		mv	a1,s9	#, sin_theta
 2564              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2565 156c 2322A400 		sw	a0,4(s0)	# tmp272, <retval>.y
 2566              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2567 1570 13850A00 		mv	a0,s5	#, _18
 2568 1574 97000000 		call	__mulsf3		#
 2568      E7800000 
 2569 157c 130A0500 		mv	s4,a0	# tmp250, tmp273
 2570              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2571 1580 93050900 		mv	a1,s2	#, tmp243
 2572 1584 13850400 		mv	a0,s1	#, _20
 2573 1588 97000000 		call	__mulsf3		#
 2573      E7800000 
 2574 1590 93050500 		mv	a1,a0	# tmp274,
 2575              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2576 1594 13050A00 		mv	a0,s4	#, tmp250
 2577 1598 97000000 		call	__addsf3		#
 2577      E7800000 
 2578 15a0 93040500 		mv	s1,a0	# tmp252, tmp275
 2579              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2580 15a4 13850900 		mv	a0,s3	#, _6
 2581 15a8 97000000 		call	__floatsisf		#
 2581      E7800000 
 2582 15b0 93050500 		mv	a1,a0	# tmp276,
 2583 15b4 13850400 		mv	a0,s1	#, tmp252
 2584 15b8 97000000 		call	__addsf3		#
 2584      E7800000 
 2585              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2586 15c0 97000000 		call	__fixsfsi		#
 2586      E7800000 
 2587 15c8 2324A400 		sw	a0,8(s0)	# tmp277, <retval>.z
 2588              	# gfx_lib.h:256: }
 2589 15cc 8320C102 		lw	ra,44(sp)		#,
 2590 15d0 13050400 		mv	a0,s0	#, .result_ptr
 2591 15d4 03248102 		lw	s0,40(sp)		#,
 2592 15d8 83244102 		lw	s1,36(sp)		#,
 2593 15dc 03290102 		lw	s2,32(sp)		#,
 2594 15e0 8329C101 		lw	s3,28(sp)		#,
 2595 15e4 032A8101 		lw	s4,24(sp)		#,
 2596 15e8 832A4101 		lw	s5,20(sp)		#,
 2597 15ec 032B0101 		lw	s6,16(sp)		#,
 2598 15f0 832BC100 		lw	s7,12(sp)		#,
 2599 15f4 032C8100 		lw	s8,8(sp)		#,
 2600 15f8 832C4100 		lw	s9,4(sp)		#,
 2601 15fc 13010103 		addi	sp,sp,48	#,,
 2602 1600 67800000 		jr	ra		#
 2604              		.align	2
 2605              		.globl	rotateY_pivot
 2607              	rotateY_pivot:
 2608 1604 130101FD 		addi	sp,sp,-48	#,,
 2609 1608 23248102 		sw	s0,40(sp)	#,
 2610 160c 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2611              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2612 1610 13850600 		mv	a0,a3	#, tmp262
 2613              	# gfx_lib.h:258: point rotateY_pivot(point *p, point *pivot, int angle) {
 2614 1614 23261102 		sw	ra,44(sp)	#,
 2615 1618 23229102 		sw	s1,36(sp)	#,
 2616 161c 23202103 		sw	s2,32(sp)	#,
 2617              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2618 1620 83A48500 		lw	s1,8(a1)		# p_32(D)->z, p_32(D)->z
 2619              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2620 1624 03A90500 		lw	s2,0(a1)		# p_32(D)->x, p_32(D)->x
 2621              	# gfx_lib.h:258: point rotateY_pivot(point *p, point *pivot, int angle) {
 2622 1628 232E3101 		sw	s3,28(sp)	#,
 2623 162c 232C4101 		sw	s4,24(sp)	#,
 2624              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2625 1630 83298600 		lw	s3,8(a2)		# _6, pivot_33(D)->z
 2626              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2627 1634 032A0600 		lw	s4,0(a2)		# _2, pivot_33(D)->x
 2628              	# gfx_lib.h:258: point rotateY_pivot(point *p, point *pivot, int angle) {
 2629 1638 23286101 		sw	s6,16(sp)	#,
 2630 163c 23248101 		sw	s8,8(sp)	#,
 2631              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2632 1640 03AB4500 		lw	s6,4(a1)		# _4, p_32(D)->y
 2633              	# gfx_lib.h:258: point rotateY_pivot(point *p, point *pivot, int angle) {
 2634 1644 232A5101 		sw	s5,20(sp)	#,
 2635 1648 23267101 		sw	s7,12(sp)	#,
 2636 164c 23229101 		sw	s9,4(sp)	#,
 2637              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2638 1650 97000000 		call	__floatsidf		#
 2638      E7800000 
 2639 1658 B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 2640 165c 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 2641 1660 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 2642              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2643 1664 33094941 		sub	s2,s2,s4	# _3, p_32(D)->x, _2
 2644              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2645 1668 B3843441 		sub	s1,s1,s3	# _7, p_32(D)->z, _6
 2646              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2647 166c 97000000 		call	__muldf3		#
 2647      E7800000 
 2648 1674 B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 2649 1678 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 2650 167c 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 2651 1680 97000000 		call	__divdf3		#
 2651      E7800000 
 2652 1688 97000000 		call	__fixdfsi		#
 2652      E7800000 
 2653 1690 13170501 		slli	a4,a0,16	#, angle, tmp263
 2654              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2655 1694 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 2656              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2657 1698 13570741 		srai	a4,a4,16	#, angle, angle
 2658              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2659 169c 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 2660              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2661 16a0 635A0700 		bge	a4,zero,.L363	#, angle,,
 2662              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2663 16a4 B7870000 		li	a5,32768		# tmp163,
 2664 16a8 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 2665 16ac 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 2666 16b0 13570741 		srai	a4,a4,16	#, angle, angle
 2667              	.L363:
 2668              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2669 16b4 93578740 		srai	a5,a4,8	#, v0, angle
 2670              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2671 16b8 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 2672              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2673 16bc 93F50702 		andi	a1,a5,32	#, tmp167, v0
 2674              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2675 16c0 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 2676 16c4 93060C00 		mv	a3,s8	# _235, prephitmp_203
 2677              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2678 16c8 638A0500 		beq	a1,zero,.L364	#, tmp167,,
 2679              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2680 16cc 1347F7FF 		not	a4,a4	# tmp171, angle
 2681              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2682 16d0 93160701 		slli	a3,a4,16	#, _235, tmp171
 2683              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2684 16d4 93C7F7FF 		not	a5,a5	# v0, v0
 2685              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2686 16d8 93D60601 		srli	a3,a3,16	#, _235, _235
 2687              	.L364:
 2688              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2689 16dc 93F7F701 		andi	a5,a5,31	#, _59, v0
 2690              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2691 16e0 13871700 		addi	a4,a5,1	#, tmp179, _59
 2692              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2693 16e4 B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 2694 16e8 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 2695 16ec 93971700 		slli	a5,a5,1	#, tmp175, _59
 2696              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2697 16f0 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 2698              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2699 16f4 B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 2700              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2701 16f8 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 2702              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2703 16fc 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 2704              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2705 1700 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 2706              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2707 1704 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 2708              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2709 1708 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 2710              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2711 170c 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 2712              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2713 1710 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 2714              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2715 1714 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 2716              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2717 1718 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 2718 171c 13150501 		slli	a0,a0,16	#, _74, tmp190
 2719 1720 13550501 		srli	a0,a0,16	#, _74, _74
 2720              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2721 1724 63880700 		beq	a5,zero,.L365	#, tmp193,,
 2722              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2723 1728 3305A040 		neg	a0,a0	# tmp195, _74
 2724 172c 13150501 		slli	a0,a0,16	#, _74, tmp195
 2725 1730 13550501 		srli	a0,a0,16	#, _74, _74
 2726              	.L365:
 2727              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2728 1734 13150501 		slli	a0,a0,16	#,, _74
 2729 1738 13550541 		srai	a0,a0,16	#,,
 2730 173c 97000000 		call	__floatsidf		#
 2730      E7800000 
 2731 1744 B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 2732 1748 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2733 174c 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2734 1750 97000000 		call	__muldf3		#
 2734      E7800000 
 2735              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2736 1758 97000000 		call	__truncdfsf2		#
 2736      E7800000 
 2737              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2738 1760 B7A7FFFF 		li	a5,-24576		# tmp203,
 2739 1764 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 2740 1768 B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 2741              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2742 176c 93960701 		slli	a3,a5,16	#, angle, tmp201
 2743              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2744 1770 13970701 		slli	a4,a5,16	#, _42, tmp201
 2745              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2746 1774 93D60641 		srai	a3,a3,16	#, angle, angle
 2747              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2748 1778 930C0500 		mv	s9,a0	# sin_theta, tmp264
 2749              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2750 177c 13570701 		srli	a4,a4,16	#, _42, _42
 2751              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2752 1780 63D00602 		bge	a3,zero,.L366	#, angle,,
 2753              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2754 1784 B7270000 		li	a5,8192		# tmp206,
 2755 1788 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 2756 178c 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 2757 1790 13170C01 		slli	a4,s8,16	#, _42, tmp204
 2758 1794 93160C01 		slli	a3,s8,16	#, angle, tmp204
 2759 1798 13570701 		srli	a4,a4,16	#, _42, _42
 2760 179c 93D60641 		srai	a3,a3,16	#, angle, angle
 2761              	.L366:
 2762              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2763 17a0 93D78640 		srai	a5,a3,8	#, v0, angle
 2764              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2765 17a4 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 2766              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2767 17a8 93F50702 		andi	a1,a5,32	#, tmp210, v0
 2768              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2769 17ac 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 2770              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2771 17b0 638A0500 		beq	a1,zero,.L367	#, tmp210,,
 2772              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2773 17b4 93C6F6FF 		not	a3,a3	# tmp214, angle
 2774              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2775 17b8 13970601 		slli	a4,a3,16	#, _42, tmp214
 2776              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2777 17bc 93C7F7FF 		not	a5,a5	# v0, v0
 2778              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2779 17c0 13570701 		srli	a4,a4,16	#, _42, _42
 2780              	.L367:
 2781              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2782 17c4 93F7F701 		andi	a5,a5,31	#, _90, v0
 2783              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2784 17c8 93861700 		addi	a3,a5,1	#, tmp222, _90
 2785 17cc 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 2786              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2787 17d0 93971700 		slli	a5,a5,1	#, tmp218, _90
 2788 17d4 B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 2789              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2790 17d8 B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 2791              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2792 17dc 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 2793              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2794 17e0 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 2795              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2796 17e4 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 2797              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2798 17e8 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 2799              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2800 17ec B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 2801              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2802 17f0 B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 2803              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2804 17f4 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 2805              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2806 17f8 B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 2807 17fc 93970701 		slli	a5,a5,16	#, _105, tmp233
 2808 1800 93D70701 		srli	a5,a5,16	#, _105, _105
 2809              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2810 1804 63880600 		beq	a3,zero,.L368	#, tmp236,,
 2811              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2812 1808 B307F040 		neg	a5,a5	# tmp238, _105
 2813 180c 93970701 		slli	a5,a5,16	#, _105, tmp238
 2814 1810 93D70701 		srli	a5,a5,16	#, _105, _105
 2815              	.L368:
 2816              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 2817 1814 13950701 		slli	a0,a5,16	#,, _105
 2818 1818 13550541 		srai	a0,a0,16	#,,
 2819 181c 97000000 		call	__floatsidf		#
 2819      E7800000 
 2820 1824 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2821 1828 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2822 182c 97000000 		call	__muldf3		#
 2822      E7800000 
 2823              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 2824 1834 97000000 		call	__truncdfsf2		#
 2824      E7800000 
 2825 183c 930A0500 		mv	s5,a0	# tmp265,
 2826              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2827 1840 13050900 		mv	a0,s2	#, _3
 2828 1844 97000000 		call	__floatsisf		#
 2828      E7800000 
 2829 184c 93070500 		mv	a5,a0	# tmp266,
 2830              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2831 1850 13850400 		mv	a0,s1	#, _7
 2832              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2833 1854 93840700 		mv	s1,a5	# _18, tmp266
 2834              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2835 1858 97000000 		call	__floatsisf		#
 2835      E7800000 
 2836 1860 13090500 		mv	s2,a0	# tmp267,
 2837              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2838 1864 93850A00 		mv	a1,s5	#, tmp243
 2839 1868 13850400 		mv	a0,s1	#, _18
 2840 186c 97000000 		call	__mulsf3		#
 2840      E7800000 
 2841 1874 930B0500 		mv	s7,a0	# tmp244, tmp268
 2842              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2843 1878 93850C00 		mv	a1,s9	#, sin_theta
 2844 187c 13050900 		mv	a0,s2	#, _20
 2845 1880 97000000 		call	__mulsf3		#
 2845      E7800000 
 2846 1888 93050500 		mv	a1,a0	# tmp269,
 2847              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2848 188c 13850B00 		mv	a0,s7	#, tmp244
 2849 1890 97000000 		call	__addsf3		#
 2849      E7800000 
 2850 1898 930B0500 		mv	s7,a0	# tmp246, tmp270
 2851              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2852 189c 13050A00 		mv	a0,s4	#, _2
 2853 18a0 97000000 		call	__floatsisf		#
 2853      E7800000 
 2854 18a8 93050500 		mv	a1,a0	# tmp271,
 2855 18ac 13850B00 		mv	a0,s7	#, tmp246
 2856 18b0 97000000 		call	__addsf3		#
 2856      E7800000 
 2857              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2858 18b8 97000000 		call	__fixsfsi		#
 2858      E7800000 
 2859              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2860 18c0 93850A00 		mv	a1,s5	#, tmp243
 2861              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2862 18c4 2320A400 		sw	a0,0(s0)	# tmp272, <retval>.x
 2863              	# gfx_lib.h:270:   return transformed;
 2864 18c8 23226401 		sw	s6,4(s0)	# _4, <retval>.y
 2865              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2866 18cc 13050900 		mv	a0,s2	#, _20
 2867 18d0 97000000 		call	__mulsf3		#
 2867      E7800000 
 2868 18d8 13090500 		mv	s2,a0	# tmp250, tmp273
 2869              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2870 18dc 93850C00 		mv	a1,s9	#, sin_theta
 2871 18e0 13850400 		mv	a0,s1	#, _18
 2872 18e4 97000000 		call	__mulsf3		#
 2872      E7800000 
 2873 18ec 93050500 		mv	a1,a0	# tmp274,
 2874              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2875 18f0 13050900 		mv	a0,s2	#, tmp250
 2876 18f4 97000000 		call	__subsf3		#
 2876      E7800000 
 2877 18fc 93040500 		mv	s1,a0	# tmp252, tmp275
 2878              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2879 1900 13850900 		mv	a0,s3	#, _6
 2880 1904 97000000 		call	__floatsisf		#
 2880      E7800000 
 2881 190c 93050500 		mv	a1,a0	# tmp276,
 2882 1910 13850400 		mv	a0,s1	#, tmp252
 2883 1914 97000000 		call	__addsf3		#
 2883      E7800000 
 2884              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2885 191c 97000000 		call	__fixsfsi		#
 2885      E7800000 
 2886 1924 2324A400 		sw	a0,8(s0)	# tmp277, <retval>.z
 2887              	# gfx_lib.h:271: }
 2888 1928 8320C102 		lw	ra,44(sp)		#,
 2889 192c 13050400 		mv	a0,s0	#, .result_ptr
 2890 1930 03248102 		lw	s0,40(sp)		#,
 2891 1934 83244102 		lw	s1,36(sp)		#,
 2892 1938 03290102 		lw	s2,32(sp)		#,
 2893 193c 8329C101 		lw	s3,28(sp)		#,
 2894 1940 032A8101 		lw	s4,24(sp)		#,
 2895 1944 832A4101 		lw	s5,20(sp)		#,
 2896 1948 032B0101 		lw	s6,16(sp)		#,
 2897 194c 832BC100 		lw	s7,12(sp)		#,
 2898 1950 032C8100 		lw	s8,8(sp)		#,
 2899 1954 832C4100 		lw	s9,4(sp)		#,
 2900 1958 13010103 		addi	sp,sp,48	#,,
 2901 195c 67800000 		jr	ra		#
 2903              		.align	2
 2904              		.globl	rotateZ_pivot
 2906              	rotateZ_pivot:
 2907 1960 130101FD 		addi	sp,sp,-48	#,,
 2908 1964 23248102 		sw	s0,40(sp)	#,
 2909 1968 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2910              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 2911 196c 13850600 		mv	a0,a3	#, tmp262
 2912              	# gfx_lib.h:273: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2913 1970 23261102 		sw	ra,44(sp)	#,
 2914 1974 23229102 		sw	s1,36(sp)	#,
 2915 1978 23202103 		sw	s2,32(sp)	#,
 2916              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2917 197c 83A44500 		lw	s1,4(a1)		# p_32(D)->y, p_32(D)->y
 2918              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2919 1980 03A90500 		lw	s2,0(a1)		# p_32(D)->x, p_32(D)->x
 2920              	# gfx_lib.h:273: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2921 1984 232E3101 		sw	s3,28(sp)	#,
 2922 1988 232C4101 		sw	s4,24(sp)	#,
 2923              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2924 198c 83294600 		lw	s3,4(a2)		# _5, pivot_33(D)->y
 2925              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2926 1990 032A0600 		lw	s4,0(a2)		# _2, pivot_33(D)->x
 2927              	# gfx_lib.h:273: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2928 1994 23286101 		sw	s6,16(sp)	#,
 2929 1998 23248101 		sw	s8,8(sp)	#,
 2930              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2931 199c 03AB8500 		lw	s6,8(a1)		# _7, p_32(D)->z
 2932              	# gfx_lib.h:273: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2933 19a0 232A5101 		sw	s5,20(sp)	#,
 2934 19a4 23267101 		sw	s7,12(sp)	#,
 2935 19a8 23229101 		sw	s9,4(sp)	#,
 2936              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 2937 19ac 97000000 		call	__floatsidf		#
 2937      E7800000 
 2938 19b4 B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 2939 19b8 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 2940 19bc 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 2941              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2942 19c0 33094941 		sub	s2,s2,s4	# _3, p_32(D)->x, _2
 2943              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2944 19c4 B3843441 		sub	s1,s1,s3	# _6, p_32(D)->y, _5
 2945              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 2946 19c8 97000000 		call	__muldf3		#
 2946      E7800000 
 2947 19d0 B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 2948 19d4 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 2949 19d8 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 2950 19dc 97000000 		call	__divdf3		#
 2950      E7800000 
 2951 19e4 97000000 		call	__fixdfsi		#
 2951      E7800000 
 2952 19ec 13170501 		slli	a4,a0,16	#, angle, tmp263
 2953              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2954 19f0 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 2955              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 2956 19f4 13570741 		srai	a4,a4,16	#, angle, angle
 2957              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2958 19f8 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 2959              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2960 19fc 635A0700 		bge	a4,zero,.L382	#, angle,,
 2961              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2962 1a00 B7870000 		li	a5,32768		# tmp163,
 2963 1a04 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 2964 1a08 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 2965 1a0c 13570741 		srai	a4,a4,16	#, angle, angle
 2966              	.L382:
 2967              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2968 1a10 93578740 		srai	a5,a4,8	#, v0, angle
 2969              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2970 1a14 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 2971              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2972 1a18 93F50702 		andi	a1,a5,32	#, tmp167, v0
 2973              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2974 1a1c 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 2975 1a20 93060C00 		mv	a3,s8	# _235, prephitmp_203
 2976              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2977 1a24 638A0500 		beq	a1,zero,.L383	#, tmp167,,
 2978              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2979 1a28 1347F7FF 		not	a4,a4	# tmp171, angle
 2980              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2981 1a2c 93160701 		slli	a3,a4,16	#, _235, tmp171
 2982              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2983 1a30 93C7F7FF 		not	a5,a5	# v0, v0
 2984              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2985 1a34 93D60601 		srli	a3,a3,16	#, _235, _235
 2986              	.L383:
 2987              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2988 1a38 93F7F701 		andi	a5,a5,31	#, _59, v0
 2989              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2990 1a3c 13871700 		addi	a4,a5,1	#, tmp179, _59
 2991              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2992 1a40 B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 2993 1a44 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 2994 1a48 93971700 		slli	a5,a5,1	#, tmp175, _59
 2995              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2996 1a4c 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 2997              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2998 1a50 B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 2999              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3000 1a54 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 3001              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3002 1a58 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 3003              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3004 1a5c 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 3005              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3006 1a60 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 3007              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3008 1a64 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 3009              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3010 1a68 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 3011              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3012 1a6c 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 3013              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3014 1a70 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 3015              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3016 1a74 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 3017 1a78 13150501 		slli	a0,a0,16	#, _74, tmp190
 3018 1a7c 13550501 		srli	a0,a0,16	#, _74, _74
 3019              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3020 1a80 63880700 		beq	a5,zero,.L384	#, tmp193,,
 3021              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3022 1a84 3305A040 		neg	a0,a0	# tmp195, _74
 3023 1a88 13150501 		slli	a0,a0,16	#, _74, tmp195
 3024 1a8c 13550501 		srli	a0,a0,16	#, _74, _74
 3025              	.L384:
 3026              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3027 1a90 13150501 		slli	a0,a0,16	#,, _74
 3028 1a94 13550541 		srai	a0,a0,16	#,,
 3029 1a98 97000000 		call	__floatsidf		#
 3029      E7800000 
 3030 1aa0 B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 3031 1aa4 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 3032 1aa8 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 3033 1aac 97000000 		call	__muldf3		#
 3033      E7800000 
 3034              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3035 1ab4 97000000 		call	__truncdfsf2		#
 3035      E7800000 
 3036              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3037 1abc B7A7FFFF 		li	a5,-24576		# tmp203,
 3038 1ac0 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 3039 1ac4 B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 3040              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3041 1ac8 93960701 		slli	a3,a5,16	#, angle, tmp201
 3042              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3043 1acc 13970701 		slli	a4,a5,16	#, _42, tmp201
 3044              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3045 1ad0 93D60641 		srai	a3,a3,16	#, angle, angle
 3046              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3047 1ad4 930C0500 		mv	s9,a0	# sin_theta, tmp264
 3048              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3049 1ad8 13570701 		srli	a4,a4,16	#, _42, _42
 3050              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3051 1adc 63D00602 		bge	a3,zero,.L385	#, angle,,
 3052              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3053 1ae0 B7270000 		li	a5,8192		# tmp206,
 3054 1ae4 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 3055 1ae8 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 3056 1aec 13170C01 		slli	a4,s8,16	#, _42, tmp204
 3057 1af0 93160C01 		slli	a3,s8,16	#, angle, tmp204
 3058 1af4 13570701 		srli	a4,a4,16	#, _42, _42
 3059 1af8 93D60641 		srai	a3,a3,16	#, angle, angle
 3060              	.L385:
 3061              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3062 1afc 93D78640 		srai	a5,a3,8	#, v0, angle
 3063              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3064 1b00 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 3065              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3066 1b04 93F50702 		andi	a1,a5,32	#, tmp210, v0
 3067              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3068 1b08 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 3069              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3070 1b0c 638A0500 		beq	a1,zero,.L386	#, tmp210,,
 3071              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3072 1b10 93C6F6FF 		not	a3,a3	# tmp214, angle
 3073              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3074 1b14 13970601 		slli	a4,a3,16	#, _42, tmp214
 3075              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3076 1b18 93C7F7FF 		not	a5,a5	# v0, v0
 3077              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3078 1b1c 13570701 		srli	a4,a4,16	#, _42, _42
 3079              	.L386:
 3080              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3081 1b20 93F7F701 		andi	a5,a5,31	#, _90, v0
 3082              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3083 1b24 93861700 		addi	a3,a5,1	#, tmp222, _90
 3084 1b28 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 3085              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3086 1b2c 93971700 		slli	a5,a5,1	#, tmp218, _90
 3087 1b30 B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 3088              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3089 1b34 B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 3090              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3091 1b38 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 3092              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3093 1b3c 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 3094              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3095 1b40 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 3096              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3097 1b44 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 3098              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3099 1b48 B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 3100              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3101 1b4c B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 3102              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3103 1b50 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 3104              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3105 1b54 B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 3106 1b58 93970701 		slli	a5,a5,16	#, _105, tmp233
 3107 1b5c 93D70701 		srli	a5,a5,16	#, _105, _105
 3108              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3109 1b60 63880600 		beq	a3,zero,.L387	#, tmp236,,
 3110              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3111 1b64 B307F040 		neg	a5,a5	# tmp238, _105
 3112 1b68 93970701 		slli	a5,a5,16	#, _105, tmp238
 3113 1b6c 93D70701 		srli	a5,a5,16	#, _105, _105
 3114              	.L387:
 3115              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3116 1b70 13950701 		slli	a0,a5,16	#,, _105
 3117 1b74 13550541 		srai	a0,a0,16	#,,
 3118 1b78 97000000 		call	__floatsidf		#
 3118      E7800000 
 3119 1b80 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 3120 1b84 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 3121 1b88 97000000 		call	__muldf3		#
 3121      E7800000 
 3122              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3123 1b90 97000000 		call	__truncdfsf2		#
 3123      E7800000 
 3124 1b98 93070500 		mv	a5,a0	# tmp265,
 3125              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3126 1b9c 13050900 		mv	a0,s2	#, _3
 3127              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3128 1ba0 13890700 		mv	s2,a5	# tmp243, tmp265
 3129              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3130 1ba4 97000000 		call	__floatsisf		#
 3130      E7800000 
 3131 1bac 930A0500 		mv	s5,a0	# tmp266,
 3132              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3133 1bb0 13850400 		mv	a0,s1	#, _6
 3134 1bb4 97000000 		call	__floatsisf		#
 3134      E7800000 
 3135 1bbc 93040500 		mv	s1,a0	# tmp267,
 3136              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3137 1bc0 93050900 		mv	a1,s2	#, tmp243
 3138 1bc4 13850A00 		mv	a0,s5	#, _18
 3139 1bc8 97000000 		call	__mulsf3		#
 3139      E7800000 
 3140 1bd0 930B0500 		mv	s7,a0	# tmp244, tmp268
 3141              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3142 1bd4 93850C00 		mv	a1,s9	#, sin_theta
 3143 1bd8 13850400 		mv	a0,s1	#, _20
 3144 1bdc 97000000 		call	__mulsf3		#
 3144      E7800000 
 3145 1be4 93050500 		mv	a1,a0	# tmp269,
 3146              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3147 1be8 13850B00 		mv	a0,s7	#, tmp244
 3148 1bec 97000000 		call	__subsf3		#
 3148      E7800000 
 3149 1bf4 930B0500 		mv	s7,a0	# tmp246, tmp270
 3150              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3151 1bf8 13050A00 		mv	a0,s4	#, _2
 3152 1bfc 97000000 		call	__floatsisf		#
 3152      E7800000 
 3153 1c04 93050500 		mv	a1,a0	# tmp271,
 3154 1c08 13850B00 		mv	a0,s7	#, tmp246
 3155 1c0c 97000000 		call	__addsf3		#
 3155      E7800000 
 3156              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3157 1c14 97000000 		call	__fixsfsi		#
 3157      E7800000 
 3158              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3159 1c1c 93850C00 		mv	a1,s9	#, sin_theta
 3160              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3161 1c20 2320A400 		sw	a0,0(s0)	# tmp272, <retval>.x
 3162              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3163 1c24 13850A00 		mv	a0,s5	#, _18
 3164 1c28 97000000 		call	__mulsf3		#
 3164      E7800000 
 3165 1c30 130A0500 		mv	s4,a0	# tmp250, tmp273
 3166              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3167 1c34 93050900 		mv	a1,s2	#, tmp243
 3168 1c38 13850400 		mv	a0,s1	#, _20
 3169 1c3c 97000000 		call	__mulsf3		#
 3169      E7800000 
 3170 1c44 93050500 		mv	a1,a0	# tmp274,
 3171              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3172 1c48 13050A00 		mv	a0,s4	#, tmp250
 3173 1c4c 97000000 		call	__addsf3		#
 3173      E7800000 
 3174 1c54 93040500 		mv	s1,a0	# tmp252, tmp275
 3175              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3176 1c58 13850900 		mv	a0,s3	#, _5
 3177 1c5c 97000000 		call	__floatsisf		#
 3177      E7800000 
 3178 1c64 93050500 		mv	a1,a0	# tmp276,
 3179 1c68 13850400 		mv	a0,s1	#, tmp252
 3180 1c6c 97000000 		call	__addsf3		#
 3180      E7800000 
 3181              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3182 1c74 97000000 		call	__fixsfsi		#
 3182      E7800000 
 3183 1c7c 2322A400 		sw	a0,4(s0)	# tmp277, <retval>.y
 3184              	# gfx_lib.h:285:   return transformed;
 3185 1c80 23246401 		sw	s6,8(s0)	# _7, <retval>.z
 3186              	# gfx_lib.h:286: }
 3187 1c84 8320C102 		lw	ra,44(sp)		#,
 3188 1c88 13050400 		mv	a0,s0	#, .result_ptr
 3189 1c8c 03248102 		lw	s0,40(sp)		#,
 3190 1c90 83244102 		lw	s1,36(sp)		#,
 3191 1c94 03290102 		lw	s2,32(sp)		#,
 3192 1c98 8329C101 		lw	s3,28(sp)		#,
 3193 1c9c 032A8101 		lw	s4,24(sp)		#,
 3194 1ca0 832A4101 		lw	s5,20(sp)		#,
 3195 1ca4 032B0101 		lw	s6,16(sp)		#,
 3196 1ca8 832BC100 		lw	s7,12(sp)		#,
 3197 1cac 032C8100 		lw	s8,8(sp)		#,
 3198 1cb0 832C4100 		lw	s9,4(sp)		#,
 3199 1cb4 13010103 		addi	sp,sp,48	#,,
 3200 1cb8 67800000 		jr	ra		#
 3202              		.align	2
 3203              		.globl	render_lines
 3205              	render_lines:
 3206 1cbc 130101F7 		addi	sp,sp,-144	#,,
 3207              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 3208 1cc0 9385F5FF 		addi	a1,a1,-1	#, _82, tmp863
 3209              	# main_house3d_rotate.c:66: void render_lines(point points [], size_t s, float angle_x, float angle
 3210 1cc4 23261108 		sw	ra,140(sp)	#,
 3211 1cc8 23248108 		sw	s0,136(sp)	#,
 3212 1ccc 23229108 		sw	s1,132(sp)	#,
 3213 1cd0 23202109 		sw	s2,128(sp)	#,
 3214 1cd4 232E3107 		sw	s3,124(sp)	#,
 3215 1cd8 232C4107 		sw	s4,120(sp)	#,
 3216 1cdc 232A5107 		sw	s5,116(sp)	#,
 3217 1ce0 23286107 		sw	s6,112(sp)	#,
 3218 1ce4 23267107 		sw	s7,108(sp)	#,
 3219 1ce8 23248107 		sw	s8,104(sp)	#,
 3220 1cec 23229107 		sw	s9,100(sp)	#,
 3221 1cf0 2320A107 		sw	s10,96(sp)	#,
 3222 1cf4 232EB105 		sw	s11,92(sp)	#,
 3223              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 3224 1cf8 2324B102 		sw	a1,40(sp)	# _82, %sfp
 3225              	# main_house3d_rotate.c:66: void render_lines(point points [], size_t s, float angle_x, float angle
 3226 1cfc 2328A100 		sw	a0,16(sp)	# tmp862, %sfp
 3227              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 3228 1d00 E3860536 		beq	a1,zero,.L400	#, _82,,
 3229 1d04 93840700 		mv	s1,a5	# scalef, tmp867
 3230              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3231 1d08 B7070000 		lui	a5,%hi(.LC4)	# tmp418,
 3232 1d0c 83A50700 		lw	a1,%lo(.LC4)(a5)		#,
 3233 1d10 13850400 		mv	a0,s1	#, scalef
 3234 1d14 130A0600 		mv	s4,a2	# angle_x, tmp864
 3235 1d18 13840600 		mv	s0,a3	# angle_y, tmp865
 3236 1d1c 93090700 		mv	s3,a4	# angle_z, tmp866
 3237 1d20 97000000 		call	__mulsf3		#
 3237      E7800000 
 3238              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3239 1d28 B7070000 		lui	a5,%hi(.LC5)	# tmp956,
 3240              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3241 1d2c 13090500 		mv	s2,a0	# tmp868,
 3242              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3243 1d30 03A50700 		lw	a0,%lo(.LC5)(a5)		#,
 3244 1d34 93050900 		mv	a1,s2	#, tmp419
 3245              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3246 1d38 B70A0080 		li	s5,-2147483648		# tmp427,
 3247              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3248 1d3c 97000000 		call	__subsf3		#
 3248      E7800000 
 3249              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3250 1d44 97000000 		call	__fixsfsi		#
 3250      E7800000 
 3251              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3252 1d4c 37070000 		lui	a4,%hi(.LC6)	# tmp422,
 3253 1d50 83250700 		lw	a1,%lo(.LC6)(a4)		#,
 3254              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3255 1d54 93070500 		mv	a5,a0	# tmp869,
 3256              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3257 1d58 13850400 		mv	a0,s1	#, scalef
 3258              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3259 1d5c 2326F100 		sw	a5,12(sp)	# tmp869, %sfp
 3260              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3261 1d60 97000000 		call	__mulsf3		#
 3261      E7800000 
 3262              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3263 1d68 B7070000 		lui	a5,%hi(.LC7)	# tmp957,
 3264              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3265 1d6c 93050500 		mv	a1,a0	# tmp870,
 3266              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3267 1d70 03A50700 		lw	a0,%lo(.LC7)(a5)		#,
 3268 1d74 97000000 		call	__subsf3		#
 3268      E7800000 
 3269              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3270 1d7c 97000000 		call	__fixsfsi		#
 3270      E7800000 
 3271 1d84 130C0500 		mv	s8,a0	# tmp871,
 3272 1d88 33C52A01 		xor	a0,s5,s2	# tmp419,, tmp427
 3273 1d8c 23268103 		sw	s8,44(sp)	# tmp871, %sfp
 3274 1d90 97000000 		call	__fixsfsi		#
 3274      E7800000 
 3275 1d98 930C0500 		mv	s9,a0	# tmp872,
 3276              	# main_house3d_rotate.c:80:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 3277 1d9c 33C54A01 		xor	a0,s5,s4	# angle_x,, tmp427
 3278              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 3279 1da0 23289103 		sw	s9,48(sp)	# tmp872, %sfp
 3280              	# main_house3d_rotate.c:80:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 3281 1da4 97000000 		call	__fixsfsi		#
 3281      E7800000 
 3282              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3283 1dac 97000000 		call	__floatsidf		#
 3283      E7800000 
 3284 1db4 B70A0000 		lui	s5,%hi(.LC1)	# tmp812,
 3285 1db8 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3286 1dbc 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3287 1dc0 370A0000 		lui	s4,%hi(.LC2)	# tmp813,
 3288 1dc4 97000000 		call	__muldf3		#
 3288      E7800000 
 3289 1dcc 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3290 1dd0 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3291 1dd4 97000000 		call	__divdf3		#
 3291      E7800000 
 3292 1ddc 97000000 		call	__fixdfsi		#
 3292      E7800000 
 3293 1de4 13150501 		slli	a0,a0,16	#, _296, tmp873
 3294 1de8 13550541 		srai	a0,a0,16	#, _296, _296
 3295              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3296 1dec B787FFFF 		li	a5,-32768		# tmp438,
 3297 1df0 B307F500 		add	a5,a0,a5	# tmp438, _296, _296
 3298 1df4 63440500 		blt	a0,zero,.L403	#, _296,,
 3299 1df8 93070500 		mv	a5,a0	# _296, _296
 3300              	.L403:
 3301 1dfc 139B0701 		slli	s6,a5,16	#, angle, _296
 3302 1e00 135B0B41 		srai	s6,s6,16	#, angle, angle
 3303              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3304 1e04 13578B40 		srai	a4,s6,8	#, v0, angle
 3305              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3306 1e08 93C7F7FF 		not	a5,a5	# tmp447, _296
 3307              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3308 1e0c 93160701 		slli	a3,a4,16	#, v0.41_331, v0
 3309              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3310 1e10 93970701 		slli	a5,a5,16	#, v1, tmp447
 3311              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3312 1e14 93D60601 		srli	a3,a3,16	#, v0.41_331, v0.41_331
 3313              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3314 1e18 93D70741 		srai	a5,a5,16	#, v1, v1
 3315 1e1c 937B0702 		andi	s7,a4,32	#, _332, v0
 3316              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3317 1e20 232AD100 		sw	a3,20(sp)	# v0.41_331, %sfp
 3318              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3319 1e24 232CF100 		sw	a5,24(sp)	# v1, %sfp
 3320 1e28 1349F7FF 		not	s2,a4	# v0, v0
 3321 1e2c E3820B30 		beq	s7,zero,.L458	#, _332,,
 3322              	.L405:
 3323              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3324 1e30 93170B01 		slli	a5,s6,16	#, angle.46_305, angle
 3325 1e34 37A7FFFF 		li	a4,-24576		# tmp452,
 3326 1e38 93D70701 		srli	a5,a5,16	#, angle.46_305, angle.46_305
 3327 1e3c 13071700 		addi	a4,a4,1	#, tmp451, tmp452
 3328 1e40 3387E700 		add	a4,a5,a4	# tmp451, tmp450, angle.46_305
 3329              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3330 1e44 13170701 		slli	a4,a4,16	#, _307, tmp450
 3331 1e48 B7260000 		li	a3,8192		# tmp455,
 3332 1e4c 93861600 		addi	a3,a3,1	#, tmp454, tmp455
 3333 1e50 13570741 		srai	a4,a4,16	#, _307, _307
 3334              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3335 1e54 1379F901 		andi	s2,s2,31	#, _337, v0
 3336 1e58 B387D700 		add	a5,a5,a3	# tmp454, _307, angle.46_305
 3337 1e5c 63440700 		blt	a4,zero,.L407	#, _307,,
 3338 1e60 93070700 		mv	a5,a4	# _307, _307
 3339              	.L407:
 3340 1e64 939D0701 		slli	s11,a5,16	#, angle, _307
 3341 1e68 93DD0D41 		srai	s11,s11,16	#, angle, angle
 3342              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3343 1e6c 13D78D40 		srai	a4,s11,8	#, v0, angle
 3344              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3345 1e70 93C7F7FF 		not	a5,a5	# tmp462, _307
 3346              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3347 1e74 93160701 		slli	a3,a4,16	#, v0.41_362, v0
 3348              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3349 1e78 93970701 		slli	a5,a5,16	#, v1, tmp462
 3350 1e7c 93D70741 		srai	a5,a5,16	#, v1, v1
 3351              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3352 1e80 93D60601 		srli	a3,a3,16	#, v0.41_362, v0.41_362
 3353              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3354 1e84 2320F102 		sw	a5,32(sp)	# v1, %sfp
 3355 1e88 137D0702 		andi	s10,a4,32	#, _363, v0
 3356              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3357 1e8c 232ED100 		sw	a3,28(sp)	# v0.41_362, %sfp
 3358 1e90 9347F7FF 		not	a5,a4	# v0, v0
 3359 1e94 E30A0D28 		beq	s10,zero,.L459	#, _363,,
 3360              	.L409:
 3361              	# main_house3d_rotate.c:83:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3362 1e98 37050080 		li	a0,-2147483648		# tmp466,
 3363              	# main_house3d_rotate.c:83:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3364 1e9c 33458500 		xor	a0,a0,s0	# angle_y,, tmp466
 3365              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3366 1ea0 13F4F701 		andi	s0,a5,31	#, _368, v0
 3367              	# main_house3d_rotate.c:83:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3368 1ea4 97000000 		call	__fixsfsi		#
 3368      E7800000 
 3369              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3370 1eac 97000000 		call	__floatsidf		#
 3370      E7800000 
 3371 1eb4 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3372 1eb8 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3373 1ebc 97000000 		call	__muldf3		#
 3373      E7800000 
 3374 1ec4 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3375 1ec8 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3376 1ecc 97000000 		call	__divdf3		#
 3376      E7800000 
 3377 1ed4 97000000 		call	__fixdfsi		#
 3377      E7800000 
 3378 1edc 13150501 		slli	a0,a0,16	#, _216, tmp874
 3379 1ee0 13550541 		srai	a0,a0,16	#, _216, _216
 3380              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3381 1ee4 B787FFFF 		li	a5,-32768		# tmp475,
 3382 1ee8 B307F500 		add	a5,a0,a5	# tmp475, _216, _216
 3383 1eec 63440500 		blt	a0,zero,.L411	#, _216,,
 3384 1ef0 93070500 		mv	a5,a0	# _216, _216
 3385              	.L411:
 3386 1ef4 13980701 		slli	a6,a5,16	#, angle, _216
 3387 1ef8 13580841 		srai	a6,a6,16	#, angle, angle
 3388              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3389 1efc 13578840 		srai	a4,a6,8	#, v0, angle
 3390              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3391 1f00 93C7F7FF 		not	a5,a5	# tmp484, _216
 3392              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3393 1f04 93160701 		slli	a3,a4,16	#, v0.41_455, v0
 3394              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3395 1f08 93970701 		slli	a5,a5,16	#, v1, tmp484
 3396              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3397 1f0c 93D60601 		srli	a3,a3,16	#, v0.41_455, v0.41_455
 3398              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3399 1f10 93D70741 		srai	a5,a5,16	#, v1, v1
 3400 1f14 13730702 		andi	t1,a4,32	#, _456, v0
 3401              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3402 1f18 2322D102 		sw	a3,36(sp)	# v0.41_455, %sfp
 3403              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3404 1f1c 232AF102 		sw	a5,52(sp)	# v1, %sfp
 3405 1f20 134EF7FF 		not	t3,a4	# v0, v0
 3406 1f24 E30E031E 		beq	t1,zero,.L460	#, _456,,
 3407              	.L413:
 3408              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3409 1f28 93170801 		slli	a5,a6,16	#, angle.46_225, angle
 3410 1f2c 37A7FFFF 		li	a4,-24576		# tmp489,
 3411 1f30 93D70701 		srli	a5,a5,16	#, angle.46_225, angle.46_225
 3412 1f34 13071700 		addi	a4,a4,1	#, tmp488, tmp489
 3413 1f38 3387E700 		add	a4,a5,a4	# tmp488, tmp487, angle.46_225
 3414              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3415 1f3c 13170701 		slli	a4,a4,16	#, _227, tmp487
 3416 1f40 B7260000 		li	a3,8192		# tmp492,
 3417 1f44 93861600 		addi	a3,a3,1	#, tmp491, tmp492
 3418 1f48 13570741 		srai	a4,a4,16	#, _227, _227
 3419              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3420 1f4c 137EFE01 		andi	t3,t3,31	#, _461, v0
 3421 1f50 B387D700 		add	a5,a5,a3	# tmp491, _227, angle.46_225
 3422 1f54 63440700 		blt	a4,zero,.L415	#, _227,,
 3423 1f58 93070700 		mv	a5,a4	# _227, _227
 3424              	.L415:
 3425 1f5c 139C0701 		slli	s8,a5,16	#, angle, _227
 3426 1f60 135C0C41 		srai	s8,s8,16	#, angle, angle
 3427              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3428 1f64 13578C40 		srai	a4,s8,8	#, v0, angle
 3429              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3430 1f68 93C7F7FF 		not	a5,a5	# tmp499, _227
 3431              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3432 1f6c 93160701 		slli	a3,a4,16	#, v0.41_486, v0
 3433              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3434 1f70 93970701 		slli	a5,a5,16	#, v1, tmp499
 3435 1f74 93D70741 		srai	a5,a5,16	#, v1, v1
 3436              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3437 1f78 93D60601 		srli	a3,a3,16	#, v0.41_486, v0.41_486
 3438              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3439 1f7c 232EF102 		sw	a5,60(sp)	# v1, %sfp
 3440 1f80 93780702 		andi	a7,a4,32	#, _487, v0
 3441              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3442 1f84 232CD102 		sw	a3,56(sp)	# v0.41_486, %sfp
 3443 1f88 9347F7FF 		not	a5,a4	# v0, v0
 3444 1f8c E3860818 		beq	a7,zero,.L461	#, _487,,
 3445              	.L417:
 3446              	# main_house3d_rotate.c:86:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 3447 1f90 13850900 		mv	a0,s3	#, angle_z
 3448 1f94 23261105 		sw	a7,76(sp)	# _487, %sfp
 3449 1f98 2324C105 		sw	t3,72(sp)	# _461, %sfp
 3450 1f9c 23226104 		sw	t1,68(sp)	# _456, %sfp
 3451 1fa0 23200105 		sw	a6,64(sp)	# angle, %sfp
 3452              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3453 1fa4 93F9F701 		andi	s3,a5,31	#, _492, v0
 3454              	# main_house3d_rotate.c:86:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 3455 1fa8 97000000 		call	__fixsfsi		#
 3455      E7800000 
 3456              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3457 1fb0 97000000 		call	__floatsidf		#
 3457      E7800000 
 3458 1fb8 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3459 1fbc 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3460 1fc0 97000000 		call	__muldf3		#
 3460      E7800000 
 3461 1fc8 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3462 1fcc 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3463 1fd0 97000000 		call	__divdf3		#
 3463      E7800000 
 3464 1fd8 97000000 		call	__fixdfsi		#
 3464      E7800000 
 3465 1fe0 13150501 		slli	a0,a0,16	#, _136, tmp875
 3466 1fe4 13550541 		srai	a0,a0,16	#, _136, _136
 3467              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3468 1fe8 B787FFFF 		li	a5,-32768		# tmp510,
 3469 1fec 03280104 		lw	a6,64(sp)		# angle, %sfp
 3470 1ff0 03234104 		lw	t1,68(sp)		# _456, %sfp
 3471 1ff4 032E8104 		lw	t3,72(sp)		# _461, %sfp
 3472 1ff8 8328C104 		lw	a7,76(sp)		# _487, %sfp
 3473 1ffc B307F500 		add	a5,a0,a5	# tmp510, _136, _136
 3474 2000 63440500 		blt	a0,zero,.L419	#, _136,,
 3475 2004 93070500 		mv	a5,a0	# _136, _136
 3476              	.L419:
 3477 2008 13950701 		slli	a0,a5,16	#, angle, _136
 3478 200c 13550541 		srai	a0,a0,16	#, angle, angle
 3479              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3480 2010 13578540 		srai	a4,a0,8	#, v0, angle
 3481              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3482 2014 93160701 		slli	a3,a4,16	#, v0.41_579, v0
 3483              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3484 2018 93C7F7FF 		not	a5,a5	# tmp519, _136
 3485              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3486 201c 93D60601 		srli	a3,a3,16	#, v0.41_579, v0.41_579
 3487              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3488 2020 139A0701 		slli	s4,a5,16	#, v1, tmp519
 3489 2024 137F0702 		andi	t5,a4,32	#, _580, v0
 3490              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3491 2028 2320D104 		sw	a3,64(sp)	# v0.41_579, %sfp
 3492              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3493 202c 135A0A41 		srai	s4,s4,16	#, v1, v1
 3494 2030 9345F7FF 		not	a1,a4	# v0, v0
 3495 2034 E30E0F0C 		beq	t5,zero,.L462	#, _580,,
 3496              	.L421:
 3497              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3498 2038 93170501 		slli	a5,a0,16	#, angle.46_145, angle
 3499 203c 37A7FFFF 		li	a4,-24576		# tmp524,
 3500 2040 93D70701 		srli	a5,a5,16	#, angle.46_145, angle.46_145
 3501 2044 13071700 		addi	a4,a4,1	#, tmp523, tmp524
 3502 2048 3387E700 		add	a4,a5,a4	# tmp523, tmp522, angle.46_145
 3503              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3504 204c 13170701 		slli	a4,a4,16	#, _147, tmp522
 3505 2050 B7260000 		li	a3,8192		# tmp527,
 3506 2054 93861600 		addi	a3,a3,1	#, tmp526, tmp527
 3507 2058 13570741 		srai	a4,a4,16	#, _147, _147
 3508              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3509 205c 93F5F501 		andi	a1,a1,31	#, _585, v0
 3510 2060 B387D700 		add	a5,a5,a3	# tmp526, _147, angle.46_145
 3511 2064 63440700 		blt	a4,zero,.L423	#, _147,,
 3512 2068 93070700 		mv	a5,a4	# _147, _147
 3513              	.L423:
 3514 206c 939F0701 		slli	t6,a5,16	#, angle, _147
 3515 2070 93DF0F41 		srai	t6,t6,16	#, angle, angle
 3516              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3517 2074 13D78F40 		srai	a4,t6,8	#, v0, angle
 3518              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3519 2078 93C7F7FF 		not	a5,a5	# tmp534, _147
 3520              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3521 207c 931C0701 		slli	s9,a4,16	#, v0.41_610, v0
 3522              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3523 2080 93970701 		slli	a5,a5,16	#, v1, tmp534
 3524 2084 937E0702 		andi	t4,a4,32	#, _611, v0
 3525              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3526 2088 93DC0C01 		srli	s9,s9,16	#, v0.41_610, v0.41_610
 3527              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3528 208c 93D70741 		srai	a5,a5,16	#, v1, v1
 3529 2090 1346F7FF 		not	a2,a4	# v0, v0
 3530 2094 E38A0E06 		beq	t4,zero,.L463	#, _611,,
 3531              	.L425:
 3532              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3533 2098 93061900 		addi	a3,s2,1	#, tmp543, _337
 3534              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3535 209c 37070000 		lui	a4,%hi(.LANCHOR1)	# tmp817,
 3536 20a0 13070700 		addi	a4,a4,%lo(.LANCHOR1)	# tmp811, tmp817,
 3537 20a4 13191900 		slli	s2,s2,1	#, tmp539, _337
 3538              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3539 20a8 93961600 		slli	a3,a3,1	#, tmp544, tmp543
 3540              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3541 20ac 33092701 		add	s2,a4,s2	# tmp539, tmp540, tmp811
 3542              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3543 20b0 B306D700 		add	a3,a4,a3	# tmp544, tmp545, tmp811
 3544              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3545 20b4 83130900 		lh	t2,0(s2)		# pretmp_412, sin90[_337]
 3546              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3547 20b8 83960600 		lh	a3,0(a3)		# sin90[_340], sin90[_340]
 3548              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3549 20bc 83528101 		lhu	t0,24(sp)	#, %sfp
 3550              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3551 20c0 1376F601 		andi	a2,a2,31	#, _616, v0
 3552              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3553 20c4 B3867640 		sub	a3,a3,t2	# tmp547, sin90[_340], pretmp_412
 3554              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3555 20c8 E38C0B02 		beq	s7,zero,.L464	#, _332,,
 3556              	.L427:
 3557 20cc 93F2F20F 		andi	t0,t0,0xff	# tmp550, v1
 3558              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3559 20d0 B3865602 		mul	a3,a3,t0	# tmp551, tmp547, tmp550
 3560              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3561 20d4 93021400 		addi	t0,s0,1	#, tmp562, _368
 3562 20d8 93921200 		slli	t0,t0,1	#, tmp563, tmp562
 3563              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3564 20dc 13141400 		slli	s0,s0,1	#, tmp558, _368
 3565 20e0 33048700 		add	s0,a4,s0	# tmp558, tmp559, tmp811
 3566              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3567 20e4 B3025700 		add	t0,a4,t0	# tmp563, tmp564, tmp811
 3568              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3569 20e8 03140400 		lh	s0,0(s0)		# pretmp_178, sin90[_368]
 3570              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3571 20ec 83920200 		lh	t0,0(t0)		# sin90[_371], sin90[_371]
 3572              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3573 20f0 03590102 		lhu	s2,32(sp)	#, %sfp
 3574              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3575 20f4 93D68640 		srai	a3,a3,8	#, tmp552, tmp551
 3576              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3577 20f8 B3867600 		add	a3,a3,t2	# pretmp_412, tmp555, tmp552
 3578 20fc 93960601 		slli	a3,a3,16	#, _542, tmp555
 3579 2100 93D60601 		srli	a3,a3,16	#, _542, _542
 3580              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3581 2104 B3828240 		sub	t0,t0,s0	# tmp566, sin90[_371], pretmp_178
 3582              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3583 2108 63080D7E 		beq	s10,zero,.L465	#, _363,,
 3584              	.L429:
 3585 210c 1379F90F 		andi	s2,s2,0xff	# tmp569, v1
 3586              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3587 2110 33892203 		mul	s2,t0,s2	# tmp570, tmp566, tmp569
 3588              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3589 2114 93031E00 		addi	t2,t3,1	#, tmp581, _461
 3590 2118 93931300 		slli	t2,t2,1	#, tmp582, tmp581
 3591              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3592 211c 131E1E00 		slli	t3,t3,1	#, tmp577, _461
 3593 2120 330EC701 		add	t3,a4,t3	# tmp577, tmp578, tmp811
 3594              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3595 2124 B3037700 		add	t2,a4,t2	# tmp582, tmp583, tmp811
 3596              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3597 2128 83120E00 		lh	t0,0(t3)		# pretmp_562, sin90[_461]
 3598              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3599 212c 039E0300 		lh	t3,0(t2)		# sin90[_464], sin90[_464]
 3600              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3601 2130 83534103 		lhu	t2,52(sp)	#, %sfp
 3602              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3603 2134 13598940 		srai	s2,s2,8	#, tmp571, tmp570
 3604              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3605 2138 33098900 		add	s2,s2,s0	# pretmp_178, tmp574, tmp571
 3606 213c 931A0901 		slli	s5,s2,16	#, _552, tmp574
 3607 2140 93DA0A01 		srli	s5,s5,16	#, _552, _552
 3608              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3609 2144 330E5E40 		sub	t3,t3,t0	# tmp585, sin90[_464], pretmp_562
 3610              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3611 2148 6304037A 		beq	t1,zero,.L466	#, _456,,
 3612              	.L431:
 3613 214c 93F3F30F 		andi	t2,t2,0xff	# tmp588, v1
 3614              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3615 2150 B3037E02 		mul	t2,t3,t2	# tmp589, tmp585, tmp588
 3616              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3617 2154 13881900 		addi	a6,s3,1	#, tmp600, _492
 3618 2158 13181800 		slli	a6,a6,1	#, tmp601, tmp600
 3619              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3620 215c 93991900 		slli	s3,s3,1	#, tmp596, _492
 3621 2160 B3093701 		add	s3,a4,s3	# tmp596, tmp597, tmp811
 3622              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3623 2164 33080701 		add	a6,a4,a6	# tmp601, tmp602, tmp811
 3624              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3625 2168 03930900 		lh	t1,0(s3)		# pretmp_565, sin90[_492]
 3626              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3627 216c 03180800 		lh	a6,0(a6)		# sin90[_495], sin90[_495]
 3628              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3629 2170 035EC103 		lhu	t3,60(sp)	#, %sfp
 3630              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3631 2174 93D38340 		srai	t2,t2,8	#, tmp590, tmp589
 3632              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3633 2178 B3835300 		add	t2,t2,t0	# pretmp_562, tmp593, tmp590
 3634 217c 139D0301 		slli	s10,t2,16	#, _564, tmp593
 3635 2180 135D0D01 		srli	s10,s10,16	#, _564, _564
 3636              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3637 2184 33086840 		sub	a6,a6,t1	# tmp604, sin90[_495], pretmp_565
 3638              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3639 2188 63800876 		beq	a7,zero,.L467	#, _487,,
 3640              	.L433:
 3641 218c 137EFE0F 		andi	t3,t3,0xff	# tmp607, v1
 3642              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3643 2190 3308C803 		mul	a6,a6,t3	# tmp608, tmp604, tmp607
 3644              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3645 2194 93881500 		addi	a7,a1,1	#, tmp619, _585
 3646 2198 93981800 		slli	a7,a7,1	#, tmp620, tmp619
 3647              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3648 219c 93951500 		slli	a1,a1,1	#, tmp615, _585
 3649              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3650 21a0 B3081701 		add	a7,a4,a7	# tmp620, tmp621, tmp811
 3651              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3652 21a4 B305B700 		add	a1,a4,a1	# tmp615, tmp616, tmp811
 3653              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3654 21a8 83990800 		lh	s3,0(a7)		# sin90[_588], sin90[_588]
 3655              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3656 21ac 83950500 		lh	a1,0(a1)		# pretmp_200, sin90[_585]
 3657              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3658 21b0 93080A00 		mv	a7,s4	# v1, v1
 3659              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3660 21b4 935B8840 		srai	s7,a6,8	#, tmp609, tmp608
 3661              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3662 21b8 B38B6B00 		add	s7,s7,t1	# pretmp_565, tmp612, tmp609
 3663 21bc 939B0B01 		slli	s7,s7,16	#, _192, tmp612
 3664 21c0 93DB0B01 		srli	s7,s7,16	#, _192, _192
 3665              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3666 21c4 B389B940 		sub	s3,s3,a1	# tmp623, sin90[_588], pretmp_200
 3667              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3668 21c8 630C0F70 		beq	t5,zero,.L468	#, _580,,
 3669              	.L435:
 3670 21cc 93F8F80F 		andi	a7,a7,0xff	# tmp626, v1
 3671              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3672 21d0 B3891903 		mul	s3,s3,a7	# tmp627, tmp623, tmp626
 3673              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3674 21d4 13051600 		addi	a0,a2,1	#, tmp638, _616
 3675 21d8 13151500 		slli	a0,a0,1	#, tmp639, tmp638
 3676              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3677 21dc 13161600 		slli	a2,a2,1	#, tmp634, _616
 3678 21e0 3306C700 		add	a2,a4,a2	# tmp634, tmp635, tmp811
 3679              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3680 21e4 3307A700 		add	a4,a4,a0	# tmp639, tmp640, tmp811
 3681              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3682 21e8 03160600 		lh	a2,0(a2)		# pretmp_90, sin90[_616]
 3683              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3684 21ec 03190700 		lh	s2,0(a4)		# sin90[_619], sin90[_619]
 3685              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3686 21f0 93D98940 		srai	s3,s3,8	#, tmp628, tmp627
 3687              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3688 21f4 B389B900 		add	s3,s3,a1	# pretmp_200, tmp631, tmp628
 3689 21f8 93990901 		slli	s3,s3,16	#, _89, tmp631
 3690 21fc 93D90901 		srli	s3,s3,16	#, _89, _89
 3691              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3692 2200 3309C940 		sub	s2,s2,a2	# tmp642, sin90[_619], pretmp_90
 3693              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3694 2204 638A0E6C 		beq	t4,zero,.L469	#, _611,,
 3695              	.L437:
 3696 2208 93F7F70F 		andi	a5,a5,0xff	# tmp645, v1
 3697              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3698 220c 3309F902 		mul	s2,s2,a5	# tmp646, tmp642, tmp645
 3699              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3700 2210 83274101 		lw	a5,20(sp)		# v0.41_331, %sfp
 3701 2214 03240101 		lw	s0,16(sp)		# ivtmp.473, %sfp
 3702 2218 13850600 		mv	a0,a3	# v1, _542
 3703 221c 93F70704 		andi	a5,a5,64	#, tmp654, v0.41_331
 3704              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3705 2220 13598940 		srai	s2,s2,8	#, tmp647, tmp646
 3706              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3707 2224 3309C900 		add	s2,s2,a2	# pretmp_90, tmp650, tmp647
 3708 2228 13190901 		slli	s2,s2,16	#, _655, tmp650
 3709 222c 13590901 		srli	s2,s2,16	#, _655, _655
 3710              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3711 2230 6390076A 		bne	a5,zero,.L470	#, tmp654,,
 3712              	.L439:
 3713 2234 13150501 		slli	a0,a0,16	#,, v1
 3714 2238 13550541 		srai	a0,a0,16	#,,
 3715 223c 97000000 		call	__floatsidf		#
 3715      E7800000 
 3716 2244 370B0000 		lui	s6,%hi(.LC3)	# tmp814,
 3717 2248 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3718 224c 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3719 2250 97000000 		call	__muldf3		#
 3719      E7800000 
 3720              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3721 2258 97000000 		call	__truncdfsf2		#
 3721      E7800000 
 3722              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 3723 2260 8327C101 		lw	a5,28(sp)		# v0.41_362, %sfp
 3724              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3725 2264 130A0500 		mv	s4,a0	# sin_theta, tmp876
 3726              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 3727 2268 13850A00 		mv	a0,s5	# v1, _552
 3728 226c 93F70704 		andi	a5,a5,64	#, tmp665, v0.41_362
 3729 2270 639C0764 		bne	a5,zero,.L471	#, tmp665,,
 3730              	.L441:
 3731 2274 13150501 		slli	a0,a0,16	#,, v1
 3732 2278 13550541 		srai	a0,a0,16	#,,
 3733 227c 97000000 		call	__floatsidf		#
 3733      E7800000 
 3734 2284 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3735 2288 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3736 228c 97000000 		call	__muldf3		#
 3736      E7800000 
 3737              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 3738 2294 97000000 		call	__truncdfsf2		#
 3738      E7800000 
 3739              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3740 229c 83274102 		lw	a5,36(sp)		# v0.41_455, %sfp
 3741              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 3742 22a0 930A0500 		mv	s5,a0	# cos_theta, tmp877
 3743              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3744 22a4 13050D00 		mv	a0,s10	# v1, _564
 3745 22a8 93F70704 		andi	a5,a5,64	#, tmp676, v0.41_455
 3746 22ac 639A0760 		bne	a5,zero,.L472	#, tmp676,,
 3747              	.L443:
 3748 22b0 13150501 		slli	a0,a0,16	#,, v1
 3749 22b4 13550541 		srai	a0,a0,16	#,,
 3750 22b8 97000000 		call	__floatsidf		#
 3750      E7800000 
 3751 22c0 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3752 22c4 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3753 22c8 97000000 		call	__muldf3		#
 3753      E7800000 
 3754              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3755 22d0 97000000 		call	__truncdfsf2		#
 3755      E7800000 
 3756              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 3757 22d8 83278103 		lw	a5,56(sp)		# v0.41_486, %sfp
 3758              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3759 22dc 2328A100 		sw	a0,16(sp)	# tmp878, %sfp
 3760              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 3761 22e0 33057041 		neg	a0,s7	# v1, _192
 3762 22e4 93F70704 		andi	a5,a5,64	#, tmp687, v0.41_486
 3763 22e8 6388075C 		beq	a5,zero,.L473	#, tmp687,,
 3764              	.L445:
 3765 22ec 13150501 		slli	a0,a0,16	#,, v1
 3766 22f0 13550541 		srai	a0,a0,16	#,,
 3767 22f4 97000000 		call	__floatsidf		#
 3767      E7800000 
 3768 22fc 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3769 2300 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3770 2304 97000000 		call	__muldf3		#
 3770      E7800000 
 3771              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 3772 230c 97000000 		call	__truncdfsf2		#
 3772      E7800000 
 3773              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3774 2314 83270104 		lw	a5,64(sp)		# v0.41_579, %sfp
 3775              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 3776 2318 232AA100 		sw	a0,20(sp)	# tmp879, %sfp
 3777              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3778 231c 33053041 		neg	a0,s3	# v1, _89
 3779 2320 93F70704 		andi	a5,a5,64	#, tmp698, v0.41_579
 3780 2324 63860758 		beq	a5,zero,.L474	#, tmp698,,
 3781              	.L447:
 3782 2328 13150501 		slli	a0,a0,16	#,, v1
 3783 232c 13550541 		srai	a0,a0,16	#,,
 3784 2330 97000000 		call	__floatsidf		#
 3784      E7800000 
 3785 2338 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3786 233c 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3787 2340 97000000 		call	__muldf3		#
 3787      E7800000 
 3788              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3789 2348 97000000 		call	__truncdfsf2		#
 3789      E7800000 
 3790              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3791 2350 93F70C04 		andi	a5,s9,64	#, tmp709, v0.41_610
 3792              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3793 2354 93090500 		mv	s3,a0	# sin_theta, tmp880
 3794              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3795 2358 13050900 		mv	a0,s2	# v1, _655
 3796 235c 63960754 		bne	a5,zero,.L475	#, tmp709,,
 3797              	.L449:
 3798 2360 13150501 		slli	a0,a0,16	#,, v1
 3799 2364 13550541 		srai	a0,a0,16	#,,
 3800 2368 97000000 		call	__floatsidf		#
 3800      E7800000 
 3801 2370 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3802 2374 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3803              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 3804 2378 93070000 		li	a5,0		# i,
 3805 237c 232CF100 		sw	a5,24(sp)	# i, %sfp
 3806              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3807 2380 97000000 		call	__muldf3		#
 3807      E7800000 
 3808              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3809 2388 97000000 		call	__truncdfsf2		#
 3809      E7800000 
 3810              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3811 2390 B7070000 		lui	a5,%hi(.LC5)	# tmp972,
 3812 2394 83AB0700 		lw	s7,%lo(.LC5)(a5)		# tmp854,
 3813              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3814 2398 B7070000 		lui	a5,%hi(.LC7)	# tmp973,
 3815 239c 03AB0700 		lw	s6,%lo(.LC7)(a5)		# tmp855,
 3816              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3817 23a0 13090500 		mv	s2,a0	# cos_theta, tmp881
 3818 23a4 93070000 		li	a5,0		# i,
 3819              	.L450:
 3820              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3821 23a8 03254400 		lw	a0,4(s0)		#, MEM[(int *)_736 + 4B]
 3822              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 3823 23ac 93872700 		addi	a5,a5,2	#, i, i
 3824 23b0 2322F102 		sw	a5,36(sp)	# i, %sfp
 3825              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3826 23b4 97000000 		call	__floatsisf		#
 3826      E7800000 
 3827 23bc 93850400 		mv	a1,s1	#, scalef
 3828 23c0 97000000 		call	__mulsf3		#
 3828      E7800000 
 3829              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3830 23c8 97000000 		call	__fixsfsi		#
 3830      E7800000 
 3831              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3832 23d0 032CC102 		lw	s8,44(sp)		# _11, %sfp
 3833              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 3834 23d4 13048401 		addi	s0,s0,24	#, ivtmp.473, ivtmp.473
 3835              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3836 23d8 33058501 		add	a0,a0,s8	# _11, tmp720, tmp882
 3837              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3838 23dc 130505FE 		addi	a0,a0,-32	#,, tmp720
 3839 23e0 97000000 		call	__floatsisf		#
 3839      E7800000 
 3840 23e8 130D0500 		mv	s10,a0	# tmp883,
 3841              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3842 23ec 032504FF 		lw	a0,-16(s0)		#, MEM[(int *)_736 + 8B]
 3843 23f0 97000000 		call	__floatsisf		#
 3843      E7800000 
 3844 23f8 93850400 		mv	a1,s1	#, scalef
 3845 23fc 97000000 		call	__mulsf3		#
 3845      E7800000 
 3846              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3847 2404 97000000 		call	__fixsfsi		#
 3847      E7800000 
 3848              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3849 240c 832D0103 		lw	s11,48(sp)		# _12, %sfp
 3850 2410 3305B501 		add	a0,a0,s11	# _12,, tmp884
 3851 2414 97000000 		call	__floatsisf		#
 3851      E7800000 
 3852 241c 930C0500 		mv	s9,a0	# tmp885,
 3853              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3854 2420 032584FF 		lw	a0,-8(s0)		#, MEM[(int *)_736 + 16B]
 3855 2424 97000000 		call	__floatsisf		#
 3855      E7800000 
 3856 242c 93850400 		mv	a1,s1	#, scalef
 3857 2430 97000000 		call	__mulsf3		#
 3857      E7800000 
 3858              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3859 2438 97000000 		call	__fixsfsi		#
 3859      E7800000 
 3860              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3861 2440 33058501 		add	a0,a0,s8	# _11, tmp729, tmp886
 3862              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3863 2444 130505FE 		addi	a0,a0,-32	#,, tmp729
 3864 2448 97000000 		call	__floatsisf		#
 3864      E7800000 
 3865 2450 130C0500 		mv	s8,a0	# tmp887,
 3866              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3867 2454 0325C4FF 		lw	a0,-4(s0)		#, MEM[(int *)_736 + 20B]
 3868 2458 97000000 		call	__floatsisf		#
 3868      E7800000 
 3869 2460 93850400 		mv	a1,s1	#, scalef
 3870 2464 97000000 		call	__mulsf3		#
 3870      E7800000 
 3871              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3872 246c 97000000 		call	__fixsfsi		#
 3872      E7800000 
 3873              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3874 2474 3305B501 		add	a0,a0,s11	# _12,, tmp888
 3875 2478 97000000 		call	__floatsisf		#
 3875      E7800000 
 3876 2480 930D0500 		mv	s11,a0	# tmp889,
 3877              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3878 2484 032584FE 		lw	a0,-24(s0)		#, MEM[(int *)_736]
 3879 2488 97000000 		call	__floatsisf		#
 3879      E7800000 
 3880 2490 93850400 		mv	a1,s1	#, scalef
 3881 2494 97000000 		call	__mulsf3		#
 3881      E7800000 
 3882              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3883 249c 97000000 		call	__fixsfsi		#
 3883      E7800000 
 3884              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3885 24a4 8327C100 		lw	a5,12(sp)		# _8, %sfp
 3886 24a8 3305F500 		add	a0,a0,a5	# _8, tmp738, tmp890
 3887              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3888 24ac 130505FD 		addi	a0,a0,-48	#,, tmp738
 3889 24b0 97000000 		call	__floatsisf		#
 3889      E7800000 
 3890 24b8 83254101 		lw	a1,20(sp)		#, %sfp
 3891 24bc 97000000 		call	__mulsf3		#
 3891      E7800000 
 3892 24c4 13080500 		mv	a6,a0	# tmp891,
 3893              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3894 24c8 93050D00 		mv	a1,s10	#, _313
 3895 24cc 13050A00 		mv	a0,s4	#, sin_theta
 3896              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3897 24d0 232E0101 		sw	a6,28(sp)	# tmp741, %sfp
 3898              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3899 24d4 97000000 		call	__mulsf3		#
 3899      E7800000 
 3900              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3901 24dc 93850C00 		mv	a1,s9	#, _315
 3902              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3903 24e0 232CA100 		sw	a0,24(sp)	# tmp742, %sfp
 3904              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3905 24e4 13850A00 		mv	a0,s5	#, cos_theta
 3906 24e8 97000000 		call	__mulsf3		#
 3906      E7800000 
 3907              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3908 24f0 03238101 		lw	t1,24(sp)		# tmp742, %sfp
 3909              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3910 24f4 93050500 		mv	a1,a0	# tmp893,
 3911              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3912 24f8 13050300 		mv	a0,t1	#, tmp742
 3913 24fc 97000000 		call	__addsf3		#
 3913      E7800000 
 3914              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3915 2504 93050000 		mv	a1,zero	#,
 3916 2508 97000000 		call	__addsf3		#
 3916      E7800000 
 3917              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3918 2510 97000000 		call	__fixsfsi		#
 3918      E7800000 
 3919              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3920 2518 97000000 		call	__floatsisf		#
 3920      E7800000 
 3921 2520 83250101 		lw	a1,16(sp)		#, %sfp
 3922 2524 97000000 		call	__mulsf3		#
 3922      E7800000 
 3923              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3924 252c 0328C101 		lw	a6,28(sp)		# tmp741, %sfp
 3925              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3926 2530 93050500 		mv	a1,a0	# tmp894,
 3927              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3928 2534 13050800 		mv	a0,a6	#, tmp741
 3929 2538 97000000 		call	__addsf3		#
 3929      E7800000 
 3930              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3931 2540 93850B00 		mv	a1,s7	#, tmp854
 3932 2544 97000000 		call	__addsf3		#
 3932      E7800000 
 3933              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3934 254c 97000000 		call	__fixsfsi		#
 3934      E7800000 
 3935              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3936 2554 130505FD 		addi	a0,a0,-48	#,, tmp895
 3937 2558 97000000 		call	__floatsisf		#
 3937      E7800000 
 3938 2560 13070500 		mv	a4,a0	# tmp896,
 3939              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3940 2564 93050D00 		mv	a1,s10	#, _313
 3941 2568 13850A00 		mv	a0,s5	#, cos_theta
 3942              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3943 256c 130D0700 		mv	s10,a4	# _153, tmp896
 3944              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3945 2570 97000000 		call	__mulsf3		#
 3945      E7800000 
 3946              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3947 2578 93850C00 		mv	a1,s9	#, _315
 3948              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3949 257c 232CA100 		sw	a0,24(sp)	# tmp754, %sfp
 3950              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3951 2580 13050A00 		mv	a0,s4	#, sin_theta
 3952 2584 97000000 		call	__mulsf3		#
 3952      E7800000 
 3953              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3954 258c 03278101 		lw	a4,24(sp)		# tmp754, %sfp
 3955              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3956 2590 93050500 		mv	a1,a0	# tmp898,
 3957              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3958 2594 13050700 		mv	a0,a4	#, tmp754
 3959 2598 97000000 		call	__subsf3		#
 3959      E7800000 
 3960              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3961 25a0 93050B00 		mv	a1,s6	#, tmp855
 3962 25a4 97000000 		call	__addsf3		#
 3962      E7800000 
 3963              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3964 25ac 97000000 		call	__fixsfsi		#
 3964      E7800000 
 3965              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3966 25b4 130505FE 		addi	a0,a0,-32	#,, tmp899
 3967 25b8 97000000 		call	__floatsisf		#
 3967      E7800000 
 3968 25c0 930C0500 		mv	s9,a0	# tmp900,
 3969              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3970 25c4 032544FF 		lw	a0,-12(s0)		#, MEM[(int *)_736 + 12B]
 3971 25c8 97000000 		call	__floatsisf		#
 3971      E7800000 
 3972 25d0 93850400 		mv	a1,s1	#, scalef
 3973 25d4 97000000 		call	__mulsf3		#
 3973      E7800000 
 3974              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3975 25dc 97000000 		call	__fixsfsi		#
 3975      E7800000 
 3976              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3977 25e4 8327C100 		lw	a5,12(sp)		# _8, %sfp
 3978 25e8 3305F500 		add	a0,a0,a5	# _8, tmp764, tmp901
 3979              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3980 25ec 130505FD 		addi	a0,a0,-48	#,, tmp764
 3981 25f0 97000000 		call	__floatsisf		#
 3981      E7800000 
 3982 25f8 83254101 		lw	a1,20(sp)		#, %sfp
 3983 25fc 97000000 		call	__mulsf3		#
 3983      E7800000 
 3984 2604 93080500 		mv	a7,a0	# tmp902,
 3985              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3986 2608 93050A00 		mv	a1,s4	#, sin_theta
 3987 260c 13050C00 		mv	a0,s8	#, _273
 3988              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3989 2610 232E1101 		sw	a7,28(sp)	# tmp767, %sfp
 3990              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3991 2614 97000000 		call	__mulsf3		#
 3991      E7800000 
 3992 261c 232CA100 		sw	a0,24(sp)	# tmp768, %sfp
 3993              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3994 2620 93850A00 		mv	a1,s5	#, cos_theta
 3995 2624 13850D00 		mv	a0,s11	#, _275
 3996 2628 97000000 		call	__mulsf3		#
 3996      E7800000 
 3997              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3998 2630 03238101 		lw	t1,24(sp)		# tmp768, %sfp
 3999              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4000 2634 93050500 		mv	a1,a0	# tmp904,
 4001              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4002 2638 13050300 		mv	a0,t1	#, tmp768
 4003 263c 97000000 		call	__addsf3		#
 4003      E7800000 
 4004              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4005 2644 93050000 		mv	a1,zero	#,
 4006 2648 97000000 		call	__addsf3		#
 4006      E7800000 
 4007              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4008 2650 97000000 		call	__fixsfsi		#
 4008      E7800000 
 4009              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4010 2658 97000000 		call	__floatsisf		#
 4010      E7800000 
 4011 2660 83250101 		lw	a1,16(sp)		#, %sfp
 4012 2664 97000000 		call	__mulsf3		#
 4012      E7800000 
 4013              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4014 266c 8328C101 		lw	a7,28(sp)		# tmp767, %sfp
 4015              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4016 2670 93050500 		mv	a1,a0	# tmp905,
 4017              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4018 2674 13850800 		mv	a0,a7	#, tmp767
 4019 2678 97000000 		call	__addsf3		#
 4019      E7800000 
 4020              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4021 2680 93850B00 		mv	a1,s7	#, tmp854
 4022 2684 97000000 		call	__addsf3		#
 4022      E7800000 
 4023              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4024 268c 97000000 		call	__fixsfsi		#
 4024      E7800000 
 4025              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4026 2694 130505FD 		addi	a0,a0,-48	#,, tmp906
 4027 2698 97000000 		call	__floatsisf		#
 4027      E7800000 
 4028 26a0 13070500 		mv	a4,a0	# tmp907,
 4029              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4030 26a4 93850A00 		mv	a1,s5	#, cos_theta
 4031 26a8 13050C00 		mv	a0,s8	#, _273
 4032              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4033 26ac 130C0700 		mv	s8,a4	# _113, tmp907
 4034              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4035 26b0 97000000 		call	__mulsf3		#
 4035      E7800000 
 4036 26b8 232CA100 		sw	a0,24(sp)	# tmp780, %sfp
 4037              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4038 26bc 93050A00 		mv	a1,s4	#, sin_theta
 4039 26c0 13850D00 		mv	a0,s11	#, _275
 4040 26c4 97000000 		call	__mulsf3		#
 4040      E7800000 
 4041              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4042 26cc 03278101 		lw	a4,24(sp)		# tmp780, %sfp
 4043              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4044 26d0 93050500 		mv	a1,a0	# tmp909,
 4045              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4046 26d4 13050700 		mv	a0,a4	#, tmp780
 4047 26d8 97000000 		call	__subsf3		#
 4047      E7800000 
 4048              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4049 26e0 93050B00 		mv	a1,s6	#, tmp855
 4050 26e4 97000000 		call	__addsf3		#
 4050      E7800000 
 4051              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4052 26ec 97000000 		call	__fixsfsi		#
 4052      E7800000 
 4053              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4054 26f4 130505FE 		addi	a0,a0,-32	#,, tmp910
 4055 26f8 97000000 		call	__floatsisf		#
 4055      E7800000 
 4056 2700 930D0500 		mv	s11,a0	# tmp911,
 4057              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4058 2704 93850900 		mv	a1,s3	#, sin_theta
 4059 2708 13050C00 		mv	a0,s8	#, _113
 4060 270c 97000000 		call	__mulsf3		#
 4060      E7800000 
 4061 2714 232CA100 		sw	a0,24(sp)	# tmp787, %sfp
 4062              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4063 2718 93050900 		mv	a1,s2	#, cos_theta
 4064 271c 13850D00 		mv	a0,s11	#, _115
 4065 2720 97000000 		call	__mulsf3		#
 4065      E7800000 
 4066              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4067 2728 83268101 		lw	a3,24(sp)		# tmp787, %sfp
 4068              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4069 272c 93050500 		mv	a1,a0	# tmp913,
 4070              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4071 2730 13850600 		mv	a0,a3	#, tmp787
 4072 2734 97000000 		call	__addsf3		#
 4072      E7800000 
 4073              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4074 273c 93050B00 		mv	a1,s6	#, tmp855
 4075 2740 97000000 		call	__addsf3		#
 4075      E7800000 
 4076              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4077 2748 97000000 		call	__fixsfsi		#
 4077      E7800000 
 4078 2750 93060500 		mv	a3,a0	# tmp914,
 4079              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4080 2754 93050900 		mv	a1,s2	#, cos_theta
 4081 2758 13050C00 		mv	a0,s8	#, _113
 4082              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4083 275c 2320D102 		sw	a3,32(sp)	# tmp792, %sfp
 4084              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4085 2760 97000000 		call	__mulsf3		#
 4085      E7800000 
 4086 2768 232CA100 		sw	a0,24(sp)	# tmp793, %sfp
 4087              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4088 276c 93850900 		mv	a1,s3	#, sin_theta
 4089 2770 13850D00 		mv	a0,s11	#, _115
 4090 2774 97000000 		call	__mulsf3		#
 4090      E7800000 
 4091              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4092 277c 83288101 		lw	a7,24(sp)		# tmp793, %sfp
 4093              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4094 2780 93050500 		mv	a1,a0	# tmp916,
 4095              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4096 2784 13850800 		mv	a0,a7	#, tmp793
 4097 2788 97000000 		call	__subsf3		#
 4097      E7800000 
 4098              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4099 2790 93850B00 		mv	a1,s7	#, tmp854
 4100 2794 97000000 		call	__addsf3		#
 4100      E7800000 
 4101              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4102 279c 97000000 		call	__fixsfsi		#
 4102      E7800000 
 4103 27a4 13060500 		mv	a2,a0	# tmp917,
 4104              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4105 27a8 93050D00 		mv	a1,s10	#, _153
 4106 27ac 13850900 		mv	a0,s3	#, sin_theta
 4107              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4108 27b0 232EC100 		sw	a2,28(sp)	# tmp798, %sfp
 4109              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4110 27b4 97000000 		call	__mulsf3		#
 4110      E7800000 
 4111 27bc 232CA100 		sw	a0,24(sp)	# tmp799, %sfp
 4112              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4113 27c0 93850C00 		mv	a1,s9	#, _155
 4114 27c4 13050900 		mv	a0,s2	#, cos_theta
 4115 27c8 97000000 		call	__mulsf3		#
 4115      E7800000 
 4116              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4117 27d0 83288101 		lw	a7,24(sp)		# tmp799, %sfp
 4118              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4119 27d4 93050500 		mv	a1,a0	# tmp919,
 4120              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4121 27d8 13850800 		mv	a0,a7	#, tmp799
 4122 27dc 97000000 		call	__addsf3		#
 4122      E7800000 
 4123              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4124 27e4 93050B00 		mv	a1,s6	#, tmp855
 4125 27e8 97000000 		call	__addsf3		#
 4125      E7800000 
 4126              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4127 27f0 97000000 		call	__fixsfsi		#
 4127      E7800000 
 4128 27f8 93080500 		mv	a7,a0	# tmp920,
 4129              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4130 27fc 93050D00 		mv	a1,s10	#, _153
 4131 2800 13050900 		mv	a0,s2	#, cos_theta
 4132              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4133 2804 138C0800 		mv	s8,a7	# tmp804, tmp920
 4134              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4135 2808 97000000 		call	__mulsf3		#
 4135      E7800000 
 4136 2810 232CA100 		sw	a0,24(sp)	# tmp805, %sfp
 4137              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4138 2814 93850C00 		mv	a1,s9	#, _155
 4139 2818 13850900 		mv	a0,s3	#, sin_theta
 4140 281c 97000000 		call	__mulsf3		#
 4140      E7800000 
 4141              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4142 2824 83288101 		lw	a7,24(sp)		# tmp805, %sfp
 4143              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4144 2828 93050500 		mv	a1,a0	# tmp922,
 4145              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4146 282c 13850800 		mv	a0,a7	#, tmp805
 4147 2830 97000000 		call	__subsf3		#
 4147      E7800000 
 4148              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4149 2838 93850B00 		mv	a1,s7	#, tmp854
 4150 283c 97000000 		call	__addsf3		#
 4150      E7800000 
 4151              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4152 2844 97000000 		call	__fixsfsi		#
 4152      E7800000 
 4153              	# main_house3d_rotate.c:89:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07,
 4154 284c 83260102 		lw	a3,32(sp)		# tmp792, %sfp
 4155 2850 0326C101 		lw	a2,28(sp)		# tmp798, %sfp
 4156 2854 93050C00 		mv	a1,s8	#, tmp804
 4157 2858 97000000 		call	fb_draw_bresenham.constprop.0		#
 4157      E7800000 
 4158              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 4159 2860 03278102 		lw	a4,40(sp)		# _82, %sfp
 4160 2864 83274102 		lw	a5,36(sp)		# i, %sfp
 4161 2868 E3E0E7B4 		bgtu	a4,a5,.L450	#, _82, i,
 4162              	.L400:
 4163              	# main_house3d_rotate.c:92: }
 4164 286c 8320C108 		lw	ra,140(sp)		#,
 4165 2870 03248108 		lw	s0,136(sp)		#,
 4166 2874 83244108 		lw	s1,132(sp)		#,
 4167 2878 03290108 		lw	s2,128(sp)		#,
 4168 287c 8329C107 		lw	s3,124(sp)		#,
 4169 2880 032A8107 		lw	s4,120(sp)		#,
 4170 2884 832A4107 		lw	s5,116(sp)		#,
 4171 2888 032B0107 		lw	s6,112(sp)		#,
 4172 288c 832BC106 		lw	s7,108(sp)		#,
 4173 2890 032C8106 		lw	s8,104(sp)		#,
 4174 2894 832C4106 		lw	s9,100(sp)		#,
 4175 2898 032D0106 		lw	s10,96(sp)		#,
 4176 289c 832DC105 		lw	s11,92(sp)		#,
 4177 28a0 13010109 		addi	sp,sp,144	#,,
 4178 28a4 67800000 		jr	ra		#
 4179              	.L475:
 4180              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4181 28a8 33052041 		neg	a0,s2	# v1, _655
 4182 28ac 6FF05FAB 		j	.L449		#
 4183              	.L474:
 4184              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4185 28b0 13850900 		mv	a0,s3	# v1, _89
 4186 28b4 6FF05FA7 		j	.L447		#
 4187              	.L473:
 4188              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 4189 28b8 13850B00 		mv	a0,s7	# v1, _192
 4190 28bc 6FF01FA3 		j	.L445		#
 4191              	.L472:
 4192              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 4193 28c0 3305A041 		neg	a0,s10	# v1, _564
 4194 28c4 6FF0DF9E 		j	.L443		#
 4195              	.L471:
 4196              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4197 28c8 33055041 		neg	a0,s5	# v1, _552
 4198 28cc 6FF09F9A 		j	.L441		#
 4199              	.L470:
 4200              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4201 28d0 3305D040 		neg	a0,a3	# v1, _542
 4202 28d4 6FF01F96 		j	.L439		#
 4203              	.L469:
 4204              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4205 28d8 93870F00 		mv	a5,t6	# v1, angle
 4206 28dc 6FF0DF92 		j	.L437		#
 4207              	.L468:
 4208 28e0 93080500 		mv	a7,a0	# v1, angle
 4209 28e4 6FF09F8E 		j	.L435		#
 4210              	.L467:
 4211 28e8 130E0C00 		mv	t3,s8	# v1, angle
 4212 28ec 6FF01F8A 		j	.L433		#
 4213              	.L466:
 4214 28f0 93030800 		mv	t2,a6	# v1, angle
 4215 28f4 6FF09F85 		j	.L431		#
 4216              	.L465:
 4217 28f8 13890D00 		mv	s2,s11	# v1, angle
 4218 28fc 6FF01F81 		j	.L429		#
 4219              	.L464:
 4220 2900 93020B00 		mv	t0,s6	# v1, angle
 4221 2904 6FF08FFC 		j	.L427		#
 4222              	.L463:
 4223 2908 13060700 		mv	a2,a4	# v0, v0
 4224 290c 6FF0CFF8 		j	.L425		#
 4225              	.L462:
 4226 2910 93050700 		mv	a1,a4	# v0, v0
 4227 2914 6FF04FF2 		j	.L421		#
 4228              	.L461:
 4229 2918 93070700 		mv	a5,a4	# v0, v0
 4230 291c 6FF04FE7 		j	.L417		#
 4231              	.L460:
 4232 2920 130E0700 		mv	t3,a4	# v0, v0
 4233 2924 6FF04FE0 		j	.L413		#
 4234              	.L459:
 4235 2928 93070700 		mv	a5,a4	# v0, v0
 4236 292c 6FF0CFD6 		j	.L409		#
 4237              	.L458:
 4238 2930 13090700 		mv	s2,a4	# v0, v0
 4239 2934 6FF0CFCF 		j	.L405		#
 4241              		.globl	__gesf2
 4242              		.globl	__lesf2
 4243              		.section	.text.startup,"ax",@progbits
 4244              		.align	2
 4245              		.globl	main
 4247              	main:
 4248 0000 37070000 		lui	a4,%hi(.LANCHOR2)	# tmp2694,
 4249 0004 130101F4 		addi	sp,sp,-192	#,,
 4250 0008 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2277,
 4251 000c 13070700 		addi	a4,a4,%lo(.LANCHOR2)	# tmp2693, tmp2694,
 4252 0010 232E110A 		sw	ra,188(sp)	#,
 4253 0014 232C810A 		sw	s0,184(sp)	#,
 4254 0018 232A910A 		sw	s1,180(sp)	#,
 4255 001c 2328210B 		sw	s2,176(sp)	#,
 4256 0020 2326310B 		sw	s3,172(sp)	#,
 4257 0024 2324410B 		sw	s4,168(sp)	#,
 4258 0028 2322510B 		sw	s5,164(sp)	#,
 4259 002c 2320610B 		sw	s6,160(sp)	#,
 4260 0030 232E7109 		sw	s7,156(sp)	#,
 4261 0034 232C8109 		sw	s8,152(sp)	#,
 4262 0038 232A9109 		sw	s9,148(sp)	#,
 4263 003c 2328A109 		sw	s10,144(sp)	#,
 4264 0040 2326B109 		sw	s11,140(sp)	#,
 4265 0044 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# ivtmp.568, tmp2277,
 4266 0048 13065702 		addi	a2,a4,37	#, _3426, tmp2693
 4267              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 4268 004c B7060030 		li	a3,805306368		# tmp1096,
 4269              	.L477:
 4270              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 4271 0050 03C70700 		lbu	a4,0(a5)	# _30, MEM[(char *)_3428]
 4272              	# gfx_lib.h:177:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 4273 0054 93871700 		addi	a5,a5,1	#, ivtmp.568, ivtmp.568
 4274              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 4275 0058 23A6E600 		sw	a4,12(a3)	# _30, MEM[(volatile uint32_t *)805306380B]
 4276              	# gfx_lib.h:177:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 4277 005c E31AF6FE 		bne	a2,a5,.L477	#, _3426, ivtmp.568,
 4278 0060 B7070000 		lui	a5,%hi(framebuffer)	# tmp1097,
 4279 0064 93860700 		addi	a3,a5,%lo(framebuffer)	# tmp2696, tmp2697,
 4280 0068 37370000 		li	a4,12288		# tmp1098,
 4281 006c 3387E600 		add	a4,a3,a4	# tmp1098, _3432, tmp2696
 4282 0070 2324E100 		sw	a4,8(sp)	# _3432, %sfp
 4283 0074 93870700 		addi	a5,a5,%lo(framebuffer)	# ivtmp.559, tmp1097,
 4284              	.L478:
 4285 0078 03278100 		lw	a4,8(sp)		# _3432, %sfp
 4286              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 4287 007c 23A00700 		sw	zero,0(a5)	#, MEM <vector(2) short unsigned int> [(uint16_t *)_3434]
 4288 0080 93874700 		addi	a5,a5,4	#, ivtmp.559, ivtmp.559
 4289 0084 E31AF7FE 		bne	a4,a5,.L478	#, _3432, ivtmp.559,
 4290              	# main_house3d_rotate.c:102:   float delta_scale = 0.1;//0.8; /* speedup scale */
 4291 0088 B7070000 		lui	a5,%hi(.LC8)	# tmp1091,
 4292 008c 83A70700 		lw	a5,%lo(.LC8)(a5)		# delta_scale,
 4293              	# main_house3d_rotate.c:98:   int angle = 0;
 4294 0090 232E0104 		sw	zero,92(sp)	#, %sfp
 4295              	# main_house3d_rotate.c:102:   float delta_scale = 0.1;//0.8; /* speedup scale */
 4296 0094 2320F106 		sw	a5,96(sp)	# delta_scale, %sfp
 4297              	# main_house3d_rotate.c:101:   float s = 4;
 4298 0098 B7070000 		lui	a5,%hi(.LC9)	# tmp1092,
 4299 009c 83AB0700 		lw	s7,%lo(.LC9)(a5)		# s,
 4300              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4301 00a0 B7070000 		lui	a5,%hi(.LC1)	# tmp2269,
 4302 00a4 03A84700 		lw	a6,%lo(.LC1+4)(a5)		#,
 4303 00a8 83A70700 		lw	a5,%lo(.LC1)(a5)		# tmp2323,
 4304 00ac 23260107 		sw	a6,108(sp)	#, %sfp
 4305 00b0 2324F106 		sw	a5,104(sp)	# tmp2323, %sfp
 4306 00b4 B7070000 		lui	a5,%hi(.LC2)	# tmp2270,
 4307 00b8 03A84700 		lw	a6,%lo(.LC2+4)(a5)		#,
 4308 00bc 83A70700 		lw	a5,%lo(.LC2)(a5)		# tmp2324,
 4309 00c0 232A0107 		sw	a6,116(sp)	#, %sfp
 4310 00c4 2328F106 		sw	a5,112(sp)	# tmp2324, %sfp
 4311 00c8 B7070000 		lui	a5,%hi(.LANCHOR1)	# tmp2276,
 4312 00cc 93870700 		addi	a5,a5,%lo(.LANCHOR1)	# tmp2267, tmp2276,
 4313 00d0 232CF100 		sw	a5,24(sp)	# tmp2267, %sfp
 4314 00d4 B7070000 		lui	a5,%hi(.LANCHOR2+40)	# tmp2280,
 4315 00d8 93878702 		addi	a5,a5,%lo(.LANCHOR2+40)	# ivtmp.554, tmp2280,
 4316 00dc 232EF106 		sw	a5,124(sp)	# ivtmp.554, %sfp
 4317 00e0 B7070000 		lui	a5,%hi(.LANCHOR2+352)	# tmp2281,
 4318 00e4 93870716 		addi	a5,a5,%lo(.LANCHOR2+352)	# ivtmp.547, tmp2281,
 4319 00e8 2324F104 		sw	a5,72(sp)	# ivtmp.547, %sfp
 4320 00ec B7070000 		lui	a5,%hi(.LANCHOR2+496)	# tmp2282,
 4321 00f0 9387071F 		addi	a5,a5,%lo(.LANCHOR2+496)	# _3449, tmp2282,
 4322 00f4 232AF104 		sw	a5,84(sp)	# _3449, %sfp
 4323              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4324 00f8 B7A7FFFF 		li	a5,-24576		# tmp1132,
 4325 00fc 93871700 		addi	a5,a5,1	#, tmp1131, tmp1132
 4326 0100 2326F102 		sw	a5,44(sp)	# tmp1131, %sfp
 4327              	.L531:
 4328              	# main_house3d_rotate.c:106:     render_lines(front, SIZEOF(front), angle, angle, angle, s);
 4329 0104 0325C105 		lw	a0,92(sp)		#, %sfp
 4330              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4331 0108 37090080 		li	s2,-2147483648		# tmp1108,
 4332              	# main_house3d_rotate.c:106:     render_lines(front, SIZEOF(front), angle, angle, angle, s);
 4333 010c 97000000 		call	__floatsisf		#
 4333      E7800000 
 4334              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4335 0114 B7070000 		lui	a5,%hi(.LC4)	# tmp2707,
 4336 0118 83A50700 		lw	a1,%lo(.LC4)(a5)		#,
 4337              	# main_house3d_rotate.c:106:     render_lines(front, SIZEOF(front), angle, angle, angle, s);
 4338 011c 93040500 		mv	s1,a0	# tmp2332,
 4339              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4340 0120 13850B00 		mv	a0,s7	#, s
 4341 0124 97000000 		call	__mulsf3		#
 4341      E7800000 
 4342              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4343 012c B7070000 		lui	a5,%hi(.LC5)	# tmp2708,
 4344              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4345 0130 13040500 		mv	s0,a0	# tmp2333,
 4346              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4347 0134 03A50700 		lw	a0,%lo(.LC5)(a5)		#,
 4348 0138 93050400 		mv	a1,s0	#, tmp1100
 4349 013c 97000000 		call	__subsf3		#
 4349      E7800000 
 4350              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4351 0144 97000000 		call	__fixsfsi		#
 4351      E7800000 
 4352              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4353 014c 37070000 		lui	a4,%hi(.LC6)	# tmp2709,
 4354 0150 83250700 		lw	a1,%lo(.LC6)(a4)		#,
 4355              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4356 0154 93070500 		mv	a5,a0	# tmp2334,
 4357              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4358 0158 13850B00 		mv	a0,s7	#, s
 4359              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4360 015c 2326F100 		sw	a5,12(sp)	# tmp2334, %sfp
 4361              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4362 0160 97000000 		call	__mulsf3		#
 4362      E7800000 
 4363              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4364 0168 B7070000 		lui	a5,%hi(.LC7)	# tmp2710,
 4365              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4366 016c 93050500 		mv	a1,a0	# tmp2335,
 4367              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4368 0170 03A50700 		lw	a0,%lo(.LC7)(a5)		#,
 4369 0174 97000000 		call	__subsf3		#
 4369      E7800000 
 4370              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4371 017c 97000000 		call	__fixsfsi		#
 4371      E7800000 
 4372 0184 93070500 		mv	a5,a0	# tmp2336,
 4373 0188 33458900 		xor	a0,s2,s0	# tmp1100,, tmp1108
 4374 018c 232AF100 		sw	a5,20(sp)	# tmp2336, %sfp
 4375 0190 97000000 		call	__fixsfsi		#
 4375      E7800000 
 4376 0198 93070500 		mv	a5,a0	# tmp2337,
 4377              	# main_house3d_rotate.c:80:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 4378 019c 33459900 		xor	a0,s2,s1	# _1,, tmp1108
 4379              	# main_house3d_rotate.c:75:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef)
 4380 01a0 2328F100 		sw	a5,16(sp)	# tmp2337, %sfp
 4381              	# main_house3d_rotate.c:80:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 4382 01a4 97000000 		call	__fixsfsi		#
 4382      E7800000 
 4383              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4384 01ac 97000000 		call	__floatsidf		#
 4384      E7800000 
 4385 01b4 03268106 		lw	a2,104(sp)		#, %sfp
 4386 01b8 8326C106 		lw	a3,108(sp)		#, %sfp
 4387 01bc 97000000 		call	__muldf3		#
 4387      E7800000 
 4388 01c4 03260107 		lw	a2,112(sp)		#, %sfp
 4389 01c8 83264107 		lw	a3,116(sp)		#, %sfp
 4390 01cc 97000000 		call	__divdf3		#
 4390      E7800000 
 4391 01d4 97000000 		call	__fixdfsi		#
 4391      E7800000 
 4392              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4393 01dc 93170501 		slli	a5,a0,16	#, angle.39_698, tmp2338
 4394 01e0 93D70701 		srli	a5,a5,16	#, angle.39_698, angle.39_698
 4395 01e4 13870700 		mv	a4,a5	# angle.39_698, angle.39_698
 4396 01e8 232CF106 		sw	a5,120(sp)	# angle.39_698, %sfp
 4397              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4398 01ec B7870000 		li	a5,32768		# tmp1120,
 4399 01f0 B347F700 		xor	a5,a4,a5	# tmp1120, _699, angle.39_698
 4400 01f4 232EF102 		sw	a5,60(sp)	# _699, %sfp
 4401              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4402 01f8 13170501 		slli	a4,a0,16	#, _668, tmp2338
 4403              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4404 01fc 93970701 		slli	a5,a5,16	#, angle, _699
 4405 0200 93D70741 		srai	a5,a5,16	#, angle, angle
 4406              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4407 0204 13570741 		srai	a4,a4,16	#, _668, _668
 4408              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4409 0208 2320F104 		sw	a5,64(sp)	# angle, %sfp
 4410              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4411 020c 2322E106 		sw	a4,100(sp)	# _668, %sfp
 4412 0210 63440700 		blt	a4,zero,.L480	#, _668,,
 4413 0214 93070700 		mv	a5,a4	# _668, _668
 4414              	.L480:
 4415 0218 939A0701 		slli	s5,a5,16	#, angle, _668
 4416 021c 93DA0A41 		srai	s5,s5,16	#, angle, angle
 4417              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 4418 0220 93D68A40 		srai	a3,s5,8	#, v0, angle
 4419              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4420 0224 93C7F7FF 		not	a5,a5	# tmp1127, _668
 4421              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4422 0228 13990601 		slli	s2,a3,16	#, v0.41_703, v0
 4423              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4424 022c 139A0701 		slli	s4,a5,16	#, v1, tmp1127
 4425 0230 13F80602 		andi	a6,a3,32	#, _704, v0
 4426              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4427 0234 13590901 		srli	s2,s2,16	#, v0.41_703, v0.41_703
 4428              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4429 0238 135A0A41 		srai	s4,s4,16	#, v1, v1
 4430 023c 13C7F6FF 		not	a4,a3	# v0, v0
 4431 0240 63140800 		bne	a6,zero,.L482	#, _704,,
 4432 0244 13870600 		mv	a4,a3	# v0, v0
 4433              	.L482:
 4434              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4435 0248 8326C102 		lw	a3,44(sp)		# tmp1131, %sfp
 4436 024c 93970A01 		slli	a5,s5,16	#, angle.46_677, angle
 4437 0250 93D70701 		srli	a5,a5,16	#, angle.46_677, angle.46_677
 4438 0254 232AF102 		sw	a5,52(sp)	# angle.46_677, %sfp
 4439 0258 B387D700 		add	a5,a5,a3	# tmp1131, tmp1130, angle.46_677
 4440              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4441 025c 93970701 		slli	a5,a5,16	#, _679, tmp1130
 4442 0260 93D70741 		srai	a5,a5,16	#, _679, _679
 4443              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4444 0264 1377F701 		andi	a4,a4,31	#, _709, v0
 4445              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4446 0268 13850700 		mv	a0,a5	#, _679
 4447 026c 23220103 		sw	a6,36(sp)	# _704, %sfp
 4448 0270 2326F104 		sw	a5,76(sp)	# _679, %sfp
 4449              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4450 0274 232EE100 		sw	a4,28(sp)	# _709, %sfp
 4451              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4452 0278 97000000 		call	sin1		#
 4452      E7800000 
 4453              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4454 0280 97000000 		call	__floatsidf		#
 4454      E7800000 
 4455 0288 B7090000 		lui	s3,%hi(.LC3)	# tmp2721,
 4456 028c 03A60900 		lw	a2,%lo(.LC3)(s3)		#,
 4457 0290 83A64900 		lw	a3,%lo(.LC3+4)(s3)		#,
 4458 0294 97000000 		call	__muldf3		#
 4458      E7800000 
 4459              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4460 029c 97000000 		call	__truncdfsf2		#
 4460      E7800000 
 4461 02a4 13040500 		mv	s0,a0	# tmp2339,
 4462              	# main_house3d_rotate.c:86:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 4463 02a8 13850400 		mv	a0,s1	#, _1
 4464 02ac 97000000 		call	__fixsfsi		#
 4464      E7800000 
 4465              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4466 02b4 97000000 		call	__floatsidf		#
 4466      E7800000 
 4467 02bc 03268106 		lw	a2,104(sp)		#, %sfp
 4468 02c0 8326C106 		lw	a3,108(sp)		#, %sfp
 4469 02c4 97000000 		call	__muldf3		#
 4469      E7800000 
 4470 02cc 03260107 		lw	a2,112(sp)		#, %sfp
 4471 02d0 83264107 		lw	a3,116(sp)		#, %sfp
 4472 02d4 97000000 		call	__divdf3		#
 4472      E7800000 
 4473 02dc 97000000 		call	__fixdfsi		#
 4473      E7800000 
 4474 02e4 93140501 		slli	s1,a0,16	#, _508, tmp2340
 4475 02e8 93D40441 		srai	s1,s1,16	#, _508, _508
 4476 02ec 13850400 		mv	a0,s1	#, _508
 4477 02f0 23229104 		sw	s1,68(sp)	# _508, %sfp
 4478 02f4 97000000 		call	sin1		#
 4478      E7800000 
 4479 02fc 97000000 		call	__floatsidf		#
 4479      E7800000 
 4480 0304 03A60900 		lw	a2,%lo(.LC3)(s3)		#,
 4481 0308 83A64900 		lw	a3,%lo(.LC3+4)(s3)		#,
 4482 030c 97000000 		call	__muldf3		#
 4482      E7800000 
 4483              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4484 0314 97000000 		call	__truncdfsf2		#
 4484      E7800000 
 4485              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4486 031c 93970401 		slli	a5,s1,16	#, angle.44_513, _508
 4487 0320 93D70701 		srli	a5,a5,16	#, angle.44_513, angle.44_513
 4488 0324 93860700 		mv	a3,a5	# angle.44_513, angle.44_513
 4489 0328 232CF104 		sw	a5,88(sp)	# angle.44_513, %sfp
 4490              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4491 032c B7870000 		li	a5,32768		# tmp1152,
 4492 0330 B3C7F600 		xor	a5,a3,a5	# tmp1152, _514, angle.44_513
 4493 0334 2320F102 		sw	a5,32(sp)	# _514, %sfp
 4494 0338 93970701 		slli	a5,a5,16	#, angle, _514
 4495 033c 93D70741 		srai	a5,a5,16	#, angle, angle
 4496 0340 232CF102 		sw	a5,56(sp)	# angle, %sfp
 4497 0344 0327C101 		lw	a4,28(sp)		# _709, %sfp
 4498 0348 03284102 		lw	a6,36(sp)		# _704, %sfp
 4499              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4500 034c 93090500 		mv	s3,a0	# sin_theta, tmp2341
 4501 0350 13860700 		mv	a2,a5	# _508, angle
 4502 0354 63C40400 		blt	s1,zero,.L484	#, _508,,
 4503 0358 13860400 		mv	a2,s1	# _508, _508
 4504              	.L484:
 4505              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4506 035c 8326C102 		lw	a3,44(sp)		# tmp1131, %sfp
 4507 0360 93170601 		slli	a5,a2,16	#, angle.46_517, _508
 4508 0364 93D70701 		srli	a5,a5,16	#, angle.46_517, angle.46_517
 4509 0368 B386D700 		add	a3,a5,a3	# tmp1131, tmp1154, angle.46_517
 4510              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4511 036c 93950601 		slli	a1,a3,16	#, _519, tmp1154
 4512 0370 93D50541 		srai	a1,a1,16	#, _519, _519
 4513 0374 B7260000 		li	a3,8192		# tmp1159,
 4514 0378 13160601 		slli	a2,a2,16	#, angle, _508
 4515 037c 93861600 		addi	a3,a3,1	#, tmp1158, tmp1159
 4516 0380 2328B102 		sw	a1,48(sp)	# _519, %sfp
 4517 0384 13560641 		srai	a2,a2,16	#, angle, angle
 4518 0388 B387D700 		add	a5,a5,a3	# tmp1158, _519, angle.46_517
 4519 038c 63C40500 		blt	a1,zero,.L486	#, _519,,
 4520 0390 93870500 		mv	a5,a1	# _519, _519
 4521              	.L486:
 4522 0394 93980701 		slli	a7,a5,16	#, angle, _519
 4523 0398 93D80841 		srai	a7,a7,16	#, angle, angle
 4524              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 4525 039c 93D68840 		srai	a3,a7,8	#, v0, angle
 4526              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4527 03a0 93C7F7FF 		not	a5,a5	# tmp1166, _519
 4528              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4529 03a4 139C0601 		slli	s8,a3,16	#, v0.41_827, v0
 4530              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4531 03a8 93970701 		slli	a5,a5,16	#, v1, tmp1166
 4532 03ac 13F30602 		andi	t1,a3,32	#, _828, v0
 4533              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4534 03b0 135C0C01 		srli	s8,s8,16	#, v0.41_827, v0.41_827
 4535              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4536 03b4 93D70741 		srai	a5,a5,16	#, v1, v1
 4537 03b8 13CEF6FF 		not	t3,a3	# v0, v0
 4538 03bc 63140300 		bne	t1,zero,.L488	#, _828,,
 4539 03c0 138E0600 		mv	t3,a3	# v0, v0
 4540              	.L488:
 4541              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 4542 03c4 935E8640 		srai	t4,a2,8	#, v0, angle
 4543              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4544 03c8 139B0E01 		slli	s6,t4,16	#, v0.41_858, v0
 4545 03cc 13F50E02 		andi	a0,t4,32	#, _859, v0
 4546              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4547 03d0 137EFE01 		andi	t3,t3,31	#, _833, v0
 4548              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4549 03d4 135B0B01 		srli	s6,s6,16	#, v0.41_858, v0.41_858
 4550              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4551 03d8 9345F6FF 		not	a1,a2	# v1, angle
 4552 03dc 93C6FEFF 		not	a3,t4	# v0, v0
 4553 03e0 63140500 		bne	a0,zero,.L490	#, _859,,
 4554 03e4 93860E00 		mv	a3,t4	# v0, v0
 4555              	.L490:
 4556              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4557 03e8 832E8101 		lw	t4,24(sp)		# tmp2267, %sfp
 4558              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4559 03ec 130F1700 		addi	t5,a4,1	#, tmp1183, _709
 4560 03f0 131F1F00 		slli	t5,t5,1	#, tmp1184, tmp1183
 4561              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4562 03f4 13171700 		slli	a4,a4,1	#, tmp1179, _709
 4563 03f8 3387EE00 		add	a4,t4,a4	# tmp1179, tmp1180, tmp2267
 4564              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4565 03fc 338FEE01 		add	t5,t4,t5	# tmp1184, tmp1185, tmp2267
 4566              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4567 0400 831E0700 		lh	t4,0(a4)		# pretmp_1631, sin90[_709]
 4568              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4569 0404 03170F00 		lh	a4,0(t5)		# sin90[_712], sin90[_712]
 4570              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4571 0408 93F6F601 		andi	a3,a3,31	#, _864, v0
 4572              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4573 040c 3307D741 		sub	a4,a4,t4	# tmp1187, sin90[_712], pretmp_1631
 4574              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4575 0410 63140800 		bne	a6,zero,.L492	#, _704,,
 4576 0414 138A0A00 		mv	s4,s5	# v1, angle
 4577              	.L492:
 4578 0418 137AFA0F 		andi	s4,s4,0xff	# tmp1190, v1
 4579              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4580 041c 330F4703 		mul	t5,a4,s4	# tmp1191, tmp1187, tmp1190
 4581              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4582 0420 13081E00 		addi	a6,t3,1	#, tmp1202, _833
 4583              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4584 0424 13171E00 		slli	a4,t3,1	#, tmp1198, _833
 4585              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4586 0428 131E1800 		slli	t3,a6,1	#, tmp1203, tmp1202
 4587              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4588 042c 03288101 		lw	a6,24(sp)		# tmp2267, %sfp
 4589 0430 3307E800 		add	a4,a6,a4	# tmp1198, tmp1199, tmp2267
 4590              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4591 0434 330EC801 		add	t3,a6,t3	# tmp1203, tmp1204, tmp2267
 4592 0438 031E0E00 		lh	t3,0(t3)		# sin90[_836], sin90[_836]
 4593              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4594 043c 03180700 		lh	a6,0(a4)		# pretmp_286, sin90[_833]
 4595              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4596 0440 13578F40 		srai	a4,t5,8	#, tmp1192, tmp1191
 4597              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4598 0444 3307D701 		add	a4,a4,t4	# pretmp_1631, tmp1195, tmp1192
 4599 0448 13170701 		slli	a4,a4,16	#, _285, tmp1195
 4600 044c 13570701 		srli	a4,a4,16	#, _285, _285
 4601              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4602 0450 B30A0E41 		sub	s5,t3,a6	# tmp1206, sin90[_836], pretmp_286
 4603              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4604 0454 63140300 		bne	t1,zero,.L494	#, _828,,
 4605 0458 93870800 		mv	a5,a7	# v1, angle
 4606              	.L494:
 4607 045c 93F7F70F 		andi	a5,a5,0xff	# tmp1209, v1
 4608              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4609 0460 B38AFA02 		mul	s5,s5,a5	# tmp1210, tmp1206, tmp1209
 4610              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4611 0464 93881600 		addi	a7,a3,1	#, tmp1221, _864
 4612              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4613 0468 93971600 		slli	a5,a3,1	#, tmp1217, _864
 4614              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4615 046c 93961800 		slli	a3,a7,1	#, tmp1222, tmp1221
 4616              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4617 0470 83288101 		lw	a7,24(sp)		# tmp2267, %sfp
 4618 0474 B387F800 		add	a5,a7,a5	# tmp1217, tmp1218, tmp2267
 4619              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4620 0478 B386D800 		add	a3,a7,a3	# tmp1222, tmp1223, tmp2267
 4621              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4622 047c 83970700 		lh	a5,0(a5)		# pretmp_1474, sin90[_864]
 4623              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4624 0480 039A0600 		lh	s4,0(a3)		# sin90[_867], sin90[_867]
 4625              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4626 0484 93DA8A40 		srai	s5,s5,8	#, tmp1211, tmp1210
 4627              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4628 0488 B38A0A01 		add	s5,s5,a6	# pretmp_286, tmp1214, tmp1211
 4629 048c 939A0A01 		slli	s5,s5,16	#, _1472, tmp1214
 4630 0490 93DA0A01 		srli	s5,s5,16	#, _1472, _1472
 4631              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4632 0494 330AFA40 		sub	s4,s4,a5	# tmp1225, sin90[_867], pretmp_1474
 4633              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4634 0498 63140500 		bne	a0,zero,.L496	#, _859,,
 4635 049c 93050600 		mv	a1,a2	# v1, angle
 4636              	.L496:
 4637 04a0 93F5F50F 		andi	a1,a1,0xff	# tmp1228, v1
 4638              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4639 04a4 330ABA02 		mul	s4,s4,a1	# tmp1229, tmp1225, tmp1228
 4640              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4641 04a8 13790904 		andi	s2,s2,64	#, tmp1239, v0.41_703
 4642 04ac 8324C107 		lw	s1,124(sp)		# ivtmp.554, %sfp
 4643 04b0 3305E040 		neg	a0,a4	# v1, _285
 4644              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4645 04b4 135A8A40 		srai	s4,s4,8	#, tmp1230, tmp1229
 4646              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4647 04b8 330AFA00 		add	s4,s4,a5	# pretmp_1474, tmp1233, tmp1230
 4648 04bc 131A0A01 		slli	s4,s4,16	#, _1491, tmp1233
 4649 04c0 135A0A01 		srli	s4,s4,16	#, _1491, _1491
 4650              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4651 04c4 63140900 		bne	s2,zero,.L498	#, tmp1239,,
 4652 04c8 13050700 		mv	a0,a4	# v1, _285
 4653              	.L498:
 4654 04cc 13150501 		slli	a0,a0,16	#,, v1
 4655 04d0 13550541 		srai	a0,a0,16	#,,
 4656 04d4 97000000 		call	__floatsidf		#
 4656      E7800000 
 4657 04dc B7070000 		lui	a5,%hi(.LC3)	# tmp2738,
 4658 04e0 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4659 04e4 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4660              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4661 04e8 137C0C04 		andi	s8,s8,64	#, tmp1250, v0.41_827
 4662              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4663 04ec 97000000 		call	__muldf3		#
 4663      E7800000 
 4664              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4665 04f4 97000000 		call	__truncdfsf2		#
 4665      E7800000 
 4666 04fc 13090500 		mv	s2,a0	# sin_theta, tmp2342
 4667              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4668 0500 13850A00 		mv	a0,s5	# v1, _1472
 4669 0504 63040C00 		beq	s8,zero,.L500	#, tmp1250,,
 4670 0508 33055041 		neg	a0,s5	# v1, _1472
 4671              	.L500:
 4672 050c 13150501 		slli	a0,a0,16	#,, v1
 4673 0510 13550541 		srai	a0,a0,16	#,,
 4674 0514 97000000 		call	__floatsidf		#
 4674      E7800000 
 4675 051c B7070000 		lui	a5,%hi(.LC3)	# tmp2739,
 4676 0520 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4677 0524 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4678              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4679 0528 137B0B04 		andi	s6,s6,64	#, tmp1261, v0.41_858
 4680              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4681 052c 97000000 		call	__muldf3		#
 4681      E7800000 
 4682              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4683 0534 97000000 		call	__truncdfsf2		#
 4683      E7800000 
 4684 053c 930A0500 		mv	s5,a0	# cos_theta, tmp2343
 4685              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4686 0540 13050A00 		mv	a0,s4	# v1, _1491
 4687 0544 63040B00 		beq	s6,zero,.L502	#, tmp1261,,
 4688 0548 33054041 		neg	a0,s4	# v1, _1491
 4689              	.L502:
 4690 054c 13150501 		slli	a0,a0,16	#,, v1
 4691 0550 13550541 		srai	a0,a0,16	#,,
 4692 0554 97000000 		call	__floatsidf		#
 4692      E7800000 
 4693 055c B7070000 		lui	a5,%hi(.LC3)	# tmp2740,
 4694 0560 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4695 0564 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4696 0568 97000000 		call	__muldf3		#
 4696      E7800000 
 4697              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4698 0570 97000000 		call	__truncdfsf2		#
 4698      E7800000 
 4699              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4700 0578 B7070000 		lui	a5,%hi(.LC7)	# tmp2741,
 4701 057c 03AA0700 		lw	s4,%lo(.LC7)(a5)		# tmp2316,
 4702              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4703 0580 B7070000 		lui	a5,%hi(.LC5)	# tmp2742,
 4704 0584 03AC0700 		lw	s8,%lo(.LC5)(a5)		# tmp2317,
 4705              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4706 0588 130B0500 		mv	s6,a0	# sin_theta, tmp2344
 4707 058c 23243103 		sw	s3,40(sp)	# sin_theta, %sfp
 4708              	.L503:
 4709              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4710 0590 03A54400 		lw	a0,4(s1)		#, MEM[(int *)_3445 + 4B]
 4711              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 4712 0594 93848401 		addi	s1,s1,24	#, ivtmp.554, ivtmp.554
 4713              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4714 0598 97000000 		call	__floatsisf		#
 4714      E7800000 
 4715 05a0 93850B00 		mv	a1,s7	#, s
 4716 05a4 97000000 		call	__mulsf3		#
 4716      E7800000 
 4717              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4718 05ac 97000000 		call	__fixsfsi		#
 4718      E7800000 
 4719              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4720 05b4 83294101 		lw	s3,20(sp)		# _437, %sfp
 4721 05b8 33053501 		add	a0,a0,s3	# _437, tmp1272, tmp2345
 4722              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4723 05bc 130505FE 		addi	a0,a0,-32	#,, tmp1272
 4724 05c0 97000000 		call	__floatsisf		#
 4724      E7800000 
 4725 05c8 130D0500 		mv	s10,a0	# tmp2346,
 4726              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4727 05cc 03A504FF 		lw	a0,-16(s1)		#, MEM[(int *)_3445 + 8B]
 4728 05d0 97000000 		call	__floatsisf		#
 4728      E7800000 
 4729 05d8 93850B00 		mv	a1,s7	#, s
 4730 05dc 97000000 		call	__mulsf3		#
 4730      E7800000 
 4731              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4732 05e4 97000000 		call	__fixsfsi		#
 4732      E7800000 
 4733              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4734 05ec 832C0101 		lw	s9,16(sp)		# _439, %sfp
 4735 05f0 33059501 		add	a0,a0,s9	# _439,, tmp2347
 4736 05f4 97000000 		call	__floatsisf		#
 4736      E7800000 
 4737 05fc 930D0500 		mv	s11,a0	# tmp2348,
 4738              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4739 0600 03A584FF 		lw	a0,-8(s1)		#, MEM[(int *)_3445 + 16B]
 4740 0604 97000000 		call	__floatsisf		#
 4740      E7800000 
 4741 060c 93850B00 		mv	a1,s7	#, s
 4742 0610 97000000 		call	__mulsf3		#
 4742      E7800000 
 4743              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4744 0618 97000000 		call	__fixsfsi		#
 4744      E7800000 
 4745              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4746 0620 33053501 		add	a0,a0,s3	# _437, tmp1281, tmp2349
 4747              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4748 0624 130505FE 		addi	a0,a0,-32	#,, tmp1281
 4749 0628 97000000 		call	__floatsisf		#
 4749      E7800000 
 4750 0630 93090500 		mv	s3,a0	# tmp2350,
 4751              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4752 0634 03A5C4FF 		lw	a0,-4(s1)		#, MEM[(int *)_3445 + 20B]
 4753 0638 97000000 		call	__floatsisf		#
 4753      E7800000 
 4754 0640 93850B00 		mv	a1,s7	#, s
 4755 0644 97000000 		call	__mulsf3		#
 4755      E7800000 
 4756              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4757 064c 97000000 		call	__fixsfsi		#
 4757      E7800000 
 4758              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4759 0654 33059501 		add	a0,a0,s9	# _439,, tmp2351
 4760 0658 97000000 		call	__floatsisf		#
 4760      E7800000 
 4761 0660 930C0500 		mv	s9,a0	# tmp2352,
 4762              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4763 0664 03A584FE 		lw	a0,-24(s1)		#, MEM[(int *)_3445]
 4764 0668 97000000 		call	__floatsisf		#
 4764      E7800000 
 4765 0670 93850B00 		mv	a1,s7	#, s
 4766 0674 97000000 		call	__mulsf3		#
 4766      E7800000 
 4767              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4768 067c 97000000 		call	__fixsfsi		#
 4768      E7800000 
 4769              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4770 0684 8327C100 		lw	a5,12(sp)		# _434, %sfp
 4771 0688 3305F500 		add	a0,a0,a5	# _434, tmp1290, tmp2353
 4772              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4773 068c 130505FD 		addi	a0,a0,-48	#,, tmp1290
 4774 0690 97000000 		call	__floatsisf		#
 4774      E7800000 
 4775 0698 93050400 		mv	a1,s0	#, cos_theta
 4776 069c 97000000 		call	__mulsf3		#
 4776      E7800000 
 4777 06a4 13070500 		mv	a4,a0	# tmp2354,
 4778              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4779 06a8 93050D00 		mv	a1,s10	#, _685
 4780 06ac 13050900 		mv	a0,s2	#, sin_theta
 4781              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4782 06b0 2322E102 		sw	a4,36(sp)	# tmp1293, %sfp
 4783              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4784 06b4 97000000 		call	__mulsf3		#
 4784      E7800000 
 4785              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4786 06bc 93850D00 		mv	a1,s11	#, _687
 4787              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4788 06c0 232EA100 		sw	a0,28(sp)	# tmp1294, %sfp
 4789              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4790 06c4 13050400 		mv	a0,s0	#, cos_theta
 4791 06c8 97000000 		call	__mulsf3		#
 4791      E7800000 
 4792              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4793 06d0 8328C101 		lw	a7,28(sp)		# tmp1294, %sfp
 4794              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4795 06d4 93050500 		mv	a1,a0	# tmp2356,
 4796              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4797 06d8 13850800 		mv	a0,a7	#, tmp1294
 4798 06dc 97000000 		call	__addsf3		#
 4798      E7800000 
 4799              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4800 06e4 93050000 		mv	a1,zero	#,
 4801 06e8 97000000 		call	__addsf3		#
 4801      E7800000 
 4802              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4803 06f0 97000000 		call	__fixsfsi		#
 4803      E7800000 
 4804              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4805 06f8 97000000 		call	__floatsisf		#
 4805      E7800000 
 4806 0700 93050900 		mv	a1,s2	#, sin_theta
 4807 0704 97000000 		call	__mulsf3		#
 4807      E7800000 
 4808              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4809 070c 03274102 		lw	a4,36(sp)		# tmp1293, %sfp
 4810              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4811 0710 93050500 		mv	a1,a0	# tmp2357,
 4812              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4813 0714 13050700 		mv	a0,a4	#, tmp1293
 4814 0718 97000000 		call	__addsf3		#
 4814      E7800000 
 4815              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4816 0720 37070000 		lui	a4,%hi(.LC5)	# tmp2748,
 4817 0724 83250700 		lw	a1,%lo(.LC5)(a4)		#,
 4818 0728 97000000 		call	__addsf3		#
 4818      E7800000 
 4819              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4820 0730 97000000 		call	__fixsfsi		#
 4820      E7800000 
 4821              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4822 0738 130505FD 		addi	a0,a0,-48	#,, tmp2358
 4823 073c 97000000 		call	__floatsisf		#
 4823      E7800000 
 4824 0744 93070500 		mv	a5,a0	# tmp2359,
 4825              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4826 0748 93050D00 		mv	a1,s10	#, _685
 4827 074c 13050400 		mv	a0,s0	#, cos_theta
 4828              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4829 0750 138D0700 		mv	s10,a5	# _525, tmp2359
 4830              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4831 0754 97000000 		call	__mulsf3		#
 4831      E7800000 
 4832              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4833 075c 93850D00 		mv	a1,s11	#, _687
 4834              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4835 0760 232EA100 		sw	a0,28(sp)	# tmp1306, %sfp
 4836              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4837 0764 13050900 		mv	a0,s2	#, sin_theta
 4838 0768 97000000 		call	__mulsf3		#
 4838      E7800000 
 4839              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4840 0770 8327C101 		lw	a5,28(sp)		# tmp1306, %sfp
 4841              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4842 0774 93050500 		mv	a1,a0	# tmp2361,
 4843              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4844 0778 13850700 		mv	a0,a5	#, tmp1306
 4845 077c 97000000 		call	__subsf3		#
 4845      E7800000 
 4846              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4847 0784 93050A00 		mv	a1,s4	#, tmp2316
 4848 0788 97000000 		call	__addsf3		#
 4848      E7800000 
 4849              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4850 0790 97000000 		call	__fixsfsi		#
 4850      E7800000 
 4851              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4852 0798 130505FE 		addi	a0,a0,-32	#,, tmp2362
 4853 079c 97000000 		call	__floatsisf		#
 4853      E7800000 
 4854 07a4 930D0500 		mv	s11,a0	# tmp2363,
 4855              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4856 07a8 03A544FF 		lw	a0,-12(s1)		#, MEM[(int *)_3445 + 12B]
 4857 07ac 97000000 		call	__floatsisf		#
 4857      E7800000 
 4858 07b4 93850B00 		mv	a1,s7	#, s
 4859 07b8 97000000 		call	__mulsf3		#
 4859      E7800000 
 4860              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4861 07c0 97000000 		call	__fixsfsi		#
 4861      E7800000 
 4862              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4863 07c8 8327C100 		lw	a5,12(sp)		# _434, %sfp
 4864 07cc 3305F500 		add	a0,a0,a5	# _434, tmp1316, tmp2364
 4865              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4866 07d0 130505FD 		addi	a0,a0,-48	#,, tmp1316
 4867 07d4 97000000 		call	__floatsisf		#
 4867      E7800000 
 4868 07dc 93050400 		mv	a1,s0	#, cos_theta
 4869 07e0 97000000 		call	__mulsf3		#
 4869      E7800000 
 4870 07e8 13080500 		mv	a6,a0	# tmp2365,
 4871              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4872 07ec 93050900 		mv	a1,s2	#, sin_theta
 4873 07f0 13850900 		mv	a0,s3	#, _645
 4874              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4875 07f4 23220103 		sw	a6,36(sp)	# tmp1319, %sfp
 4876              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4877 07f8 97000000 		call	__mulsf3		#
 4877      E7800000 
 4878 0800 232EA100 		sw	a0,28(sp)	# tmp1320, %sfp
 4879              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4880 0804 93050400 		mv	a1,s0	#, cos_theta
 4881 0808 13850C00 		mv	a0,s9	#, _647
 4882 080c 97000000 		call	__mulsf3		#
 4882      E7800000 
 4883              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4884 0814 8328C101 		lw	a7,28(sp)		# tmp1320, %sfp
 4885              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4886 0818 93050500 		mv	a1,a0	# tmp2367,
 4887              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4888 081c 13850800 		mv	a0,a7	#, tmp1320
 4889 0820 97000000 		call	__addsf3		#
 4889      E7800000 
 4890              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4891 0828 93050000 		mv	a1,zero	#,
 4892 082c 97000000 		call	__addsf3		#
 4892      E7800000 
 4893              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4894 0834 97000000 		call	__fixsfsi		#
 4894      E7800000 
 4895              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4896 083c 97000000 		call	__floatsisf		#
 4896      E7800000 
 4897 0844 93050900 		mv	a1,s2	#, sin_theta
 4898 0848 97000000 		call	__mulsf3		#
 4898      E7800000 
 4899              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4900 0850 03284102 		lw	a6,36(sp)		# tmp1319, %sfp
 4901              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4902 0854 93050500 		mv	a1,a0	# tmp2368,
 4903              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4904 0858 13050800 		mv	a0,a6	#, tmp1319
 4905 085c 97000000 		call	__addsf3		#
 4905      E7800000 
 4906              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4907 0864 93050C00 		mv	a1,s8	#, tmp2317
 4908 0868 97000000 		call	__addsf3		#
 4908      E7800000 
 4909              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4910 0870 97000000 		call	__fixsfsi		#
 4910      E7800000 
 4911              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4912 0878 130505FD 		addi	a0,a0,-48	#,, tmp2369
 4913 087c 97000000 		call	__floatsisf		#
 4913      E7800000 
 4914 0884 93070500 		mv	a5,a0	# tmp2370,
 4915              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4916 0888 93050400 		mv	a1,s0	#, cos_theta
 4917 088c 13850900 		mv	a0,s3	#, _645
 4918              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4919 0890 93890700 		mv	s3,a5	# _485, tmp2370
 4920              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4921 0894 97000000 		call	__mulsf3		#
 4921      E7800000 
 4922 089c 232EA100 		sw	a0,28(sp)	# tmp1332, %sfp
 4923              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4924 08a0 93050900 		mv	a1,s2	#, sin_theta
 4925 08a4 13850C00 		mv	a0,s9	#, _647
 4926 08a8 97000000 		call	__mulsf3		#
 4926      E7800000 
 4927              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4928 08b0 8327C101 		lw	a5,28(sp)		# tmp1332, %sfp
 4929              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4930 08b4 93050500 		mv	a1,a0	# tmp2372,
 4931              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4932 08b8 13850700 		mv	a0,a5	#, tmp1332
 4933 08bc 97000000 		call	__subsf3		#
 4933      E7800000 
 4934              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4935 08c4 93050A00 		mv	a1,s4	#, tmp2316
 4936 08c8 97000000 		call	__addsf3		#
 4936      E7800000 
 4937              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4938 08d0 97000000 		call	__fixsfsi		#
 4938      E7800000 
 4939              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4940 08d8 130505FE 		addi	a0,a0,-32	#,, tmp2373
 4941 08dc 97000000 		call	__floatsisf		#
 4941      E7800000 
 4942 08e4 930C0500 		mv	s9,a0	# tmp2374,
 4943              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4944 08e8 93850900 		mv	a1,s3	#, _485
 4945 08ec 13050B00 		mv	a0,s6	#, sin_theta
 4946 08f0 97000000 		call	__mulsf3		#
 4946      E7800000 
 4947 08f8 232EA100 		sw	a0,28(sp)	# tmp1339, %sfp
 4948              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4949 08fc 93850A00 		mv	a1,s5	#, cos_theta
 4950 0900 13850C00 		mv	a0,s9	#, _487
 4951 0904 97000000 		call	__mulsf3		#
 4951      E7800000 
 4952              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4953 090c 8326C101 		lw	a3,28(sp)		# tmp1339, %sfp
 4954              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4955 0910 93050500 		mv	a1,a0	# tmp2376,
 4956              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4957 0914 13850600 		mv	a0,a3	#, tmp1339
 4958 0918 97000000 		call	__addsf3		#
 4958      E7800000 
 4959              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4960 0920 93050A00 		mv	a1,s4	#, tmp2316
 4961 0924 97000000 		call	__addsf3		#
 4961      E7800000 
 4962              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4963 092c 97000000 		call	__fixsfsi		#
 4963      E7800000 
 4964 0934 93060500 		mv	a3,a0	# tmp2377,
 4965              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4966 0938 93850A00 		mv	a1,s5	#, cos_theta
 4967 093c 13850900 		mv	a0,s3	#, _485
 4968              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4969 0940 2322D102 		sw	a3,36(sp)	# tmp1344, %sfp
 4970              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4971 0944 97000000 		call	__mulsf3		#
 4971      E7800000 
 4972 094c 93090500 		mv	s3,a0	# tmp1345, tmp2378
 4973              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4974 0950 93850C00 		mv	a1,s9	#, _487
 4975 0954 13050B00 		mv	a0,s6	#, sin_theta
 4976 0958 97000000 		call	__mulsf3		#
 4976      E7800000 
 4977 0960 93050500 		mv	a1,a0	# tmp2379,
 4978              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4979 0964 13850900 		mv	a0,s3	#, tmp1345
 4980 0968 97000000 		call	__subsf3		#
 4980      E7800000 
 4981              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4982 0970 93050C00 		mv	a1,s8	#, tmp2317
 4983 0974 97000000 		call	__addsf3		#
 4983      E7800000 
 4984              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4985 097c 97000000 		call	__fixsfsi		#
 4985      E7800000 
 4986              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4987 0984 83298102 		lw	s3,40(sp)		# sin_theta, %sfp
 4988              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4989 0988 13060500 		mv	a2,a0	# tmp2380,
 4990              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4991 098c 93050D00 		mv	a1,s10	#, _525
 4992 0990 13850900 		mv	a0,s3	#, sin_theta
 4993              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4994 0994 232EC100 		sw	a2,28(sp)	# tmp1350, %sfp
 4995              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4996 0998 97000000 		call	__mulsf3		#
 4996      E7800000 
 4997 09a0 930C0500 		mv	s9,a0	# tmp1351, tmp2381
 4998              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4999 09a4 93850D00 		mv	a1,s11	#, _527
 5000 09a8 13850A00 		mv	a0,s5	#, cos_theta
 5001 09ac 97000000 		call	__mulsf3		#
 5001      E7800000 
 5002 09b4 93050500 		mv	a1,a0	# tmp2382,
 5003              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5004 09b8 13850C00 		mv	a0,s9	#, tmp1351
 5005 09bc 97000000 		call	__addsf3		#
 5005      E7800000 
 5006              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5007 09c4 93050A00 		mv	a1,s4	#, tmp2316
 5008 09c8 97000000 		call	__addsf3		#
 5008      E7800000 
 5009              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5010 09d0 97000000 		call	__fixsfsi		#
 5010      E7800000 
 5011              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5012 09d8 93050D00 		mv	a1,s10	#, _525
 5013              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5014 09dc 930C0500 		mv	s9,a0	# tmp2383,
 5015              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5016 09e0 13850A00 		mv	a0,s5	#, cos_theta
 5017 09e4 97000000 		call	__mulsf3		#
 5017      E7800000 
 5018 09ec 130D0500 		mv	s10,a0	# tmp1357, tmp2384
 5019              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5020 09f0 93850D00 		mv	a1,s11	#, _527
 5021 09f4 13850900 		mv	a0,s3	#, sin_theta
 5022 09f8 97000000 		call	__mulsf3		#
 5022      E7800000 
 5023 0a00 93050500 		mv	a1,a0	# tmp2385,
 5024              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5025 0a04 13050D00 		mv	a0,s10	#, tmp1357
 5026 0a08 97000000 		call	__subsf3		#
 5026      E7800000 
 5027              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5028 0a10 93050C00 		mv	a1,s8	#, tmp2317
 5029 0a14 97000000 		call	__addsf3		#
 5029      E7800000 
 5030              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5031 0a1c 97000000 		call	__fixsfsi		#
 5031      E7800000 
 5032              	# main_house3d_rotate.c:89:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07,
 5033 0a24 83264102 		lw	a3,36(sp)		# tmp1344, %sfp
 5034 0a28 0326C101 		lw	a2,28(sp)		# tmp1350, %sfp
 5035 0a2c 93850C00 		mv	a1,s9	#, tmp1356
 5036 0a30 97000000 		call	fb_draw_bresenham.constprop.0		#
 5036      E7800000 
 5037              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 5038 0a38 83278104 		lw	a5,72(sp)		# ivtmp.547, %sfp
 5039 0a3c E39A97B4 		bne	a5,s1,.L503	#, ivtmp.547, ivtmp.554,
 5040              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5041 0a40 03254106 		lw	a0,100(sp)		#, %sfp
 5042 0a44 83298102 		lw	s3,40(sp)		# sin_theta, %sfp
 5043 0a48 97000000 		call	sin1		#
 5043      E7800000 
 5044 0a50 97000000 		call	__floatsidf		#
 5044      E7800000 
 5045 0a58 B7070000 		lui	a5,%hi(.LC3)	# tmp2751,
 5046 0a5c 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5047 0a60 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5048 0a64 97000000 		call	__muldf3		#
 5048      E7800000 
 5049              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5050 0a6c 97000000 		call	__truncdfsf2		#
 5050      E7800000 
 5051 0a74 03274103 		lw	a4,52(sp)		# angle.46_677, %sfp
 5052 0a78 B7270000 		li	a5,8192		# tmp1370,
 5053 0a7c 93871700 		addi	a5,a5,1	#, tmp1369, tmp1370
 5054 0a80 B30DF700 		add	s11,a4,a5	# tmp1369, _679, angle.46_677
 5055 0a84 8327C104 		lw	a5,76(sp)		# _679, %sfp
 5056 0a88 93040500 		mv	s1,a0	# sin_theta, tmp2386
 5057 0a8c 63C40700 		blt	a5,zero,.L505	#, _679,,
 5058 0a90 938D0700 		mv	s11,a5	# _679, _679
 5059              	.L505:
 5060 0a94 13970D01 		slli	a4,s11,16	#, angle, _679
 5061 0a98 13570741 		srai	a4,a4,16	#, angle, angle
 5062              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 5063 0a9c 93578740 		srai	a5,a4,8	#, v0, angle
 5064              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5065 0aa0 93CDFDFF 		not	s11,s11	# tmp1377, _679
 5066              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5067 0aa4 139C0701 		slli	s8,a5,16	#, v0.41_1222, v0
 5068              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5069 0aa8 939D0D01 		slli	s11,s11,16	#, v1, tmp1377
 5070 0aac 13F80702 		andi	a6,a5,32	#, _1223, v0
 5071              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5072 0ab0 135C0C01 		srli	s8,s8,16	#, v0.41_1222, v0.41_1222
 5073              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5074 0ab4 93DD0D41 		srai	s11,s11,16	#, v1, v1
 5075 0ab8 13CAF7FF 		not	s4,a5	# v0, v0
 5076 0abc 63140800 		bne	a6,zero,.L507	#, _1223,,
 5077 0ac0 138A0700 		mv	s4,a5	# v0, v0
 5078              	.L507:
 5079              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5080 0ac4 03250103 		lw	a0,48(sp)		#, %sfp
 5081 0ac8 232E0101 		sw	a6,28(sp)	# _1223, %sfp
 5082 0acc 2322E102 		sw	a4,36(sp)	# angle, %sfp
 5083 0ad0 97000000 		call	sin1		#
 5083      E7800000 
 5084              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5085 0ad8 97000000 		call	__floatsidf		#
 5085      E7800000 
 5086 0ae0 B7070000 		lui	a5,%hi(.LC3)	# tmp2754,
 5087 0ae4 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5088 0ae8 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5089              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5090 0aec 137AFA01 		andi	s4,s4,31	#, _1228, v0
 5091              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5092 0af0 97000000 		call	__muldf3		#
 5092      E7800000 
 5093              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5094 0af8 97000000 		call	__truncdfsf2		#
 5094      E7800000 
 5095              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5096 0b00 03278101 		lw	a4,24(sp)		# tmp2267, %sfp
 5097              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5098 0b04 93061A00 		addi	a3,s4,1	#, tmp1391, _1228
 5099              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5100 0b08 93171A00 		slli	a5,s4,1	#, tmp1387, _1228
 5101              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5102 0b0c 93961600 		slli	a3,a3,1	#, tmp1392, tmp1391
 5103              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5104 0b10 B307F700 		add	a5,a4,a5	# tmp1387, tmp1388, tmp2267
 5105              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5106 0b14 B306D700 		add	a3,a4,a3	# tmp1392, tmp1393, tmp2267
 5107              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5108 0b18 03960700 		lh	a2,0(a5)		# pretmp_1321, sin90[_1228]
 5109              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5110 0b1c 0328C101 		lw	a6,28(sp)		# _1223, %sfp
 5111              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5112 0b20 83970600 		lh	a5,0(a3)		# sin90[_1231], sin90[_1231]
 5113              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5114 0b24 2326A104 		sw	a0,76(sp)	# tmp2387, %sfp
 5115              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5116 0b28 B387C740 		sub	a5,a5,a2	# tmp1395, sin90[_1231], pretmp_1321
 5117              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5118 0b2c 63160800 		bne	a6,zero,.L509	#, _1223,,
 5119 0b30 03274102 		lw	a4,36(sp)		# angle, %sfp
 5120 0b34 930D0700 		mv	s11,a4	# v1, angle
 5121              	.L509:
 5122 0b38 93FDFD0F 		andi	s11,s11,0xff	# tmp1398, v1
 5123              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5124 0b3c B387B703 		mul	a5,a5,s11	# tmp1399, tmp1395, tmp1398
 5125              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 5126 0b40 137C0C04 		andi	s8,s8,64	#, tmp1409, v0.41_1222
 5127 0b44 032A8104 		lw	s4,72(sp)		# ivtmp.547, %sfp
 5128              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5129 0b48 93D78740 		srai	a5,a5,8	#, tmp1400, tmp1399
 5130              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5131 0b4c B387C700 		add	a5,a5,a2	# pretmp_1321, tmp1403, tmp1400
 5132 0b50 93970701 		slli	a5,a5,16	#, _1335, tmp1403
 5133 0b54 93D70701 		srli	a5,a5,16	#, _1335, _1335
 5134              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 5135 0b58 13850700 		mv	a0,a5	# v1, _1335
 5136 0b5c 63040C00 		beq	s8,zero,.L511	#, tmp1409,,
 5137 0b60 3305F040 		neg	a0,a5	# v1, _1335
 5138              	.L511:
 5139 0b64 13150501 		slli	a0,a0,16	#,, v1
 5140 0b68 13550541 		srai	a0,a0,16	#,,
 5141 0b6c 97000000 		call	__floatsidf		#
 5141      E7800000 
 5142 0b74 B7070000 		lui	a5,%hi(.LC3)	# tmp2757,
 5143 0b78 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5144 0b7c 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5145 0b80 97000000 		call	__muldf3		#
 5145      E7800000 
 5146              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 5147 0b88 97000000 		call	__truncdfsf2		#
 5147      E7800000 
 5148              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5149 0b90 B7070000 		lui	a5,%hi(.LC5)	# tmp2758,
 5150 0b94 83AC0700 		lw	s9,%lo(.LC5)(a5)		# tmp2307,
 5151              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5152 0b98 B7070000 		lui	a5,%hi(.LC7)	# tmp2759,
 5153 0b9c 03AC0700 		lw	s8,%lo(.LC7)(a5)		# tmp2308,
 5154              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 5155 0ba0 2328A104 		sw	a0,80(sp)	# tmp2388, %sfp
 5156 0ba4 232E6101 		sw	s6,28(sp)	# sin_theta, %sfp
 5157 0ba8 23225103 		sw	s5,36(sp)	# cos_theta, %sfp
 5158              	.L512:
 5159              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5160 0bac 03254A00 		lw	a0,4(s4)		#, MEM[(int *)_41 + 4B]
 5161              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 5162 0bb0 130A8A01 		addi	s4,s4,24	#, ivtmp.547, ivtmp.547
 5163              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5164 0bb4 97000000 		call	__floatsisf		#
 5164      E7800000 
 5165 0bbc 93850B00 		mv	a1,s7	#, s
 5166 0bc0 97000000 		call	__mulsf3		#
 5166      E7800000 
 5167              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5168 0bc8 97000000 		call	__fixsfsi		#
 5168      E7800000 
 5169              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5170 0bd0 832A4101 		lw	s5,20(sp)		# _437, %sfp
 5171 0bd4 33055501 		add	a0,a0,s5	# _437, tmp1420, tmp2389
 5172              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5173 0bd8 130505FE 		addi	a0,a0,-32	#,, tmp1420
 5174 0bdc 97000000 		call	__floatsisf		#
 5174      E7800000 
 5175 0be4 930D0500 		mv	s11,a0	# tmp2390,
 5176              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5177 0be8 03250AFF 		lw	a0,-16(s4)		#, MEM[(int *)_41 + 8B]
 5178 0bec 97000000 		call	__floatsisf		#
 5178      E7800000 
 5179 0bf4 93850B00 		mv	a1,s7	#, s
 5180 0bf8 97000000 		call	__mulsf3		#
 5180      E7800000 
 5181              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5182 0c00 97000000 		call	__fixsfsi		#
 5182      E7800000 
 5183              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5184 0c08 83270101 		lw	a5,16(sp)		# _439, %sfp
 5185 0c0c 3305F500 		add	a0,a0,a5	# _439,, tmp2391
 5186 0c10 97000000 		call	__floatsisf		#
 5186      E7800000 
 5187 0c18 130D0500 		mv	s10,a0	# tmp2392,
 5188              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5189 0c1c 03258AFF 		lw	a0,-8(s4)		#, MEM[(int *)_41 + 16B]
 5190 0c20 97000000 		call	__floatsisf		#
 5190      E7800000 
 5191 0c28 93850B00 		mv	a1,s7	#, s
 5192 0c2c 97000000 		call	__mulsf3		#
 5192      E7800000 
 5193              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5194 0c34 97000000 		call	__fixsfsi		#
 5194      E7800000 
 5195              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5196 0c3c 33055501 		add	a0,a0,s5	# _437, tmp1429, tmp2393
 5197              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5198 0c40 130505FE 		addi	a0,a0,-32	#,, tmp1429
 5199 0c44 97000000 		call	__floatsisf		#
 5199      E7800000 
 5200 0c4c 130B0500 		mv	s6,a0	# tmp2394,
 5201              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5202 0c50 0325CAFF 		lw	a0,-4(s4)		#, MEM[(int *)_41 + 20B]
 5203 0c54 97000000 		call	__floatsisf		#
 5203      E7800000 
 5204 0c5c 93850B00 		mv	a1,s7	#, s
 5205 0c60 97000000 		call	__mulsf3		#
 5205      E7800000 
 5206              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5207 0c68 97000000 		call	__fixsfsi		#
 5207      E7800000 
 5208              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5209 0c70 83270101 		lw	a5,16(sp)		# _439, %sfp
 5210 0c74 3305F500 		add	a0,a0,a5	# _439,, tmp2395
 5211 0c78 97000000 		call	__floatsisf		#
 5211      E7800000 
 5212 0c80 930A0500 		mv	s5,a0	# tmp2396,
 5213              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5214 0c84 03258AFE 		lw	a0,-24(s4)		#, MEM[(int *)_41]
 5215 0c88 97000000 		call	__floatsisf		#
 5215      E7800000 
 5216 0c90 93850B00 		mv	a1,s7	#, s
 5217 0c94 97000000 		call	__mulsf3		#
 5217      E7800000 
 5218              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5219 0c9c 97000000 		call	__fixsfsi		#
 5219      E7800000 
 5220              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5221 0ca4 8327C100 		lw	a5,12(sp)		# _434, %sfp
 5222 0ca8 3305F500 		add	a0,a0,a5	# _434, tmp1438, tmp2397
 5223              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5224 0cac 130505FD 		addi	a0,a0,-48	#,, tmp1438
 5225 0cb0 97000000 		call	__floatsisf		#
 5225      E7800000 
 5226 0cb8 83250105 		lw	a1,80(sp)		#, %sfp
 5227 0cbc 97000000 		call	__mulsf3		#
 5227      E7800000 
 5228 0cc4 13070500 		mv	a4,a0	# tmp2398,
 5229              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5230 0cc8 93850D00 		mv	a1,s11	#, _1142
 5231 0ccc 13050900 		mv	a0,s2	#, sin_theta
 5232              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5233 0cd0 2328E102 		sw	a4,48(sp)	# tmp1441, %sfp
 5234              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5235 0cd4 97000000 		call	__mulsf3		#
 5235      E7800000 
 5236              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5237 0cdc 93050D00 		mv	a1,s10	#, _1144
 5238              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5239 0ce0 2324A102 		sw	a0,40(sp)	# tmp1442, %sfp
 5240              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5241 0ce4 13050400 		mv	a0,s0	#, cos_theta
 5242 0ce8 97000000 		call	__mulsf3		#
 5242      E7800000 
 5243              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5244 0cf0 83288102 		lw	a7,40(sp)		# tmp1442, %sfp
 5245              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5246 0cf4 93050500 		mv	a1,a0	# tmp2400,
 5247              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5248 0cf8 13850800 		mv	a0,a7	#, tmp1442
 5249 0cfc 97000000 		call	__addsf3		#
 5249      E7800000 
 5250              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5251 0d04 93050000 		mv	a1,zero	#,
 5252 0d08 97000000 		call	__addsf3		#
 5252      E7800000 
 5253              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5254 0d10 97000000 		call	__fixsfsi		#
 5254      E7800000 
 5255              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5256 0d18 97000000 		call	__floatsisf		#
 5256      E7800000 
 5257 0d20 93050900 		mv	a1,s2	#, sin_theta
 5258 0d24 97000000 		call	__mulsf3		#
 5258      E7800000 
 5259              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5260 0d2c 03270103 		lw	a4,48(sp)		# tmp1441, %sfp
 5261              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5262 0d30 93050500 		mv	a1,a0	# tmp2401,
 5263              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5264 0d34 13050700 		mv	a0,a4	#, tmp1441
 5265 0d38 97000000 		call	__addsf3		#
 5265      E7800000 
 5266              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5267 0d40 93850C00 		mv	a1,s9	#, tmp2307
 5268 0d44 97000000 		call	__addsf3		#
 5268      E7800000 
 5269              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5270 0d4c 97000000 		call	__fixsfsi		#
 5270      E7800000 
 5271              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5272 0d54 130505FD 		addi	a0,a0,-48	#,, tmp2402
 5273 0d58 97000000 		call	__floatsisf		#
 5273      E7800000 
 5274 0d60 93070500 		mv	a5,a0	# tmp2403,
 5275              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5276 0d64 93850D00 		mv	a1,s11	#, _1142
 5277 0d68 13050400 		mv	a0,s0	#, cos_theta
 5278              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5279 0d6c 938D0700 		mv	s11,a5	# _982, tmp2403
 5280              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5281 0d70 97000000 		call	__mulsf3		#
 5281      E7800000 
 5282              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5283 0d78 93050D00 		mv	a1,s10	#, _1144
 5284              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5285 0d7c 2324A102 		sw	a0,40(sp)	# tmp1454, %sfp
 5286              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5287 0d80 13050900 		mv	a0,s2	#, sin_theta
 5288 0d84 97000000 		call	__mulsf3		#
 5288      E7800000 
 5289              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5290 0d8c 83278102 		lw	a5,40(sp)		# tmp1454, %sfp
 5291              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5292 0d90 93050500 		mv	a1,a0	# tmp2405,
 5293              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5294 0d94 13850700 		mv	a0,a5	#, tmp1454
 5295 0d98 97000000 		call	__subsf3		#
 5295      E7800000 
 5296              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5297 0da0 93050C00 		mv	a1,s8	#, tmp2308
 5298 0da4 97000000 		call	__addsf3		#
 5298      E7800000 
 5299              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5300 0dac 97000000 		call	__fixsfsi		#
 5300      E7800000 
 5301              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5302 0db4 130505FE 		addi	a0,a0,-32	#,, tmp2406
 5303 0db8 97000000 		call	__floatsisf		#
 5303      E7800000 
 5304 0dc0 130D0500 		mv	s10,a0	# tmp2407,
 5305              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5306 0dc4 03254AFF 		lw	a0,-12(s4)		#, MEM[(int *)_41 + 12B]
 5307 0dc8 97000000 		call	__floatsisf		#
 5307      E7800000 
 5308 0dd0 93850B00 		mv	a1,s7	#, s
 5309 0dd4 97000000 		call	__mulsf3		#
 5309      E7800000 
 5310              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5311 0ddc 97000000 		call	__fixsfsi		#
 5311      E7800000 
 5312              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5313 0de4 8327C100 		lw	a5,12(sp)		# _434, %sfp
 5314 0de8 3305F500 		add	a0,a0,a5	# _434, tmp1464, tmp2408
 5315              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5316 0dec 130505FD 		addi	a0,a0,-48	#,, tmp1464
 5317 0df0 97000000 		call	__floatsisf		#
 5317      E7800000 
 5318 0df8 93050400 		mv	a1,s0	#, cos_theta
 5319 0dfc 97000000 		call	__mulsf3		#
 5319      E7800000 
 5320 0e04 13080500 		mv	a6,a0	# tmp2409,
 5321              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5322 0e08 93050B00 		mv	a1,s6	#, _1102
 5323 0e0c 13850400 		mv	a0,s1	#, sin_theta
 5324              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5325 0e10 23280103 		sw	a6,48(sp)	# tmp1467, %sfp
 5326              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5327 0e14 97000000 		call	__mulsf3		#
 5327      E7800000 
 5328              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5329 0e1c 93850A00 		mv	a1,s5	#, _1104
 5330              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5331 0e20 2324A102 		sw	a0,40(sp)	# tmp1468, %sfp
 5332              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5333 0e24 13050400 		mv	a0,s0	#, cos_theta
 5334 0e28 97000000 		call	__mulsf3		#
 5334      E7800000 
 5335              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5336 0e30 83288102 		lw	a7,40(sp)		# tmp1468, %sfp
 5337              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5338 0e34 93050500 		mv	a1,a0	# tmp2411,
 5339              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5340 0e38 13850800 		mv	a0,a7	#, tmp1468
 5341 0e3c 97000000 		call	__addsf3		#
 5341      E7800000 
 5342              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5343 0e44 93050000 		mv	a1,zero	#,
 5344 0e48 97000000 		call	__addsf3		#
 5344      E7800000 
 5345              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5346 0e50 97000000 		call	__fixsfsi		#
 5346      E7800000 
 5347              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5348 0e58 97000000 		call	__floatsisf		#
 5348      E7800000 
 5349 0e60 93850400 		mv	a1,s1	#, sin_theta
 5350 0e64 97000000 		call	__mulsf3		#
 5350      E7800000 
 5351              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5352 0e6c 03280103 		lw	a6,48(sp)		# tmp1467, %sfp
 5353              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5354 0e70 93050500 		mv	a1,a0	# tmp2412,
 5355              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5356 0e74 13050800 		mv	a0,a6	#, tmp1467
 5357 0e78 97000000 		call	__addsf3		#
 5357      E7800000 
 5358              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5359 0e80 93850C00 		mv	a1,s9	#, tmp2307
 5360 0e84 97000000 		call	__addsf3		#
 5360      E7800000 
 5361              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5362 0e8c 97000000 		call	__fixsfsi		#
 5362      E7800000 
 5363              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5364 0e94 130505FD 		addi	a0,a0,-48	#,, tmp2413
 5365 0e98 97000000 		call	__floatsisf		#
 5365      E7800000 
 5366 0ea0 93070500 		mv	a5,a0	# tmp2414,
 5367              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5368 0ea4 93050B00 		mv	a1,s6	#, _1102
 5369 0ea8 13050400 		mv	a0,s0	#, cos_theta
 5370              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5371 0eac 138B0700 		mv	s6,a5	# _942, tmp2414
 5372              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5373 0eb0 97000000 		call	__mulsf3		#
 5373      E7800000 
 5374              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5375 0eb8 93850A00 		mv	a1,s5	#, _1104
 5376              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5377 0ebc 2324A102 		sw	a0,40(sp)	# tmp1480, %sfp
 5378              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5379 0ec0 13850400 		mv	a0,s1	#, sin_theta
 5380 0ec4 97000000 		call	__mulsf3		#
 5380      E7800000 
 5381              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5382 0ecc 83278102 		lw	a5,40(sp)		# tmp1480, %sfp
 5383              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5384 0ed0 93050500 		mv	a1,a0	# tmp2416,
 5385              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5386 0ed4 13850700 		mv	a0,a5	#, tmp1480
 5387 0ed8 97000000 		call	__subsf3		#
 5387      E7800000 
 5388              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5389 0ee0 93050C00 		mv	a1,s8	#, tmp2308
 5390 0ee4 97000000 		call	__addsf3		#
 5390      E7800000 
 5391              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5392 0eec 97000000 		call	__fixsfsi		#
 5392      E7800000 
 5393              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5394 0ef4 130505FE 		addi	a0,a0,-32	#,, tmp2417
 5395 0ef8 97000000 		call	__floatsisf		#
 5395      E7800000 
 5396 0f00 930A0500 		mv	s5,a0	# tmp2418,
 5397              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5398 0f04 0325C101 		lw	a0,28(sp)		#, %sfp
 5399 0f08 93050B00 		mv	a1,s6	#, _942
 5400 0f0c 97000000 		call	__mulsf3		#
 5400      E7800000 
 5401 0f14 2324A102 		sw	a0,40(sp)	# tmp1487, %sfp
 5402              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5403 0f18 03254102 		lw	a0,36(sp)		#, %sfp
 5404 0f1c 93850A00 		mv	a1,s5	#, _944
 5405 0f20 97000000 		call	__mulsf3		#
 5405      E7800000 
 5406              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5407 0f28 83268102 		lw	a3,40(sp)		# tmp1487, %sfp
 5408              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5409 0f2c 93050500 		mv	a1,a0	# tmp2420,
 5410              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5411 0f30 13850600 		mv	a0,a3	#, tmp1487
 5412 0f34 97000000 		call	__addsf3		#
 5412      E7800000 
 5413              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5414 0f3c 93050C00 		mv	a1,s8	#, tmp2308
 5415 0f40 97000000 		call	__addsf3		#
 5415      E7800000 
 5416              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5417 0f48 97000000 		call	__fixsfsi		#
 5417      E7800000 
 5418 0f50 93060500 		mv	a3,a0	# tmp2421,
 5419              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5420 0f54 03254102 		lw	a0,36(sp)		#, %sfp
 5421 0f58 93050B00 		mv	a1,s6	#, _942
 5422              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5423 0f5c 232AD102 		sw	a3,52(sp)	# tmp1492, %sfp
 5424              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5425 0f60 97000000 		call	__mulsf3		#
 5425      E7800000 
 5426 0f68 2324A102 		sw	a0,40(sp)	# tmp1493, %sfp
 5427              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5428 0f6c 0325C101 		lw	a0,28(sp)		#, %sfp
 5429 0f70 93850A00 		mv	a1,s5	#, _944
 5430 0f74 97000000 		call	__mulsf3		#
 5430      E7800000 
 5431              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5432 0f7c 03288102 		lw	a6,40(sp)		# tmp1493, %sfp
 5433              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5434 0f80 93050500 		mv	a1,a0	# tmp2423,
 5435              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5436 0f84 13050800 		mv	a0,a6	#, tmp1493
 5437 0f88 97000000 		call	__subsf3		#
 5437      E7800000 
 5438              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5439 0f90 93850C00 		mv	a1,s9	#, tmp2307
 5440 0f94 97000000 		call	__addsf3		#
 5440      E7800000 
 5441              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5442 0f9c 97000000 		call	__fixsfsi		#
 5442      E7800000 
 5443 0fa4 13060500 		mv	a2,a0	# tmp2424,
 5444              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5445 0fa8 93850D00 		mv	a1,s11	#, _982
 5446 0fac 13850900 		mv	a0,s3	#, sin_theta
 5447              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5448 0fb0 2328C102 		sw	a2,48(sp)	# tmp1498, %sfp
 5449              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5450 0fb4 97000000 		call	__mulsf3		#
 5450      E7800000 
 5451              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5452 0fbc 832AC104 		lw	s5,76(sp)		# cos_theta, %sfp
 5453              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5454 0fc0 2324A102 		sw	a0,40(sp)	# tmp1499, %sfp
 5455              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5456 0fc4 93050D00 		mv	a1,s10	#, _984
 5457 0fc8 13850A00 		mv	a0,s5	#, cos_theta
 5458 0fcc 97000000 		call	__mulsf3		#
 5458      E7800000 
 5459              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5460 0fd4 03288102 		lw	a6,40(sp)		# tmp1499, %sfp
 5461              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5462 0fd8 93050500 		mv	a1,a0	# tmp2426,
 5463              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5464 0fdc 13050800 		mv	a0,a6	#, tmp1499
 5465 0fe0 97000000 		call	__addsf3		#
 5465      E7800000 
 5466              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5467 0fe8 93050C00 		mv	a1,s8	#, tmp2308
 5468 0fec 97000000 		call	__addsf3		#
 5468      E7800000 
 5469              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5470 0ff4 97000000 		call	__fixsfsi		#
 5470      E7800000 
 5471 0ffc 13080500 		mv	a6,a0	# tmp2427,
 5472              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5473 1000 93850D00 		mv	a1,s11	#, _982
 5474 1004 13850A00 		mv	a0,s5	#, cos_theta
 5475              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5476 1008 930A0800 		mv	s5,a6	# tmp1504, tmp2427
 5477              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5478 100c 97000000 		call	__mulsf3		#
 5478      E7800000 
 5479 1014 2324A102 		sw	a0,40(sp)	# tmp1505, %sfp
 5480              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5481 1018 93050D00 		mv	a1,s10	#, _984
 5482 101c 13850900 		mv	a0,s3	#, sin_theta
 5483 1020 97000000 		call	__mulsf3		#
 5483      E7800000 
 5484              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5485 1028 03288102 		lw	a6,40(sp)		# tmp1505, %sfp
 5486              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5487 102c 93050500 		mv	a1,a0	# tmp2429,
 5488              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5489 1030 13050800 		mv	a0,a6	#, tmp1505
 5490 1034 97000000 		call	__subsf3		#
 5490      E7800000 
 5491              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5492 103c 93850C00 		mv	a1,s9	#, tmp2307
 5493 1040 97000000 		call	__addsf3		#
 5493      E7800000 
 5494              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5495 1048 97000000 		call	__fixsfsi		#
 5495      E7800000 
 5496              	# main_house3d_rotate.c:89:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07,
 5497 1050 83264103 		lw	a3,52(sp)		# tmp1492, %sfp
 5498 1054 03260103 		lw	a2,48(sp)		# tmp1498, %sfp
 5499 1058 93850A00 		mv	a1,s5	#, tmp1504
 5500 105c 97000000 		call	fb_draw_bresenham.constprop.0		#
 5500      E7800000 
 5501              	# main_house3d_rotate.c:67:   for (int i = 0; i < s - 1; i = i + 2) {
 5502 1064 83274105 		lw	a5,84(sp)		# _3449, %sfp
 5503 1068 E312FAB4 		bne	s4,a5,.L512	#, ivtmp.547, _3449,
 5504              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5505 106c 37040000 		lui	s0,%hi(.LANCHOR2)	# tmp2768,
 5506 1070 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2767, tmp2768,
 5507 1074 03A5071F 		lw	a0,496(a5)		#, MEM[(struct point *)&left_bottom].x
 5508 1078 97000000 		call	__floatsisf		#
 5508      E7800000 
 5509 1080 93850B00 		mv	a1,s7	#, s
 5510 1084 97000000 		call	__mulsf3		#
 5510      E7800000 
 5511              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5512 108c 97000000 		call	__fixsfsi		#
 5512      E7800000 
 5513              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5514 1094 13070400 		addi	a4,s0,%lo(.LANCHOR2)	# tmp2769, tmp2770,
 5515              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5516 1098 832AC100 		lw	s5,12(sp)		# _434, %sfp
 5517              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5518 109c 93070500 		mv	a5,a0	# tmp2430,
 5519              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5520 10a0 0325871F 		lw	a0,504(a4)		#, MEM[(struct point *)&left_bottom].z
 5521              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5522 10a4 B3875701 		add	a5,a5,s5	# _434, _328, tmp2430
 5523 10a8 232EF100 		sw	a5,28(sp)	# _328, %sfp
 5524              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5525 10ac 97000000 		call	__floatsisf		#
 5525      E7800000 
 5526 10b4 93850B00 		mv	a1,s7	#, s
 5527 10b8 97000000 		call	__mulsf3		#
 5527      E7800000 
 5528              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5529 10c0 97000000 		call	__fixsfsi		#
 5529      E7800000 
 5530              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5531 10c8 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2773, tmp2774,
 5532              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5533 10cc 130A0500 		mv	s4,a0	# tmp2431,
 5534              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5535 10d0 03A5C71F 		lw	a0,508(a5)		#, MEM[(struct point *)&left_bottom + 12B].x
 5536              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5537 10d4 832C0101 		lw	s9,16(sp)		# _439, %sfp
 5538              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5539 10d8 97000000 		call	__floatsisf		#
 5539      E7800000 
 5540 10e0 93850B00 		mv	a1,s7	#, s
 5541 10e4 97000000 		call	__mulsf3		#
 5541      E7800000 
 5542              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5543 10ec 97000000 		call	__fixsfsi		#
 5543      E7800000 
 5544              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5545 10f4 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2776, tmp2777,
 5546              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5547 10f8 13090500 		mv	s2,a0	# tmp2432,
 5548              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5549 10fc 03A50720 		lw	a0,512(a5)		#, MEM[(struct point *)&left_bottom + 12B].y
 5550              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5551 1100 33095901 		add	s2,s2,s5	# _434, _331, tmp2432
 5552              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5553 1104 330A9A01 		add	s4,s4,s9	# _439, _330, tmp2431
 5554              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5555 1108 97000000 		call	__floatsisf		#
 5555      E7800000 
 5556 1110 93850B00 		mv	a1,s7	#, s
 5557 1114 97000000 		call	__mulsf3		#
 5557      E7800000 
 5558              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5559 111c 97000000 		call	__fixsfsi		#
 5559      E7800000 
 5560              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5561 1124 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2779, tmp2780,
 5562              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5563 1128 130C0500 		mv	s8,a0	# tmp2433,
 5564              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5565 112c 03A54720 		lw	a0,516(a5)		#, MEM[(struct point *)&left_bottom + 12B].z
 5566              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5567 1130 832A4101 		lw	s5,20(sp)		# _437, %sfp
 5568              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5569 1134 97000000 		call	__floatsisf		#
 5569      E7800000 
 5570 113c 93850B00 		mv	a1,s7	#, s
 5571 1140 97000000 		call	__mulsf3		#
 5571      E7800000 
 5572              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5573 1148 97000000 		call	__fixsfsi		#
 5573      E7800000 
 5574              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5575 1150 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2782, tmp2783,
 5576              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5577 1154 130B0500 		mv	s6,a0	# tmp2434,
 5578              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5579 1158 03A5471F 		lw	a0,500(a5)		#, MEM[(struct point *)&left_bottom].y
 5580              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5581 115c 330C5C01 		add	s8,s8,s5	# _437, _332, tmp2433
 5582              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5583 1160 330B9B01 		add	s6,s6,s9	# _439, _333, tmp2434
 5584              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5585 1164 97000000 		call	__floatsisf		#
 5585      E7800000 
 5586 116c 93850B00 		mv	a1,s7	#, s
 5587 1170 97000000 		call	__mulsf3		#
 5587      E7800000 
 5588              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5589 1178 97000000 		call	__fixsfsi		#
 5589      E7800000 
 5590              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5591 1180 83274106 		lw	a5,100(sp)		# _668, %sfp
 5592              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5593 1184 B30A5501 		add	s5,a0,s5	# _437, tmp1541, tmp2435
 5594              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5595 1188 938A0AFE 		addi	s5,s5,-32	#, _1513, tmp1541
 5596              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5597 118c 63C80700 		blt	a5,zero,.L513	#, _668,,
 5598 1190 03278107 		lw	a4,120(sp)		# angle.39_698, %sfp
 5599 1194 2320F104 		sw	a5,64(sp)	# _668, %sfp
 5600 1198 232EE102 		sw	a4,60(sp)	# angle.39_698, %sfp
 5601              	.L513:
 5602              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5603 119c 032DC103 		lw	s10,60(sp)		# _699, %sfp
 5604 11a0 8327C102 		lw	a5,44(sp)		# tmp1131, %sfp
 5605              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5606 11a4 130C0CFE 		addi	s8,s8,-32	#, _1473, _332
 5607              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5608 11a8 B307FD00 		add	a5,s10,a5	# tmp1131, tmp1542, _699
 5609              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5610 11ac 939C0701 		slli	s9,a5,16	#, angle, tmp1542
 5611 11b0 93DC0C41 		srai	s9,s9,16	#, angle, angle
 5612              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5613 11b4 93970701 		slli	a5,a5,16	#, prephitmp_800, tmp1542
 5614 11b8 93D70701 		srli	a5,a5,16	#, prephitmp_800, prephitmp_800
 5615              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5616 11bc 13850C00 		mv	a0,s9	#, angle
 5617              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5618 11c0 2322F102 		sw	a5,36(sp)	# prephitmp_800, %sfp
 5619              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5620 11c4 97000000 		call	sin1		#
 5620      E7800000 
 5621              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 5622 11cc 97000000 		call	__floatsidf		#
 5622      E7800000 
 5623 11d4 B7070000 		lui	a5,%hi(.LC3)	# tmp2792,
 5624 11d8 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5625 11dc 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5626 11e0 97000000 		call	__muldf3		#
 5626      E7800000 
 5627              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 5628 11e8 97000000 		call	__truncdfsf2		#
 5628      E7800000 
 5629 11f0 13040500 		mv	s0,a0	# tmp2436,
 5630              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5631 11f4 13850A00 		mv	a0,s5	#, _1513
 5632 11f8 97000000 		call	__floatsisf		#
 5632      E7800000 
 5633 1200 930D0500 		mv	s11,a0	# tmp2437,
 5634              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5635 1204 13050A00 		mv	a0,s4	#, _330
 5636 1208 97000000 		call	__floatsisf		#
 5636      E7800000 
 5637 1210 130A0500 		mv	s4,a0	# tmp2438,
 5638              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5639 1214 93850D00 		mv	a1,s11	#, _1537
 5640 1218 13050400 		mv	a0,s0	#, cos_theta
 5641 121c 97000000 		call	__mulsf3		#
 5641      E7800000 
 5642 1224 930A0500 		mv	s5,a0	# tmp1550, tmp2439
 5643              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5644 1228 93050A00 		mv	a1,s4	#, _1539
 5645 122c 13850400 		mv	a0,s1	#, sin_theta
 5646 1230 97000000 		call	__mulsf3		#
 5646      E7800000 
 5647 1238 93050500 		mv	a1,a0	# tmp2440,
 5648              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5649 123c 13850A00 		mv	a0,s5	#, tmp1550
 5650 1240 97000000 		call	__subsf3		#
 5650      E7800000 
 5651              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5652 1248 B7070000 		lui	a5,%hi(.LC7)	# tmp2793,
 5653 124c 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5654 1250 97000000 		call	__addsf3		#
 5654      E7800000 
 5655              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5656 1258 97000000 		call	__fixsfsi		#
 5656      E7800000 
 5657              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5658 1260 93850D00 		mv	a1,s11	#, _1537
 5659              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5660 1264 930A0500 		mv	s5,a0	# tmp2441,
 5661              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5662 1268 13850400 		mv	a0,s1	#, sin_theta
 5663 126c 97000000 		call	__mulsf3		#
 5663      E7800000 
 5664 1274 930D0500 		mv	s11,a0	# tmp1555, tmp2442
 5665              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5666 1278 93050A00 		mv	a1,s4	#, _1539
 5667 127c 13050400 		mv	a0,s0	#, cos_theta
 5668 1280 97000000 		call	__mulsf3		#
 5668      E7800000 
 5669 1288 93050500 		mv	a1,a0	# tmp2443,
 5670              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5671 128c 13850D00 		mv	a0,s11	#, tmp1555
 5672 1290 97000000 		call	__addsf3		#
 5672      E7800000 
 5673              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5674 1298 93050000 		mv	a1,zero	#,
 5675 129c 97000000 		call	__addsf3		#
 5675      E7800000 
 5676              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5677 12a4 97000000 		call	__fixsfsi		#
 5677      E7800000 
 5678              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 5679 12ac 83250104 		lw	a1,64(sp)		# angle, %sfp
 5680              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5681 12b0 930D0500 		mv	s11,a0	# _1549, tmp2444
 5682 12b4 93060D00 		mv	a3,s10	# _1006, _699
 5683              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 5684 12b8 93D78540 		srai	a5,a1,8	#, v0, angle
 5685              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5686 12bc 13960701 		slli	a2,a5,16	#, v0.41_1555, v0
 5687              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5688 12c0 13F70702 		andi	a4,a5,32	#, tmp1562, v0
 5689              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5690 12c4 13560601 		srli	a2,a2,16	#, v0.41_1555, v0.41_1555
 5691              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5692 12c8 630A0700 		beq	a4,zero,.L514	#, tmp1562,,
 5693              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5694 12cc 13C7F5FF 		not	a4,a1	# tmp1566, angle
 5695              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5696 12d0 93160701 		slli	a3,a4,16	#, _1006, tmp1566
 5697              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5698 12d4 93C7F7FF 		not	a5,a5	# v0, v0
 5699              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5700 12d8 93D60601 		srli	a3,a3,16	#, _1006, _1006
 5701              	.L514:
 5702              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5703 12dc 83258101 		lw	a1,24(sp)		# tmp2267, %sfp
 5704 12e0 93F7F701 		andi	a5,a5,31	#, _1561, v0
 5705              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5706 12e4 13871700 		addi	a4,a5,1	#, tmp1574, _1561
 5707 12e8 13171700 		slli	a4,a4,1	#, tmp1575, tmp1574
 5708              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5709 12ec 93971700 		slli	a5,a5,1	#, tmp1570, _1561
 5710              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5711 12f0 3387E500 		add	a4,a1,a4	# tmp1575, tmp1576, tmp2267
 5712              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5713 12f4 B387F500 		add	a5,a1,a5	# tmp1570, tmp1571, tmp2267
 5714 12f8 83950700 		lh	a1,0(a5)		# _1562, sin90[_1561]
 5715              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5716 12fc 83170700 		lh	a5,0(a4)		# sin90[_1564], sin90[_1564]
 5717              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5718 1300 93F6F60F 		andi	a3,a3,0xff	# tmp1580, _1006
 5719              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5720 1304 13770604 		andi	a4,a2,64	#, tmp1588, v0.41_1555
 5721              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5722 1308 B387B740 		sub	a5,a5,a1	# tmp1578, sin90[_1564], _1562
 5723              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5724 130c B387D702 		mul	a5,a5,a3	# tmp1581, tmp1578, tmp1580
 5725              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5726 1310 93D78740 		srai	a5,a5,8	#, tmp1582, tmp1581
 5727              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5728 1314 B387B700 		add	a5,a5,a1	# _1562, tmp1585, tmp1582
 5729 1318 93970701 		slli	a5,a5,16	#, _1576, tmp1585
 5730 131c 93D70701 		srli	a5,a5,16	#, _1576, _1576
 5731              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5732 1320 63080700 		beq	a4,zero,.L515	#, tmp1588,,
 5733              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5734 1324 B307F040 		neg	a5,a5	# tmp1590, _1576
 5735 1328 93970701 		slli	a5,a5,16	#, _1576, tmp1590
 5736 132c 93D70701 		srli	a5,a5,16	#, _1576, _1576
 5737              	.L515:
 5738              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5739 1330 13950701 		slli	a0,a5,16	#,, _1576
 5740 1334 13550541 		srai	a0,a0,16	#,,
 5741 1338 97000000 		call	__floatsidf		#
 5741      E7800000 
 5742 1340 B7070000 		lui	a5,%hi(.LC3)	# tmp2798,
 5743 1344 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5744 1348 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5745              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5746 134c 938A0AFE 		addi	s5,s5,-32	#, _1355, _1543
 5747              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5748 1350 97000000 		call	__muldf3		#
 5748      E7800000 
 5749              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5750 1358 97000000 		call	__truncdfsf2		#
 5750      E7800000 
 5751 1360 130A0500 		mv	s4,a0	# tmp2445,
 5752              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5753 1364 13050C00 		mv	a0,s8	#, _1473
 5754 1368 97000000 		call	__floatsisf		#
 5754      E7800000 
 5755 1370 93070500 		mv	a5,a0	# tmp2446,
 5756              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5757 1374 13050B00 		mv	a0,s6	#, _333
 5758              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5759 1378 138B0700 		mv	s6,a5	# _1497, tmp2446
 5760              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5761 137c 97000000 		call	__floatsisf		#
 5761      E7800000 
 5762 1384 130C0500 		mv	s8,a0	# tmp2447,
 5763              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5764 1388 93050400 		mv	a1,s0	#, cos_theta
 5765 138c 13050B00 		mv	a0,s6	#, _1497
 5766 1390 97000000 		call	__mulsf3		#
 5766      E7800000 
 5767 1398 130D0500 		mv	s10,a0	# tmp1596, tmp2448
 5768              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5769 139c 93050C00 		mv	a1,s8	#, _1499
 5770 13a0 13050A00 		mv	a0,s4	#, sin_theta
 5771 13a4 97000000 		call	__mulsf3		#
 5771      E7800000 
 5772 13ac 93050500 		mv	a1,a0	# tmp2449,
 5773              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5774 13b0 13050D00 		mv	a0,s10	#, tmp1596
 5775 13b4 97000000 		call	__subsf3		#
 5775      E7800000 
 5776              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5777 13bc B7070000 		lui	a5,%hi(.LC7)	# tmp2799,
 5778 13c0 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5779 13c4 97000000 		call	__addsf3		#
 5779      E7800000 
 5780              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5781 13cc 97000000 		call	__fixsfsi		#
 5781      E7800000 
 5782 13d4 93070500 		mv	a5,a0	# tmp2450,
 5783              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5784 13d8 93050B00 		mv	a1,s6	#, _1497
 5785 13dc 13050A00 		mv	a0,s4	#, sin_theta
 5786              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5787 13e0 138B0700 		mv	s6,a5	# _1503, tmp2450
 5788              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5789 13e4 97000000 		call	__mulsf3		#
 5789      E7800000 
 5790 13ec 130D0500 		mv	s10,a0	# tmp1601, tmp2451
 5791              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5792 13f0 93050400 		mv	a1,s0	#, cos_theta
 5793 13f4 13050C00 		mv	a0,s8	#, _1499
 5794 13f8 97000000 		call	__mulsf3		#
 5794      E7800000 
 5795 1400 93050500 		mv	a1,a0	# tmp2452,
 5796              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5797 1404 13050D00 		mv	a0,s10	#, tmp1601
 5798 1408 97000000 		call	__addsf3		#
 5798      E7800000 
 5799              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5800 1410 93050000 		mv	a1,zero	#,
 5801 1414 97000000 		call	__addsf3		#
 5801      E7800000 
 5802              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5803 141c 97000000 		call	__fixsfsi		#
 5803      E7800000 
 5804              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5805 1424 97000000 		call	__floatsisf		#
 5805      E7800000 
 5806 142c 93050A00 		mv	a1,s4	#, sin_theta
 5807 1430 97000000 		call	__mulsf3		#
 5807      E7800000 
 5808 1438 93070500 		mv	a5,a0	# tmp2453,
 5809              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5810 143c 130509FD 		addi	a0,s2,-48	#,, _331
 5811              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5812 1440 13890700 		mv	s2,a5	# tmp1607, tmp2453
 5813              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5814 1444 97000000 		call	__floatsisf		#
 5814      E7800000 
 5815 144c 93050400 		mv	a1,s0	#, cos_theta
 5816 1450 97000000 		call	__mulsf3		#
 5816      E7800000 
 5817 1458 93050500 		mv	a1,a0	# tmp2454,
 5818              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5819 145c 13050900 		mv	a0,s2	#, tmp1607
 5820 1460 97000000 		call	__addsf3		#
 5820      E7800000 
 5821              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5822 1468 370D0000 		lui	s10,%hi(.LC5)	# tmp2800,
 5823 146c 83250D00 		lw	a1,%lo(.LC5)(s10)		#,
 5824 1470 97000000 		call	__addsf3		#
 5824      E7800000 
 5825              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5826 1478 97000000 		call	__fixsfsi		#
 5826      E7800000 
 5827              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5828 1480 8327C101 		lw	a5,28(sp)		# _328, %sfp
 5829              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5830 1484 130C0500 		mv	s8,a0	# tmp2455,
 5831              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5832 1488 138507FD 		addi	a0,a5,-48	#,, _328
 5833 148c 97000000 		call	__floatsisf		#
 5833      E7800000 
 5834 1494 93050400 		mv	a1,s0	#, cos_theta
 5835 1498 97000000 		call	__mulsf3		#
 5835      E7800000 
 5836 14a0 13090500 		mv	s2,a0	# tmp2456,
 5837              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5838 14a4 13850D00 		mv	a0,s11	#, _1549
 5839 14a8 97000000 		call	__floatsisf		#
 5839      E7800000 
 5840 14b0 93850400 		mv	a1,s1	#, sin_theta
 5841 14b4 97000000 		call	__mulsf3		#
 5841      E7800000 
 5842 14bc 93050500 		mv	a1,a0	# tmp2457,
 5843              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5844 14c0 13050900 		mv	a0,s2	#, tmp1616
 5845 14c4 97000000 		call	__addsf3		#
 5845      E7800000 
 5846              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5847 14cc 83250D00 		lw	a1,%lo(.LC5)(s10)		#,
 5848 14d0 97000000 		call	__addsf3		#
 5848      E7800000 
 5849              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5850 14d8 97000000 		call	__fixsfsi		#
 5850      E7800000 
 5851              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5852 14e0 83274104 		lw	a5,68(sp)		# _508, %sfp
 5853              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5854 14e4 130D05FD 		addi	s10,a0,-48	#, _1352, tmp2458
 5855              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5856 14e8 63C80700 		blt	a5,zero,.L516	#, _508,,
 5857 14ec 03278105 		lw	a4,88(sp)		# angle.44_513, %sfp
 5858 14f0 232CF102 		sw	a5,56(sp)	# _508, %sfp
 5859 14f4 2320E102 		sw	a4,32(sp)	# angle.44_513, %sfp
 5860              	.L516:
 5861              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5862 14f8 0327C102 		lw	a4,44(sp)		# tmp1131, %sfp
 5863 14fc 83270102 		lw	a5,32(sp)		# _514, %sfp
 5864 1500 B387E700 		add	a5,a5,a4	# tmp1131, tmp1623, _514
 5865              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5866 1504 13970701 		slli	a4,a5,16	#, angle, tmp1623
 5867 1508 13570741 		srai	a4,a4,16	#, angle, angle
 5868              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5869 150c 93970701 		slli	a5,a5,16	#, _1370, tmp1623
 5870              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5871 1510 13050700 		mv	a0,a4	#, angle
 5872              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5873 1514 93D70701 		srli	a5,a5,16	#, _1370, _1370
 5874              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5875 1518 232EE100 		sw	a4,28(sp)	# angle, %sfp
 5876              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5877 151c 2324F102 		sw	a5,40(sp)	# _1370, %sfp
 5878              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5879 1520 97000000 		call	sin1		#
 5879      E7800000 
 5880              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5881 1528 97000000 		call	__floatsidf		#
 5881      E7800000 
 5882 1530 B7070000 		lui	a5,%hi(.LC3)	# tmp2810,
 5883 1534 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5884 1538 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5885 153c 97000000 		call	__muldf3		#
 5885      E7800000 
 5886              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5887 1544 97000000 		call	__truncdfsf2		#
 5887      E7800000 
 5888 154c 13090500 		mv	s2,a0	# tmp2459,
 5889              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5890 1550 13050D00 		mv	a0,s10	#, _1352
 5891 1554 97000000 		call	__floatsisf		#
 5891      E7800000 
 5892 155c 130D0500 		mv	s10,a0	# tmp2460,
 5893              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5894 1560 13850A00 		mv	a0,s5	#, _1355
 5895 1564 97000000 		call	__floatsisf		#
 5895      E7800000 
 5896 156c 930A0500 		mv	s5,a0	# tmp2461,
 5897              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5898 1570 13050CFD 		addi	a0,s8,-48	#,, _1423
 5899 1574 97000000 		call	__floatsisf		#
 5899      E7800000 
 5900 157c 130C0500 		mv	s8,a0	# tmp2462,
 5901              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5902 1580 13050BFE 		addi	a0,s6,-32	#,, _1503
 5903 1584 97000000 		call	__floatsisf		#
 5903      E7800000 
 5904 158c 130B0500 		mv	s6,a0	# tmp2463,
 5905              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5906 1590 93050C00 		mv	a1,s8	#, _1337
 5907 1594 13850900 		mv	a0,s3	#, sin_theta
 5908 1598 97000000 		call	__mulsf3		#
 5908      E7800000 
 5909 15a0 930D0500 		mv	s11,a0	# tmp1633, tmp2464
 5910              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5911 15a4 93050900 		mv	a1,s2	#, cos_theta
 5912 15a8 13050B00 		mv	a0,s6	#, _1339
 5913 15ac 97000000 		call	__mulsf3		#
 5913      E7800000 
 5914 15b4 93050500 		mv	a1,a0	# tmp2465,
 5915              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5916 15b8 13850D00 		mv	a0,s11	#, tmp1633
 5917 15bc 97000000 		call	__addsf3		#
 5917      E7800000 
 5918              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5919 15c4 B7070000 		lui	a5,%hi(.LC7)	# tmp2811,
 5920 15c8 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5921 15cc 97000000 		call	__addsf3		#
 5921      E7800000 
 5922              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5923 15d4 97000000 		call	__fixsfsi		#
 5923      E7800000 
 5924 15dc 930D0500 		mv	s11,a0	# tmp2466,
 5925              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5926 15e0 93050900 		mv	a1,s2	#, cos_theta
 5927 15e4 13050C00 		mv	a0,s8	#, _1337
 5928 15e8 97000000 		call	__mulsf3		#
 5928      E7800000 
 5929 15f0 130C0500 		mv	s8,a0	# tmp1639, tmp2467
 5930              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5931 15f4 93050B00 		mv	a1,s6	#, _1339
 5932 15f8 13850900 		mv	a0,s3	#, sin_theta
 5933 15fc 97000000 		call	__mulsf3		#
 5933      E7800000 
 5934 1604 93050500 		mv	a1,a0	# tmp2468,
 5935              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5936 1608 13050C00 		mv	a0,s8	#, tmp1639
 5937 160c 97000000 		call	__subsf3		#
 5937      E7800000 
 5938              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5939 1614 37070000 		lui	a4,%hi(.LC5)	# tmp2812,
 5940 1618 83250700 		lw	a1,%lo(.LC5)(a4)		#,
 5941 161c 97000000 		call	__addsf3		#
 5941      E7800000 
 5942              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5943 1624 97000000 		call	__fixsfsi		#
 5943      E7800000 
 5944 162c 130C0500 		mv	s8,a0	# tmp2469,
 5945              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5946 1630 93050D00 		mv	a1,s10	#, _1377
 5947 1634 13850900 		mv	a0,s3	#, sin_theta
 5948 1638 97000000 		call	__mulsf3		#
 5948      E7800000 
 5949 1640 130B0500 		mv	s6,a0	# tmp1645, tmp2470
 5950              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5951 1644 93850A00 		mv	a1,s5	#, _1379
 5952 1648 13050900 		mv	a0,s2	#, cos_theta
 5953 164c 97000000 		call	__mulsf3		#
 5953      E7800000 
 5954 1654 93050500 		mv	a1,a0	# tmp2471,
 5955              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5956 1658 13050B00 		mv	a0,s6	#, tmp1645
 5957 165c 97000000 		call	__addsf3		#
 5957      E7800000 
 5958              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5959 1664 B7070000 		lui	a5,%hi(.LC7)	# tmp2813,
 5960 1668 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5961 166c 97000000 		call	__addsf3		#
 5961      E7800000 
 5962              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5963 1674 97000000 		call	__fixsfsi		#
 5963      E7800000 
 5964 167c 130B0500 		mv	s6,a0	# tmp2472,
 5965              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5966 1680 93050D00 		mv	a1,s10	#, _1377
 5967 1684 13050900 		mv	a0,s2	#, cos_theta
 5968 1688 97000000 		call	__mulsf3		#
 5968      E7800000 
 5969 1690 130D0500 		mv	s10,a0	# tmp1651, tmp2473
 5970              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5971 1694 93850A00 		mv	a1,s5	#, _1379
 5972 1698 13850900 		mv	a0,s3	#, sin_theta
 5973 169c 97000000 		call	__mulsf3		#
 5973      E7800000 
 5974 16a4 93050500 		mv	a1,a0	# tmp2474,
 5975              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5976 16a8 13050D00 		mv	a0,s10	#, tmp1651
 5977 16ac 97000000 		call	__subsf3		#
 5977      E7800000 
 5978              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5979 16b4 37070000 		lui	a4,%hi(.LC5)	# tmp2814,
 5980 16b8 83250700 		lw	a1,%lo(.LC5)(a4)		#,
 5981 16bc 97000000 		call	__addsf3		#
 5981      E7800000 
 5982              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5983 16c4 97000000 		call	__fixsfsi		#
 5983      E7800000 
 5984              	# main_house3d_rotate.c:89:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07,
 5985 16cc 13060C00 		mv	a2,s8	#, tmp1644
 5986 16d0 93050B00 		mv	a1,s6	#, tmp1650
 5987 16d4 93860D00 		mv	a3,s11	#, tmp1638
 5988 16d8 97000000 		call	fb_draw_bresenham.constprop.0		#
 5988      E7800000 
 5989              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5990 16e0 370B0000 		lui	s6,%hi(.LANCHOR2)	# tmp2816,
 5991 16e4 93060B00 		addi	a3,s6,%lo(.LANCHOR2)	# tmp2815, tmp2816,
 5992 16e8 03A5C620 		lw	a0,524(a3)		#, MEM[(struct point *)&left_top].y
 5993 16ec 97000000 		call	__floatsisf		#
 5993      E7800000 
 5994 16f4 93850B00 		mv	a1,s7	#, s
 5995 16f8 97000000 		call	__mulsf3		#
 5995      E7800000 
 5996              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5997 1700 97000000 		call	__fixsfsi		#
 5997      E7800000 
 5998              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5999 1708 032C4101 		lw	s8,20(sp)		# _437, %sfp
 6000 170c 33058501 		add	a0,a0,s8	# _437, tmp1662, tmp2475
 6001              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6002 1710 130505FE 		addi	a0,a0,-32	#,, tmp1662
 6003 1714 97000000 		call	__floatsisf		#
 6003      E7800000 
 6004              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6005 171c 93060B00 		addi	a3,s6,%lo(.LANCHOR2)	# tmp2818, tmp2819,
 6006              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6007 1720 130D0500 		mv	s10,a0	# tmp2476,
 6008              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6009 1724 03A50621 		lw	a0,528(a3)		#, MEM[(struct point *)&left_top].z
 6010 1728 97000000 		call	__floatsisf		#
 6010      E7800000 
 6011 1730 93850B00 		mv	a1,s7	#, s
 6012 1734 97000000 		call	__mulsf3		#
 6012      E7800000 
 6013              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6014 173c 97000000 		call	__fixsfsi		#
 6014      E7800000 
 6015              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6016 1744 83260101 		lw	a3,16(sp)		# _439, %sfp
 6017 1748 3305D500 		add	a0,a0,a3	# _439,, tmp2477
 6018 174c 97000000 		call	__floatsisf		#
 6018      E7800000 
 6019              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6020 1754 93050B00 		addi	a1,s6,%lo(.LANCHOR2)	# tmp2821, tmp2822,
 6021              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6022 1758 930A0500 		mv	s5,a0	# tmp2478,
 6023              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6024 175c 03A58521 		lw	a0,536(a1)		#, MEM[(struct point *)&left_top + 12B].y
 6025 1760 97000000 		call	__floatsisf		#
 6025      E7800000 
 6026 1768 93850B00 		mv	a1,s7	#, s
 6027 176c 97000000 		call	__mulsf3		#
 6027      E7800000 
 6028              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6029 1774 97000000 		call	__fixsfsi		#
 6029      E7800000 
 6030              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6031 177c 33058501 		add	a0,a0,s8	# _437, tmp1675, tmp2479
 6032              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6033 1780 130505FE 		addi	a0,a0,-32	#,, tmp1675
 6034 1784 97000000 		call	__floatsisf		#
 6034      E7800000 
 6035              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6036 178c 93050B00 		addi	a1,s6,%lo(.LANCHOR2)	# tmp2824, tmp2825,
 6037              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6038 1790 930D0500 		mv	s11,a0	# tmp2480,
 6039              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6040 1794 03A5C521 		lw	a0,540(a1)		#, MEM[(struct point *)&left_top + 12B].z
 6041 1798 97000000 		call	__floatsisf		#
 6041      E7800000 
 6042 17a0 93850B00 		mv	a1,s7	#, s
 6043 17a4 97000000 		call	__mulsf3		#
 6043      E7800000 
 6044              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6045 17ac 97000000 		call	__fixsfsi		#
 6045      E7800000 
 6046              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6047 17b4 03260101 		lw	a2,16(sp)		# _439, %sfp
 6048 17b8 3305C500 		add	a0,a0,a2	# _439,, tmp2481
 6049 17bc 97000000 		call	__floatsisf		#
 6049      E7800000 
 6050              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6051 17c4 93050B00 		addi	a1,s6,%lo(.LANCHOR2)	# tmp2827, tmp2828,
 6052              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6053 17c8 130C0500 		mv	s8,a0	# tmp2482,
 6054              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6055 17cc 03A58520 		lw	a0,520(a1)		#, MEM[(struct point *)&left_top].x
 6056 17d0 97000000 		call	__floatsisf		#
 6056      E7800000 
 6057 17d8 93850B00 		mv	a1,s7	#, s
 6058 17dc 97000000 		call	__mulsf3		#
 6058      E7800000 
 6059              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6060 17e4 97000000 		call	__fixsfsi		#
 6060      E7800000 
 6061              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6062 17ec 8325C100 		lw	a1,12(sp)		# _434, %sfp
 6063 17f0 3305B500 		add	a0,a0,a1	# _434, tmp1688, tmp2483
 6064              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6065 17f4 130505FD 		addi	a0,a0,-48	#,, tmp1688
 6066 17f8 97000000 		call	__floatsisf		#
 6066      E7800000 
 6067 1800 93050400 		mv	a1,s0	#, cos_theta
 6068 1804 97000000 		call	__mulsf3		#
 6068      E7800000 
 6069 180c 130B0500 		mv	s6,a0	# tmp2484,
 6070              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6071 1810 93050D00 		mv	a1,s10	#, _1839
 6072 1814 13050A00 		mv	a0,s4	#, sin_theta
 6073 1818 97000000 		call	__mulsf3		#
 6073      E7800000 
 6074              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6075 1820 93850A00 		mv	a1,s5	#, _1841
 6076              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6077 1824 2328A102 		sw	a0,48(sp)	# tmp1692, %sfp
 6078              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6079 1828 13050400 		mv	a0,s0	#, cos_theta
 6080 182c 97000000 		call	__mulsf3		#
 6080      E7800000 
 6081              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6082 1834 83270103 		lw	a5,48(sp)		# tmp1692, %sfp
 6083              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6084 1838 93050500 		mv	a1,a0	# tmp2486,
 6085              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6086 183c 13850700 		mv	a0,a5	#, tmp1692
 6087 1840 97000000 		call	__addsf3		#
 6087      E7800000 
 6088              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6089 1848 93050000 		mv	a1,zero	#,
 6090 184c 97000000 		call	__addsf3		#
 6090      E7800000 
 6091              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6092 1854 97000000 		call	__fixsfsi		#
 6092      E7800000 
 6093              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6094 185c 97000000 		call	__floatsisf		#
 6094      E7800000 
 6095 1864 93850400 		mv	a1,s1	#, sin_theta
 6096 1868 97000000 		call	__mulsf3		#
 6096      E7800000 
 6097 1870 93050500 		mv	a1,a0	# tmp2487,
 6098              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6099 1874 13050B00 		mv	a0,s6	#, tmp1691
 6100 1878 97000000 		call	__addsf3		#
 6100      E7800000 
 6101              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6102 1880 37070000 		lui	a4,%hi(.LC5)	# tmp2830,
 6103 1884 83250700 		lw	a1,%lo(.LC5)(a4)		#,
 6104 1888 97000000 		call	__addsf3		#
 6104      E7800000 
 6105              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6106 1890 97000000 		call	__fixsfsi		#
 6106      E7800000 
 6107              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6108 1898 130505FD 		addi	a0,a0,-48	#,, tmp2488
 6109 189c 97000000 		call	__floatsisf		#
 6109      E7800000 
 6110 18a4 130B0500 		mv	s6,a0	# tmp2489,
 6111              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6112 18a8 93050D00 		mv	a1,s10	#, _1839
 6113 18ac 13050400 		mv	a0,s0	#, cos_theta
 6114 18b0 97000000 		call	__mulsf3		#
 6114      E7800000 
 6115 18b8 130D0500 		mv	s10,a0	# tmp1704, tmp2490
 6116              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6117 18bc 93850A00 		mv	a1,s5	#, _1841
 6118 18c0 13050A00 		mv	a0,s4	#, sin_theta
 6119 18c4 97000000 		call	__mulsf3		#
 6119      E7800000 
 6120 18cc 93050500 		mv	a1,a0	# tmp2491,
 6121              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6122 18d0 13050D00 		mv	a0,s10	#, tmp1704
 6123 18d4 97000000 		call	__subsf3		#
 6123      E7800000 
 6124              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6125 18dc B7070000 		lui	a5,%hi(.LC7)	# tmp2831,
 6126 18e0 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6127              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6128 18e4 370D0000 		lui	s10,%hi(.LANCHOR2)	# tmp2833,
 6129              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6130 18e8 97000000 		call	__addsf3		#
 6130      E7800000 
 6131              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6132 18f0 97000000 		call	__fixsfsi		#
 6132      E7800000 
 6133              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6134 18f8 130505FE 		addi	a0,a0,-32	#,, tmp2492
 6135 18fc 97000000 		call	__floatsisf		#
 6135      E7800000 
 6136 1904 930A0500 		mv	s5,a0	# tmp2493,
 6137              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6138 1908 13050D00 		addi	a0,s10,%lo(.LANCHOR2)	# tmp2832, tmp2833,
 6139 190c 03254521 		lw	a0,532(a0)		#, MEM[(struct point *)&left_top + 12B].x
 6140 1910 97000000 		call	__floatsisf		#
 6140      E7800000 
 6141 1918 93850B00 		mv	a1,s7	#, s
 6142 191c 97000000 		call	__mulsf3		#
 6142      E7800000 
 6143              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6144 1924 97000000 		call	__fixsfsi		#
 6144      E7800000 
 6145              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6146 192c 8325C100 		lw	a1,12(sp)		# _434, %sfp
 6147 1930 3305B500 		add	a0,a0,a1	# _434, tmp1716, tmp2494
 6148              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6149 1934 130505FD 		addi	a0,a0,-48	#,, tmp1716
 6150 1938 97000000 		call	__floatsisf		#
 6150      E7800000 
 6151 1940 93050400 		mv	a1,s0	#, cos_theta
 6152 1944 97000000 		call	__mulsf3		#
 6152      E7800000 
 6153 194c 130D0500 		mv	s10,a0	# tmp2495,
 6154              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6155 1950 93850D00 		mv	a1,s11	#, _1799
 6156 1954 13850400 		mv	a0,s1	#, sin_theta
 6157 1958 97000000 		call	__mulsf3		#
 6157      E7800000 
 6158              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6159 1960 93050C00 		mv	a1,s8	#, _1801
 6160              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6161 1964 2328A102 		sw	a0,48(sp)	# tmp1720, %sfp
 6162              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6163 1968 13050400 		mv	a0,s0	#, cos_theta
 6164 196c 97000000 		call	__mulsf3		#
 6164      E7800000 
 6165              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6166 1974 83270103 		lw	a5,48(sp)		# tmp1720, %sfp
 6167              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6168 1978 93050500 		mv	a1,a0	# tmp2497,
 6169              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6170 197c 13850700 		mv	a0,a5	#, tmp1720
 6171 1980 97000000 		call	__addsf3		#
 6171      E7800000 
 6172              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6173 1988 93050000 		mv	a1,zero	#,
 6174 198c 97000000 		call	__addsf3		#
 6174      E7800000 
 6175              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6176 1994 97000000 		call	__fixsfsi		#
 6176      E7800000 
 6177              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6178 199c 97000000 		call	__floatsisf		#
 6178      E7800000 
 6179 19a4 93050A00 		mv	a1,s4	#, sin_theta
 6180 19a8 97000000 		call	__mulsf3		#
 6180      E7800000 
 6181 19b0 93050500 		mv	a1,a0	# tmp2498,
 6182              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6183 19b4 13050D00 		mv	a0,s10	#, tmp1719
 6184 19b8 97000000 		call	__addsf3		#
 6184      E7800000 
 6185              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6186 19c0 37070000 		lui	a4,%hi(.LC5)	# tmp2835,
 6187 19c4 83250700 		lw	a1,%lo(.LC5)(a4)		#,
 6188 19c8 97000000 		call	__addsf3		#
 6188      E7800000 
 6189              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6190 19d0 97000000 		call	__fixsfsi		#
 6190      E7800000 
 6191              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6192 19d8 130505FD 		addi	a0,a0,-48	#,, tmp2499
 6193 19dc 97000000 		call	__floatsisf		#
 6193      E7800000 
 6194 19e4 130D0500 		mv	s10,a0	# tmp2500,
 6195              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6196 19e8 93850D00 		mv	a1,s11	#, _1799
 6197 19ec 13050400 		mv	a0,s0	#, cos_theta
 6198 19f0 97000000 		call	__mulsf3		#
 6198      E7800000 
 6199 19f8 930D0500 		mv	s11,a0	# tmp1732, tmp2501
 6200              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6201 19fc 93050C00 		mv	a1,s8	#, _1801
 6202 1a00 13850400 		mv	a0,s1	#, sin_theta
 6203 1a04 97000000 		call	__mulsf3		#
 6203      E7800000 
 6204 1a0c 93050500 		mv	a1,a0	# tmp2502,
 6205              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6206 1a10 13850D00 		mv	a0,s11	#, tmp1732
 6207 1a14 97000000 		call	__subsf3		#
 6207      E7800000 
 6208              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6209 1a1c B7070000 		lui	a5,%hi(.LC7)	# tmp2836,
 6210 1a20 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6211 1a24 97000000 		call	__addsf3		#
 6211      E7800000 
 6212              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6213 1a2c 97000000 		call	__fixsfsi		#
 6213      E7800000 
 6214              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6215 1a34 130505FE 		addi	a0,a0,-32	#,, tmp2503
 6216 1a38 97000000 		call	__floatsisf		#
 6216      E7800000 
 6217 1a40 130C0500 		mv	s8,a0	# tmp2504,
 6218              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6219 1a44 93050D00 		mv	a1,s10	#, _1639
 6220 1a48 13850900 		mv	a0,s3	#, sin_theta
 6221 1a4c 97000000 		call	__mulsf3		#
 6221      E7800000 
 6222 1a54 930D0500 		mv	s11,a0	# tmp1739, tmp2505
 6223              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6224 1a58 93050C00 		mv	a1,s8	#, _1641
 6225 1a5c 13050900 		mv	a0,s2	#, cos_theta
 6226 1a60 97000000 		call	__mulsf3		#
 6226      E7800000 
 6227 1a68 93050500 		mv	a1,a0	# tmp2506,
 6228              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6229 1a6c 13850D00 		mv	a0,s11	#, tmp1739
 6230 1a70 97000000 		call	__addsf3		#
 6230      E7800000 
 6231              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6232 1a78 B7070000 		lui	a5,%hi(.LC7)	# tmp2837,
 6233 1a7c 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6234 1a80 97000000 		call	__addsf3		#
 6234      E7800000 
 6235              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6236 1a88 97000000 		call	__fixsfsi		#
 6236      E7800000 
 6237 1a90 93070500 		mv	a5,a0	# tmp2507,
 6238              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6239 1a94 93050D00 		mv	a1,s10	#, _1639
 6240 1a98 13050900 		mv	a0,s2	#, cos_theta
 6241              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6242 1a9c 138D0700 		mv	s10,a5	# tmp1744, tmp2507
 6243              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6244 1aa0 97000000 		call	__mulsf3		#
 6244      E7800000 
 6245 1aa8 930D0500 		mv	s11,a0	# tmp1745, tmp2508
 6246              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6247 1aac 93050C00 		mv	a1,s8	#, _1641
 6248 1ab0 13850900 		mv	a0,s3	#, sin_theta
 6249 1ab4 97000000 		call	__mulsf3		#
 6249      E7800000 
 6250 1abc 93050500 		mv	a1,a0	# tmp2509,
 6251              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6252 1ac0 13850D00 		mv	a0,s11	#, tmp1745
 6253 1ac4 97000000 		call	__subsf3		#
 6253      E7800000 
 6254              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6255 1acc 37070000 		lui	a4,%hi(.LC5)	# tmp2838,
 6256 1ad0 83250700 		lw	a1,%lo(.LC5)(a4)		#,
 6257 1ad4 97000000 		call	__addsf3		#
 6257      E7800000 
 6258              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6259 1adc 97000000 		call	__fixsfsi		#
 6259      E7800000 
 6260 1ae4 130C0500 		mv	s8,a0	# tmp2510,
 6261              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6262 1ae8 93050B00 		mv	a1,s6	#, _1679
 6263 1aec 13850900 		mv	a0,s3	#, sin_theta
 6264 1af0 97000000 		call	__mulsf3		#
 6264      E7800000 
 6265 1af8 930D0500 		mv	s11,a0	# tmp1751, tmp2511
 6266              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6267 1afc 93850A00 		mv	a1,s5	#, _1681
 6268 1b00 13050900 		mv	a0,s2	#, cos_theta
 6269 1b04 97000000 		call	__mulsf3		#
 6269      E7800000 
 6270 1b0c 93050500 		mv	a1,a0	# tmp2512,
 6271              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6272 1b10 13850D00 		mv	a0,s11	#, tmp1751
 6273 1b14 97000000 		call	__addsf3		#
 6273      E7800000 
 6274              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6275 1b1c B7070000 		lui	a5,%hi(.LC7)	# tmp2839,
 6276 1b20 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6277 1b24 97000000 		call	__addsf3		#
 6277      E7800000 
 6278              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6279 1b2c 97000000 		call	__fixsfsi		#
 6279      E7800000 
 6280 1b34 93070500 		mv	a5,a0	# tmp2513,
 6281              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6282 1b38 93050B00 		mv	a1,s6	#, _1679
 6283 1b3c 13050900 		mv	a0,s2	#, cos_theta
 6284              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6285 1b40 138B0700 		mv	s6,a5	# tmp1756, tmp2513
 6286              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6287 1b44 97000000 		call	__mulsf3		#
 6287      E7800000 
 6288 1b4c 930D0500 		mv	s11,a0	# tmp1757, tmp2514
 6289              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6290 1b50 93850A00 		mv	a1,s5	#, _1681
 6291 1b54 13850900 		mv	a0,s3	#, sin_theta
 6292 1b58 97000000 		call	__mulsf3		#
 6292      E7800000 
 6293 1b60 93050500 		mv	a1,a0	# tmp2515,
 6294              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6295 1b64 13850D00 		mv	a0,s11	#, tmp1757
 6296 1b68 97000000 		call	__subsf3		#
 6296      E7800000 
 6297              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6298 1b70 37070000 		lui	a4,%hi(.LC5)	# tmp2840,
 6299 1b74 83250700 		lw	a1,%lo(.LC5)(a4)		#,
 6300 1b78 97000000 		call	__addsf3		#
 6300      E7800000 
 6301              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6302 1b80 97000000 		call	__fixsfsi		#
 6302      E7800000 
 6303              	# main_house3d_rotate.c:89:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07,
 6304 1b88 93060D00 		mv	a3,s10	#, tmp1744
 6305 1b8c 13060C00 		mv	a2,s8	#, tmp1750
 6306 1b90 93050B00 		mv	a1,s6	#, tmp1756
 6307 1b94 97000000 		call	fb_draw_bresenham.constprop.0		#
 6307      E7800000 
 6308              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6309 1b9c 370D0000 		lui	s10,%hi(.LANCHOR2)	# tmp2842,
 6310 1ba0 13070D00 		addi	a4,s10,%lo(.LANCHOR2)	# tmp2841, tmp2842,
 6311 1ba4 0325C722 		lw	a0,556(a4)		#, MEM[(struct point *)&right_bottom + 12B].x
 6312 1ba8 97000000 		call	__floatsisf		#
 6312      E7800000 
 6313 1bb0 93850B00 		mv	a1,s7	#, s
 6314 1bb4 97000000 		call	__mulsf3		#
 6314      E7800000 
 6315              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6316 1bbc 97000000 		call	__fixsfsi		#
 6316      E7800000 
 6317              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6318 1bc4 13070D00 		addi	a4,s10,%lo(.LANCHOR2)	# tmp2843, tmp2844,
 6319              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6320 1bc8 8325C100 		lw	a1,12(sp)		# _434, %sfp
 6321              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6322 1bcc 930D0500 		mv	s11,a0	# tmp2516,
 6323              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6324 1bd0 03254722 		lw	a0,548(a4)		#, MEM[(struct point *)&right_bottom].y
 6325              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6326 1bd4 B38DBD00 		add	s11,s11,a1	# _434, _219, tmp2516
 6327              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6328 1bd8 97000000 		call	__floatsisf		#
 6328      E7800000 
 6329 1be0 93850B00 		mv	a1,s7	#, s
 6330 1be4 97000000 		call	__mulsf3		#
 6330      E7800000 
 6331              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6332 1bec 97000000 		call	__fixsfsi		#
 6332      E7800000 
 6333              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6334 1bf4 032C4101 		lw	s8,20(sp)		# _437, %sfp
 6335 1bf8 33058501 		add	a0,a0,s8	# _437, tmp1773, tmp2517
 6336              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6337 1bfc 130505FE 		addi	a0,a0,-32	#,, tmp1773
 6338 1c00 97000000 		call	__floatsisf		#
 6338      E7800000 
 6339              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6340 1c08 13070D00 		addi	a4,s10,%lo(.LANCHOR2)	# tmp2847, tmp2848,
 6341              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6342 1c0c 130B0500 		mv	s6,a0	# tmp2518,
 6343              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6344 1c10 03258722 		lw	a0,552(a4)		#, MEM[(struct point *)&right_bottom].z
 6345 1c14 97000000 		call	__floatsisf		#
 6345      E7800000 
 6346 1c1c 93850B00 		mv	a1,s7	#, s
 6347 1c20 97000000 		call	__mulsf3		#
 6347      E7800000 
 6348              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6349 1c28 97000000 		call	__fixsfsi		#
 6349      E7800000 
 6350              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6351 1c30 03260101 		lw	a2,16(sp)		# _439, %sfp
 6352 1c34 3305C500 		add	a0,a0,a2	# _439,, tmp2519
 6353 1c38 97000000 		call	__floatsisf		#
 6353      E7800000 
 6354 1c40 930A0500 		mv	s5,a0	# tmp2520,
 6355              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6356 1c44 93050B00 		mv	a1,s6	#, _2141
 6357 1c48 13050400 		mv	a0,s0	#, cos_theta
 6358 1c4c 97000000 		call	__mulsf3		#
 6358      E7800000 
 6359 1c54 130C0500 		mv	s8,a0	# tmp1781, tmp2521
 6360              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6361 1c58 93850A00 		mv	a1,s5	#, _2143
 6362 1c5c 13850400 		mv	a0,s1	#, sin_theta
 6363 1c60 97000000 		call	__mulsf3		#
 6363      E7800000 
 6364 1c68 93050500 		mv	a1,a0	# tmp2522,
 6365              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6366 1c6c 13050C00 		mv	a0,s8	#, tmp1781
 6367 1c70 97000000 		call	__subsf3		#
 6367      E7800000 
 6368              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6369 1c78 B7070000 		lui	a5,%hi(.LC7)	# tmp2850,
 6370 1c7c 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6371 1c80 97000000 		call	__addsf3		#
 6371      E7800000 
 6372              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6373 1c88 97000000 		call	__fixsfsi		#
 6373      E7800000 
 6374              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6375 1c90 93050B00 		mv	a1,s6	#, _2141
 6376              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6377 1c94 130C0500 		mv	s8,a0	# tmp2523,
 6378              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6379 1c98 13850400 		mv	a0,s1	#, sin_theta
 6380 1c9c 97000000 		call	__mulsf3		#
 6380      E7800000 
 6381 1ca4 130B0500 		mv	s6,a0	# tmp1786, tmp2524
 6382              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6383 1ca8 93850A00 		mv	a1,s5	#, _2143
 6384 1cac 13050400 		mv	a0,s0	#, cos_theta
 6385 1cb0 97000000 		call	__mulsf3		#
 6385      E7800000 
 6386 1cb8 93050500 		mv	a1,a0	# tmp2525,
 6387              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6388 1cbc 13050B00 		mv	a0,s6	#, tmp1786
 6389 1cc0 97000000 		call	__addsf3		#
 6389      E7800000 
 6390              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6391 1cc8 93050000 		mv	a1,zero	#,
 6392 1ccc 97000000 		call	__addsf3		#
 6392      E7800000 
 6393              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6394 1cd4 97000000 		call	__fixsfsi		#
 6394      E7800000 
 6395 1cdc 930A0500 		mv	s5,a0	# tmp2526,
 6396              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6397 1ce0 13050D00 		addi	a0,s10,%lo(.LANCHOR2)	# tmp2851, tmp2852,
 6398 1ce4 03250523 		lw	a0,560(a0)		#, MEM[(struct point *)&right_bottom + 12B].y
 6399 1ce8 130B0D00 		mv	s6,s10	# tmp2852, tmp2848
 6400 1cec 97000000 		call	__floatsisf		#
 6400      E7800000 
 6401 1cf4 93850B00 		mv	a1,s7	#, s
 6402 1cf8 97000000 		call	__mulsf3		#
 6402      E7800000 
 6403              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6404 1d00 97000000 		call	__fixsfsi		#
 6404      E7800000 
 6405              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6406 1d08 83264101 		lw	a3,20(sp)		# _437, %sfp
 6407 1d0c 3305D500 		add	a0,a0,a3	# _437, tmp1795, tmp2527
 6408              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6409 1d10 130505FE 		addi	a0,a0,-32	#,, tmp1795
 6410 1d14 97000000 		call	__floatsisf		#
 6410      E7800000 
 6411 1d1c 130D0500 		mv	s10,a0	# tmp2528,
 6412              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6413 1d20 13050B00 		addi	a0,s6,%lo(.LANCHOR2)	# tmp2854, tmp2855,
 6414 1d24 03254523 		lw	a0,564(a0)		#, MEM[(struct point *)&right_bottom + 12B].z
 6415 1d28 97000000 		call	__floatsisf		#
 6415      E7800000 
 6416 1d30 93850B00 		mv	a1,s7	#, s
 6417 1d34 97000000 		call	__mulsf3		#
 6417      E7800000 
 6418              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6419 1d3c 97000000 		call	__fixsfsi		#
 6419      E7800000 
 6420              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6421 1d44 03260101 		lw	a2,16(sp)		# _439, %sfp
 6422 1d48 3305C500 		add	a0,a0,a2	# _439,, tmp2529
 6423 1d4c 97000000 		call	__floatsisf		#
 6423      E7800000 
 6424 1d54 130B0500 		mv	s6,a0	# tmp2530,
 6425              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6426 1d58 93050D00 		mv	a1,s10	#, _2101
 6427 1d5c 13050400 		mv	a0,s0	#, cos_theta
 6428 1d60 97000000 		call	__mulsf3		#
 6428      E7800000 
 6429              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6430 1d68 93050B00 		mv	a1,s6	#, _2103
 6431              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6432 1d6c 2328A102 		sw	a0,48(sp)	# tmp1803, %sfp
 6433              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6434 1d70 13850400 		mv	a0,s1	#, sin_theta
 6435 1d74 97000000 		call	__mulsf3		#
 6435      E7800000 
 6436              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6437 1d7c 83270103 		lw	a5,48(sp)		# tmp1803, %sfp
 6438              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6439 1d80 93050500 		mv	a1,a0	# tmp2532,
 6440              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6441 1d84 13850700 		mv	a0,a5	#, tmp1803
 6442 1d88 97000000 		call	__subsf3		#
 6442      E7800000 
 6443              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6444 1d90 37070000 		lui	a4,%hi(.LC7)	# tmp2857,
 6445 1d94 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6446 1d98 97000000 		call	__addsf3		#
 6446      E7800000 
 6447              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6448 1da0 97000000 		call	__fixsfsi		#
 6448      E7800000 
 6449 1da8 93070500 		mv	a5,a0	# tmp2533,
 6450              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6451 1dac 93050D00 		mv	a1,s10	#, _2101
 6452 1db0 13850400 		mv	a0,s1	#, sin_theta
 6453              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6454 1db4 138D0700 		mv	s10,a5	# _2107, tmp2533
 6455              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6456 1db8 97000000 		call	__mulsf3		#
 6456      E7800000 
 6457              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6458 1dc0 93050B00 		mv	a1,s6	#, _2103
 6459              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6460 1dc4 2328A102 		sw	a0,48(sp)	# tmp1808, %sfp
 6461              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6462 1dc8 13050400 		mv	a0,s0	#, cos_theta
 6463 1dcc 97000000 		call	__mulsf3		#
 6463      E7800000 
 6464              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6465 1dd4 83270103 		lw	a5,48(sp)		# tmp1808, %sfp
 6466              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6467 1dd8 93050500 		mv	a1,a0	# tmp2535,
 6468              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6469 1ddc 13850700 		mv	a0,a5	#, tmp1808
 6470 1de0 97000000 		call	__addsf3		#
 6470      E7800000 
 6471              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6472 1de8 93050000 		mv	a1,zero	#,
 6473 1dec 97000000 		call	__addsf3		#
 6473      E7800000 
 6474              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6475 1df4 97000000 		call	__fixsfsi		#
 6475      E7800000 
 6476              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6477 1dfc B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2859,
 6478 1e00 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# tmp2858, tmp2859,
 6479              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6480 1e04 130B0500 		mv	s6,a0	# tmp2536,
 6481              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6482 1e08 03A50722 		lw	a0,544(a5)		#, MEM[(struct point *)&right_bottom].x
 6483 1e0c 97000000 		call	__floatsisf		#
 6483      E7800000 
 6484 1e14 93850B00 		mv	a1,s7	#, s
 6485 1e18 97000000 		call	__mulsf3		#
 6485      E7800000 
 6486              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6487 1e20 97000000 		call	__fixsfsi		#
 6487      E7800000 
 6488              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6489 1e28 8325C100 		lw	a1,12(sp)		# _434, %sfp
 6490 1e2c 3307B500 		add	a4,a0,a1	# _434, tmp1817, tmp2537
 6491              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 6492 1e30 130707FD 		addi	a4,a4,-48	#, _2036, tmp1817
 6493              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 6494 1e34 63D40C02 		bge	s9,zero,.L517	#, angle,,
 6495              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 6496 1e38 8326C103 		lw	a3,60(sp)		# _699, %sfp
 6497 1e3c B7270000 		li	a5,8192		# tmp1820,
 6498 1e40 93871700 		addi	a5,a5,1	#, tmp1819, tmp1820
 6499 1e44 B387F600 		add	a5,a3,a5	# tmp1819, tmp1818, _699
 6500 1e48 93960701 		slli	a3,a5,16	#, prephitmp_800, tmp1818
 6501 1e4c 93D60601 		srli	a3,a3,16	#, prephitmp_800, prephitmp_800
 6502 1e50 939C0701 		slli	s9,a5,16	#, angle, tmp1818
 6503 1e54 2322D102 		sw	a3,36(sp)	# prephitmp_800, %sfp
 6504 1e58 93DC0C41 		srai	s9,s9,16	#, angle, angle
 6505              	.L517:
 6506              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 6507 1e5c 93D78C40 		srai	a5,s9,8	#, v0, angle
 6508              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6509 1e60 13960701 		slli	a2,a5,16	#, v0.41_2159, v0
 6510              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6511 1e64 93F60702 		andi	a3,a5,32	#, tmp1824, v0
 6512              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6513 1e68 13560601 		srli	a2,a2,16	#, v0.41_2159, v0.41_2159
 6514              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6515 1e6c 638C0600 		beq	a3,zero,.L518	#, tmp1824,,
 6516              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6517 1e70 93CCFCFF 		not	s9,s9	# tmp1828, angle
 6518              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6519 1e74 93960C01 		slli	a3,s9,16	#, prephitmp_800, tmp1828
 6520 1e78 93D60601 		srli	a3,a3,16	#, prephitmp_800, prephitmp_800
 6521              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6522 1e7c 93C7F7FF 		not	a5,a5	# v0, v0
 6523              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6524 1e80 2322D102 		sw	a3,36(sp)	# prephitmp_800, %sfp
 6525              	.L518:
 6526              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6527 1e84 83258101 		lw	a1,24(sp)		# tmp2267, %sfp
 6528 1e88 93F7F701 		andi	a5,a5,31	#, _2165, v0
 6529              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6530 1e8c 93861700 		addi	a3,a5,1	#, tmp1836, _2165
 6531 1e90 93961600 		slli	a3,a3,1	#, tmp1837, tmp1836
 6532              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6533 1e94 93971700 		slli	a5,a5,1	#, tmp1832, _2165
 6534              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6535 1e98 B386D500 		add	a3,a1,a3	# tmp1837, tmp1838, tmp2267
 6536              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6537 1e9c B387F500 		add	a5,a1,a5	# tmp1832, tmp1833, tmp2267
 6538 1ea0 83950700 		lh	a1,0(a5)		# _2166, sin90[_2165]
 6539              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6540 1ea4 03950600 		lh	a0,0(a3)		# sin90[_2168], sin90[_2168]
 6541              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6542 1ea8 83474102 		lbu	a5,36(sp)	# tmp1842, %sfp
 6543              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6544 1eac 93760604 		andi	a3,a2,64	#, tmp1850, v0.41_2159
 6545              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6546 1eb0 3305B540 		sub	a0,a0,a1	# tmp1840, sin90[_2168], _2166
 6547              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6548 1eb4 3305F502 		mul	a0,a0,a5	# tmp1843, tmp1840, tmp1842
 6549              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6550 1eb8 13558540 		srai	a0,a0,8	#, tmp1844, tmp1843
 6551              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6552 1ebc 3305B500 		add	a0,a0,a1	# _2166, tmp1847, tmp1844
 6553 1ec0 13150501 		slli	a0,a0,16	#, _2180, tmp1847
 6554 1ec4 13550501 		srli	a0,a0,16	#, _2180, _2180
 6555              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6556 1ec8 63880600 		beq	a3,zero,.L519	#, tmp1850,,
 6557              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6558 1ecc 3305A040 		neg	a0,a0	# tmp1852, _2180
 6559 1ed0 13150501 		slli	a0,a0,16	#, _2180, tmp1852
 6560 1ed4 13550501 		srli	a0,a0,16	#, _2180, _2180
 6561              	.L519:
 6562              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 6563 1ed8 13150501 		slli	a0,a0,16	#,, _2180
 6564 1edc 13550541 		srai	a0,a0,16	#,,
 6565 1ee0 2322E102 		sw	a4,36(sp)	# _2036, %sfp
 6566 1ee4 97000000 		call	__floatsidf		#
 6566      E7800000 
 6567 1eec B7070000 		lui	a5,%hi(.LC3)	# tmp2866,
 6568 1ef0 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 6569 1ef4 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 6570              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 6571 1ef8 130C0CFE 		addi	s8,s8,-32	#, _1959, _2147
 6572              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 6573 1efc 97000000 		call	__muldf3		#
 6573      E7800000 
 6574              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 6575 1f04 97000000 		call	__truncdfsf2		#
 6575      E7800000 
 6576 1f0c 930C0500 		mv	s9,a0	# tmp2538,
 6577              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6578 1f10 13850DFD 		addi	a0,s11,-48	#,, _219
 6579 1f14 97000000 		call	__floatsisf		#
 6579      E7800000 
 6580 1f1c 93050400 		mv	a1,s0	#, cos_theta
 6581 1f20 97000000 		call	__mulsf3		#
 6581      E7800000 
 6582 1f28 93070500 		mv	a5,a0	# tmp2539,
 6583              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6584 1f2c 13050B00 		mv	a0,s6	#, _2113
 6585              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6586 1f30 138B0700 		mv	s6,a5	# tmp1860, tmp2539
 6587              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6588 1f34 97000000 		call	__floatsisf		#
 6588      E7800000 
 6589 1f3c 93850400 		mv	a1,s1	#, sin_theta
 6590 1f40 97000000 		call	__mulsf3		#
 6590      E7800000 
 6591 1f48 93050500 		mv	a1,a0	# tmp2540,
 6592              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6593 1f4c 13050B00 		mv	a0,s6	#, tmp1860
 6594 1f50 97000000 		call	__addsf3		#
 6594      E7800000 
 6595              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6596 1f58 370B0000 		lui	s6,%hi(.LC5)	# tmp2867,
 6597 1f5c 83250B00 		lw	a1,%lo(.LC5)(s6)		#,
 6598 1f60 97000000 		call	__addsf3		#
 6598      E7800000 
 6599              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6600 1f68 97000000 		call	__fixsfsi		#
 6600      E7800000 
 6601              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6602 1f70 03274102 		lw	a4,36(sp)		# _2036, %sfp
 6603              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6604 1f74 930D0500 		mv	s11,a0	# tmp2541,
 6605              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6606 1f78 13050700 		mv	a0,a4	#, _2036
 6607 1f7c 97000000 		call	__floatsisf		#
 6607      E7800000 
 6608 1f84 93850C00 		mv	a1,s9	#, cos_theta
 6609 1f88 97000000 		call	__mulsf3		#
 6609      E7800000 
 6610 1f90 93070500 		mv	a5,a0	# tmp2542,
 6611              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6612 1f94 13850A00 		mv	a0,s5	#, _2153
 6613              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6614 1f98 938A0700 		mv	s5,a5	# tmp1867, tmp2542
 6615              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6616 1f9c 97000000 		call	__floatsisf		#
 6616      E7800000 
 6617 1fa4 93850400 		mv	a1,s1	#, sin_theta
 6618 1fa8 97000000 		call	__mulsf3		#
 6618      E7800000 
 6619 1fb0 93050500 		mv	a1,a0	# tmp2543,
 6620              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6621 1fb4 13850A00 		mv	a0,s5	#, tmp1867
 6622 1fb8 97000000 		call	__addsf3		#
 6622      E7800000 
 6623              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6624 1fc0 83250B00 		lw	a1,%lo(.LC5)(s6)		#,
 6625 1fc4 97000000 		call	__addsf3		#
 6625      E7800000 
 6626              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6627 1fcc 97000000 		call	__fixsfsi		#
 6627      E7800000 
 6628              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 6629 1fd4 83258103 		lw	a1,56(sp)		# angle, %sfp
 6630 1fd8 83260102 		lw	a3,32(sp)		# _894, %sfp
 6631              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 6632 1fdc 130B05FD 		addi	s6,a0,-48	#, _1956, tmp2544
 6633              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 6634 1fe0 93D78540 		srai	a5,a1,8	#, v0, angle
 6635              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6636 1fe4 13960701 		slli	a2,a5,16	#, v0.41_2190, v0
 6637              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6638 1fe8 13F70702 		andi	a4,a5,32	#, tmp1877, v0
 6639              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6640 1fec 13560601 		srli	a2,a2,16	#, v0.41_2190, v0.41_2190
 6641              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6642 1ff0 630A0700 		beq	a4,zero,.L520	#, tmp1877,,
 6643              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6644 1ff4 13C7F5FF 		not	a4,a1	# tmp1881, angle
 6645              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6646 1ff8 93160701 		slli	a3,a4,16	#, _894, tmp1881
 6647              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6648 1ffc 93C7F7FF 		not	a5,a5	# v0, v0
 6649              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6650 2000 93D60601 		srli	a3,a3,16	#, _894, _894
 6651              	.L520:
 6652              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6653 2004 83258101 		lw	a1,24(sp)		# tmp2267, %sfp
 6654 2008 93F7F701 		andi	a5,a5,31	#, _2196, v0
 6655              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6656 200c 13871700 		addi	a4,a5,1	#, tmp1889, _2196
 6657 2010 13171700 		slli	a4,a4,1	#, tmp1890, tmp1889
 6658              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6659 2014 93971700 		slli	a5,a5,1	#, tmp1885, _2196
 6660 2018 B387F500 		add	a5,a1,a5	# tmp1885, tmp1886, tmp2267
 6661              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6662 201c 3387E500 		add	a4,a1,a4	# tmp1890, tmp1891, tmp2267
 6663 2020 03150700 		lh	a0,0(a4)		# sin90[_2199], sin90[_2199]
 6664              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6665 2024 83950700 		lh	a1,0(a5)		# _2197, sin90[_2196]
 6666              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6667 2028 93F6F60F 		andi	a3,a3,0xff	# tmp1895, _894
 6668              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6669 202c 93770604 		andi	a5,a2,64	#, tmp1903, v0.41_2190
 6670              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6671 2030 3305B540 		sub	a0,a0,a1	# tmp1893, sin90[_2199], _2197
 6672              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6673 2034 3305D502 		mul	a0,a0,a3	# tmp1896, tmp1893, tmp1895
 6674              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6675 2038 13558540 		srai	a0,a0,8	#, tmp1897, tmp1896
 6676              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6677 203c 3305B500 		add	a0,a0,a1	# _2197, tmp1900, tmp1897
 6678 2040 13150501 		slli	a0,a0,16	#, _2211, tmp1900
 6679 2044 13550501 		srli	a0,a0,16	#, _2211, _2211
 6680              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6681 2048 63880700 		beq	a5,zero,.L521	#, tmp1903,,
 6682              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6683 204c 3305A040 		neg	a0,a0	# tmp1905, _2211
 6684 2050 13150501 		slli	a0,a0,16	#, _2211, tmp1905
 6685 2054 13550501 		srli	a0,a0,16	#, _2211, _2211
 6686              	.L521:
 6687              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 6688 2058 13150501 		slli	a0,a0,16	#,, _2211
 6689 205c 13550541 		srai	a0,a0,16	#,,
 6690 2060 97000000 		call	__floatsidf		#
 6690      E7800000 
 6691 2068 B7070000 		lui	a5,%hi(.LC3)	# tmp2873,
 6692 206c 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 6693 2070 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 6694 2074 97000000 		call	__muldf3		#
 6694      E7800000 
 6695              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 6696 207c 97000000 		call	__truncdfsf2		#
 6696      E7800000 
 6697              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 6698 2084 8327C101 		lw	a5,28(sp)		# angle, %sfp
 6699              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 6700 2088 930A0500 		mv	s5,a0	# sin_theta, tmp2545
 6701              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 6702 208c 63D60702 		bge	a5,zero,.L522	#, angle,,
 6703              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 6704 2090 03270102 		lw	a4,32(sp)		# _514, %sfp
 6705 2094 B7270000 		li	a5,8192		# tmp1913,
 6706 2098 93871700 		addi	a5,a5,1	#, tmp1912, tmp1913
 6707 209c B307F700 		add	a5,a4,a5	# tmp1912, tmp1911, _514
 6708 20a0 13970701 		slli	a4,a5,16	#, _1370, tmp1911
 6709 20a4 93970701 		slli	a5,a5,16	#, angle, tmp1911
 6710 20a8 13570701 		srli	a4,a4,16	#, _1370, _1370
 6711 20ac 93D70741 		srai	a5,a5,16	#, angle, angle
 6712 20b0 2324E102 		sw	a4,40(sp)	# _1370, %sfp
 6713 20b4 232EF100 		sw	a5,28(sp)	# angle, %sfp
 6714              	.L522:
 6715              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 6716 20b8 0326C101 		lw	a2,28(sp)		# angle, %sfp
 6717 20bc 93578640 		srai	a5,a2,8	#, v0, angle
 6718              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6719 20c0 93960701 		slli	a3,a5,16	#, v0.41_2221, v0
 6720              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6721 20c4 13F70702 		andi	a4,a5,32	#, tmp1917, v0
 6722              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6723 20c8 93D60601 		srli	a3,a3,16	#, v0.41_2221, v0.41_2221
 6724              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6725 20cc 630C0700 		beq	a4,zero,.L523	#, tmp1917,,
 6726              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6727 20d0 1347F6FF 		not	a4,a2	# tmp1921, angle
 6728              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6729 20d4 13170701 		slli	a4,a4,16	#, _1370, tmp1921
 6730 20d8 13570701 		srli	a4,a4,16	#, _1370, _1370
 6731              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6732 20dc 93C7F7FF 		not	a5,a5	# v0, v0
 6733              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6734 20e0 2324E102 		sw	a4,40(sp)	# _1370, %sfp
 6735              	.L523:
 6736              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6737 20e4 03268101 		lw	a2,24(sp)		# tmp2267, %sfp
 6738 20e8 93F7F701 		andi	a5,a5,31	#, _2227, v0
 6739              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6740 20ec 13871700 		addi	a4,a5,1	#, tmp1929, _2227
 6741 20f0 13171700 		slli	a4,a4,1	#, tmp1930, tmp1929
 6742              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6743 20f4 93971700 		slli	a5,a5,1	#, tmp1925, _2227
 6744              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6745 20f8 3307E600 		add	a4,a2,a4	# tmp1930, tmp1931, tmp2267
 6746              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6747 20fc B307F600 		add	a5,a2,a5	# tmp1925, tmp1926, tmp2267
 6748 2100 03960700 		lh	a2,0(a5)		# _2228, sin90[_2227]
 6749              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6750 2104 03150700 		lh	a0,0(a4)		# sin90[_2230], sin90[_2230]
 6751              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6752 2108 83478102 		lbu	a5,40(sp)	# tmp1935, %sfp
 6753              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6754 210c 13F70604 		andi	a4,a3,64	#, tmp1943, v0.41_2221
 6755              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6756 2110 3305C540 		sub	a0,a0,a2	# tmp1933, sin90[_2230], _2228
 6757              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6758 2114 3305F502 		mul	a0,a0,a5	# tmp1936, tmp1933, tmp1935
 6759              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6760 2118 13558540 		srai	a0,a0,8	#, tmp1937, tmp1936
 6761              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6762 211c 3305C500 		add	a0,a0,a2	# _2228, tmp1940, tmp1937
 6763 2120 13150501 		slli	a0,a0,16	#, _2242, tmp1940
 6764 2124 13550501 		srli	a0,a0,16	#, _2242, _2242
 6765              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6766 2128 63080700 		beq	a4,zero,.L524	#, tmp1943,,
 6767              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6768 212c 3305A040 		neg	a0,a0	# tmp1945, _2242
 6769 2130 13150501 		slli	a0,a0,16	#, _2242, tmp1945
 6770 2134 13550501 		srli	a0,a0,16	#, _2242, _2242
 6771              	.L524:
 6772              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6773 2138 13150501 		slli	a0,a0,16	#,, _2242
 6774 213c 13550541 		srai	a0,a0,16	#,,
 6775 2140 97000000 		call	__floatsidf		#
 6775      E7800000 
 6776 2148 B7070000 		lui	a5,%hi(.LC3)	# tmp2883,
 6777 214c 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 6778 2150 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 6779 2154 97000000 		call	__muldf3		#
 6779      E7800000 
 6780              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6781 215c 97000000 		call	__truncdfsf2		#
 6781      E7800000 
 6782 2164 93070500 		mv	a5,a0	# tmp2546,
 6783              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6784 2168 13050B00 		mv	a0,s6	#, _1956
 6785              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6786 216c 138B0700 		mv	s6,a5	# tmp1950, tmp2546
 6787              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6788 2170 97000000 		call	__floatsisf		#
 6788      E7800000 
 6789 2178 93070500 		mv	a5,a0	# tmp2547,
 6790              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6791 217c 13050C00 		mv	a0,s8	#, _1959
 6792              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6793 2180 2322F102 		sw	a5,36(sp)	# _1981, %sfp
 6794              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6795 2184 97000000 		call	__floatsisf		#
 6795      E7800000 
 6796 218c 130C0500 		mv	s8,a0	# tmp2548,
 6797              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6798 2190 13850DFD 		addi	a0,s11,-48	#,, _2027
 6799 2194 97000000 		call	__floatsisf		#
 6799      E7800000 
 6800 219c 930D0500 		mv	s11,a0	# tmp2549,
 6801              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6802 21a0 13050DFE 		addi	a0,s10,-32	#,, _2107
 6803 21a4 97000000 		call	__floatsisf		#
 6803      E7800000 
 6804 21ac 130D0500 		mv	s10,a0	# tmp2550,
 6805              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6806 21b0 93850D00 		mv	a1,s11	#, _1941
 6807 21b4 13850900 		mv	a0,s3	#, sin_theta
 6808 21b8 97000000 		call	__mulsf3		#
 6808      E7800000 
 6809              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6810 21c0 93050D00 		mv	a1,s10	#, _1943
 6811              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6812 21c4 232EA100 		sw	a0,28(sp)	# tmp1953, %sfp
 6813              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6814 21c8 13050900 		mv	a0,s2	#, cos_theta
 6815 21cc 97000000 		call	__mulsf3		#
 6815      E7800000 
 6816              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6817 21d4 0327C101 		lw	a4,28(sp)		# tmp1953, %sfp
 6818              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6819 21d8 93050500 		mv	a1,a0	# tmp2552,
 6820              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6821 21dc 13050700 		mv	a0,a4	#, tmp1953
 6822 21e0 97000000 		call	__addsf3		#
 6822      E7800000 
 6823              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6824 21e8 B7070000 		lui	a5,%hi(.LC7)	# tmp2884,
 6825 21ec 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6826 21f0 97000000 		call	__addsf3		#
 6826      E7800000 
 6827              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6828 21f8 97000000 		call	__fixsfsi		#
 6828      E7800000 
 6829 2200 93060500 		mv	a3,a0	# tmp2553,
 6830              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6831 2204 93850D00 		mv	a1,s11	#, _1941
 6832 2208 13050900 		mv	a0,s2	#, cos_theta
 6833              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6834 220c 2320D102 		sw	a3,32(sp)	# tmp1958, %sfp
 6835              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6836 2210 97000000 		call	__mulsf3		#
 6836      E7800000 
 6837 2218 930D0500 		mv	s11,a0	# tmp1959, tmp2554
 6838              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6839 221c 93050D00 		mv	a1,s10	#, _1943
 6840 2220 13850900 		mv	a0,s3	#, sin_theta
 6841 2224 97000000 		call	__mulsf3		#
 6841      E7800000 
 6842 222c 93050500 		mv	a1,a0	# tmp2555,
 6843              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6844 2230 13850D00 		mv	a0,s11	#, tmp1959
 6845 2234 97000000 		call	__subsf3		#
 6845      E7800000 
 6846              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6847 223c 37070000 		lui	a4,%hi(.LC5)	# tmp2885,
 6848 2240 83250700 		lw	a1,%lo(.LC5)(a4)		#,
 6849 2244 97000000 		call	__addsf3		#
 6849      E7800000 
 6850              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6851 224c 97000000 		call	__fixsfsi		#
 6851      E7800000 
 6852              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6853 2254 83274102 		lw	a5,36(sp)		# _1981, %sfp
 6854              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6855 2258 930D0500 		mv	s11,a0	# tmp2556,
 6856              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6857 225c 13850A00 		mv	a0,s5	#, sin_theta
 6858 2260 93850700 		mv	a1,a5	#, _1981
 6859 2264 232EF100 		sw	a5,28(sp)	# _1981, %sfp
 6860 2268 97000000 		call	__mulsf3		#
 6860      E7800000 
 6861 2270 130D0500 		mv	s10,a0	# tmp1965, tmp2557
 6862              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6863 2274 93050C00 		mv	a1,s8	#, _1983
 6864 2278 13050B00 		mv	a0,s6	#, tmp1950
 6865 227c 97000000 		call	__mulsf3		#
 6865      E7800000 
 6866 2284 93050500 		mv	a1,a0	# tmp2558,
 6867              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6868 2288 13050D00 		mv	a0,s10	#, tmp1965
 6869 228c 97000000 		call	__addsf3		#
 6869      E7800000 
 6870              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6871 2294 B7070000 		lui	a5,%hi(.LC7)	# tmp2886,
 6872 2298 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6873 229c 97000000 		call	__addsf3		#
 6873      E7800000 
 6874              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6875 22a4 97000000 		call	__fixsfsi		#
 6875      E7800000 
 6876              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6877 22ac 8327C101 		lw	a5,28(sp)		# _1981, %sfp
 6878              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6879 22b0 130D0500 		mv	s10,a0	# tmp2559,
 6880              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6881 22b4 13050B00 		mv	a0,s6	#, tmp1950
 6882 22b8 93850700 		mv	a1,a5	#, _1981
 6883 22bc 97000000 		call	__mulsf3		#
 6883      E7800000 
 6884              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6885 22c4 93050C00 		mv	a1,s8	#, _1983
 6886              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6887 22c8 232EA100 		sw	a0,28(sp)	# tmp1971, %sfp
 6888              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6889 22cc 13850A00 		mv	a0,s5	#, sin_theta
 6890 22d0 97000000 		call	__mulsf3		#
 6890      E7800000 
 6891              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6892 22d8 8327C101 		lw	a5,28(sp)		# tmp1971, %sfp
 6893              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6894 22dc 93050500 		mv	a1,a0	# tmp2561,
 6895              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6896 22e0 13850700 		mv	a0,a5	#, tmp1971
 6897 22e4 97000000 		call	__subsf3		#
 6897      E7800000 
 6898              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6899 22ec B7060000 		lui	a3,%hi(.LC5)	# tmp2887,
 6900 22f0 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6901 22f4 97000000 		call	__addsf3		#
 6901      E7800000 
 6902              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6903 22fc 97000000 		call	__fixsfsi		#
 6903      E7800000 
 6904              	# main_house3d_rotate.c:89:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07,
 6905 2304 83260102 		lw	a3,32(sp)		# tmp1958, %sfp
 6906 2308 93050D00 		mv	a1,s10	#, tmp1970
 6907 230c 13860D00 		mv	a2,s11	#, tmp1964
 6908 2310 97000000 		call	fb_draw_bresenham.constprop.0		#
 6908      E7800000 
 6909              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6910 2318 B70D0000 		lui	s11,%hi(.LANCHOR2)	# tmp2889,
 6911 231c 13860D00 		addi	a2,s11,%lo(.LANCHOR2)	# tmp2888, tmp2889,
 6912 2320 0325C623 		lw	a0,572(a2)		#, MEM[(struct point *)&right_top].y
 6913 2324 97000000 		call	__floatsisf		#
 6913      E7800000 
 6914 232c 93850B00 		mv	a1,s7	#, s
 6915 2330 97000000 		call	__mulsf3		#
 6915      E7800000 
 6916              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6917 2338 97000000 		call	__fixsfsi		#
 6917      E7800000 
 6918              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6919 2340 03264101 		lw	a2,20(sp)		# _437, %sfp
 6920 2344 3305C500 		add	a0,a0,a2	# _437, tmp1982, tmp2562
 6921              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6922 2348 130505FE 		addi	a0,a0,-32	#,, tmp1982
 6923 234c 97000000 		call	__floatsisf		#
 6923      E7800000 
 6924              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6925 2354 93850D00 		addi	a1,s11,%lo(.LANCHOR2)	# tmp2891, tmp2892,
 6926              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6927 2358 130D0500 		mv	s10,a0	# tmp2563,
 6928              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6929 235c 03A50524 		lw	a0,576(a1)		#, MEM[(struct point *)&right_top].z
 6930 2360 97000000 		call	__floatsisf		#
 6930      E7800000 
 6931 2368 93850B00 		mv	a1,s7	#, s
 6932 236c 97000000 		call	__mulsf3		#
 6932      E7800000 
 6933              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6934 2374 97000000 		call	__fixsfsi		#
 6934      E7800000 
 6935              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6936 237c 83250101 		lw	a1,16(sp)		# _439, %sfp
 6937 2380 3305B500 		add	a0,a0,a1	# _439,, tmp2564
 6938 2384 97000000 		call	__floatsisf		#
 6938      E7800000 
 6939 238c 130C0500 		mv	s8,a0	# tmp2565,
 6940              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6941 2390 13850D00 		addi	a0,s11,%lo(.LANCHOR2)	# tmp2894, tmp2895,
 6942 2394 03258524 		lw	a0,584(a0)		#, MEM[(struct point *)&right_top + 12B].y
 6943 2398 97000000 		call	__floatsisf		#
 6943      E7800000 
 6944 23a0 93850B00 		mv	a1,s7	#, s
 6945 23a4 97000000 		call	__mulsf3		#
 6945      E7800000 
 6946              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6947 23ac 97000000 		call	__fixsfsi		#
 6947      E7800000 
 6948              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6949 23b4 03264101 		lw	a2,20(sp)		# _437, %sfp
 6950 23b8 3305C500 		add	a0,a0,a2	# _437, tmp1995, tmp2566
 6951              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6952 23bc 130505FE 		addi	a0,a0,-32	#,, tmp1995
 6953 23c0 97000000 		call	__floatsisf		#
 6953      E7800000 
 6954 23c8 13070500 		mv	a4,a0	# tmp2567,
 6955              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6956 23cc 13850D00 		addi	a0,s11,%lo(.LANCHOR2)	# tmp2897, tmp2898,
 6957 23d0 0325C524 		lw	a0,588(a0)		#, MEM[(struct point *)&right_top + 12B].z
 6958              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6959 23d4 2322E102 		sw	a4,36(sp)	# _2434, %sfp
 6960              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6961 23d8 97000000 		call	__floatsisf		#
 6961      E7800000 
 6962 23e0 93850B00 		mv	a1,s7	#, s
 6963 23e4 97000000 		call	__mulsf3		#
 6963      E7800000 
 6964              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6965 23ec 97000000 		call	__fixsfsi		#
 6965      E7800000 
 6966              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6967 23f4 83250101 		lw	a1,16(sp)		# _439, %sfp
 6968 23f8 3305B500 		add	a0,a0,a1	# _439,, tmp2568
 6969 23fc 97000000 		call	__floatsisf		#
 6969      E7800000 
 6970              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6971 2404 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2901,
 6972              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6973 2408 930D0500 		mv	s11,a0	# tmp2569,
 6974              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6975 240c 13850700 		addi	a0,a5,%lo(.LANCHOR2)	# tmp2900, tmp2901,
 6976 2410 03258523 		lw	a0,568(a0)		#, MEM[(struct point *)&right_top].x
 6977 2414 97000000 		call	__floatsisf		#
 6977      E7800000 
 6978 241c 93850B00 		mv	a1,s7	#, s
 6979 2420 97000000 		call	__mulsf3		#
 6979      E7800000 
 6980              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6981 2428 97000000 		call	__fixsfsi		#
 6981      E7800000 
 6982              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6983 2430 0328C100 		lw	a6,12(sp)		# _434, %sfp
 6984 2434 33050501 		add	a0,a0,a6	# _434, tmp2008, tmp2570
 6985              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6986 2438 130505FD 		addi	a0,a0,-48	#,, tmp2008
 6987 243c 97000000 		call	__floatsisf		#
 6987      E7800000 
 6988 2444 93050400 		mv	a1,s0	#, cos_theta
 6989 2448 97000000 		call	__mulsf3		#
 6989      E7800000 
 6990 2450 93070500 		mv	a5,a0	# tmp2571,
 6991              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6992 2454 93050D00 		mv	a1,s10	#, _2474
 6993 2458 13050A00 		mv	a0,s4	#, sin_theta
 6994              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6995 245c 2320F102 		sw	a5,32(sp)	# tmp2011, %sfp
 6996              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6997 2460 97000000 		call	__mulsf3		#
 6997      E7800000 
 6998              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6999 2468 93050C00 		mv	a1,s8	#, _2476
 7000              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7001 246c 232EA100 		sw	a0,28(sp)	# tmp2012, %sfp
 7002              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7003 2470 13050400 		mv	a0,s0	#, cos_theta
 7004 2474 97000000 		call	__mulsf3		#
 7004      E7800000 
 7005              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7006 247c 8326C101 		lw	a3,28(sp)		# tmp2012, %sfp
 7007              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7008 2480 93050500 		mv	a1,a0	# tmp2573,
 7009              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7010 2484 13850600 		mv	a0,a3	#, tmp2012
 7011 2488 97000000 		call	__addsf3		#
 7011      E7800000 
 7012              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7013 2490 93050000 		mv	a1,zero	#,
 7014 2494 97000000 		call	__addsf3		#
 7014      E7800000 
 7015              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7016 249c 97000000 		call	__fixsfsi		#
 7016      E7800000 
 7017              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7018 24a4 97000000 		call	__floatsisf		#
 7018      E7800000 
 7019 24ac 93050A00 		mv	a1,s4	#, sin_theta
 7020 24b0 97000000 		call	__mulsf3		#
 7020      E7800000 
 7021              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7022 24b8 83270102 		lw	a5,32(sp)		# tmp2011, %sfp
 7023              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7024 24bc 93050500 		mv	a1,a0	# tmp2574,
 7025              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7026 24c0 13850700 		mv	a0,a5	#, tmp2011
 7027 24c4 97000000 		call	__addsf3		#
 7027      E7800000 
 7028              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7029 24cc B7060000 		lui	a3,%hi(.LC5)	# tmp2903,
 7030 24d0 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 7031 24d4 97000000 		call	__addsf3		#
 7031      E7800000 
 7032              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7033 24dc 97000000 		call	__fixsfsi		#
 7033      E7800000 
 7034              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7035 24e4 130505FD 		addi	a0,a0,-48	#,, tmp2575
 7036 24e8 97000000 		call	__floatsisf		#
 7036      E7800000 
 7037 24f0 93070500 		mv	a5,a0	# tmp2576,
 7038              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7039 24f4 93050D00 		mv	a1,s10	#, _2474
 7040 24f8 13050400 		mv	a0,s0	#, cos_theta
 7041              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7042 24fc 138D0700 		mv	s10,a5	# _2314, tmp2576
 7043              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7044 2500 97000000 		call	__mulsf3		#
 7044      E7800000 
 7045              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7046 2508 93050C00 		mv	a1,s8	#, _2476
 7047              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7048 250c 232EA100 		sw	a0,28(sp)	# tmp2024, %sfp
 7049              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7050 2510 13050A00 		mv	a0,s4	#, sin_theta
 7051 2514 97000000 		call	__mulsf3		#
 7051      E7800000 
 7052              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7053 251c 8327C101 		lw	a5,28(sp)		# tmp2024, %sfp
 7054              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7055 2520 93050500 		mv	a1,a0	# tmp2578,
 7056              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7057 2524 13850700 		mv	a0,a5	#, tmp2024
 7058 2528 97000000 		call	__subsf3		#
 7058      E7800000 
 7059              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7060 2530 37070000 		lui	a4,%hi(.LC7)	# tmp2904,
 7061 2534 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 7062 2538 97000000 		call	__addsf3		#
 7062      E7800000 
 7063              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7064 2540 97000000 		call	__fixsfsi		#
 7064      E7800000 
 7065              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7066 2548 130505FE 		addi	a0,a0,-32	#,, tmp2579
 7067 254c 97000000 		call	__floatsisf		#
 7067      E7800000 
 7068              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7069 2554 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2906,
 7070              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7071 2558 130C0500 		mv	s8,a0	# tmp2580,
 7072              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7073 255c 13850700 		addi	a0,a5,%lo(.LANCHOR2)	# tmp2905, tmp2906,
 7074 2560 03254524 		lw	a0,580(a0)		#, MEM[(struct point *)&right_top + 12B].x
 7075 2564 97000000 		call	__floatsisf		#
 7075      E7800000 
 7076 256c 93850B00 		mv	a1,s7	#, s
 7077 2570 97000000 		call	__mulsf3		#
 7077      E7800000 
 7078              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7079 2578 97000000 		call	__fixsfsi		#
 7079      E7800000 
 7080              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7081 2580 0328C100 		lw	a6,12(sp)		# _434, %sfp
 7082 2584 33050501 		add	a0,a0,a6	# _434, tmp2036, tmp2581
 7083              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7084 2588 130505FD 		addi	a0,a0,-48	#,, tmp2036
 7085 258c 97000000 		call	__floatsisf		#
 7085      E7800000 
 7086 2594 93050400 		mv	a1,s0	#, cos_theta
 7087 2598 97000000 		call	__mulsf3		#
 7087      E7800000 
 7088              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7089 25a0 03274102 		lw	a4,36(sp)		# _2434, %sfp
 7090              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7091 25a4 93070500 		mv	a5,a0	# tmp2582,
 7092              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7093 25a8 13050A00 		mv	a0,s4	#, sin_theta
 7094 25ac 93050700 		mv	a1,a4	#, _2434
 7095              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7096 25b0 2320F102 		sw	a5,32(sp)	# tmp2039, %sfp
 7097              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7098 25b4 97000000 		call	__mulsf3		#
 7098      E7800000 
 7099              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7100 25bc 93850D00 		mv	a1,s11	#, _2436
 7101              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7102 25c0 232EA100 		sw	a0,28(sp)	# tmp2040, %sfp
 7103              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7104 25c4 13050400 		mv	a0,s0	#, cos_theta
 7105 25c8 97000000 		call	__mulsf3		#
 7105      E7800000 
 7106              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7107 25d0 8326C101 		lw	a3,28(sp)		# tmp2040, %sfp
 7108              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7109 25d4 93050500 		mv	a1,a0	# tmp2584,
 7110              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7111 25d8 13850600 		mv	a0,a3	#, tmp2040
 7112 25dc 97000000 		call	__addsf3		#
 7112      E7800000 
 7113              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7114 25e4 93050000 		mv	a1,zero	#,
 7115 25e8 97000000 		call	__addsf3		#
 7115      E7800000 
 7116              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7117 25f0 97000000 		call	__fixsfsi		#
 7117      E7800000 
 7118              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7119 25f8 97000000 		call	__floatsisf		#
 7119      E7800000 
 7120 2600 93850400 		mv	a1,s1	#, sin_theta
 7121 2604 97000000 		call	__mulsf3		#
 7121      E7800000 
 7122              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7123 260c 83270102 		lw	a5,32(sp)		# tmp2039, %sfp
 7124              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7125 2610 93050500 		mv	a1,a0	# tmp2585,
 7126              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7127 2614 13850700 		mv	a0,a5	#, tmp2039
 7128 2618 97000000 		call	__addsf3		#
 7128      E7800000 
 7129              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7130 2620 B7060000 		lui	a3,%hi(.LC5)	# tmp2908,
 7131 2624 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 7132 2628 97000000 		call	__addsf3		#
 7132      E7800000 
 7133              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7134 2630 97000000 		call	__fixsfsi		#
 7134      E7800000 
 7135              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7136 2638 130505FD 		addi	a0,a0,-48	#,, tmp2586
 7137 263c 97000000 		call	__floatsisf		#
 7137      E7800000 
 7138              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7139 2644 03274102 		lw	a4,36(sp)		# _2434, %sfp
 7140              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7141 2648 93070500 		mv	a5,a0	# tmp2587,
 7142              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7143 264c 13050400 		mv	a0,s0	#, cos_theta
 7144 2650 93050700 		mv	a1,a4	#, _2434
 7145              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7146 2654 2320F102 		sw	a5,32(sp)	# _2274, %sfp
 7147              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7148 2658 97000000 		call	__mulsf3		#
 7148      E7800000 
 7149              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7150 2660 93850D00 		mv	a1,s11	#, _2436
 7151              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7152 2664 232EA100 		sw	a0,28(sp)	# tmp2052, %sfp
 7153              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7154 2668 13050A00 		mv	a0,s4	#, sin_theta
 7155 266c 97000000 		call	__mulsf3		#
 7155      E7800000 
 7156              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7157 2674 0327C101 		lw	a4,28(sp)		# tmp2052, %sfp
 7158              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7159 2678 93050500 		mv	a1,a0	# tmp2589,
 7160              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7161 267c 13050700 		mv	a0,a4	#, tmp2052
 7162 2680 97000000 		call	__subsf3		#
 7162      E7800000 
 7163              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7164 2688 37070000 		lui	a4,%hi(.LC7)	# tmp2909,
 7165 268c 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 7166 2690 97000000 		call	__addsf3		#
 7166      E7800000 
 7167              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7168 2698 97000000 		call	__fixsfsi		#
 7168      E7800000 
 7169              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7170 26a0 130505FE 		addi	a0,a0,-32	#,, tmp2590
 7171 26a4 97000000 		call	__floatsisf		#
 7171      E7800000 
 7172              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7173 26ac 83270102 		lw	a5,32(sp)		# _2274, %sfp
 7174              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7175 26b0 930D0500 		mv	s11,a0	# tmp2591,
 7176              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7177 26b4 13850900 		mv	a0,s3	#, sin_theta
 7178 26b8 93850700 		mv	a1,a5	#, _2274
 7179 26bc 97000000 		call	__mulsf3		#
 7179      E7800000 
 7180              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7181 26c4 93850D00 		mv	a1,s11	#, _2276
 7182              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7183 26c8 232EA100 		sw	a0,28(sp)	# tmp2059, %sfp
 7184              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7185 26cc 13050900 		mv	a0,s2	#, cos_theta
 7186 26d0 97000000 		call	__mulsf3		#
 7186      E7800000 
 7187              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7188 26d8 0327C101 		lw	a4,28(sp)		# tmp2059, %sfp
 7189              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7190 26dc 93050500 		mv	a1,a0	# tmp2593,
 7191              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7192 26e0 13050700 		mv	a0,a4	#, tmp2059
 7193 26e4 97000000 		call	__addsf3		#
 7193      E7800000 
 7194              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7195 26ec 37070000 		lui	a4,%hi(.LC7)	# tmp2910,
 7196 26f0 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 7197 26f4 97000000 		call	__addsf3		#
 7197      E7800000 
 7198              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7199 26fc 97000000 		call	__fixsfsi		#
 7199      E7800000 
 7200              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7201 2704 83270102 		lw	a5,32(sp)		# _2274, %sfp
 7202              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7203 2708 93060500 		mv	a3,a0	# tmp2594,
 7204              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7205 270c 13050900 		mv	a0,s2	#, cos_theta
 7206 2710 93850700 		mv	a1,a5	#, _2274
 7207              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7208 2714 2320D102 		sw	a3,32(sp)	# tmp2064, %sfp
 7209              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7210 2718 97000000 		call	__mulsf3		#
 7210      E7800000 
 7211              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7212 2720 93850D00 		mv	a1,s11	#, _2276
 7213              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7214 2724 232EA100 		sw	a0,28(sp)	# tmp2065, %sfp
 7215              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7216 2728 13850900 		mv	a0,s3	#, sin_theta
 7217 272c 97000000 		call	__mulsf3		#
 7217      E7800000 
 7218              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7219 2734 8327C101 		lw	a5,28(sp)		# tmp2065, %sfp
 7220              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7221 2738 93050500 		mv	a1,a0	# tmp2596,
 7222              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7223 273c 13850700 		mv	a0,a5	#, tmp2065
 7224 2740 97000000 		call	__subsf3		#
 7224      E7800000 
 7225              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7226 2748 B7060000 		lui	a3,%hi(.LC5)	# tmp2911,
 7227 274c 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 7228 2750 97000000 		call	__addsf3		#
 7228      E7800000 
 7229              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7230 2758 97000000 		call	__fixsfsi		#
 7230      E7800000 
 7231 2760 930D0500 		mv	s11,a0	# tmp2597,
 7232              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7233 2764 93050D00 		mv	a1,s10	#, _2314
 7234 2768 13850A00 		mv	a0,s5	#, sin_theta
 7235 276c 97000000 		call	__mulsf3		#
 7235      E7800000 
 7236              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7237 2774 93050C00 		mv	a1,s8	#, _2316
 7238              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7239 2778 232EA100 		sw	a0,28(sp)	# tmp2071, %sfp
 7240              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7241 277c 13050B00 		mv	a0,s6	#, tmp1950
 7242 2780 97000000 		call	__mulsf3		#
 7242      E7800000 
 7243              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7244 2788 8327C101 		lw	a5,28(sp)		# tmp2071, %sfp
 7245              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7246 278c 93050500 		mv	a1,a0	# tmp2599,
 7247              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7248 2790 13850700 		mv	a0,a5	#, tmp2071
 7249 2794 97000000 		call	__addsf3		#
 7249      E7800000 
 7250              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7251 279c 37070000 		lui	a4,%hi(.LC7)	# tmp2912,
 7252 27a0 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 7253 27a4 97000000 		call	__addsf3		#
 7253      E7800000 
 7254              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7255 27ac 97000000 		call	__fixsfsi		#
 7255      E7800000 
 7256 27b4 93070500 		mv	a5,a0	# tmp2600,
 7257              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7258 27b8 93050D00 		mv	a1,s10	#, _2314
 7259 27bc 13050B00 		mv	a0,s6	#, tmp1950
 7260              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7261 27c0 138B0700 		mv	s6,a5	# tmp2076, tmp2600
 7262              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7263 27c4 97000000 		call	__mulsf3		#
 7263      E7800000 
 7264 27cc 130D0500 		mv	s10,a0	# tmp2077, tmp2601
 7265              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7266 27d0 93050C00 		mv	a1,s8	#, _2316
 7267 27d4 13850A00 		mv	a0,s5	#, sin_theta
 7268 27d8 97000000 		call	__mulsf3		#
 7268      E7800000 
 7269 27e0 93050500 		mv	a1,a0	# tmp2602,
 7270              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7271 27e4 13050D00 		mv	a0,s10	#, tmp2077
 7272 27e8 97000000 		call	__subsf3		#
 7272      E7800000 
 7273              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7274 27f0 B7060000 		lui	a3,%hi(.LC5)	# tmp2913,
 7275 27f4 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 7276              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7277 27f8 370D0000 		lui	s10,%hi(.LANCHOR2)	# tmp2915,
 7278              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7279 27fc 97000000 		call	__addsf3		#
 7279      E7800000 
 7280              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7281 2804 97000000 		call	__fixsfsi		#
 7281      E7800000 
 7282              	# main_house3d_rotate.c:89:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07,
 7283 280c 83260102 		lw	a3,32(sp)		# tmp2064, %sfp
 7284 2810 13860D00 		mv	a2,s11	#, tmp2070
 7285 2814 93050B00 		mv	a1,s6	#, tmp2076
 7286 2818 97000000 		call	fb_draw_bresenham.constprop.0		#
 7286      E7800000 
 7287              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7288 2820 93070D00 		addi	a5,s10,%lo(.LANCHOR2)	# tmp2914, tmp2915,
 7289 2824 03A54725 		lw	a0,596(a5)		#, MEM[(struct point *)&roof].y
 7290 2828 97000000 		call	__floatsisf		#
 7290      E7800000 
 7291 2830 93850B00 		mv	a1,s7	#, s
 7292 2834 97000000 		call	__mulsf3		#
 7292      E7800000 
 7293              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7294 283c 97000000 		call	__fixsfsi		#
 7294      E7800000 
 7295              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7296 2844 832D4101 		lw	s11,20(sp)		# _437, %sfp
 7297 2848 3305B501 		add	a0,a0,s11	# _437, tmp2088, tmp2603
 7298              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7299 284c 130505FE 		addi	a0,a0,-32	#,, tmp2088
 7300 2850 97000000 		call	__floatsisf		#
 7300      E7800000 
 7301              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7302 2858 93070D00 		addi	a5,s10,%lo(.LANCHOR2)	# tmp2917, tmp2918,
 7303              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7304 285c 130B0500 		mv	s6,a0	# tmp2604,
 7305              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7306 2860 03A58725 		lw	a0,600(a5)		#, MEM[(struct point *)&roof].z
 7307 2864 97000000 		call	__floatsisf		#
 7307      E7800000 
 7308 286c 93850B00 		mv	a1,s7	#, s
 7309 2870 97000000 		call	__mulsf3		#
 7309      E7800000 
 7310              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7311 2878 97000000 		call	__fixsfsi		#
 7311      E7800000 
 7312              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7313 2880 83250101 		lw	a1,16(sp)		# _439, %sfp
 7314 2884 3305B500 		add	a0,a0,a1	# _439,, tmp2605
 7315 2888 97000000 		call	__floatsisf		#
 7315      E7800000 
 7316              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7317 2890 93070D00 		addi	a5,s10,%lo(.LANCHOR2)	# tmp2920, tmp2921,
 7318              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7319 2894 130C0500 		mv	s8,a0	# tmp2606,
 7320              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7321 2898 03A50726 		lw	a0,608(a5)		#, MEM[(struct point *)&roof + 12B].y
 7322 289c 97000000 		call	__floatsisf		#
 7322      E7800000 
 7323 28a4 93850B00 		mv	a1,s7	#, s
 7324 28a8 97000000 		call	__mulsf3		#
 7324      E7800000 
 7325              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7326 28b0 97000000 		call	__fixsfsi		#
 7326      E7800000 
 7327              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7328 28b8 3305B501 		add	a0,a0,s11	# _437, tmp2101, tmp2607
 7329              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7330 28bc 130505FE 		addi	a0,a0,-32	#,, tmp2101
 7331 28c0 97000000 		call	__floatsisf		#
 7331      E7800000 
 7332              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7333 28c8 13060D00 		addi	a2,s10,%lo(.LANCHOR2)	# tmp2923, tmp2924,
 7334              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7335 28cc 930D0500 		mv	s11,a0	# tmp2608,
 7336              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7337 28d0 03254626 		lw	a0,612(a2)		#, MEM[(struct point *)&roof + 12B].z
 7338 28d4 97000000 		call	__floatsisf		#
 7338      E7800000 
 7339 28dc 93850B00 		mv	a1,s7	#, s
 7340 28e0 97000000 		call	__mulsf3		#
 7340      E7800000 
 7341              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7342 28e8 97000000 		call	__fixsfsi		#
 7342      E7800000 
 7343              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7344 28f0 83250101 		lw	a1,16(sp)		# _439, %sfp
 7345 28f4 3305B500 		add	a0,a0,a1	# _439,, tmp2609
 7346 28f8 97000000 		call	__floatsisf		#
 7346      E7800000 
 7347              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7348 2900 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2927,
 7349 2904 13860700 		addi	a2,a5,%lo(.LANCHOR2)	# tmp2926, tmp2927,
 7350              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7351 2908 130D0500 		mv	s10,a0	# tmp2610,
 7352              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7353 290c 03250625 		lw	a0,592(a2)		#, MEM[(struct point *)&roof].x
 7354 2910 97000000 		call	__floatsisf		#
 7354      E7800000 
 7355 2918 93850B00 		mv	a1,s7	#, s
 7356 291c 97000000 		call	__mulsf3		#
 7356      E7800000 
 7357              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7358 2924 97000000 		call	__fixsfsi		#
 7358      E7800000 
 7359              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7360 292c 0328C100 		lw	a6,12(sp)		# _434, %sfp
 7361 2930 33050501 		add	a0,a0,a6	# _434, tmp2114, tmp2611
 7362              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7363 2934 130505FD 		addi	a0,a0,-48	#,, tmp2114
 7364 2938 97000000 		call	__floatsisf		#
 7364      E7800000 
 7365 2940 93850C00 		mv	a1,s9	#, cos_theta
 7366 2944 97000000 		call	__mulsf3		#
 7366      E7800000 
 7367 294c 930C0500 		mv	s9,a0	# tmp2612,
 7368              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7369 2950 93050B00 		mv	a1,s6	#, _2869
 7370 2954 13050A00 		mv	a0,s4	#, sin_theta
 7371 2958 97000000 		call	__mulsf3		#
 7371      E7800000 
 7372              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7373 2960 93050C00 		mv	a1,s8	#, _2871
 7374              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7375 2964 2328A100 		sw	a0,16(sp)	# tmp2118, %sfp
 7376              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7377 2968 13050400 		mv	a0,s0	#, cos_theta
 7378 296c 97000000 		call	__mulsf3		#
 7378      E7800000 
 7379              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7380 2974 83270101 		lw	a5,16(sp)		# tmp2118, %sfp
 7381              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7382 2978 93050500 		mv	a1,a0	# tmp2614,
 7383              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7384 297c 13850700 		mv	a0,a5	#, tmp2118
 7385 2980 97000000 		call	__addsf3		#
 7385      E7800000 
 7386              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7387 2988 93050000 		mv	a1,zero	#,
 7388 298c 97000000 		call	__addsf3		#
 7388      E7800000 
 7389              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7390 2994 97000000 		call	__fixsfsi		#
 7390      E7800000 
 7391              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7392 299c 97000000 		call	__floatsisf		#
 7392      E7800000 
 7393 29a4 93850400 		mv	a1,s1	#, sin_theta
 7394 29a8 97000000 		call	__mulsf3		#
 7394      E7800000 
 7395 29b0 93050500 		mv	a1,a0	# tmp2615,
 7396              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7397 29b4 13850C00 		mv	a0,s9	#, tmp2117
 7398 29b8 97000000 		call	__addsf3		#
 7398      E7800000 
 7399              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7400 29c0 B7060000 		lui	a3,%hi(.LC5)	# tmp2929,
 7401 29c4 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 7402 29c8 97000000 		call	__addsf3		#
 7402      E7800000 
 7403              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7404 29d0 97000000 		call	__fixsfsi		#
 7404      E7800000 
 7405              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7406 29d8 130505FD 		addi	a0,a0,-48	#,, tmp2616
 7407 29dc 97000000 		call	__floatsisf		#
 7407      E7800000 
 7408 29e4 93070500 		mv	a5,a0	# tmp2617,
 7409              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7410 29e8 93050B00 		mv	a1,s6	#, _2869
 7411 29ec 13050400 		mv	a0,s0	#, cos_theta
 7412              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7413 29f0 138B0700 		mv	s6,a5	# _2709, tmp2617
 7414              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7415 29f4 97000000 		call	__mulsf3		#
 7415      E7800000 
 7416 29fc 930C0500 		mv	s9,a0	# tmp2130, tmp2618
 7417              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7418 2a00 93050C00 		mv	a1,s8	#, _2871
 7419 2a04 13050A00 		mv	a0,s4	#, sin_theta
 7420 2a08 97000000 		call	__mulsf3		#
 7420      E7800000 
 7421 2a10 93050500 		mv	a1,a0	# tmp2619,
 7422              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7423 2a14 13850C00 		mv	a0,s9	#, tmp2130
 7424 2a18 97000000 		call	__subsf3		#
 7424      E7800000 
 7425              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7426 2a20 37070000 		lui	a4,%hi(.LC7)	# tmp2930,
 7427 2a24 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 7428 2a28 97000000 		call	__addsf3		#
 7428      E7800000 
 7429              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7430 2a30 97000000 		call	__fixsfsi		#
 7430      E7800000 
 7431              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7432 2a38 130505FE 		addi	a0,a0,-32	#,, tmp2620
 7433 2a3c 97000000 		call	__floatsisf		#
 7433      E7800000 
 7434              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7435 2a44 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2932,
 7436 2a48 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# tmp2931, tmp2932,
 7437              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7438 2a4c 130A0500 		mv	s4,a0	# tmp2621,
 7439              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7440 2a50 03A5C725 		lw	a0,604(a5)		#, MEM[(struct point *)&roof + 12B].x
 7441 2a54 97000000 		call	__floatsisf		#
 7441      E7800000 
 7442 2a5c 93850B00 		mv	a1,s7	#, s
 7443 2a60 97000000 		call	__mulsf3		#
 7443      E7800000 
 7444              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7445 2a68 97000000 		call	__fixsfsi		#
 7445      E7800000 
 7446              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7447 2a70 0328C100 		lw	a6,12(sp)		# _434, %sfp
 7448 2a74 33050501 		add	a0,a0,a6	# _434, tmp2142, tmp2622
 7449              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7450 2a78 130505FD 		addi	a0,a0,-48	#,, tmp2142
 7451 2a7c 97000000 		call	__floatsisf		#
 7451      E7800000 
 7452 2a84 93050400 		mv	a1,s0	#, cos_theta
 7453 2a88 97000000 		call	__mulsf3		#
 7453      E7800000 
 7454 2a90 130C0500 		mv	s8,a0	# tmp2623,
 7455              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7456 2a94 93850D00 		mv	a1,s11	#, _2829
 7457 2a98 13850400 		mv	a0,s1	#, sin_theta
 7458 2a9c 97000000 		call	__mulsf3		#
 7458      E7800000 
 7459 2aa4 930C0500 		mv	s9,a0	# tmp2146, tmp2624
 7460              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7461 2aa8 93050D00 		mv	a1,s10	#, _2831
 7462 2aac 13050400 		mv	a0,s0	#, cos_theta
 7463 2ab0 97000000 		call	__mulsf3		#
 7463      E7800000 
 7464 2ab8 93050500 		mv	a1,a0	# tmp2625,
 7465              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7466 2abc 13850C00 		mv	a0,s9	#, tmp2146
 7467 2ac0 97000000 		call	__addsf3		#
 7467      E7800000 
 7468              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7469 2ac8 93050000 		mv	a1,zero	#,
 7470 2acc 97000000 		call	__addsf3		#
 7470      E7800000 
 7471              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7472 2ad4 97000000 		call	__fixsfsi		#
 7472      E7800000 
 7473              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7474 2adc 97000000 		call	__floatsisf		#
 7474      E7800000 
 7475 2ae4 93850400 		mv	a1,s1	#, sin_theta
 7476 2ae8 97000000 		call	__mulsf3		#
 7476      E7800000 
 7477 2af0 93050500 		mv	a1,a0	# tmp2626,
 7478              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7479 2af4 13050C00 		mv	a0,s8	#, tmp2145
 7480 2af8 97000000 		call	__addsf3		#
 7480      E7800000 
 7481              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7482 2b00 B7060000 		lui	a3,%hi(.LC5)	# tmp2934,
 7483 2b04 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 7484              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7485 2b08 B70C0000 		lui	s9,%hi(.LC7)	# tmp2935,
 7486              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7487 2b0c 97000000 		call	__addsf3		#
 7487      E7800000 
 7488              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7489 2b14 97000000 		call	__fixsfsi		#
 7489      E7800000 
 7490              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7491 2b1c 130505FD 		addi	a0,a0,-48	#,, tmp2627
 7492 2b20 97000000 		call	__floatsisf		#
 7492      E7800000 
 7493 2b28 130C0500 		mv	s8,a0	# tmp2628,
 7494              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7495 2b2c 93850D00 		mv	a1,s11	#, _2829
 7496 2b30 13050400 		mv	a0,s0	#, cos_theta
 7497 2b34 97000000 		call	__mulsf3		#
 7497      E7800000 
 7498 2b3c 13040500 		mv	s0,a0	# tmp2158, tmp2629
 7499              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7500 2b40 93050D00 		mv	a1,s10	#, _2831
 7501 2b44 13850400 		mv	a0,s1	#, sin_theta
 7502 2b48 97000000 		call	__mulsf3		#
 7502      E7800000 
 7503 2b50 93050500 		mv	a1,a0	# tmp2630,
 7504              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7505 2b54 13050400 		mv	a0,s0	#, tmp2158
 7506 2b58 97000000 		call	__subsf3		#
 7506      E7800000 
 7507              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7508 2b60 83A50C00 		lw	a1,%lo(.LC7)(s9)		#,
 7509 2b64 97000000 		call	__addsf3		#
 7509      E7800000 
 7510              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7511 2b6c 97000000 		call	__fixsfsi		#
 7511      E7800000 
 7512              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7513 2b74 130505FE 		addi	a0,a0,-32	#,, tmp2631
 7514 2b78 97000000 		call	__floatsisf		#
 7514      E7800000 
 7515 2b80 13040500 		mv	s0,a0	# tmp2632,
 7516              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7517 2b84 93050C00 		mv	a1,s8	#, _2669
 7518 2b88 13850900 		mv	a0,s3	#, sin_theta
 7519 2b8c 97000000 		call	__mulsf3		#
 7519      E7800000 
 7520 2b94 93040500 		mv	s1,a0	# tmp2165, tmp2633
 7521              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7522 2b98 93050400 		mv	a1,s0	#, _2671
 7523 2b9c 13050900 		mv	a0,s2	#, cos_theta
 7524 2ba0 97000000 		call	__mulsf3		#
 7524      E7800000 
 7525 2ba8 93050500 		mv	a1,a0	# tmp2634,
 7526              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7527 2bac 13850400 		mv	a0,s1	#, tmp2165
 7528 2bb0 97000000 		call	__addsf3		#
 7528      E7800000 
 7529              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7530 2bb8 83A50C00 		lw	a1,%lo(.LC7)(s9)		#,
 7531 2bbc 97000000 		call	__addsf3		#
 7531      E7800000 
 7532              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7533 2bc4 97000000 		call	__fixsfsi		#
 7533      E7800000 
 7534 2bcc 93060500 		mv	a3,a0	# tmp2635,
 7535              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7536 2bd0 93050C00 		mv	a1,s8	#, _2669
 7537 2bd4 13050900 		mv	a0,s2	#, cos_theta
 7538              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7539 2bd8 138C0600 		mv	s8,a3	# tmp2170, tmp2635
 7540              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7541 2bdc 97000000 		call	__mulsf3		#
 7541      E7800000 
 7542 2be4 93040500 		mv	s1,a0	# tmp2171, tmp2636
 7543              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7544 2be8 93050400 		mv	a1,s0	#, _2671
 7545 2bec 13850900 		mv	a0,s3	#, sin_theta
 7546 2bf0 97000000 		call	__mulsf3		#
 7546      E7800000 
 7547 2bf8 93050500 		mv	a1,a0	# tmp2637,
 7548              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7549 2bfc 13850400 		mv	a0,s1	#, tmp2171
 7550 2c00 97000000 		call	__subsf3		#
 7550      E7800000 
 7551              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7552 2c08 B7090000 		lui	s3,%hi(.LC5)	# tmp2937,
 7553 2c0c 83A50900 		lw	a1,%lo(.LC5)(s3)		#,
 7554 2c10 97000000 		call	__addsf3		#
 7554      E7800000 
 7555              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7556 2c18 97000000 		call	__fixsfsi		#
 7556      E7800000 
 7557 2c20 93040500 		mv	s1,a0	# tmp2638,
 7558              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7559 2c24 93050B00 		mv	a1,s6	#, _2709
 7560 2c28 13850A00 		mv	a0,s5	#, sin_theta
 7561 2c2c 97000000 		call	__mulsf3		#
 7561      E7800000 
 7562 2c34 13040500 		mv	s0,a0	# tmp2177, tmp2639
 7563              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7564 2c38 93050A00 		mv	a1,s4	#, _2711
 7565 2c3c 13050900 		mv	a0,s2	#, cos_theta
 7566 2c40 97000000 		call	__mulsf3		#
 7566      E7800000 
 7567 2c48 93050500 		mv	a1,a0	# tmp2640,
 7568              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7569 2c4c 13050400 		mv	a0,s0	#, tmp2177
 7570 2c50 97000000 		call	__addsf3		#
 7570      E7800000 
 7571              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7572 2c58 83A50C00 		lw	a1,%lo(.LC7)(s9)		#,
 7573 2c5c 97000000 		call	__addsf3		#
 7573      E7800000 
 7574              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7575 2c64 97000000 		call	__fixsfsi		#
 7575      E7800000 
 7576 2c6c 13040500 		mv	s0,a0	# tmp2641,
 7577              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7578 2c70 93050B00 		mv	a1,s6	#, _2709
 7579 2c74 13050900 		mv	a0,s2	#, cos_theta
 7580 2c78 97000000 		call	__mulsf3		#
 7580      E7800000 
 7581 2c80 13090500 		mv	s2,a0	# tmp2183, tmp2642
 7582              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7583 2c84 93050A00 		mv	a1,s4	#, _2711
 7584 2c88 13850A00 		mv	a0,s5	#, sin_theta
 7585 2c8c 97000000 		call	__mulsf3		#
 7585      E7800000 
 7586 2c94 93050500 		mv	a1,a0	# tmp2643,
 7587              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7588 2c98 13050900 		mv	a0,s2	#, tmp2183
 7589 2c9c 97000000 		call	__subsf3		#
 7589      E7800000 
 7590              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7591 2ca4 83A50900 		lw	a1,%lo(.LC5)(s3)		#,
 7592 2ca8 97000000 		call	__addsf3		#
 7592      E7800000 
 7593              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7594 2cb0 97000000 		call	__fixsfsi		#
 7594      E7800000 
 7595              	# main_house3d_rotate.c:89:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07,
 7596 2cb8 93060C00 		mv	a3,s8	#, tmp2170
 7597 2cbc 13860400 		mv	a2,s1	#, tmp2176
 7598 2cc0 93050400 		mv	a1,s0	#, tmp2182
 7599 2cc4 97000000 		call	fb_draw_bresenham.constprop.0		#
 7599      E7800000 
 7600              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7601 2ccc B7070030 		li	a5,805306368		# tmp2190,
 7602 2cd0 93065001 		li	a3,21		# tmp2191,
 7603 2cd4 23A6D700 		sw	a3,12(a5)	# tmp2191, MEM[(volatile uint32_t *)805306380B]
 7604 2cd8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7605 2cdc 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7606 2ce0 13075007 		li	a4,117		# tmp2198,
 7607 2ce4 23A6E700 		sw	a4,12(a5)	# tmp2198, MEM[(volatile uint32_t *)805306380B]
 7608 2ce8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7609 2cec 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7610 2cf0 23A6D700 		sw	a3,12(a5)	# tmp2191, MEM[(volatile uint32_t *)805306380B]
 7611 2cf4 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7612 2cf8 9306F005 		li	a3,95		# tmp2210,
 7613 2cfc 23A6D700 		sw	a3,12(a5)	# tmp2210, MEM[(volatile uint32_t *)805306380B]
 7614 2d00 23A6E700 		sw	a4,12(a5)	# tmp2198, MEM[(volatile uint32_t *)805306380B]
 7615 2d04 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7616 2d08 1307F003 		li	a4,63		# tmp2218,
 7617 2d0c 23A6E700 		sw	a4,12(a5)	# tmp2218, MEM[(volatile uint32_t *)805306380B]
 7618 2d10 B7070000 		lui	a5,%hi(framebuffer)	# tmp2941,
 7619 2d14 93870700 		addi	a5,a5,%lo(framebuffer)	# tmp2940, tmp2941,
 7620 2d18 B7060030 		li	a3,805306368		# tmp2223,
 7621              	.L525:
 7622              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7623 2d1c 03C70700 		lbu	a4,0(a5)	# MEM[(uint16_t *)_33], MEM[(uint16_t *)_33]
 7624              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 7625 2d20 93872700 		addi	a5,a5,2	#, ivtmp.540, ivtmp.540
 7626              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7627 2d24 13670710 		ori	a4,a4,256	#, _64, MEM[(uint16_t *)_33]
 7628              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7629 2d28 23A6E600 		sw	a4,12(a3)	# _64, MEM[(volatile uint32_t *)805306380B]
 7630              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 7631 2d2c 03278100 		lw	a4,8(sp)		# _3432, %sfp
 7632 2d30 E396E7FE 		bne	a5,a4,.L525	#, ivtmp.540, _3432,
 7633              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7634 2d34 93075001 		li	a5,21		# tmp2226,
 7635 2d38 23A6F600 		sw	a5,12(a3)	# tmp2226, MEM[(volatile uint32_t *)805306380B]
 7636 2d3c 23A60600 		sw	zero,12(a3)	#, MEM[(volatile uint32_t *)805306380B]
 7637 2d40 9307F005 		li	a5,95		# tmp2231,
 7638 2d44 23A6F600 		sw	a5,12(a3)	# tmp2231, MEM[(volatile uint32_t *)805306380B]
 7639 2d48 93075007 		li	a5,117		# tmp2234,
 7640 2d4c 23A6F600 		sw	a5,12(a3)	# tmp2234, MEM[(volatile uint32_t *)805306380B]
 7641              	# main_house3d_rotate.c:118:     if (s >= 10) delta_scale = -delta_scale;
 7642 2d50 B7070000 		lui	a5,%hi(.LC10)	# tmp2943,
 7643 2d54 83A50700 		lw	a1,%lo(.LC10)(a5)		#,
 7644              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7645 2d58 23A60600 		sw	zero,12(a3)	#, MEM[(volatile uint32_t *)805306380B]
 7646 2d5c 9307F003 		li	a5,63		# tmp2239,
 7647 2d60 23A6F600 		sw	a5,12(a3)	# tmp2239, MEM[(volatile uint32_t *)805306380B]
 7648              	# main_house3d_rotate.c:118:     if (s >= 10) delta_scale = -delta_scale;
 7649 2d64 13850B00 		mv	a0,s7	#, s
 7650 2d68 97000000 		call	__gesf2		#
 7650      E7800000 
 7651              	# main_house3d_rotate.c:115:     angle += delta_angle;
 7652 2d70 8327C105 		lw	a5,92(sp)		# angle, %sfp
 7653 2d74 9387F7FF 		addi	a5,a5,-1	#, angle, angle
 7654 2d78 232EF104 		sw	a5,92(sp)	# angle, %sfp
 7655              	# main_house3d_rotate.c:118:     if (s >= 10) delta_scale = -delta_scale;
 7656 2d7c 634A0500 		blt	a0,zero,.L526	#, tmp2644,,
 7657              	# main_house3d_rotate.c:118:     if (s >= 10) delta_scale = -delta_scale;
 7658 2d80 03270106 		lw	a4,96(sp)		# tmp2947, %sfp
 7659 2d84 B7070080 		li	a5,-2147483648		# tmp2244,
 7660 2d88 B3C7E700 		xor	a5,a5,a4	# tmp2947, tmp2946, tmp2244
 7661 2d8c 2320F106 		sw	a5,96(sp)	# tmp2946, %sfp
 7662              	.L526:
 7663              	# main_house3d_rotate.c:119:     if (s <= 0) delta_scale = -delta_scale;
 7664 2d90 93050000 		mv	a1,zero	#,
 7665 2d94 13850B00 		mv	a0,s7	#, s
 7666 2d98 97000000 		call	__lesf2		#
 7666      E7800000 
 7667 2da0 634AA000 		bgt	a0,zero,.L528	#, tmp2645,,
 7668              	# main_house3d_rotate.c:119:     if (s <= 0) delta_scale = -delta_scale;
 7669 2da4 03270106 		lw	a4,96(sp)		# tmp2949, %sfp
 7670 2da8 B7070080 		li	a5,-2147483648		# tmp2247,
 7671 2dac B3C7E700 		xor	a5,a5,a4	# tmp2949, tmp2948, tmp2247
 7672 2db0 2320F106 		sw	a5,96(sp)	# tmp2948, %sfp
 7673              	.L528:
 7674              	# main_house3d_rotate.c:120:     s += delta_scale;
 7675 2db4 83250106 		lw	a1,96(sp)		#, %sfp
 7676 2db8 13850B00 		mv	a0,s7	#, s
 7677 2dbc 97000000 		call	__addsf3		#
 7677      E7800000 
 7678 2dc4 B7070000 		lui	a5,%hi(framebuffer)	# tmp2951,
 7679 2dc8 930B0500 		mv	s7,a0	# s, tmp2646
 7680 2dcc 93870700 		addi	a5,a5,%lo(framebuffer)	# tmp2950, tmp2951,
 7681              	.L530:
 7682 2dd0 03278100 		lw	a4,8(sp)		# _3432, %sfp
 7683              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 7684 2dd4 23A00700 		sw	zero,0(a5)	#, MEM <vector(2) short unsigned int> [(uint16_t *)_25]
 7685 2dd8 93874700 		addi	a5,a5,4	#, ivtmp.531, ivtmp.531
 7686 2ddc E39AE7FE 		bne	a5,a4,.L530	#, ivtmp.531, _3432,
 7687              	# main_house3d_rotate.c:126:       gpio_set_value(angle % 8, 1);
 7688 2de0 0327C105 		lw	a4,92(sp)		# angle, %sfp
 7689              	# main_house3d_rotate.c:125:       IO_OUT(GPIO_OUTPUT, 0);
 7690 2de4 B7060030 		li	a3,805306368		# tmp2250,
 7691 2de8 23AE0600 		sw	zero,28(a3)	#, MEM[(volatile uint32_t *)805306396B]
 7692              	# main_house3d_rotate.c:126:       gpio_set_value(angle % 8, 1);
 7693 2dec 9357F741 		srai	a5,a4,31	#, tmp2254, angle
 7694 2df0 93D7D701 		srli	a5,a5,29	#, tmp2255, tmp2254
 7695 2df4 3307F700 		add	a4,a4,a5	# tmp2255, tmp2256, angle
 7696              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 7697 2df8 03A6C601 		lw	a2,28(a3)		# _2975, MEM[(volatile uint32_t *)805306396B]
 7698              	# main_house3d_rotate.c:126:       gpio_set_value(angle % 8, 1);
 7699 2dfc 13777700 		andi	a4,a4,7	#, tmp2257, tmp2256
 7700 2e00 3307F740 		sub	a4,a4,a5	# tmp2258, tmp2257, tmp2255
 7701              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 7702 2e04 93071000 		li	a5,1		# tmp2261,
 7703 2e08 B397E700 		sll	a5,a5,a4	# tmp2258, tmp2260, tmp2261
 7704              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 7705 2e0c B3E7C700 		or	a5,a5,a2	# _2975, _2979, tmp2260
 7706 2e10 23AEF600 		sw	a5,28(a3)	# _2979, MEM[(volatile uint32_t *)805306396B]
 7707 2e14 6FD00FAF 		j	.L531		#
 7709              		.globl	roof
 7710              		.globl	right_bottom
 7711              		.globl	right_top
 7712              		.globl	left_bottom
 7713              		.globl	left_top
 7714              		.globl	back
 7715              		.globl	front
 7716              		.globl	oled_8bit_init_seq
 7717              		.globl	framebuffer
 7718              		.globl	heap_memory_used
 7719              		.globl	heap_memory
 7720              		.section	.srodata.cst8,"aM",@progbits,8
 7721              		.align	3
 7722              	.LC1:
 7723 0000 00000000 		.word	0
 7724 0004 0000E040 		.word	1088421888
 7725              		.align	3
 7726              	.LC2:
 7727 0008 00000000 		.word	0
 7728 000c 00807640 		.word	1081507840
 7729              		.align	3
 7730              	.LC3:
 7731 0010 80004000 		.word	4194432
 7732 0014 2000003F 		.word	1056964640
 7733              		.section	.srodata.cst4,"aM",@progbits,4
 7734              		.align	2
 7735              	.LC4:
 7736 0000 0000A040 		.word	1084227584
 7737              		.align	2
 7738              	.LC5:
 7739 0004 00004042 		.word	1111490560
 7740              		.align	2
 7741              	.LC6:
 7742 0008 00007041 		.word	1097859072
 7743              		.align	2
 7744              	.LC7:
 7745 000c 00000042 		.word	1107296256
 7746              		.align	2
 7747              	.LC8:
 7748 0010 CDCCCC3D 		.word	1036831949
 7749              		.align	2
 7750              	.LC9:
 7751 0014 00008040 		.word	1082130432
 7752              		.align	2
 7753              	.LC10:
 7754 0018 00002041 		.word	1092616192
 7755              		.section	.rodata
 7756              		.align	2
 7757              		.set	.LANCHOR1,. + 0
 7760              	sin90:
 7761 0000 0000     		.half	0
 7762 0002 4706     		.half	1607
 7763 0004 8B0C     		.half	3211
 7764 0006 C712     		.half	4807
 7765 0008 F818     		.half	6392
 7766 000a 191F     		.half	7961
 7767 000c 2725     		.half	9511
 7768 000e 1E2B     		.half	11038
 7769 0010 FB30     		.half	12539
 7770 0012 B936     		.half	14009
 7771 0014 563C     		.half	15446
 7772 0016 CD41     		.half	16845
 7773 0018 1C47     		.half	18204
 7774 001a 3F4C     		.half	19519
 7775 001c 3351     		.half	20787
 7776 001e F455     		.half	22004
 7777 0020 815A     		.half	23169
 7778 0022 D65E     		.half	24278
 7779 0024 F162     		.half	25329
 7780 0026 CE66     		.half	26318
 7781 0028 6C6A     		.half	27244
 7782 002a C96D     		.half	28105
 7783 002c E170     		.half	28897
 7784 002e B573     		.half	29621
 7785 0030 4076     		.half	30272
 7786 0032 8378     		.half	30851
 7787 0034 7C7A     		.half	31356
 7788 0036 297C     		.half	31785
 7789 0038 897D     		.half	32137
 7790 003a 9C7E     		.half	32412
 7791 003c 617F     		.half	32609
 7792 003e D77F     		.half	32727
 7793 0040 FF7F     		.half	32767
 7794              		.data
 7795              		.align	2
 7796              		.set	.LANCHOR2,. + 0
 7799              	oled_8bit_init_seq:
 7800 0000 AEA032A1 		.string	"\256\2402\241"
 7800      00
 7801 0005 A200     		.string	"\242"
 7802 0007 A4A83FAD 		.ascii	"\244\250?\255\216\260\013\2611\263\360\212d\213x\214d\273:\276"
 7802      8EB00BB1 
 7802      31B3F08A 
 7802      648B788C 
 7802      64BB3ABE 
 7803 001b 3E870681 		.ascii	">\207\006\201\221\202P\203}\257"
 7803      91825083 
 7803      7DAF
 7804 0025 000000   		.zero	3
 7807              	front:
 7808              	# x:
 7809 0028 00000000 		.word	0
 7810              	# y:
 7811 002c 0A000000 		.word	10
 7812              	# z:
 7813 0030 00000000 		.word	0
 7814              	# x:
 7815 0034 05000000 		.word	5
 7816              	# y:
 7817 0038 05000000 		.word	5
 7818              	# z:
 7819 003c 00000000 		.word	0
 7820              	# x:
 7821 0040 05000000 		.word	5
 7822              	# y:
 7823 0044 05000000 		.word	5
 7824              	# z:
 7825 0048 00000000 		.word	0
 7826              	# x:
 7827 004c 0A000000 		.word	10
 7828              	# y:
 7829 0050 0A000000 		.word	10
 7830              	# z:
 7831 0054 00000000 		.word	0
 7832              	# x:
 7833 0058 00000000 		.word	0
 7834              	# y:
 7835 005c 0A000000 		.word	10
 7836              	# z:
 7837 0060 00000000 		.word	0
 7838              	# x:
 7839 0064 0A000000 		.word	10
 7840              	# y:
 7841 0068 0A000000 		.word	10
 7842              	# z:
 7843 006c 00000000 		.word	0
 7844              	# x:
 7845 0070 0A000000 		.word	10
 7846              	# y:
 7847 0074 0A000000 		.word	10
 7848              	# z:
 7849 0078 00000000 		.word	0
 7850              	# x:
 7851 007c 0A000000 		.word	10
 7852              	# y:
 7853 0080 14000000 		.word	20
 7854              	# z:
 7855 0084 00000000 		.word	0
 7856              	# x:
 7857 0088 0A000000 		.word	10
 7858              	# y:
 7859 008c 14000000 		.word	20
 7860              	# z:
 7861 0090 00000000 		.word	0
 7862              	# x:
 7863 0094 00000000 		.word	0
 7864              	# y:
 7865 0098 14000000 		.word	20
 7866              	# z:
 7867 009c 00000000 		.word	0
 7868              	# x:
 7869 00a0 00000000 		.word	0
 7870              	# y:
 7871 00a4 14000000 		.word	20
 7872              	# z:
 7873 00a8 00000000 		.word	0
 7874              	# x:
 7875 00ac 00000000 		.word	0
 7876              	# y:
 7877 00b0 0A000000 		.word	10
 7878              	# z:
 7879 00b4 00000000 		.word	0
 7880              	# x:
 7881 00b8 08000000 		.word	8
 7882              	# y:
 7883 00bc 14000000 		.word	20
 7884              	# z:
 7885 00c0 00000000 		.word	0
 7886              	# x:
 7887 00c4 08000000 		.word	8
 7888              	# y:
 7889 00c8 11000000 		.word	17
 7890              	# z:
 7891 00cc 00000000 		.word	0
 7892              	# x:
 7893 00d0 08000000 		.word	8
 7894              	# y:
 7895 00d4 11000000 		.word	17
 7896              	# z:
 7897 00d8 00000000 		.word	0
 7898              	# x:
 7899 00dc 06000000 		.word	6
 7900              	# y:
 7901 00e0 11000000 		.word	17
 7902              	# z:
 7903 00e4 00000000 		.word	0
 7904              	# x:
 7905 00e8 06000000 		.word	6
 7906              	# y:
 7907 00ec 11000000 		.word	17
 7908              	# z:
 7909 00f0 00000000 		.word	0
 7910              	# x:
 7911 00f4 06000000 		.word	6
 7912              	# y:
 7913 00f8 14000000 		.word	20
 7914              	# z:
 7915 00fc 00000000 		.word	0
 7916              	# x:
 7917 0100 01000000 		.word	1
 7918              	# y:
 7919 0104 0D000000 		.word	13
 7920              	# z:
 7921 0108 00000000 		.word	0
 7922              	# x:
 7923 010c 04000000 		.word	4
 7924              	# y:
 7925 0110 0D000000 		.word	13
 7926              	# z:
 7927 0114 00000000 		.word	0
 7928              	# x:
 7929 0118 04000000 		.word	4
 7930              	# y:
 7931 011c 0D000000 		.word	13
 7932              	# z:
 7933 0120 00000000 		.word	0
 7934              	# x:
 7935 0124 04000000 		.word	4
 7936              	# y:
 7937 0128 10000000 		.word	16
 7938              	# z:
 7939 012c 00000000 		.word	0
 7940              	# x:
 7941 0130 04000000 		.word	4
 7942              	# y:
 7943 0134 10000000 		.word	16
 7944              	# z:
 7945 0138 00000000 		.word	0
 7946              	# x:
 7947 013c 01000000 		.word	1
 7948              	# y:
 7949 0140 10000000 		.word	16
 7950              	# z:
 7951 0144 00000000 		.word	0
 7952              	# x:
 7953 0148 01000000 		.word	1
 7954              	# y:
 7955 014c 10000000 		.word	16
 7956              	# z:
 7957 0150 00000000 		.word	0
 7958              	# x:
 7959 0154 01000000 		.word	1
 7960              	# y:
 7961 0158 0D000000 		.word	13
 7962              	# z:
 7963 015c 00000000 		.word	0
 7966              	back:
 7967              	# x:
 7968 0160 00000000 		.word	0
 7969              	# y:
 7970 0164 0A000000 		.word	10
 7971              	# z:
 7972 0168 0A000000 		.word	10
 7973              	# x:
 7974 016c 05000000 		.word	5
 7975              	# y:
 7976 0170 05000000 		.word	5
 7977              	# z:
 7978 0174 0A000000 		.word	10
 7979              	# x:
 7980 0178 05000000 		.word	5
 7981              	# y:
 7982 017c 05000000 		.word	5
 7983              	# z:
 7984 0180 0A000000 		.word	10
 7985              	# x:
 7986 0184 0A000000 		.word	10
 7987              	# y:
 7988 0188 0A000000 		.word	10
 7989              	# z:
 7990 018c 0A000000 		.word	10
 7991              	# x:
 7992 0190 00000000 		.word	0
 7993              	# y:
 7994 0194 0A000000 		.word	10
 7995              	# z:
 7996 0198 0A000000 		.word	10
 7997              	# x:
 7998 019c 0A000000 		.word	10
 7999              	# y:
 8000 01a0 0A000000 		.word	10
 8001              	# z:
 8002 01a4 0A000000 		.word	10
 8003              	# x:
 8004 01a8 0A000000 		.word	10
 8005              	# y:
 8006 01ac 0A000000 		.word	10
 8007              	# z:
 8008 01b0 0A000000 		.word	10
 8009              	# x:
 8010 01b4 0A000000 		.word	10
 8011              	# y:
 8012 01b8 14000000 		.word	20
 8013              	# z:
 8014 01bc 0A000000 		.word	10
 8015              	# x:
 8016 01c0 0A000000 		.word	10
 8017              	# y:
 8018 01c4 14000000 		.word	20
 8019              	# z:
 8020 01c8 0A000000 		.word	10
 8021              	# x:
 8022 01cc 00000000 		.word	0
 8023              	# y:
 8024 01d0 14000000 		.word	20
 8025              	# z:
 8026 01d4 0A000000 		.word	10
 8027              	# x:
 8028 01d8 00000000 		.word	0
 8029              	# y:
 8030 01dc 14000000 		.word	20
 8031              	# z:
 8032 01e0 0A000000 		.word	10
 8033              	# x:
 8034 01e4 00000000 		.word	0
 8035              	# y:
 8036 01e8 0A000000 		.word	10
 8037              	# z:
 8038 01ec 0A000000 		.word	10
 8041              	left_bottom:
 8042              	# x:
 8043 01f0 00000000 		.word	0
 8044              	# y:
 8045 01f4 14000000 		.word	20
 8046              	# z:
 8047 01f8 00000000 		.word	0
 8048              	# x:
 8049 01fc 00000000 		.word	0
 8050              	# y:
 8051 0200 14000000 		.word	20
 8052              	# z:
 8053 0204 0A000000 		.word	10
 8056              	left_top:
 8057              	# x:
 8058 0208 00000000 		.word	0
 8059              	# y:
 8060 020c 0A000000 		.word	10
 8061              	# z:
 8062 0210 00000000 		.word	0
 8063              	# x:
 8064 0214 00000000 		.word	0
 8065              	# y:
 8066 0218 0A000000 		.word	10
 8067              	# z:
 8068 021c 0A000000 		.word	10
 8071              	right_bottom:
 8072              	# x:
 8073 0220 0A000000 		.word	10
 8074              	# y:
 8075 0224 14000000 		.word	20
 8076              	# z:
 8077 0228 00000000 		.word	0
 8078              	# x:
 8079 022c 0A000000 		.word	10
 8080              	# y:
 8081 0230 14000000 		.word	20
 8082              	# z:
 8083 0234 0A000000 		.word	10
 8086              	right_top:
 8087              	# x:
 8088 0238 0A000000 		.word	10
 8089              	# y:
 8090 023c 0A000000 		.word	10
 8091              	# z:
 8092 0240 00000000 		.word	0
 8093              	# x:
 8094 0244 0A000000 		.word	10
 8095              	# y:
 8096 0248 0A000000 		.word	10
 8097              	# z:
 8098 024c 0A000000 		.word	10
 8101              	roof:
 8102              	# x:
 8103 0250 05000000 		.word	5
 8104              	# y:
 8105 0254 05000000 		.word	5
 8106              	# z:
 8107 0258 00000000 		.word	0
 8108              	# x:
 8109 025c 05000000 		.word	5
 8110              	# y:
 8111 0260 05000000 		.word	5
 8112              	# z:
 8113 0264 0A000000 		.word	10
 8114              		.bss
 8115              		.align	2
 8116              		.set	.LANCHOR0,. + 0
 8119              	heap_memory:
 8120 0000 00000000 		.zero	1024
 8120      00000000 
 8120      00000000 
 8120      00000000 
 8120      00000000 
 8123              	framebuffer:
 8124 0400 00000000 		.zero	12288
 8124      00000000 
 8124      00000000 
 8124      00000000 
 8124      00000000 
 8125              		.section	.sbss,"aw",@nobits
 8126              		.align	2
 8129              	heap_memory_used:
 8130 0000 00000000 		.zero	4
 8131              		.ident	"GCC: (GNU) 11.1.0"
