   1              		.file	"main_seeed.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              	# GNU C17 (GCC) version 11.1.0 (riscv32-unknown-elf)
   7              	#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   8              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   9              	# options passed: -march=rv32im -mabi=ilp32 -mtune=rocket -march=rv32im -Os -fno-pic -fno-stack-pro
  10              		.text
  11              		.align	2
  12              		.globl	set_reg
  14              	set_reg:
  15              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
  16 0000 93071000 		li	a5,1		# tmp85,
  17 0004 B395B700 		sll	a1,a5,a1	# tmp88, _12, tmp85
  18              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
  19 0008 83270500 		lw	a5,0(a0)		# _1,* p
  20              	# kianv_stdlib.h:42:     if (bit) {
  21 000c 63080600 		beq	a2,zero,.L2	#, tmp89,,
  22              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
  23 0010 B3E5F500 		or	a1,a1,a5	# _1, _5, _12
  24              	.L4:
  25              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
  26 0014 2320B500 		sw	a1,0(a0)	# _18,* p
  27              	# kianv_stdlib.h:47: }
  28 0018 67800000 		ret	
  29              	.L2:
  30              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
  31 001c 93C5F5FF 		not	a1,a1	# tmp86, _12
  32              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
  33 0020 B3F5F500 		and	a1,a1,a5	# _13, _18, tmp86
  34 0024 6FF01FFF 		j	.L4		#
  36              		.align	2
  37              		.globl	gpio_set_value
  39              	gpio_set_value:
  40              	# kianv_stdlib.h:49: void gpio_set_value(int gpio, int bit) {
  41 0028 13860500 		mv	a2,a1	# tmp76, bit
  42              	# kianv_stdlib.h:50:     set_reg(GPIO_OUTPUT, gpio, bit);
  43 002c 93050500 		mv	a1,a0	#, tmp75
  44 0030 37050030 		li	a0,805306368		# tmp74,
  45 0034 1305C501 		addi	a0,a0,28	#,, tmp74
  46 0038 17030000 		tail	set_reg		#
  46      67000300 
  48              		.align	2
  49              		.globl	gpio_get_input_value
  51              	gpio_get_input_value:
  52              	# kianv_stdlib.h:54:   uint32_t read = IO_IN(GPIO_INPUT);
  53 0040 B7070030 		li	a5,805306368		# tmp77,
  54 0044 83A70702 		lw	a5,32(a5)		# read, MEM[(volatile uint32_t *)805306400B]
  55              	# kianv_stdlib.h:57:   return ((read >> gpio) & 0x01);
  56 0048 33D5A700 		srl	a0,a5,a0	# tmp80, tmp79, read
  57              	# kianv_stdlib.h:58: }
  58 004c 13751500 		andi	a0,a0,1	#,, tmp79
  59 0050 67800000 		ret	
  61              		.align	2
  62              		.globl	gpio_set_direction
  64              	gpio_set_direction:
  65              	# kianv_stdlib.h:60: void gpio_set_direction(int gpio, int bit) {
  66 0054 13860500 		mv	a2,a1	# tmp76, bit
  67              	# kianv_stdlib.h:61:     set_reg(GPIO_DIR, gpio, bit);
  68 0058 93050500 		mv	a1,a0	#, tmp75
  69 005c 37050030 		li	a0,805306368		# tmp74,
  70 0060 13054501 		addi	a0,a0,20	#,, tmp74
  71 0064 17030000 		tail	set_reg		#
  71      67000300 
  73              		.align	2
  74              		.globl	get_cycles
  76              	get_cycles:
  77 006c 130101FF 		addi	sp,sp,-16	#,,
  78              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
  79              	 #APP
  80              	# 68 "kianv_stdlib.h" 1
   1              	#include <stdint.h>
   2              	#include <math.h>
   3              	
   4              	/* kian hardware register */
   5              	#define IO_BASE 0x30000000
   6              	#define UART_TX             (volatile uint32_t *) (IO_BASE + 0x0000)
   7              	#define UART_READY          (volatile uint32_t *) (IO_BASE + 0x0000)
   8              	#define VIDEOENABLE         (volatile uint32_t *) (IO_BASE + 0x0008)
   9              	#define VIDEO               (volatile uint32_t *) (IO_BASE + 0x0008)
  10              	#define VIDEO_RAW           (volatile uint32_t *) (IO_BASE + 0x000C)
  11              	#define CPU_FREQ            (volatile uint32_t *) (IO_BASE + 0x0010)
  12              	// gpio hack stuff
  13              	#define GPIO_DIR            ( volatile uint32_t  *) (IO_BASE + 0x0014)
  14              	#define GPIO_PULLUP         ( volatile uint32_t  *) (IO_BASE + 0x0018) // not implemented
  15              	#define GPIO_OUTPUT         ( volatile uint32_t  *) (IO_BASE + 0x001C)
  16              	#define GPIO_INPUT          ( volatile uint32_t  *) (IO_BASE + 0x0020)
  17              	#define IO_OUT(reg, value) *((volatile uint32_t  *) (reg)) = (value)
  18              	#define IO_IN(reg)         *((volatile uint32_t  *) reg)
  19              	
  20              	#define GPIO_INPUT_PIN  0
  21              	#define GPIO_OUTPUT_PIN 1
  22              	//#define RV32_FASTCODE __attribute((section(".fastcode")))
  23              	#define RV32_FASTCODE
  24              	
  25              	//__attribute((section(".fastcode")))
  26              	
  27              	#define RED   "\x1B[31m"
  28              	#define GRN   "\x1B[32m"
  29              	#define YEL   "\x1B[33m"
  30              	#define BLU   "\x1B[34m"
  31              	#define MAG   "\x1B[35m"
  32              	#define CYN   "\x1B[36m"
  33              	#define WHT   "\x1B[37m"
  34              	#define RESET "\x1B[0m"
  35              	
  36              	#define CLS       "\x1B[2J"
  37              	#define BOLD      "\x1B[1m"
  38              	#define BLINK     "\x1B[5m"
  39              	#define BLINK_OFF "\x1B[25m"
  40              	
  41              	void set_reg(volatile uint32_t *p, int gpio, int bit) {
  42              	    if (bit) {
  43              	      *p |=  (0x01 << (gpio & 0x1f));
  44              	    } else {
  45              	      *p &= ~( 0x01 << (gpio & 0x1f));
  46              	    }
  47              	}
  48              	
  49              	void gpio_set_value(int gpio, int bit) {
  50              	    set_reg(GPIO_OUTPUT, gpio, bit);
  51              	}
  52              	
  53              	uint32_t gpio_get_input_value(int gpio) {
  54              	  uint32_t read = IO_IN(GPIO_INPUT);
  55              	
  56              	  //  return ((read & (1<<gpio)) >> gpio);
  57              	  return ((read >> gpio) & 0x01);
  58              	}
  59              	
  60              	void gpio_set_direction(int gpio, int bit) {
  61              	    set_reg(GPIO_DIR, gpio, bit);
  62              	}
  63              	
  64              	uint64_t get_cycles() {
  65              	  volatile uint32_t tmph0;
  66              	  volatile uint32_t tmpl0;
  67              	
  68 0070 F32700C8 	  asm volatile ("rdcycleh %0" : "=r"(tmph0));
  69              	  asm volatile ("rdcycle  %0" : "=r"(tmpl0));
  81              		rdcycleh a5	# tmp78
  82              	# 0 "" 2
  83              	 #NO_APP
  84 0074 2324F100 		sw	a5,8(sp)	# tmp78, tmph0
  85              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
  86              	 #APP
  87              	# 69 "kianv_stdlib.h" 1
  70              	
  88              		rdcycle  a5	# tmp79
  89              	# 0 "" 2
  90              	 #NO_APP
  91 007c 2326F100 		sw	a5,12(sp)	# tmp79, tmpl0
  92              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
  93 0080 83258100 		lw	a1,8(sp)		# tmph0.0_1, tmph0
  94              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
  95 0084 0325C100 		lw	a0,12(sp)		# tmpl0.1_4, tmpl0
  96              	# kianv_stdlib.h:73: }
  97 0088 13010101 		addi	sp,sp,16	#,,
  98 008c 67800000 		jr	ra		#
 100              		.align	2
 101              		.globl	wait_cycles
 103              	wait_cycles:
 104 0090 130101FF 		addi	sp,sp,-16	#,,
 105 0094 23248100 		sw	s0,8(sp)	#,
 106 0098 23229100 		sw	s1,4(sp)	#,
 107 009c 23202101 		sw	s2,0(sp)	#,
 108 00a0 93040500 		mv	s1,a0	# wait, tmp97
 109 00a4 13890500 		mv	s2,a1	# wait, tmp98
 110 00a8 23261100 		sw	ra,12(sp)	#,
 111              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 112 00ac 97000000 		call	get_cycles		#
 112      E7800000 
 113              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 114 00b4 B3049500 		add	s1,a0,s1	# wait, tmp95, _1
 115 00b8 33B4A400 		sltu	s0,s1,a0	# _1, tmp78, tmp95
 116 00bc B3852501 		add	a1,a1,s2	# wait, tmp96, tmp100
 117 00c0 3304B400 		add	s0,s0,a1	# tmp96, tmp80, tmp78
 118              	.L13:
 119              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 120 00c4 97000000 		call	get_cycles		#
 120      E7800000 
 121              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 122 00cc E3EC85FE 		bgtu	s0,a1,.L13	#, tmp80, _2,
 123 00d0 6314B400 		bne	s0,a1,.L10	#, tmp80, _2,
 124 00d4 E36895FE 		bgtu	s1,a0,.L13	#, tmp95, _2,
 125              	.L10:
 126              	# kianv_stdlib.h:83: }
 127 00d8 8320C100 		lw	ra,12(sp)		#,
 128 00dc 03248100 		lw	s0,8(sp)		#,
 129 00e0 83244100 		lw	s1,4(sp)		#,
 130 00e4 03290100 		lw	s2,0(sp)		#,
 131 00e8 13010101 		addi	sp,sp,16	#,,
 132 00ec 67800000 		jr	ra		#
 134              		.align	2
 135              		.globl	usleep
 137              	usleep:
 138              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 139 00f0 63040502 		beq	a0,zero,.L15	#, us,,
 140              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 141 00f4 B7070030 		li	a5,805306368		# tmp78,
 142 00f8 83A70701 		lw	a5,16(a5)		# _8, MEM[(volatile uint32_t *)805306384B]
 143              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 144 00fc 37470F00 		li	a4,999424		# tmp82,
 145 0100 13070724 		addi	a4,a4,576	#, tmp81, tmp82
 146 0104 B3D7E702 		divu	a5,a5,a4	# tmp81, tmp80, _8
 147              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 148 0108 93050000 		li	a1,0		#,
 149 010c 3385A702 		mul	a0,a5,a0	#, tmp80, us
 150 0110 17030000 		tail	wait_cycles		#
 150      67000300 
 151              	.L15:
 152              	# kianv_stdlib.h:87: }
 153 0118 67800000 		ret	
 155              		.align	2
 156              		.globl	msleep
 158              	msleep:
 159              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 160 011c 63020502 		beq	a0,zero,.L17	#, ms,,
 161              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 162 0120 B7070030 		li	a5,805306368		# tmp78,
 163 0124 83A70701 		lw	a5,16(a5)		# _8, MEM[(volatile uint32_t *)805306384B]
 164              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 165 0128 1307803E 		li	a4,1000		# tmp80,
 166              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 167 012c 93050000 		li	a1,0		#,
 168              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 169 0130 B3D7E702 		divu	a5,a5,a4	# tmp80, tmp81, _8
 170              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 171 0134 3385A702 		mul	a0,a5,a0	#, tmp81, ms
 172 0138 17030000 		tail	wait_cycles		#
 172      67000300 
 173              	.L17:
 174              	# kianv_stdlib.h:91: }
 175 0140 67800000 		ret	
 177              		.align	2
 178              		.globl	sleep
 180              	sleep:
 181              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 182 0144 630E0500 		beq	a0,zero,.L19	#, sec,,
 183              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 184 0148 B7070030 		li	a5,805306368		# tmp77,
 185 014c 83A70701 		lw	a5,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 186              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 187 0150 93050000 		li	a1,0		#,
 188 0154 3305F502 		mul	a0,a0,a5	#, sec, _7
 189 0158 17030000 		tail	wait_cycles		#
 189      67000300 
 190              	.L19:
 191              	# kianv_stdlib.h:95: }
 192 0160 67800000 		ret	
 194              		.globl	__udivdi3
 195              		.align	2
 196              		.globl	nanoseconds
 198              	nanoseconds:
 199 0164 130101FF 		addi	sp,sp,-16	#,,
 200 0168 23261100 		sw	ra,12(sp)	#,
 201              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 202 016c 97000000 		call	get_cycles		#
 202      E7800000 
 203              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 204 0174 B7070030 		li	a5,805306368		# tmp78,
 205 0178 03A60701 		lw	a2,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 206              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 207 017c B7470F00 		li	a5,999424		# tmp83,
 208 0180 93870724 		addi	a5,a5,576	#, tmp82, tmp83
 209 0184 3356F602 		divu	a2,a2,a5	# tmp82,, _7
 210 0188 93060000 		li	a3,0		#,
 211 018c 97000000 		call	__udivdi3		#
 211      E7800000 
 212              	# kianv_stdlib.h:99: }
 213 0194 8320C100 		lw	ra,12(sp)		#,
 214 0198 13010101 		addi	sp,sp,16	#,,
 215 019c 67800000 		jr	ra		#
 217              		.align	2
 218              		.globl	milliseconds
 220              	milliseconds:
 221 01a0 130101FF 		addi	sp,sp,-16	#,,
 222 01a4 23261100 		sw	ra,12(sp)	#,
 223              	# kianv_stdlib.h:102:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 224 01a8 97000000 		call	get_cycles		#
 224      E7800000 
 225              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 226 01b0 B7070030 		li	a5,805306368		# tmp78,
 227 01b4 03A60701 		lw	a2,16(a5)		# _7, MEM[(volatile uint32_t *)805306384B]
 228              	# kianv_stdlib.h:102:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 229 01b8 9307803E 		li	a5,1000		# tmp81,
 230 01bc 93060000 		li	a3,0		#,
 231 01c0 3356F602 		divu	a2,a2,a5	# tmp81,, _7
 232 01c4 97000000 		call	__udivdi3		#
 232      E7800000 
 233              	# kianv_stdlib.h:103: }
 234 01cc 8320C100 		lw	ra,12(sp)		#,
 235 01d0 13010101 		addi	sp,sp,16	#,,
 236 01d4 67800000 		jr	ra		#
 238              		.align	2
 239              		.globl	seconds
 241              	seconds:
 242 01d8 130101FF 		addi	sp,sp,-16	#,,
 243 01dc 23261100 		sw	ra,12(sp)	#,
 244              	# kianv_stdlib.h:106:   return get_cycles() / (uint64_t) (get_cpu_freq());
 245 01e0 97000000 		call	get_cycles		#
 245      E7800000 
 246              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 247 01e8 B7070030 		li	a5,805306368		# tmp77,
 248 01ec 03A60701 		lw	a2,16(a5)		# _6, MEM[(volatile uint32_t *)805306384B]
 249              	# kianv_stdlib.h:106:   return get_cycles() / (uint64_t) (get_cpu_freq());
 250 01f0 93060000 		li	a3,0		#,
 251 01f4 97000000 		call	__udivdi3		#
 251      E7800000 
 252              	# kianv_stdlib.h:107: }
 253 01fc 8320C100 		lw	ra,12(sp)		#,
 254 0200 13010101 		addi	sp,sp,16	#,,
 255 0204 67800000 		jr	ra		#
 257              		.align	2
 258              		.globl	putchar
 260              	putchar:
 261              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 262 0208 B7070030 		li	a5,805306368		# tmp75,
 263              	.L28:
 264              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 265 020c 03A70700 		lw	a4,0(a5)		# _1, MEM[(volatile uint32_t *)805306368B]
 266              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 267 0210 E30E07FE 		beq	a4,zero,.L28	#, _1,,
 268              	# kianv_stdlib.h:112:   *((volatile uint32_t*) UART_TX) = c;
 269 0214 23A0A700 		sw	a0,0(a5)	# c, MEM[(volatile uint32_t *)805306368B]
 270              	# kianv_stdlib.h:113: }
 271 0218 67800000 		ret	
 273              		.align	2
 274              		.globl	print_chr
 276              	print_chr:
 277 021c 17030000 		tail	putchar		#
 277      67000300 
 279              		.align	2
 280              		.globl	print_str
 282              	print_str:
 283              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 284 0224 37070030 		li	a4,805306368		# tmp78,
 285              	.L33:
 286              	# kianv_stdlib.h:122:   while (*p != 0) {
 287 0228 83470500 		lbu	a5,0(a0)	# _3, MEM[(char *)p_4]
 288              	# kianv_stdlib.h:122:   while (*p != 0) {
 289 022c 63940700 		bne	a5,zero,.L34	#, _3,,
 290              	# kianv_stdlib.h:127: }
 291 0230 67800000 		ret	
 292              	.L34:
 293              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 294 0234 83260700 		lw	a3,0(a4)		# _1, MEM[(volatile uint32_t *)805306368B]
 295              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 296 0238 E38E06FE 		beq	a3,zero,.L34	#, _1,,
 297              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 298 023c 13051500 		addi	a0,a0,1	#, p, p
 299              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 300 0240 2320F700 		sw	a5,0(a4)	# _3, MEM[(volatile uint32_t *)805306368B]
 301 0244 6FF05FFE 		j	.L33		#
 303              		.align	2
 304              		.globl	print_str_ln
 306              	print_str_ln:
 307 0248 130101FF 		addi	sp,sp,-16	#,,
 308 024c 23261100 		sw	ra,12(sp)	#,
 309              	# kianv_stdlib.h:129:   print_str(p);
 310 0250 97000000 		call	print_str		#
 310      E7800000 
 311              	# kianv_stdlib.h:131: }
 312 0258 8320C100 		lw	ra,12(sp)		#,
 313              	# kianv_stdlib.h:130:   print_chr(10);
 314 025c 1305A000 		li	a0,10		#,
 315              	# kianv_stdlib.h:131: }
 316 0260 13010101 		addi	sp,sp,16	#,,
 317              	# kianv_stdlib.h:130:   print_chr(10);
 318 0264 17030000 		tail	putchar		#
 318      67000300 
 320              		.align	2
 321              		.globl	print_dec
 323              	print_dec:
 324 026c 130101FF 		addi	sp,sp,-16	#,,
 325              	# kianv_stdlib.h:135:   char *p = buffer;
 326 0270 93074100 		addi	a5,sp,4	#, p,
 327 0274 93860700 		mv	a3,a5	# p, p
 328              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 329 0278 1307A000 		li	a4,10		# tmp93,
 330              	.L41:
 331              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 332 027c 63180502 		bne	a0,zero,.L42	#, val,,
 333              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 334 0280 6386D702 		beq	a5,a3,.L42	#, p, p,
 335              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 336 0284 37060030 		li	a2,805306368		# tmp88,
 337              	.L43:
 338              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 339 0288 03270600 		lw	a4,0(a2)		# _3, MEM[(volatile uint32_t *)805306368B]
 340              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 341 028c E30E07FE 		beq	a4,zero,.L43	#, _3,,
 342              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 343 0290 03C7F7FF 		lbu	a4,-1(a5)	# MEM[(char *)p_16], MEM[(char *)p_16]
 344              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 345 0294 9387F7FF 		addi	a5,a5,-1	#, p, p
 346              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 347 0298 13070703 		addi	a4,a4,48	#, _7, MEM[(char *)p_16]
 348              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 349 029c 2320E600 		sw	a4,0(a2)	# _7, MEM[(volatile uint32_t *)805306368B]
 350              	# kianv_stdlib.h:141:   while (p != buffer) {
 351 02a0 E394D7FE 		bne	a5,a3,.L43	#, p, p,
 352              	# kianv_stdlib.h:146: }
 353 02a4 13010101 		addi	sp,sp,16	#,,
 354 02a8 67800000 		jr	ra		#
 355              	.L42:
 356              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 357 02ac 3376E502 		remu	a2,a0,a4	# tmp93, tmp83, val
 358              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 359 02b0 93871700 		addi	a5,a5,1	#, p, p
 360              	# kianv_stdlib.h:138:     val = val / 10;
 361 02b4 3355E502 		divu	a0,a0,a4	# tmp93, val, val
 362              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 363 02b8 A38FC7FE 		sb	a2,-1(a5)	# tmp83, MEM[(char *)p_18 + 4294967295B]
 364 02bc 6FF01FFC 		j	.L41		#
 366              		.globl	__umoddi3
 367              		.align	2
 368              		.globl	print_dec64
 370              	print_dec64:
 371 02c0 130101FC 		addi	sp,sp,-64	#,,
 372 02c4 23282103 		sw	s2,48(sp)	#,
 373              	# kianv_stdlib.h:150:   char *p = buffer;
 374 02c8 1309C100 		addi	s2,sp,12	#, p,
 375              	# kianv_stdlib.h:148: void print_dec64(uint64_t val) {
 376 02cc 232C8102 		sw	s0,56(sp)	#,
 377 02d0 232A9102 		sw	s1,52(sp)	#,
 378 02d4 23263103 		sw	s3,44(sp)	#,
 379 02d8 232E1102 		sw	ra,60(sp)	#,
 380              	# kianv_stdlib.h:148: void print_dec64(uint64_t val) {
 381 02dc 13040500 		mv	s0,a0	# val, tmp102
 382 02e0 93840500 		mv	s1,a1	# val, tmp103
 383 02e4 93090900 		mv	s3,s2	# p, p
 384              	.L50:
 385              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 386 02e8 B3679400 		or	a5,s0,s1	# val, val, val
 387 02ec 63920704 		bne	a5,zero,.L51	#, val,,
 388              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 389 02f0 63003905 		beq	s2,s3,.L51	#, p, p,
 390              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 391 02f4 37070030 		li	a4,805306368		# tmp93,
 392              	.L52:
 393              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 394 02f8 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 395              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 396 02fc E38E07FE 		beq	a5,zero,.L52	#, _3,,
 397              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 398 0300 8347F9FF 		lbu	a5,-1(s2)	# MEM[(char *)p_16], MEM[(char *)p_16]
 399              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 400 0304 1309F9FF 		addi	s2,s2,-1	#, p, p
 401              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 402 0308 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 403              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 404 030c 2320F700 		sw	a5,0(a4)	# _7, MEM[(volatile uint32_t *)805306368B]
 405              	# kianv_stdlib.h:156:   while (p != buffer) {
 406 0310 E31439FF 		bne	s2,s3,.L52	#, p, p,
 407              	# kianv_stdlib.h:161: }
 408 0314 8320C103 		lw	ra,60(sp)		#,
 409 0318 03248103 		lw	s0,56(sp)		#,
 410 031c 83244103 		lw	s1,52(sp)		#,
 411 0320 03290103 		lw	s2,48(sp)		#,
 412 0324 8329C102 		lw	s3,44(sp)		#,
 413 0328 13010104 		addi	sp,sp,64	#,,
 414 032c 67800000 		jr	ra		#
 415              	.L51:
 416              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 417 0330 1306A000 		li	a2,10		#,
 418 0334 93060000 		li	a3,0		#,
 419 0338 13050400 		mv	a0,s0	#, val
 420 033c 93850400 		mv	a1,s1	#, val
 421 0340 97000000 		call	__umoddi3		#
 421      E7800000 
 422              	# kianv_stdlib.h:153:     val = val / 10;
 423 0348 93850400 		mv	a1,s1	#, val
 424              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 425 034c 2300A900 		sb	a0,0(s2)	# tmp104, MEM[(char *)p_18 + 4294967295B]
 426              	# kianv_stdlib.h:153:     val = val / 10;
 427 0350 1306A000 		li	a2,10		#,
 428 0354 13050400 		mv	a0,s0	#, val
 429 0358 93060000 		li	a3,0		#,
 430 035c 97000000 		call	__udivdi3		#
 430      E7800000 
 431              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 432 0364 13091900 		addi	s2,s2,1	#, p, p
 433              	# kianv_stdlib.h:153:     val = val / 10;
 434 0368 13040500 		mv	s0,a0	# val, tmp106
 435 036c 93840500 		mv	s1,a1	# val, tmp107
 436 0370 6FF09FF7 		j	.L50		#
 438              		.section	.rodata.str1.4,"aMS",@progbits,1
 439              		.align	2
 440              	.LC0:
 441 0000 30313233 		.string	"0123456789ABCDEF"
 441      34353637 
 441      38394142 
 441      43444546 
 441      00
 442              		.text
 443              		.align	2
 444              		.globl	print_hex
 446              	print_hex:
 447              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 448 0374 9385F5FF 		addi	a1,a1,-1	#, tmp81, tmp93
 449              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 450 0378 37070000 		lui	a4,%hi(.LC0)	# tmp90,
 451              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 452 037c 93952500 		slli	a1,a1,2	#, i, tmp81
 453              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 454 0380 B7060030 		li	a3,805306368		# tmp89,
 455              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 456 0384 13070700 		addi	a4,a4,%lo(.LC0)	# tmp91, tmp90,
 457              	.L59:
 458              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 459 0388 63D40500 		bge	a1,zero,.L60	#, i,,
 460              	# kianv_stdlib.h:169: }
 461 038c 67800000 		ret	
 462              	.L60:
 463              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 464 0390 83A70600 		lw	a5,0(a3)		# _2, MEM[(volatile uint32_t *)805306368B]
 465              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 466 0394 E38E07FE 		beq	a5,zero,.L60	#, _2,,
 467              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 468 0398 B357B500 		srl	a5,a0,a1	# i, tmp85, val
 469              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 470 039c 93F7F700 		andi	a5,a5,15	#, tmp86, tmp85
 471              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 472 03a0 B307F700 		add	a5,a4,a5	# tmp86, tmp87, tmp91
 473 03a4 83C70700 		lbu	a5,0(a5)	# _6, "0123456789ABCDEF"[_4]
 474              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 475 03a8 9385C5FF 		addi	a1,a1,-4	#, i, i
 476              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 477 03ac 23A0F600 		sw	a5,0(a3)	# _6, MEM[(volatile uint32_t *)805306368B]
 478 03b0 6FF09FFD 		j	.L59		#
 480              		.align	2
 481              		.globl	setpixel
 483              	setpixel:
 484              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 485 03b4 B7070100 		li	a5,65536		# tmp88,
 486 03b8 9387F7FF 		addi	a5,a5,-1	#, tmp87, tmp88
 487 03bc 93958500 		slli	a1,a1,8	#, tmp85, tmp94
 488 03c0 B3F5F500 		and	a1,a1,a5	# tmp87, tmp86, tmp85
 489              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 490 03c4 93960601 		slli	a3,a3,16	#, tmp89, tmp96
 491              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 492 03c8 B3E5D500 		or	a1,a1,a3	# tmp89, tmp90, tmp86
 493              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 494 03cc 1376F60F 		andi	a2,a2,0xff	# tmp91, tmp95
 495              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 496 03d0 B3E5C500 		or	a1,a1,a2	# tmp91, _9, tmp90
 497              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 498 03d4 B7070030 		li	a5,805306368		# tmp93,
 499 03d8 23A4B700 		sw	a1,8(a5)	# _9, MEM[(volatile uint32_t *)805306376B]
 500              	# kianv_stdlib.h:184: }
 501 03dc 67800000 		ret	
 503              		.align	2
 504              		.globl	draw_bresenham
 506              	draw_bresenham:
 507 03e0 130101FC 		addi	sp,sp,-64	#,,
 508 03e4 232E7101 		sw	s7,28(sp)	#,
 509 03e8 930B0500 		mv	s7,a0	# fb, tmp101
 510              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 511 03ec 3385B640 		sub	a0,a3,a1	#, x1, x0
 512              	# kianv_stdlib.h:187: {
 513 03f0 232C8102 		sw	s0,56(sp)	#,
 514 03f4 232A9102 		sw	s1,52(sp)	#,
 515 03f8 23263103 		sw	s3,44(sp)	#,
 516 03fc 23225103 		sw	s5,36(sp)	#,
 517 0400 23206103 		sw	s6,32(sp)	#,
 518 0404 232C8101 		sw	s8,24(sp)	#,
 519 0408 2328A101 		sw	s10,16(sp)	#,
 520 040c 232E1102 		sw	ra,60(sp)	#,
 521 0410 23282103 		sw	s2,48(sp)	#,
 522 0414 23244103 		sw	s4,40(sp)	#,
 523 0418 232A9101 		sw	s9,20(sp)	#,
 524 041c 2326B101 		sw	s11,12(sp)	#,
 525              	# kianv_stdlib.h:187: {
 526 0420 93840500 		mv	s1,a1	# x0, tmp102
 527 0424 13040600 		mv	s0,a2	# y0, tmp103
 528 0428 938A0600 		mv	s5,a3	# x1, tmp104
 529 042c 130B0700 		mv	s6,a4	# y1, tmp105
 530 0430 138C0700 		mv	s8,a5	# color, tmp106
 531              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 532 0434 97000000 		call	abs		#
 532      E7800000 
 533 043c 93090500 		mv	s3,a0	# dx, tmp107
 534              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 535 0440 130DF0FF 		li	s10,-1		# iftmp.6_9,
 536 0444 63D45401 		ble	s5,s1,.L66	#, x1, x0,
 537 0448 130D1000 		li	s10,1		# iftmp.6_9,
 538              	.L66:
 539              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 540 044c 33058B40 		sub	a0,s6,s0	#, y1, y0
 541 0450 97000000 		call	abs		#
 541      E7800000 
 542 0458 130A0500 		mv	s4,a0	# _3, tmp108
 543              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 544 045c B30DA040 		neg	s11,a0	# dy, _3
 545              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 546 0460 930C1000 		li	s9,1		# iftmp.7_10,
 547 0464 63446401 		bgt	s6,s0,.L67	#, y1, y0,
 548              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 549 0468 930CF0FF 		li	s9,-1		# iftmp.7_10,
 550              	.L67:
 551 046c 33894941 		sub	s2,s3,s4	# err, dx, _3
 552              	.L68:
 553              	# kianv_stdlib.h:196:     setpixel(fb, x0, y0, color);
 554 0470 93060C00 		mv	a3,s8	#, color
 555 0474 13060400 		mv	a2,s0	#, y0
 556 0478 93850400 		mv	a1,s1	#, x0
 557 047c 13850B00 		mv	a0,s7	#, fb
 558 0480 97000000 		call	setpixel		#
 558      E7800000 
 559              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 560 0488 63945401 		bne	s1,s5,.L69	#, x0, x1,
 561              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 562 048c 63026403 		beq	s0,s6,.L65	#, y0, y1,
 563              	.L69:
 564              	# kianv_stdlib.h:198:     e2 = 2*err;
 565 0490 93171900 		slli	a5,s2,1	#, e2, err
 566              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 567 0494 63C6B701 		bgt	s11,a5,.L71	#, dy, e2,
 568 0498 33094941 		sub	s2,s2,s4	# err, err, _3
 569              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 570 049c B384A401 		add	s1,s1,s10	# iftmp.6_9, x0, x0
 571              	.L71:
 572              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 573 04a0 E3C8F9FC 		blt	s3,a5,.L68	#, dx, e2,
 574              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 575 04a4 33093901 		add	s2,s2,s3	# dx, err, err
 576              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 577 04a8 33049401 		add	s0,s0,s9	# iftmp.7_10, y0, y0
 578 04ac 6FF05FFC 		j	.L68		#
 579              	.L65:
 580              	# kianv_stdlib.h:202: }
 581 04b0 8320C103 		lw	ra,60(sp)		#,
 582 04b4 03248103 		lw	s0,56(sp)		#,
 583 04b8 83244103 		lw	s1,52(sp)		#,
 584 04bc 03290103 		lw	s2,48(sp)		#,
 585 04c0 8329C102 		lw	s3,44(sp)		#,
 586 04c4 032A8102 		lw	s4,40(sp)		#,
 587 04c8 832A4102 		lw	s5,36(sp)		#,
 588 04cc 032B0102 		lw	s6,32(sp)		#,
 589 04d0 832BC101 		lw	s7,28(sp)		#,
 590 04d4 032C8101 		lw	s8,24(sp)		#,
 591 04d8 832C4101 		lw	s9,20(sp)		#,
 592 04dc 032D0101 		lw	s10,16(sp)		#,
 593 04e0 832DC100 		lw	s11,12(sp)		#,
 594 04e4 13010104 		addi	sp,sp,64	#,,
 595 04e8 67800000 		jr	ra		#
 597              		.align	2
 598              		.globl	time
 600              	time:
 601              	# stdlib.c:33: 	asm volatile ("rdcycle %0" : "=r"(cycles));
 602              	 #APP
 603              	# 33 "stdlib.c" 1
   1              	// This is free and unencumbered software released into the public domain.
   2              	//
   3              	// Anyone is free to copy, modify, publish, use, compile, sell, or
   4              	// distribute this software, either in source code form or as a compiled
   5              	// binary, for any purpose, commercial or non-commercial, and by any
   6              	// means.
   7              	
   8              	#ifndef KV_STDLIB_H
   9              	#define KV_STDLIB_H
  10              	
  11              	#include <stdarg.h>
  12              	#include <stdint.h>
  13              	#include "kianv_stdlib.h"
  14              	extern long time();
  15              	extern long insn();
  16              	
  17              	#if defined(NOT_USE_MYSTDLIB)
  18              	#else
  19              	extern char *malloc();
  20              	extern int printf(const char *format, ...);
  21              	
  22              	extern void *memcpy(void *dest, const void *src, long n);
  23              	extern char *strcpy(char *dest, const char *src);
  24              	extern int strcmp(const char *s1, const char *s2);
  25              	
  26              	char heap_memory[1024];
  27              	int heap_memory_used = 0;
  28              	#endif
  29              	
  30              	long time()
  31              	{
  32              		int cycles;
  33 04ec 732500C0 		asm volatile ("rdcycle %0" : "=r"(cycles));
  34              		// printf("[time() -> %d]", cycles);
 604              		rdcycle a0	# cycles
 605              	# 0 "" 2
 606              	# stdlib.c:36: }
 607              	 #NO_APP
 608 04f0 67800000 		ret	
 610              		.align	2
 611              		.globl	insn
 613              	insn:
 614              	# stdlib.c:41: 	asm volatile ("rdinstret %0" : "=r"(insns));
 615              	 #APP
 616              	# 41 "stdlib.c" 1
  35              		return cycles;
  36              	}
  37              	
  38              	long insn()
  39              	{
  40              		int insns;
  41 04f4 732520C0 		asm volatile ("rdinstret %0" : "=r"(insns));
  42              		// printf("[insn() -> %d]", insns);
 617              		rdinstret a0	# insns
 618              	# 0 "" 2
 619              	# stdlib.c:44: }
 620              	 #NO_APP
 621 04f8 67800000 		ret	
 623              		.align	2
 624              		.globl	printf
 626              	printf:
 627 04fc 130101F8 		addi	sp,sp,-128	#,,
 628 0500 232AF106 		sw	a5,116(sp)	#,
 629              	# stdlib.c:94: 	va_start(ap, format);
 630 0504 93074106 		addi	a5,sp,100	#, tmp107,
 631              	# stdlib.c:90: {
 632 0508 23282105 		sw	s2,80(sp)	#,
 633 050c 23263105 		sw	s3,76(sp)	#,
 634 0510 23244105 		sw	s4,72(sp)	#,
 635 0514 23225105 		sw	s5,68(sp)	#,
 636 0518 23206105 		sw	s6,64(sp)	#,
 637 051c 232E7103 		sw	s7,60(sp)	#,
 638 0520 232E1104 		sw	ra,92(sp)	#,
 639 0524 232C8104 		sw	s0,88(sp)	#,
 640 0528 232A9104 		sw	s1,84(sp)	#,
 641 052c 232C8103 		sw	s8,56(sp)	#,
 642              	# stdlib.c:90: {
 643 0530 93090500 		mv	s3,a0	# format, tmp175
 644 0534 2322B106 		sw	a1,100(sp)	#,
 645 0538 2324C106 		sw	a2,104(sp)	#,
 646 053c 2326D106 		sw	a3,108(sp)	#,
 647 0540 2328E106 		sw	a4,112(sp)	#,
 648 0544 232C0107 		sw	a6,120(sp)	#,
 649 0548 232E1107 		sw	a7,124(sp)	#,
 650              	# stdlib.c:94: 	va_start(ap, format);
 651 054c 2326F100 		sw	a5,12(sp)	# tmp107, MEM[(void * *)&ap]
 652              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 653 0550 13090000 		li	s2,0		# i,
 654              	# stdlib.c:99: 				if (format[i] == 'c') {
 655 0554 130A3006 		li	s4,99		# tmp167,
 656              	# stdlib.c:103: 				if (format[i] == 's') {
 657 0558 930A3007 		li	s5,115		# tmp168,
 658              	# stdlib.c:107: 				if (format[i] == 'd') {
 659 055c 130B4006 		li	s6,100		# tmp169,
 660              	# stdlib.c:111: 				if (format[i] == 'u') {
 661 0560 930B5007 		li	s7,117		# tmp170,
 662              	.L80:
 663              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 664 0564 B3872901 		add	a5,s3,s2	# i, tmp157, format
 665 0568 03C50700 		lbu	a0,0(a5)	# _14, *_13
 666              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 667 056c 631A0502 		bne	a0,zero,.L97	#, _14,,
 668              	# stdlib.c:121: }
 669 0570 8320C105 		lw	ra,92(sp)		#,
 670 0574 03248105 		lw	s0,88(sp)		#,
 671 0578 83244105 		lw	s1,84(sp)		#,
 672 057c 03290105 		lw	s2,80(sp)		#,
 673 0580 8329C104 		lw	s3,76(sp)		#,
 674 0584 032A8104 		lw	s4,72(sp)		#,
 675 0588 832A4104 		lw	s5,68(sp)		#,
 676 058c 032B0104 		lw	s6,64(sp)		#,
 677 0590 832BC103 		lw	s7,60(sp)		#,
 678 0594 032C8103 		lw	s8,56(sp)		#,
 679 0598 13010108 		addi	sp,sp,128	#,,
 680 059c 67800000 		jr	ra		#
 681              	.L97:
 682              	# stdlib.c:97: 		if (format[i] == '%') {
 683 05a0 93075002 		li	a5,37		# tmp108,
 684 05a4 6314F502 		bne	a0,a5,.L102	#, _14, tmp108,
 685              	.L81:
 686              	# stdlib.c:98: 			while (format[++i]) {
 687 05a8 13091900 		addi	s2,s2,1	#, i, i
 688              	# stdlib.c:98: 			while (format[++i]) {
 689 05ac B3872901 		add	a5,s3,s2	# i, tmp156, format
 690 05b0 83C70700 		lbu	a5,0(a5)	# _10, MEM[(const char *)_27]
 691              	# stdlib.c:98: 			while (format[++i]) {
 692 05b4 63800704 		beq	a5,zero,.L84	#, _10,,
 693              	# stdlib.c:99: 				if (format[i] == 'c') {
 694 05b8 63904703 		bne	a5,s4,.L83	#, _10, tmp167,
 695              	# stdlib.c:100: 					printf_c(va_arg(ap,int));
 696 05bc 8327C100 		lw	a5,12(sp)		# D.2746, ap
 697              	# stdlib.c:49:     print_chr(c);
 698 05c0 03C50700 		lbu	a0,0(a5)	#, MEM[(int *)_98]
 699              	# stdlib.c:100: 					printf_c(va_arg(ap,int));
 700 05c4 13874700 		addi	a4,a5,4	#, D.2747, D.2746
 701 05c8 2326E100 		sw	a4,12(sp)	# D.2747, ap
 702              	.L102:
 703              	# stdlib.c:49:     print_chr(c);
 704 05cc 97000000 		call	putchar		#
 704      E7800000 
 705              	# stdlib.c:50: }
 706 05d4 6F000002 		j	.L84		#
 707              	.L83:
 708              	# stdlib.c:103: 				if (format[i] == 's') {
 709 05d8 639A5703 		bne	a5,s5,.L85	#, _10, tmp168,
 710              	# stdlib.c:104: 					printf_s(va_arg(ap,char*));
 711 05dc 8327C100 		lw	a5,12(sp)		# D.2748, ap
 712 05e0 03A40700 		lw	s0,0(a5)		# p, MEM[(char * *)_67]
 713 05e4 13874700 		addi	a4,a5,4	#, D.2749, D.2748
 714 05e8 2326E100 		sw	a4,12(sp)	# D.2749, ap
 715              	.L86:
 716              	# stdlib.c:54: 	while (*p)
 717 05ec 03450400 		lbu	a0,0(s0)	# _39, MEM[(char *)p_37]
 718 05f0 63160500 		bne	a0,zero,.L87	#, _39,,
 719              	.L84:
 720              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 721 05f4 13091900 		addi	s2,s2,1	#, i, i
 722 05f8 6FF0DFF6 		j	.L80		#
 723              	.L87:
 724              	# stdlib.c:56:     print_chr(*(p++));
 725 05fc 13041400 		addi	s0,s0,1	#, p, p
 726              	# stdlib.c:56:     print_chr(*(p++));
 727 0600 97000000 		call	putchar		#
 727      E7800000 
 728 0608 6FF05FFE 		j	.L86		#
 729              	.L85:
 730              	# stdlib.c:107: 				if (format[i] == 'd') {
 731 060c 63966707 		bne	a5,s6,.L88	#, _10, tmp169,
 732              	# stdlib.c:108: 					printf_d(va_arg(ap,int));
 733 0610 8327C100 		lw	a5,12(sp)		# D.2750, ap
 734 0614 83A40700 		lw	s1,0(a5)		# val, MEM[(int *)_99]
 735 0618 13874700 		addi	a4,a5,4	#, D.2751, D.2750
 736 061c 2326E100 		sw	a4,12(sp)	# D.2751, ap
 737              	# stdlib.c:63: 	if (val < 0) {
 738 0620 63DA0400 		bge	s1,zero,.L89	#, val,,
 739              	# stdlib.c:49:     print_chr(c);
 740 0624 1305D002 		li	a0,45		#,
 741 0628 97000000 		call	putchar		#
 741      E7800000 
 742              	# stdlib.c:65: 		val = -val;
 743 0630 B3049040 		neg	s1,s1	# val, val
 744              	.L89:
 745              	# stdlib.c:90: {
 746 0634 13040101 		addi	s0,sp,16	#, p,
 747 0638 130C0400 		mv	s8,s0	# p, p
 748              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 749 063c 1307A000 		li	a4,10		# tmp161,
 750              	.L90:
 751              	# stdlib.c:67: 	while (val || p == buffer) {
 752 0640 63900402 		bne	s1,zero,.L91	#, val,,
 753 0644 630E8401 		beq	s0,s8,.L91	#, p, p,
 754              	.L92:
 755              	# stdlib.c:49:     print_chr(c);
 756 0648 0345F4FF 		lbu	a0,-1(s0)	#, MEM[(char *)p_49]
 757              	# stdlib.c:72: 		printf_c(*(--p));
 758 064c 1304F4FF 		addi	s0,s0,-1	#, p, p
 759              	# stdlib.c:49:     print_chr(c);
 760 0650 97000000 		call	putchar		#
 760      E7800000 
 761              	# stdlib.c:71: 	while (p != buffer)
 762 0658 E31884FF 		bne	s0,s8,.L92	#, p, p,
 763 065c 6FF09FF9 		j	.L84		#
 764              	.L91:
 765              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 766 0660 B3E7E402 		rem	a5,s1,a4	# tmp161, tmp122, val
 767              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 768 0664 13041400 		addi	s0,s0,1	#, p, p
 769              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 770 0668 93870703 		addi	a5,a5,48	#, tmp124, tmp122
 771              	# stdlib.c:69: 		val = val / 10;
 772 066c B3C4E402 		div	s1,s1,a4	# tmp161, val, val
 773              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 774 0670 A30FF4FE 		sb	a5,-1(s0)	# tmp124, MEM[(char *)p_45 + 4294967295B]
 775 0674 6FF0DFFC 		j	.L90		#
 776              	.L88:
 777              	# stdlib.c:111: 				if (format[i] == 'u') {
 778 0678 E39877F3 		bne	a5,s7,.L81	#, _10, tmp170,
 779              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 780 067c 8327C100 		lw	a5,12(sp)		# D.2752, ap
 781              	# stdlib.c:78: 	char *p = buffer;
 782 0680 13040101 		addi	s0,sp,16	#, p,
 783 0684 93040400 		mv	s1,s0	# p, p
 784              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 785 0688 13874700 		addi	a4,a5,4	#, D.2753, D.2752
 786              	# stdlib.c:80:   val = val >= 0 ? val : -val;
 787 068c 83A70700 		lw	a5,0(a5)		# MEM[(int *)_102], MEM[(int *)_102]
 788              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 789 0690 2326E100 		sw	a4,12(sp)	# D.2753, ap
 790              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 791 0694 9306A000 		li	a3,10		# tmp162,
 792              	# stdlib.c:80:   val = val >= 0 ? val : -val;
 793 0698 13D7F741 		srai	a4,a5,31	#, tmp136, MEM[(int *)_102]
 794 069c B347F700 		xor	a5,a4,a5	# MEM[(int *)_102], val, tmp136
 795 06a0 B387E740 		sub	a5,a5,a4	# val, val, tmp136
 796              	.L93:
 797              	# stdlib.c:81: 	while (val || p == buffer) {
 798 06a4 63900702 		bne	a5,zero,.L94	#, val,,
 799 06a8 630E9400 		beq	s0,s1,.L94	#, p, p,
 800              	.L95:
 801              	# stdlib.c:49:     print_chr(c);
 802 06ac 0345F4FF 		lbu	a0,-1(s0)	#, MEM[(char *)p_62]
 803              	# stdlib.c:86: 		printf_c(*(--p));
 804 06b0 1304F4FF 		addi	s0,s0,-1	#, p, p
 805              	# stdlib.c:49:     print_chr(c);
 806 06b4 97000000 		call	putchar		#
 806      E7800000 
 807              	# stdlib.c:85: 	while (p != buffer)
 808 06bc E31894FE 		bne	s0,s1,.L95	#, p, p,
 809 06c0 6FF05FF3 		j	.L84		#
 810              	.L94:
 811              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 812 06c4 33E7D702 		rem	a4,a5,a3	# tmp162, tmp144, val
 813              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 814 06c8 13041400 		addi	s0,s0,1	#, p, p
 815              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 816 06cc 13070703 		addi	a4,a4,48	#, tmp146, tmp144
 817              	# stdlib.c:83: 		val = val / 10;
 818 06d0 B3C7D702 		div	a5,a5,a3	# tmp162, val, val
 819              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 820 06d4 A30FE4FE 		sb	a4,-1(s0)	# tmp146, MEM[(char *)p_58 + 4294967295B]
 821 06d8 6FF0DFFC 		j	.L93		#
 823              		.align	2
 824              		.globl	malloc
 826              	malloc:
 827              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 828 06dc B7060000 		lui	a3,%hi(heap_memory_used)	# tmp77,
 829 06e0 03A70600 		lw	a4,%lo(heap_memory_used)(a3)		# heap_memory_used.19_1, heap_memory_used
 830              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 831 06e4 B7070000 		lui	a5,%hi(.LANCHOR0)	# tmp79,
 832 06e8 93870700 		addi	a5,a5,%lo(.LANCHOR0)	# tmp78, tmp79,
 833 06ec B387E700 		add	a5,a5,a4	# heap_memory_used.19_1, <retval>, tmp78
 834              	# stdlib.c:128: 	heap_memory_used += size;
 835 06f0 3307A700 		add	a4,a4,a0	# tmp83, _3, heap_memory_used.19_1
 836 06f4 23A0E600 		sw	a4,%lo(heap_memory_used)(a3)	# _3, heap_memory_used
 837              	# stdlib.c:129: 	if (heap_memory_used > 1024)
 838 06f8 93060040 		li	a3,1024		# tmp81,
 839 06fc 63D4E600 		ble	a4,a3,.L104	#, _3, tmp81,
 840              	# stdlib.c:130: 		asm volatile ("ebreak");
 841              	 #APP
 842              	# 130 "stdlib.c" 1
  43              		return insns;
  44              	}
  45              	
  46              	static void printf_c(int c)
  47              	{
  48              		//*((volatile int*)0x10000000) = c;
  49              	    print_chr(c);
  50              	}
  51              	
  52              	static void printf_s(char *p)
  53              	{
  54              		while (*p)
  55              			//*((volatile int*)0x10000000) = *(p++);
  56              	    print_chr(*(p++));
  57              	}
  58              	
  59              	static void printf_d(int val)
  60              	{
  61              		char buffer[32];
  62              		char *p = buffer;
  63              		if (val < 0) {
  64              			printf_c('-');
  65              			val = -val;
  66              		}
  67              		while (val || p == buffer) {
  68              			*(p++) = '0' + val % 10;
  69              			val = val / 10;
  70              		}
  71              		while (p != buffer)
  72              			printf_c(*(--p));
  73              	}
  74              	
  75              	static void printf_u(int val)
  76              	{
  77              		char buffer[32];
  78              		char *p = buffer;
  79              	
  80              	  val = val >= 0 ? val : -val;
  81              		while (val || p == buffer) {
  82              			*(p++) = '0' + val % 10;
  83              			val = val / 10;
  84              		}
  85              		while (p != buffer)
  86              			printf_c(*(--p));
  87              	}
  88              	
  89              	int printf(const char *format, ...)
  90              	{
  91              		int i;
  92              		va_list ap;
  93              	
  94              		va_start(ap, format);
  95              	
  96              		for (i = 0; format[i]; i++)
  97              			if (format[i] == '%') {
  98              				while (format[++i]) {
  99              					if (format[i] == 'c') {
 100              						printf_c(va_arg(ap,int));
 101              						break;
 102              					}
 103              					if (format[i] == 's') {
 104              						printf_s(va_arg(ap,char*));
 105              						break;
 106              					}
 107              					if (format[i] == 'd') {
 108              						printf_d(va_arg(ap,int));
 109              						break;
 110              					}
 111              					if (format[i] == 'u') {
 112              						printf_u(va_arg(ap,int));
 113              						break;
 114              					}
 115              				}
 116              			} else
 117              				printf_c(format[i]);
 118              	
 119              		va_end(ap);
 120              	  return 0;
 121              	}
 122              	
 123              	#if !defined(NOT_USE_MYSTDLIB)
 124              	char *malloc(int size)
 125              	{
 126              		char *p = heap_memory + heap_memory_used;
 127              		// printf("[malloc(%d) -> %d (%d..%d)]", size, (int)p, heap_memory_used, heap_memory_used + size);
 128              		heap_memory_used += size;
 129              		if (heap_memory_used > 1024)
 130 0700 73001000 			asm volatile ("ebreak");
 131              		return p;
 843              		ebreak
 844              	# 0 "" 2
 845              	 #NO_APP
 846              	.L104:
 847              	# stdlib.c:132: }
 848 0704 13850700 		mv	a0,a5	#, <retval>
 849 0708 67800000 		ret	
 851              		.align	2
 852              		.globl	memcpy
 854              	memcpy:
 855              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 856 070c 93070000 		li	a5,0		# ivtmp.319,
 857              	.L107:
 858              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 859 0710 6394C700 		bne	a5,a2,.L108	#, ivtmp.319, _16,
 860              	# stdlib.c:142: }
 861 0714 67800000 		ret	
 862              	.L108:
 863              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 864 0718 3387F500 		add	a4,a1,a5	# ivtmp.319, tmp81, bb
 865 071c 83460700 		lbu	a3,0(a4)	# _1, MEM[(const char *)_17]
 866              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 867 0720 3307F500 		add	a4,a0,a5	# ivtmp.319, tmp82, aa
 868 0724 93871700 		addi	a5,a5,1	#, ivtmp.319, ivtmp.319
 869 0728 2300D700 		sb	a3,0(a4)	# _1, MEM[(char *)_18]
 870 072c 6FF05FFE 		j	.L107		#
 872              		.align	2
 873              		.globl	strcpy
 875              	strcpy:
 876              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 877 0730 93070500 		mv	a5,a0	# dst, dst
 878              	.L110:
 879              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 880 0734 33E7B700 		or	a4,a5,a1	# src, tmp96, dst
 881              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 882 0738 13773700 		andi	a4,a4,3	#, tmp97, tmp96
 883              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 884 073c 63120706 		bne	a4,zero,.L112	#, tmp97,,
 885              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 886 0740 3706FFFE 		li	a2,-16842752		# tmp100,
 887              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 888 0744 37888080 		li	a6,-2139062272		# tmp105,
 889              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 890 0748 1306F6EF 		addi	a2,a2,-257	#, tmp99, tmp100
 891              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 892 074c 13080808 		addi	a6,a6,128	#, tmp104, tmp105
 893              	.L115:
 894              	# stdlib.c:157: 		uint32_t v = *(uint32_t*)src;
 895 0750 03A70500 		lw	a4,0(a1)		# v, MEM[(uint32_t *)src_21]
 896              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 897 0754 B306C700 		add	a3,a4,a2	# tmp99, tmp98, v
 898              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 899 0758 9348F7FF 		not	a7,a4	# tmp101, v
 900              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 901 075c B3F61601 		and	a3,a3,a7	# tmp101, tmp102, tmp98
 902              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 903 0760 B3F60601 		and	a3,a3,a6	# tmp104, tmp103, tmp102
 904              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 905 0764 638A0604 		beq	a3,zero,.L113	#, tmp103,,
 906              	# stdlib.c:161: 			dst[0] = v & 0xff;
 907 0768 2380E700 		sb	a4,0(a5)	# v, *dst_19
 908              	# stdlib.c:162: 			if ((v & 0xff) == 0)
 909 076c 9376F70F 		andi	a3,a4,255	#, tmp106, v
 910              	# stdlib.c:162: 			if ((v & 0xff) == 0)
 911 0770 63820604 		beq	a3,zero,.L114	#, tmp106,,
 912              	# stdlib.c:164: 			v = v >> 8;
 913 0774 93568700 		srli	a3,a4,8	#, v, v
 914              	# stdlib.c:166: 			dst[1] = v & 0xff;
 915 0778 A380D700 		sb	a3,1(a5)	# v, MEM[(char *)dst_19 + 1B]
 916              	# stdlib.c:167: 			if ((v & 0xff) == 0)
 917 077c 93F6F60F 		andi	a3,a3,255	#, tmp107, v
 918              	# stdlib.c:167: 			if ((v & 0xff) == 0)
 919 0780 638A0602 		beq	a3,zero,.L114	#, tmp107,,
 920              	# stdlib.c:169: 			v = v >> 8;
 921 0784 93560701 		srli	a3,a4,16	#, v, v
 922              	# stdlib.c:171: 			dst[2] = v & 0xff;
 923 0788 2381D700 		sb	a3,2(a5)	# v, MEM[(char *)dst_19 + 2B]
 924              	# stdlib.c:172: 			if ((v & 0xff) == 0)
 925 078c 93F6F60F 		andi	a3,a3,255	#, tmp108, v
 926              	# stdlib.c:172: 			if ((v & 0xff) == 0)
 927 0790 63820602 		beq	a3,zero,.L114	#, tmp108,,
 928              	# stdlib.c:174: 			v = v >> 8;
 929 0794 13578701 		srli	a4,a4,24	#, v, v
 930              	# stdlib.c:176: 			dst[3] = v & 0xff;
 931 0798 A381E700 		sb	a4,3(a5)	# v, MEM[(char *)dst_19 + 3B]
 932              	# stdlib.c:177: 			return r;
 933 079c 67800000 		ret	
 934              	.L112:
 935              	# stdlib.c:150: 		char c = *(src++);
 936 07a0 03C70500 		lbu	a4,0(a1)	# c, MEM[(const char *)src_40 + 4294967295B]
 937              	# stdlib.c:150: 		char c = *(src++);
 938 07a4 93851500 		addi	a1,a1,1	#, src, src
 939              	# stdlib.c:151: 		*(dst++) = c;
 940 07a8 93871700 		addi	a5,a5,1	#, dst, dst
 941              	# stdlib.c:151: 		*(dst++) = c;
 942 07ac A38FE7FE 		sb	a4,-1(a5)	# c, MEM[(char *)dst_42 + 4294967295B]
 943              	# stdlib.c:152: 		if (!c) return r;
 944 07b0 E31207F8 		bne	a4,zero,.L110	#, c,,
 945              	.L114:
 946              	# stdlib.c:184: }
 947 07b4 67800000 		ret	
 948              	.L113:
 949              	# stdlib.c:180: 		*(uint32_t*)dst = v;
 950 07b8 23A0E700 		sw	a4,0(a5)	# v, MEM[(uint32_t *)dst_19]
 951              	# stdlib.c:181: 		src += 4;
 952 07bc 93854500 		addi	a1,a1,4	#, src, src
 953              	# stdlib.c:182: 		dst += 4;
 954 07c0 93874700 		addi	a5,a5,4	#, dst, dst
 955              	# stdlib.c:156: 	{
 956 07c4 6FF0DFF8 		j	.L115		#
 958              		.align	2
 959              		.globl	strcmp
 961              	strcmp:
 962              	.L129:
 963              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 964 07c8 B367B500 		or	a5,a0,a1	# s2, tmp101, s1
 965              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 966 07cc 93F73700 		andi	a5,a5,3	#, tmp102, tmp101
 967              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 968 07d0 639E0702 		bne	a5,zero,.L133	#, tmp102,,
 969              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 970 07d4 B706FFFE 		li	a3,-16842752		# tmp156,
 971              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 972 07d8 37868080 		li	a2,-2139062272		# tmp158,
 973              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 974 07dc 9386F6EF 		addi	a3,a3,-257	#, tmp157, tmp156
 975              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 976 07e0 13060608 		addi	a2,a2,128	#, tmp159, tmp158
 977              	.L138:
 978              	# stdlib.c:201: 		uint32_t v1 = *(uint32_t*)s1;
 979 07e4 83270500 		lw	a5,0(a0)		# v1, MEM[(uint32_t *)s1_15]
 980              	# stdlib.c:202: 		uint32_t v2 = *(uint32_t*)s2;
 981 07e8 03A70500 		lw	a4,0(a1)		# v2, MEM[(uint32_t *)s2_17]
 982              	# stdlib.c:204: 		if (__builtin_expect(v1 != v2, 0))
 983 07ec 6384E70A 		beq	a5,a4,.L134	#, v1, v2,
 984              	# stdlib.c:208: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 985 07f0 93F6F70F 		andi	a3,a5,0xff	# c1, v1
 986              	# stdlib.c:208: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 987 07f4 1376F70F 		andi	a2,a4,0xff	# c2, v2
 988              	# stdlib.c:209: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 989 07f8 6382C604 		beq	a3,a2,.L135	#, c1, c2,
 990              	.L152:
 991              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 992 07fc 13051000 		li	a0,1		# <retval>,
 993              	# stdlib.c:219: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 994 0800 63F8C608 		bgeu	a3,a2,.L128	#, c1, c2,
 995              	.L150:
 996              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 997 0804 1305F0FF 		li	a0,-1		# <retval>,
 998 0808 67800000 		ret	
 999              	.L133:
 1000              	# stdlib.c:190: 		char c1 = *(s1++);
 1001 080c 83470500 		lbu	a5,0(a0)	# c1, MEM[(const char *)s1_48 + 4294967295B]
 1002              	# stdlib.c:191: 		char c2 = *(s2++);
 1003 0810 03C70500 		lbu	a4,0(a1)	# c2, MEM[(const char *)s2_50 + 4294967295B]
 1004              	# stdlib.c:190: 		char c1 = *(s1++);
 1005 0814 13051500 		addi	a0,a0,1	#, s1, s1
 1006              	# stdlib.c:191: 		char c2 = *(s2++);
 1007 0818 93851500 		addi	a1,a1,1	#, s2, s2
 1008              	# stdlib.c:193: 		if (c1 != c2)
 1009 081c 638AE700 		beq	a5,a4,.L130	#, c1, c2,
 1010              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1011 0820 1305F0FF 		li	a0,-1		# <retval>,
 1012 0824 63E6E706 		bltu	a5,a4,.L128	#, c1, c2,
 1013 0828 13051000 		li	a0,1		# <retval>,
 1014 082c 67800000 		ret	
 1015              	.L130:
 1016              	# stdlib.c:195: 		else if (!c1)
 1017 0830 E39C07F8 		bne	a5,zero,.L129	#, c1,,
 1018              	.L148:
 1019              	# stdlib.c:196: 			return 0;
 1020 0834 13050000 		li	a0,0		# <retval>,
 1021 0838 6F008005 		j	.L128		#
 1022              	.L135:
 1023 083c 13050000 		li	a0,0		# <retval>,
 1024              	# stdlib.c:210: 			if (!c1) return 0;
 1025 0840 63880604 		beq	a3,zero,.L128	#, c1,,
 1026              	# stdlib.c:211: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1027 0844 93D68700 		srli	a3,a5,8	#, v1, v1
 1028              	# stdlib.c:211: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1029 0848 13568700 		srli	a2,a4,8	#, v2, v2
 1030              	# stdlib.c:213: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1031 084c 93F6F60F 		andi	a3,a3,0xff	# c1, v1
 1032              	# stdlib.c:213: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1033 0850 1376F60F 		andi	a2,a2,0xff	# c2, v2
 1034              	# stdlib.c:214: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1035 0854 E394C6FA 		bne	a3,a2,.L152	#, c1, c2,
 1036              	# stdlib.c:196: 			return 0;
 1037 0858 13050000 		li	a0,0		# <retval>,
 1038              	# stdlib.c:215: 			if (!c1) return 0;
 1039 085c 638A0602 		beq	a3,zero,.L128	#, c1,,
 1040              	# stdlib.c:216: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1041 0860 93D60701 		srli	a3,a5,16	#, v1, v1
 1042              	# stdlib.c:216: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1043 0864 13560701 		srli	a2,a4,16	#, v2, v2
 1044              	# stdlib.c:218: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1045 0868 93F6F60F 		andi	a3,a3,0xff	# c1, v1
 1046              	# stdlib.c:218: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1047 086c 1376F60F 		andi	a2,a2,0xff	# c2, v2
 1048              	# stdlib.c:219: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1049 0870 E396C6F8 		bne	a3,a2,.L152	#, c1, c2,
 1050              	# stdlib.c:196: 			return 0;
 1051 0874 13050000 		li	a0,0		# <retval>,
 1052              	# stdlib.c:220: 			if (!c1) return 0;
 1053 0878 638C0600 		beq	a3,zero,.L128	#, c1,,
 1054              	# stdlib.c:223: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1055 087c 93D78701 		srli	a5,a5,24	#, c1, v1
 1056              	# stdlib.c:223: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1057 0880 13578701 		srli	a4,a4,24	#, c2, v2
 1058              	# stdlib.c:224: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1059 0884 6386E700 		beq	a5,a4,.L128	#, c1, c2,
 1060              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1061 0888 13051000 		li	a0,1		# <retval>,
 1062              	# stdlib.c:224: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1063 088c E3ECE7F6 		bltu	a5,a4,.L150	#, c1, c2,
 1064              	.L128:
 1065              	# stdlib.c:234: }
 1066 0890 67800000 		ret	
 1067              	.L134:
 1068              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1069 0894 3387D700 		add	a4,a5,a3	# tmp157, tmp109, v1
 1070              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1071 0898 93C7F7FF 		not	a5,a5	# tmp112, v1
 1072              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1073 089c B377F700 		and	a5,a4,a5	# tmp112, tmp113, tmp109
 1074              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1075 08a0 B3F7C700 		and	a5,a5,a2	# tmp159, tmp114, tmp113
 1076              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1077 08a4 E39807F8 		bne	a5,zero,.L148	#, tmp114,,
 1078              	# stdlib.c:231: 		s1 += 4;
 1079 08a8 13054500 		addi	a0,a0,4	#, s1, s1
 1080              	# stdlib.c:232: 		s2 += 4;
 1081 08ac 93854500 		addi	a1,a1,4	#, s2, s2
 1082              	# stdlib.c:200: 	{
 1083 08b0 6FF05FF3 		j	.L138		#
 1085              		.align	2
 1086              		.globl	swap
 1088              	swap:
 1089              	# main_seeed.c:276:     *a = *b;
 1090 08b4 03D70500 		lhu	a4,0(a1)	# _1, *b_5(D)
 1091              	# main_seeed.c:275:     uint16_t t = *a;
 1092 08b8 83570500 		lhu	a5,0(a0)	# t, *a_3(D)
 1093              	# main_seeed.c:276:     *a = *b;
 1094 08bc 2310E500 		sh	a4,0(a0)	# _1, *a_3(D)
 1095              	# main_seeed.c:277:     *b = t;
 1096 08c0 2390F500 		sh	a5,0(a1)	# t, *b_5(D)
 1097              	# main_seeed.c:278: };
 1098 08c4 67800000 		ret	
 1100              		.align	2
 1101              		.globl	SGL
 1103              	SGL:
 1104              	# main_seeed.c:291:     _width = width;
 1105 08c8 B7070000 		lui	a5,%hi(_width)	# tmp74,
 1106 08cc 2390A700 		sh	a0,%lo(_width)(a5)	# tmp76, _width
 1107              	# main_seeed.c:292:     _height = height;
 1108 08d0 B7070000 		lui	a5,%hi(_height)	# tmp75,
 1109 08d4 2390B700 		sh	a1,%lo(_height)(a5)	# tmp77, _height
 1110              	# main_seeed.c:293: }
 1111 08d8 67800000 		ret	
 1113              		.align	2
 1114              		.globl	_sendCmd
 1116              	_sendCmd:
 1117              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 1118 08dc B7070030 		li	a5,805306368		# tmp75,
 1119 08e0 23A6A700 		sw	a0,12(a5)	# c, MEM[(volatile uint32_t *)805306380B]
 1120              	# main_seeed.c:554: }
 1121 08e4 67800000 		ret	
 1123              		.align	2
 1124              		.globl	_sendData
 1126              	_sendData:
 1127              	# main_seeed.c:561:     *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
 1128 08e8 13650510 		ori	a0,a0,256	#, _3, tmp78
 1129              	# main_seeed.c:561:     *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
 1130 08ec B7070030 		li	a5,805306368		# tmp77,
 1131 08f0 23A6A700 		sw	a0,12(a5)	# _3, MEM[(volatile uint32_t *)805306380B]
 1132              	# main_seeed.c:563: }
 1133 08f4 67800000 		ret	
 1135              		.align	2
 1136              		.globl	init
 1138              	init:
 1139              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 1140 08f8 B7070030 		li	a5,805306368		# tmp73,
 1141 08fc 1307E00A 		li	a4,174		# tmp74,
 1142 0900 23A6E700 		sw	a4,12(a5)	# tmp74, MEM[(volatile uint32_t *)805306380B]
 1143 0904 13071008 		li	a4,129		# tmp77,
 1144 0908 23A6E700 		sw	a4,12(a5)	# tmp77, MEM[(volatile uint32_t *)805306380B]
 1145 090c 13071009 		li	a4,145		# tmp80,
 1146 0910 23A6E700 		sw	a4,12(a5)	# tmp80, MEM[(volatile uint32_t *)805306380B]
 1147 0914 13072008 		li	a4,130		# tmp83,
 1148 0918 23A6E700 		sw	a4,12(a5)	# tmp83, MEM[(volatile uint32_t *)805306380B]
 1149 091c 13070005 		li	a4,80		# tmp86,
 1150 0920 23A6E700 		sw	a4,12(a5)	# tmp86, MEM[(volatile uint32_t *)805306380B]
 1151 0924 13073008 		li	a4,131		# tmp89,
 1152 0928 23A6E700 		sw	a4,12(a5)	# tmp89, MEM[(volatile uint32_t *)805306380B]
 1153 092c 1307D007 		li	a4,125		# tmp92,
 1154 0930 23A6E700 		sw	a4,12(a5)	# tmp92, MEM[(volatile uint32_t *)805306380B]
 1155 0934 13077008 		li	a4,135		# tmp95,
 1156 0938 23A6E700 		sw	a4,12(a5)	# tmp95, MEM[(volatile uint32_t *)805306380B]
 1157 093c 13076000 		li	a4,6		# tmp98,
 1158 0940 23A6E700 		sw	a4,12(a5)	# tmp98, MEM[(volatile uint32_t *)805306380B]
 1159 0944 1307A008 		li	a4,138		# tmp101,
 1160 0948 23A6E700 		sw	a4,12(a5)	# tmp101, MEM[(volatile uint32_t *)805306380B]
 1161 094c 13074006 		li	a4,100		# tmp104,
 1162 0950 23A6E700 		sw	a4,12(a5)	# tmp104, MEM[(volatile uint32_t *)805306380B]
 1163 0954 9306B008 		li	a3,139		# tmp107,
 1164 0958 23A6D700 		sw	a3,12(a5)	# tmp107, MEM[(volatile uint32_t *)805306380B]
 1165 095c 93068007 		li	a3,120		# tmp110,
 1166 0960 23A6D700 		sw	a3,12(a5)	# tmp110, MEM[(volatile uint32_t *)805306380B]
 1167 0964 9306C008 		li	a3,140		# tmp113,
 1168 0968 23A6D700 		sw	a3,12(a5)	# tmp113, MEM[(volatile uint32_t *)805306380B]
 1169 096c 23A6E700 		sw	a4,12(a5)	# tmp104, MEM[(volatile uint32_t *)805306380B]
 1170 0970 1307000A 		li	a4,160		# tmp119,
 1171 0974 23A6E700 		sw	a4,12(a5)	# tmp119, MEM[(volatile uint32_t *)805306380B]
 1172 0978 13072007 		li	a4,114		# tmp122,
 1173 097c 23A6E700 		sw	a4,12(a5)	# tmp122, MEM[(volatile uint32_t *)805306380B]
 1174 0980 1307100A 		li	a4,161		# tmp125,
 1175 0984 23A6E700 		sw	a4,12(a5)	# tmp125, MEM[(volatile uint32_t *)805306380B]
 1176 0988 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1177 098c 1307200A 		li	a4,162		# tmp130,
 1178 0990 23A6E700 		sw	a4,12(a5)	# tmp130, MEM[(volatile uint32_t *)805306380B]
 1179 0994 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1180 0998 1307400A 		li	a4,164		# tmp135,
 1181 099c 23A6E700 		sw	a4,12(a5)	# tmp135, MEM[(volatile uint32_t *)805306380B]
 1182 09a0 1307800A 		li	a4,168		# tmp138,
 1183 09a4 23A6E700 		sw	a4,12(a5)	# tmp138, MEM[(volatile uint32_t *)805306380B]
 1184 09a8 1307F003 		li	a4,63		# tmp141,
 1185 09ac 23A6E700 		sw	a4,12(a5)	# tmp141, MEM[(volatile uint32_t *)805306380B]
 1186 09b0 1307D00A 		li	a4,173		# tmp144,
 1187 09b4 23A6E700 		sw	a4,12(a5)	# tmp144, MEM[(volatile uint32_t *)805306380B]
 1188 09b8 1307E008 		li	a4,142		# tmp147,
 1189 09bc 23A6E700 		sw	a4,12(a5)	# tmp147, MEM[(volatile uint32_t *)805306380B]
 1190 09c0 1307000B 		li	a4,176		# tmp150,
 1191 09c4 23A6E700 		sw	a4,12(a5)	# tmp150, MEM[(volatile uint32_t *)805306380B]
 1192 09c8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1193 09cc 1307100B 		li	a4,177		# tmp155,
 1194 09d0 23A6E700 		sw	a4,12(a5)	# tmp155, MEM[(volatile uint32_t *)805306380B]
 1195 09d4 13071003 		li	a4,49		# tmp158,
 1196 09d8 23A6E700 		sw	a4,12(a5)	# tmp158, MEM[(volatile uint32_t *)805306380B]
 1197 09dc 1307300B 		li	a4,179		# tmp161,
 1198 09e0 23A6E700 		sw	a4,12(a5)	# tmp161, MEM[(volatile uint32_t *)805306380B]
 1199 09e4 1307000F 		li	a4,240		# tmp164,
 1200 09e8 23A6E700 		sw	a4,12(a5)	# tmp164, MEM[(volatile uint32_t *)805306380B]
 1201 09ec 1307B00B 		li	a4,187		# tmp167,
 1202 09f0 23A6E700 		sw	a4,12(a5)	# tmp167, MEM[(volatile uint32_t *)805306380B]
 1203 09f4 1307A003 		li	a4,58		# tmp170,
 1204 09f8 23A6E700 		sw	a4,12(a5)	# tmp170, MEM[(volatile uint32_t *)805306380B]
 1205 09fc 1307E00B 		li	a4,190		# tmp173,
 1206 0a00 23A6E700 		sw	a4,12(a5)	# tmp173, MEM[(volatile uint32_t *)805306380B]
 1207 0a04 1307E003 		li	a4,62		# tmp176,
 1208 0a08 23A6E700 		sw	a4,12(a5)	# tmp176, MEM[(volatile uint32_t *)805306380B]
 1209 0a0c 1307E002 		li	a4,46		# tmp179,
 1210 0a10 23A6E700 		sw	a4,12(a5)	# tmp179, MEM[(volatile uint32_t *)805306380B]
 1211 0a14 1307F00A 		li	a4,175		# tmp182,
 1212 0a18 23A6E700 		sw	a4,12(a5)	# tmp182, MEM[(volatile uint32_t *)805306380B]
 1213              	# main_seeed.c:610: }
 1214 0a1c 67800000 		ret	
 1216              		.align	2
 1217              		.globl	drawPixel
 1219              	drawPixel:
 1220              	# main_seeed.c:614:     if ((x < 0) || (x >= RGB_OLED_WIDTH) || (y < 0)
 1221 0a20 9306F005 		li	a3,95		# tmp84,
 1222 0a24 63E4A604 		bgtu	a0,a3,.L159	#, x, tmp84,
 1223              	# main_seeed.c:615: 	|| (y >= RGB_OLED_HEIGHT))
 1224 0a28 1307F003 		li	a4,63		# tmp85,
 1225 0a2c 6360B704 		bgtu	a1,a4,.L159	#, y, tmp85,
 1226              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 1227 0a30 B7070030 		li	a5,805306368		# tmp87,
 1228 0a34 13085001 		li	a6,21		# tmp88,
 1229 0a38 23A60701 		sw	a6,12(a5)	# tmp88, MEM[(volatile uint32_t *)805306380B]
 1230 0a3c 23A6A700 		sw	a0,12(a5)	# x, MEM[(volatile uint32_t *)805306380B]
 1231 0a40 23A6D700 		sw	a3,12(a5)	# tmp84, MEM[(volatile uint32_t *)805306380B]
 1232 0a44 93065007 		li	a3,117		# tmp96,
 1233 0a48 23A6D700 		sw	a3,12(a5)	# tmp96, MEM[(volatile uint32_t *)805306380B]
 1234 0a4c 23A6B700 		sw	a1,12(a5)	# y, MEM[(volatile uint32_t *)805306380B]
 1235 0a50 23A6E700 		sw	a4,12(a5)	# tmp85, MEM[(volatile uint32_t *)805306380B]
 1236              	# main_seeed.c:630:     _sendData(color >> 8);
 1237 0a54 13578600 		srli	a4,a2,8	#, tmp102, color
 1238              	# main_seeed.c:561:     *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
 1239 0a58 13670710 		ori	a4,a4,256	#, _14, tmp102
 1240 0a5c 1376F60F 		andi	a2,a2,0xff	# color, color
 1241              	# main_seeed.c:561:     *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
 1242 0a60 23A6E700 		sw	a4,12(a5)	# _14, MEM[(volatile uint32_t *)805306380B]
 1243              	# main_seeed.c:561:     *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
 1244 0a64 13660610 		ori	a2,a2,256	#, _18, color
 1245              	# main_seeed.c:561:     *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
 1246 0a68 23A6C700 		sw	a2,12(a5)	# _18, MEM[(volatile uint32_t *)805306380B]
 1247              	.L159:
 1248              	# main_seeed.c:633: }
 1249 0a6c 67800000 		ret	
 1251              		.align	2
 1252              		.globl	drawLineSGL
 1254              	drawLineSGL:
 1255 0a70 130101FD 		addi	sp,sp,-48	#,,
 1256 0a74 23229102 		sw	s1,36(sp)	#,
 1257 0a78 93040500 		mv	s1,a0	# x0, tmp109
 1258              	# main_seeed.c:301:     int dx = abs(x), sx = x0 < x1 ? 1 : -1;
 1259 0a7c 3305A640 		sub	a0,a2,a0	#, x1, x0
 1260              	# main_seeed.c:298: {
 1261 0a80 23248102 		sw	s0,40(sp)	#,
 1262 0a84 23202103 		sw	s2,32(sp)	#,
 1263 0a88 232E3101 		sw	s3,28(sp)	#,
 1264 0a8c 232A5101 		sw	s5,20(sp)	#,
 1265 0a90 23286101 		sw	s6,16(sp)	#,
 1266 0a94 23267101 		sw	s7,12(sp)	#,
 1267 0a98 23248101 		sw	s8,8(sp)	#,
 1268 0a9c 23261102 		sw	ra,44(sp)	#,
 1269 0aa0 232C4101 		sw	s4,24(sp)	#,
 1270 0aa4 23229101 		sw	s9,4(sp)	#,
 1271 0aa8 2320A101 		sw	s10,0(sp)	#,
 1272              	# main_seeed.c:298: {
 1273 0aac 13840500 		mv	s0,a1	# y0, tmp110
 1274 0ab0 930A0600 		mv	s5,a2	# x1, tmp111
 1275 0ab4 138B0600 		mv	s6,a3	# y1, tmp112
 1276 0ab8 930B0700 		mv	s7,a4	# color, tmp113
 1277              	# main_seeed.c:300:     int y = y1 - y0;
 1278 0abc 3389B640 		sub	s2,a3,a1	# y, y1, y0
 1279              	# main_seeed.c:301:     int dx = abs(x), sx = x0 < x1 ? 1 : -1;
 1280 0ac0 97000000 		call	abs		#
 1280      E7800000 
 1281 0ac8 93090500 		mv	s3,a0	# dx, tmp114
 1282              	# main_seeed.c:301:     int dx = abs(x), sx = x0 < x1 ? 1 : -1;
 1283 0acc 130CF0FF 		li	s8,-1		# iftmp.39_13,
 1284 0ad0 63F45401 		bleu	s5,s1,.L162	#, x1, x0,
 1285 0ad4 130C1000 		li	s8,1		# iftmp.39_13,
 1286              	.L162:
 1287              	# main_seeed.c:302:     int dy = -abs(y), sy = y0 < y1 ? 1 : -1;
 1288 0ad8 13050900 		mv	a0,s2	#, y
 1289 0adc 97000000 		call	abs		#
 1289      E7800000 
 1290 0ae4 130A0500 		mv	s4,a0	# _5, tmp115
 1291              	# main_seeed.c:302:     int dy = -abs(y), sy = y0 < y1 ? 1 : -1;
 1292 0ae8 330DA040 		neg	s10,a0	# dy, _5
 1293              	# main_seeed.c:302:     int dy = -abs(y), sy = y0 < y1 ? 1 : -1;
 1294 0aec 930C1000 		li	s9,1		# iftmp.40_14,
 1295 0af0 63646401 		bgtu	s6,s0,.L163	#, y1, y0,
 1296              	# main_seeed.c:302:     int dy = -abs(y), sy = y0 < y1 ? 1 : -1;
 1297 0af4 930CF0FF 		li	s9,-1		# iftmp.40_14,
 1298              	.L163:
 1299 0af8 33894941 		sub	s2,s3,s4	# err, dx, _5
 1300              	.L164:
 1301              	# main_seeed.c:305: 	drawPixel(x0, y0, color);
 1302 0afc 13860B00 		mv	a2,s7	#, color
 1303 0b00 93050400 		mv	a1,s0	#, y0
 1304 0b04 13850400 		mv	a0,s1	#, x0
 1305 0b08 97000000 		call	drawPixel		#
 1305      E7800000 
 1306              	# main_seeed.c:306: 	e2 = 2 * err;
 1307 0b10 93171900 		slli	a5,s2,1	#, e2, err
 1308              	# main_seeed.c:307: 	if (e2 >= dy) {
 1309 0b14 63CCA701 		bgt	s10,a5,.L165	#, dy, e2,
 1310              	# main_seeed.c:308: 	    if (x0 == x1)
 1311 0b18 63885403 		beq	s1,s5,.L161	#, x0, x1,
 1312              	# main_seeed.c:311: 	    x0 += sx;
 1313 0b1c B3848401 		add	s1,s1,s8	# iftmp.39_13, tmp94, x0
 1314 0b20 93940401 		slli	s1,s1,16	#, x0, tmp94
 1315 0b24 33094941 		sub	s2,s2,s4	# err, err, _5
 1316 0b28 93D40401 		srli	s1,s1,16	#, x0, x0
 1317              	.L165:
 1318              	# main_seeed.c:313: 	if (e2 <= dx) {
 1319 0b2c E3C8F9FC 		blt	s3,a5,.L164	#, dx, e2,
 1320              	# main_seeed.c:314: 	    if (y0 == y1)
 1321 0b30 630C6401 		beq	s0,s6,.L161	#, y0, y1,
 1322              	# main_seeed.c:317: 	    y0 += sy;
 1323 0b34 33049401 		add	s0,s0,s9	# iftmp.40_14, tmp96, y0
 1324 0b38 13140401 		slli	s0,s0,16	#, y0, tmp96
 1325              	# main_seeed.c:316: 	    err += dx;
 1326 0b3c 33093901 		add	s2,s2,s3	# dx, err, err
 1327              	# main_seeed.c:317: 	    y0 += sy;
 1328 0b40 13540401 		srli	s0,s0,16	#, y0, y0
 1329 0b44 6FF09FFB 		j	.L164		#
 1330              	.L161:
 1331              	# main_seeed.c:320: }
 1332 0b48 8320C102 		lw	ra,44(sp)		#,
 1333 0b4c 03248102 		lw	s0,40(sp)		#,
 1334 0b50 83244102 		lw	s1,36(sp)		#,
 1335 0b54 03290102 		lw	s2,32(sp)		#,
 1336 0b58 8329C101 		lw	s3,28(sp)		#,
 1337 0b5c 032A8101 		lw	s4,24(sp)		#,
 1338 0b60 832A4101 		lw	s5,20(sp)		#,
 1339 0b64 032B0101 		lw	s6,16(sp)		#,
 1340 0b68 832BC100 		lw	s7,12(sp)		#,
 1341 0b6c 032C8100 		lw	s8,8(sp)		#,
 1342 0b70 832C4100 		lw	s9,4(sp)		#,
 1343 0b74 032D0100 		lw	s10,0(sp)		#,
 1344 0b78 13010103 		addi	sp,sp,48	#,,
 1345 0b7c 67800000 		jr	ra		#
 1347              		.align	2
 1348              		.globl	drawTraingle
 1350              	drawTraingle:
 1351 0b80 130101FE 		addi	sp,sp,-32	#,,
 1352 0b84 232A9100 		sw	s1,20(sp)	#,
 1353 0b88 93040700 		mv	s1,a4	# x2, tmp83
 1354              	# main_seeed.c:403:     drawLineSGL(x0, y0, x1, y1, color);
 1355 0b8c 13070800 		mv	a4,a6	#, color
 1356              	# main_seeed.c:402: {
 1357 0b90 232E1100 		sw	ra,28(sp)	#,
 1358 0b94 232C8100 		sw	s0,24(sp)	#,
 1359 0b98 23282101 		sw	s2,16(sp)	#,
 1360 0b9c 23263101 		sw	s3,12(sp)	#,
 1361 0ba0 23244101 		sw	s4,8(sp)	#,
 1362 0ba4 23225101 		sw	s5,4(sp)	#,
 1363 0ba8 23206101 		sw	s6,0(sp)	#,
 1364              	# main_seeed.c:402: {
 1365 0bac 13890700 		mv	s2,a5	# y2, tmp84
 1366 0bb0 13040800 		mv	s0,a6	# color, tmp85
 1367 0bb4 93090500 		mv	s3,a0	# x0, tmp79
 1368 0bb8 138A0500 		mv	s4,a1	# y0, tmp80
 1369 0bbc 930A0600 		mv	s5,a2	# x1, tmp81
 1370 0bc0 138B0600 		mv	s6,a3	# y1, tmp82
 1371              	# main_seeed.c:403:     drawLineSGL(x0, y0, x1, y1, color);
 1372 0bc4 97000000 		call	drawLineSGL		#
 1372      E7800000 
 1373              	# main_seeed.c:404:     drawLineSGL(x1, y1, x2, y2, color);
 1374 0bcc 13070400 		mv	a4,s0	#, color
 1375 0bd0 93060900 		mv	a3,s2	#, y2
 1376 0bd4 13860400 		mv	a2,s1	#, x2
 1377 0bd8 93050B00 		mv	a1,s6	#, y1
 1378 0bdc 13850A00 		mv	a0,s5	#, x1
 1379 0be0 97000000 		call	drawLineSGL		#
 1379      E7800000 
 1380              	# main_seeed.c:405:     drawLineSGL(x2, y2, x0, y0, color);
 1381 0be8 13070400 		mv	a4,s0	#, color
 1382              	# main_seeed.c:406: }
 1383 0bec 03248101 		lw	s0,24(sp)		#,
 1384 0bf0 8320C101 		lw	ra,28(sp)		#,
 1385 0bf4 832A4100 		lw	s5,4(sp)		#,
 1386 0bf8 032B0100 		lw	s6,0(sp)		#,
 1387              	# main_seeed.c:405:     drawLineSGL(x2, y2, x0, y0, color);
 1388 0bfc 93060A00 		mv	a3,s4	#, y0
 1389 0c00 13860900 		mv	a2,s3	#, x0
 1390              	# main_seeed.c:406: }
 1391 0c04 032A8100 		lw	s4,8(sp)		#,
 1392 0c08 8329C100 		lw	s3,12(sp)		#,
 1393              	# main_seeed.c:405:     drawLineSGL(x2, y2, x0, y0, color);
 1394 0c0c 93050900 		mv	a1,s2	#, y2
 1395 0c10 13850400 		mv	a0,s1	#, x2
 1396              	# main_seeed.c:406: }
 1397 0c14 03290101 		lw	s2,16(sp)		#,
 1398 0c18 83244101 		lw	s1,20(sp)		#,
 1399 0c1c 13010102 		addi	sp,sp,32	#,,
 1400              	# main_seeed.c:405:     drawLineSGL(x2, y2, x0, y0, color);
 1401 0c20 17030000 		tail	drawLineSGL		#
 1401      67000300 
 1403              		.align	2
 1404              		.globl	drawVerticalLine
 1406              	drawVerticalLine:
 1407              	# main_seeed.c:325:     uint16_t y1 = min(y + height, _height - 1);
 1408 0c28 B7070000 		lui	a5,%hi(_height)	# tmp88,
 1409 0c2c 83D70700 		lhu	a5,%lo(_height)(a5)	# _height, _height
 1410              	# main_seeed.c:324: {
 1411 0c30 130101FE 		addi	sp,sp,-32	#,,
 1412 0c34 23282101 		sw	s2,16(sp)	#,
 1413 0c38 23263101 		sw	s3,12(sp)	#,
 1414 0c3c 232E1100 		sw	ra,28(sp)	#,
 1415 0c40 232C8100 		sw	s0,24(sp)	#,
 1416 0c44 232A9100 		sw	s1,20(sp)	#,
 1417              	# main_seeed.c:325:     uint16_t y1 = min(y + height, _height - 1);
 1418 0c48 3387C500 		add	a4,a1,a2	# tmp98, tmp91, y
 1419 0c4c 9387F7FF 		addi	a5,a5,-1	#, _7, _height
 1420              	# main_seeed.c:324: {
 1421 0c50 13090500 		mv	s2,a0	# x, tmp96
 1422 0c54 93890600 		mv	s3,a3	# color, tmp99
 1423              	# main_seeed.c:325:     uint16_t y1 = min(y + height, _height - 1);
 1424 0c58 6354F700 		ble	a5,a4,.L175	#, _7, tmp91,
 1425 0c5c 93070700 		mv	a5,a4	# _7, tmp91
 1426              	.L175:
 1427              	# main_seeed.c:326:     for (int16_t i = y; i < y1; i++) {
 1428 0c60 93950501 		slli	a1,a1,16	#, i, y
 1429              	# main_seeed.c:326:     for (int16_t i = y; i < y1; i++) {
 1430 0c64 93940701 		slli	s1,a5,16	#, tmp93, _7
 1431              	# main_seeed.c:326:     for (int16_t i = y; i < y1; i++) {
 1432 0c68 93D50541 		srai	a1,a1,16	#, i, i
 1433              	# main_seeed.c:326:     for (int16_t i = y; i < y1; i++) {
 1434 0c6c 93D40401 		srli	s1,s1,16	#, tmp93, tmp93
 1435              	.L176:
 1436              	# main_seeed.c:326:     for (int16_t i = y; i < y1; i++) {
 1437 0c70 63C09502 		blt	a1,s1,.L177	#, i, tmp93,
 1438              	# main_seeed.c:329: }
 1439 0c74 8320C101 		lw	ra,28(sp)		#,
 1440 0c78 03248101 		lw	s0,24(sp)		#,
 1441 0c7c 83244101 		lw	s1,20(sp)		#,
 1442 0c80 03290101 		lw	s2,16(sp)		#,
 1443 0c84 8329C100 		lw	s3,12(sp)		#,
 1444 0c88 13010102 		addi	sp,sp,32	#,,
 1445 0c8c 67800000 		jr	ra		#
 1446              	.L177:
 1447 0c90 13940501 		slli	s0,a1,16	#, _22, i
 1448 0c94 13540401 		srli	s0,s0,16	#, _22, _22
 1449              	# main_seeed.c:327: 	drawPixel(x, i, color);
 1450 0c98 93050400 		mv	a1,s0	#, _22
 1451 0c9c 13860900 		mv	a2,s3	#, color
 1452 0ca0 13050900 		mv	a0,s2	#, x
 1453 0ca4 97000000 		call	drawPixel		#
 1453      E7800000 
 1454 0cac 93051400 		addi	a1,s0,1	#, tmp92, _22
 1455 0cb0 93950501 		slli	a1,a1,16	#, i, tmp92
 1456 0cb4 93D50541 		srai	a1,a1,16	#, i, i
 1457 0cb8 6FF09FFB 		j	.L176		#
 1459              		.align	2
 1460              		.globl	fillCircle
 1462              	fillCircle:
 1463 0cbc 130101FC 		addi	sp,sp,-64	#,,
 1464 0cc0 232C8102 		sw	s0,56(sp)	#,
 1465              	# main_seeed.c:383:     int x = -r, y = 0, err = 2 - 2 * r, e2;
 1466 0cc4 13041000 		li	s0,1		# tmp93,
 1467 0cc8 3304C440 		sub	s0,s0,a2	# tmp94, tmp93, r
 1468              	# main_seeed.c:382: {
 1469 0ccc 232A9102 		sw	s1,52(sp)	#,
 1470 0cd0 23282103 		sw	s2,48(sp)	#,
 1471 0cd4 23263103 		sw	s3,44(sp)	#,
 1472 0cd8 23244103 		sw	s4,40(sp)	#,
 1473 0cdc 23206103 		sw	s6,32(sp)	#,
 1474 0ce0 232E7101 		sw	s7,28(sp)	#,
 1475 0ce4 232E1102 		sw	ra,60(sp)	#,
 1476 0ce8 23225103 		sw	s5,36(sp)	#,
 1477              	# main_seeed.c:382: {
 1478 0cec 93090500 		mv	s3,a0	# poX, tmp109
 1479 0cf0 138B0500 		mv	s6,a1	# poY, tmp110
 1480 0cf4 138A0600 		mv	s4,a3	# color, tmp112
 1481              	# main_seeed.c:383:     int x = -r, y = 0, err = 2 - 2 * r, e2;
 1482 0cf8 B304C040 		neg	s1,a2	# x, r
 1483              	# main_seeed.c:383:     int x = -r, y = 0, err = 2 - 2 * r, e2;
 1484 0cfc 13141400 		slli	s0,s0,1	#, e2, tmp94
 1485              	# main_seeed.c:383:     int x = -r, y = 0, err = 2 - 2 * r, e2;
 1486 0d00 13090000 		li	s2,0		# y,
 1487              	# main_seeed.c:396:     while (x <= 0);
 1488 0d04 930B1000 		li	s7,1		# tmp107,
 1489              	.L180:
 1490              	# main_seeed.c:385: 	drawVerticalLine(poX - x, poY - y, 2 * y, color);
 1491 0d08 939A0401 		slli	s5,s1,16	#, _3, x
 1492 0d0c 13160901 		slli	a2,s2,16	#, _5, y
 1493 0d10 93DA0A01 		srli	s5,s5,16	#, _3, _3
 1494 0d14 13560601 		srli	a2,a2,16	#, _5, _5
 1495 0d18 B307CB40 		sub	a5,s6,a2	# tmp95, poY, _5
 1496 0d1c 33855941 		sub	a0,s3,s5	# tmp97, poX, _3
 1497 0d20 13161600 		slli	a2,a2,1	#, tmp96, _5
 1498 0d24 93950701 		slli	a1,a5,16	#, _6, tmp95
 1499 0d28 13160601 		slli	a2,a2,16	#, _7, tmp96
 1500 0d2c 13150501 		slli	a0,a0,16	#,, tmp97
 1501 0d30 93D50501 		srli	a1,a1,16	#, _6, _6
 1502 0d34 13560601 		srli	a2,a2,16	#, _7, _7
 1503 0d38 93060A00 		mv	a3,s4	#, color
 1504 0d3c 13550501 		srli	a0,a0,16	#,,
 1505 0d40 2326C100 		sw	a2,12(sp)	# _7, %sfp
 1506 0d44 2324B100 		sw	a1,8(sp)	# _6, %sfp
 1507 0d48 97000000 		call	drawVerticalLine		#
 1507      E7800000 
 1508              	# main_seeed.c:386: 	drawVerticalLine(poX + x, poY - y, 2 * y, color);
 1509 0d50 33853A01 		add	a0,s5,s3	# poX, tmp99, _3
 1510 0d54 0326C100 		lw	a2,12(sp)		# _7, %sfp
 1511 0d58 83258100 		lw	a1,8(sp)		# _6, %sfp
 1512 0d5c 13150501 		slli	a0,a0,16	#,, tmp99
 1513 0d60 93060A00 		mv	a3,s4	#, color
 1514 0d64 13550501 		srli	a0,a0,16	#,,
 1515 0d68 97000000 		call	drawVerticalLine		#
 1515      E7800000 
 1516              	# main_seeed.c:388: 	if (e2 <= y) {
 1517 0d70 63488906 		blt	s2,s0,.L184	#, y, e2,
 1518              	# main_seeed.c:389: 	    err += ++y * 2 + 1;
 1519 0d74 13091900 		addi	s2,s2,1	#, y, y
 1520              	# main_seeed.c:389: 	    err += ++y * 2 + 1;
 1521 0d78 93171900 		slli	a5,s2,1	#, tmp101, y
 1522              	# main_seeed.c:389: 	    err += ++y * 2 + 1;
 1523 0d7c 93871700 		addi	a5,a5,1	#, tmp102, tmp101
 1524              	# main_seeed.c:390: 	    if (-x == y && e2 <= x)
 1525 0d80 33079040 		neg	a4,s1	# tmp103, x
 1526              	# main_seeed.c:389: 	    err += ++y * 2 + 1;
 1527 0d84 B3878700 		add	a5,a5,s0	# e2, err, tmp102
 1528              	# main_seeed.c:390: 	    if (-x == y && e2 <= x)
 1529 0d88 63162701 		bne	a4,s2,.L181	#, tmp103, y,
 1530              	# main_seeed.c:390: 	    if (-x == y && e2 <= x)
 1531 0d8c 63C68400 		blt	s1,s0,.L182	#, x, e2,
 1532              	# main_seeed.c:391: 		e2 = 0;
 1533 0d90 13040000 		li	s0,0		# e2,
 1534              	.L181:
 1535              	# main_seeed.c:393: 	if (e2 > x)
 1536 0d94 63D28404 		bge	s1,s0,.L183	#, x, e2,
 1537              	.L182:
 1538              	# main_seeed.c:394: 	    err += ++x * 2 + 1;
 1539 0d98 93841400 		addi	s1,s1,1	#, x, x
 1540              	# main_seeed.c:394: 	    err += ++x * 2 + 1;
 1541 0d9c 13971400 		slli	a4,s1,1	#, tmp104, x
 1542              	# main_seeed.c:394: 	    err += ++x * 2 + 1;
 1543 0da0 13071700 		addi	a4,a4,1	#, tmp105, tmp104
 1544              	# main_seeed.c:394: 	    err += ++x * 2 + 1;
 1545 0da4 B387E700 		add	a5,a5,a4	# tmp105, err, err
 1546              	# main_seeed.c:396:     while (x <= 0);
 1547 0da8 63987403 		bne	s1,s7,.L183	#, x, tmp107,
 1548              	# main_seeed.c:397: }
 1549 0dac 8320C103 		lw	ra,60(sp)		#,
 1550 0db0 03248103 		lw	s0,56(sp)		#,
 1551 0db4 83244103 		lw	s1,52(sp)		#,
 1552 0db8 03290103 		lw	s2,48(sp)		#,
 1553 0dbc 8329C102 		lw	s3,44(sp)		#,
 1554 0dc0 032A8102 		lw	s4,40(sp)		#,
 1555 0dc4 832A4102 		lw	s5,36(sp)		#,
 1556 0dc8 032B0102 		lw	s6,32(sp)		#,
 1557 0dcc 832BC101 		lw	s7,28(sp)		#,
 1558 0dd0 13010104 		addi	sp,sp,64	#,,
 1559 0dd4 67800000 		jr	ra		#
 1560              	.L183:
 1561              	# main_seeed.c:382: {
 1562 0dd8 13840700 		mv	s0,a5	# e2, err
 1563 0ddc 6FF0DFF2 		j	.L180		#
 1564              	.L184:
 1565 0de0 93070400 		mv	a5,s0	# err, e2
 1566 0de4 6FF01FFB 		j	.L181		#
 1568              		.align	2
 1569              		.globl	drawHorizontalLine
 1571              	drawHorizontalLine:
 1572              	# main_seeed.c:334:     uint16_t x1 = min(x + width, _width - 1);
 1573 0de8 B7070000 		lui	a5,%hi(_width)	# tmp88,
 1574 0dec 83D70700 		lhu	a5,%lo(_width)(a5)	# _width, _width
 1575              	# main_seeed.c:333: {
 1576 0df0 130101FE 		addi	sp,sp,-32	#,,
 1577 0df4 23282101 		sw	s2,16(sp)	#,
 1578 0df8 23263101 		sw	s3,12(sp)	#,
 1579 0dfc 232E1100 		sw	ra,28(sp)	#,
 1580 0e00 232C8100 		sw	s0,24(sp)	#,
 1581 0e04 232A9100 		sw	s1,20(sp)	#,
 1582              	# main_seeed.c:334:     uint16_t x1 = min(x + width, _width - 1);
 1583 0e08 3307C500 		add	a4,a0,a2	# tmp98, tmp91, x
 1584 0e0c 9387F7FF 		addi	a5,a5,-1	#, _7, _width
 1585              	# main_seeed.c:333: {
 1586 0e10 13890500 		mv	s2,a1	# y, tmp97
 1587 0e14 93890600 		mv	s3,a3	# color, tmp99
 1588              	# main_seeed.c:334:     uint16_t x1 = min(x + width, _width - 1);
 1589 0e18 6354F700 		ble	a5,a4,.L187	#, _7, tmp91,
 1590 0e1c 93070700 		mv	a5,a4	# _7, tmp91
 1591              	.L187:
 1592              	# main_seeed.c:335:     for (int16_t i = x; i < x1; i++) {
 1593 0e20 13150501 		slli	a0,a0,16	#, i, x
 1594              	# main_seeed.c:335:     for (int16_t i = x; i < x1; i++) {
 1595 0e24 93940701 		slli	s1,a5,16	#, tmp93, _7
 1596              	# main_seeed.c:335:     for (int16_t i = x; i < x1; i++) {
 1597 0e28 13550541 		srai	a0,a0,16	#, i, i
 1598              	# main_seeed.c:335:     for (int16_t i = x; i < x1; i++) {
 1599 0e2c 93D40401 		srli	s1,s1,16	#, tmp93, tmp93
 1600              	.L188:
 1601              	# main_seeed.c:335:     for (int16_t i = x; i < x1; i++) {
 1602 0e30 63409502 		blt	a0,s1,.L189	#, i, tmp93,
 1603              	# main_seeed.c:338: }
 1604 0e34 8320C101 		lw	ra,28(sp)		#,
 1605 0e38 03248101 		lw	s0,24(sp)		#,
 1606 0e3c 83244101 		lw	s1,20(sp)		#,
 1607 0e40 03290101 		lw	s2,16(sp)		#,
 1608 0e44 8329C100 		lw	s3,12(sp)		#,
 1609 0e48 13010102 		addi	sp,sp,32	#,,
 1610 0e4c 67800000 		jr	ra		#
 1611              	.L189:
 1612 0e50 13140501 		slli	s0,a0,16	#, _22, i
 1613 0e54 13540401 		srli	s0,s0,16	#, _22, _22
 1614              	# main_seeed.c:336: 	drawPixel(i, y, color);
 1615 0e58 13050400 		mv	a0,s0	#, _22
 1616 0e5c 13860900 		mv	a2,s3	#, color
 1617 0e60 93050900 		mv	a1,s2	#, y
 1618 0e64 97000000 		call	drawPixel		#
 1618      E7800000 
 1619 0e6c 13051400 		addi	a0,s0,1	#, tmp92, _22
 1620 0e70 13150501 		slli	a0,a0,16	#, i, tmp92
 1621 0e74 13550541 		srai	a0,a0,16	#, i, i
 1622 0e78 6FF09FFB 		j	.L188		#
 1624              		.align	2
 1625              		.globl	drawRectangle
 1627              	drawRectangle:
 1628 0e7c 130101FE 		addi	sp,sp,-32	#,,
 1629 0e80 23263101 		sw	s3,12(sp)	#,
 1630 0e84 93890600 		mv	s3,a3	# height, tmp86
 1631              	# main_seeed.c:344:     drawHorizontalLine(x, y, width, color);
 1632 0e88 93060700 		mv	a3,a4	#, color
 1633              	# main_seeed.c:343: {
 1634 0e8c 232E1100 		sw	ra,28(sp)	#,
 1635 0e90 232C8100 		sw	s0,24(sp)	#,
 1636 0e94 232A9100 		sw	s1,20(sp)	#,
 1637 0e98 23282101 		sw	s2,16(sp)	#,
 1638 0e9c 23244101 		sw	s4,8(sp)	#,
 1639              	# main_seeed.c:343: {
 1640 0ea0 93040700 		mv	s1,a4	# color, tmp87
 1641 0ea4 13040500 		mv	s0,a0	# x, tmp83
 1642 0ea8 13890500 		mv	s2,a1	# y, tmp84
 1643 0eac 130A0600 		mv	s4,a2	# width, tmp85
 1644              	# main_seeed.c:344:     drawHorizontalLine(x, y, width, color);
 1645 0eb0 97000000 		call	drawHorizontalLine		#
 1645      E7800000 
 1646              	# main_seeed.c:345:     drawHorizontalLine(x, y + height, width, color);
 1647 0eb8 B3053901 		add	a1,s2,s3	# height, tmp79, y
 1648 0ebc 93950501 		slli	a1,a1,16	#,, tmp79
 1649 0ec0 93860400 		mv	a3,s1	#, color
 1650 0ec4 13060A00 		mv	a2,s4	#, width
 1651 0ec8 13050400 		mv	a0,s0	#, x
 1652 0ecc 93D50501 		srli	a1,a1,16	#,,
 1653 0ed0 97000000 		call	drawHorizontalLine		#
 1653      E7800000 
 1654              	# main_seeed.c:346:     drawVerticalLine(x, y, height, color);
 1655 0ed8 93860400 		mv	a3,s1	#, color
 1656 0edc 13860900 		mv	a2,s3	#, height
 1657 0ee0 93050900 		mv	a1,s2	#, y
 1658 0ee4 13050400 		mv	a0,s0	#, x
 1659 0ee8 97000000 		call	drawVerticalLine		#
 1659      E7800000 
 1660              	# main_seeed.c:347:     drawVerticalLine(x + width, y, height, color);
 1661 0ef0 33054401 		add	a0,s0,s4	# width, tmp81, x
 1662              	# main_seeed.c:348: }
 1663 0ef4 03248101 		lw	s0,24(sp)		#,
 1664 0ef8 8320C101 		lw	ra,28(sp)		#,
 1665 0efc 032A8100 		lw	s4,8(sp)		#,
 1666              	# main_seeed.c:347:     drawVerticalLine(x + width, y, height, color);
 1667 0f00 93860400 		mv	a3,s1	#, color
 1668 0f04 13860900 		mv	a2,s3	#, height
 1669              	# main_seeed.c:348: }
 1670 0f08 83244101 		lw	s1,20(sp)		#,
 1671 0f0c 8329C100 		lw	s3,12(sp)		#,
 1672              	# main_seeed.c:347:     drawVerticalLine(x + width, y, height, color);
 1673 0f10 93050900 		mv	a1,s2	#, y
 1674              	# main_seeed.c:348: }
 1675 0f14 03290101 		lw	s2,16(sp)		#,
 1676              	# main_seeed.c:347:     drawVerticalLine(x + width, y, height, color);
 1677 0f18 13150501 		slli	a0,a0,16	#,, tmp81
 1678              	# main_seeed.c:348: }
 1679              	# main_seeed.c:347:     drawVerticalLine(x + width, y, height, color);
 1680 0f1c 13550501 		srli	a0,a0,16	#,,
 1681              	# main_seeed.c:348: }
 1682 0f20 13010102 		addi	sp,sp,32	#,,
 1683              	# main_seeed.c:347:     drawVerticalLine(x + width, y, height, color);
 1684 0f24 17030000 		tail	drawVerticalLine		#
 1684      67000300 
 1686              		.align	2
 1687              		.globl	fillTraingle
 1689              	fillTraingle:
 1690 0f2c 130101FB 		addi	sp,sp,-80	#,,
 1691 0f30 23248104 		sw	s0,72(sp)	#,
 1692 0f34 23229104 		sw	s1,68(sp)	#,
 1693 0f38 232E3103 		sw	s3,60(sp)	#,
 1694 0f3c 23286103 		sw	s6,48(sp)	#,
 1695 0f40 23267103 		sw	s7,44(sp)	#,
 1696 0f44 93840600 		mv	s1,a3	# y1, tmp215
 1697 0f48 23261104 		sw	ra,76(sp)	#,
 1698 0f4c 23202105 		sw	s2,64(sp)	#,
 1699 0f50 232C4103 		sw	s4,56(sp)	#,
 1700 0f54 232A5103 		sw	s5,52(sp)	#,
 1701 0f58 23248103 		sw	s8,40(sp)	#,
 1702 0f5c 23229103 		sw	s9,36(sp)	#,
 1703 0f60 2320A103 		sw	s10,32(sp)	#,
 1704 0f64 232EB101 		sw	s11,28(sp)	#,
 1705              	# main_seeed.c:411: {
 1706 0f68 130B0500 		mv	s6,a0	# x0, tmp212
 1707 0f6c 13840500 		mv	s0,a1	# y0, tmp213
 1708 0f70 93090600 		mv	s3,a2	# x1, tmp214
 1709 0f74 938B0700 		mv	s7,a5	# y2, tmp217
 1710 0f78 93060800 		mv	a3,a6	# color, tmp218
 1711              	# main_seeed.c:414:     if (y0 > y1) {
 1712 0f7c 63F0B42A 		bleu	a1,s1,.L194	#, y0, y1,
 1713              	# main_seeed.c:418:     if (y1 > y2) {
 1714 0f80 63ECB72A 		bgtu	a1,a5,.L195	#, y0, y2,
 1715              	.L208:
 1716              	# main_seeed.c:422:     if (y0 > y1) {
 1717 0f84 93070400 		mv	a5,s0	# y0, y0
 1718 0f88 13840400 		mv	s0,s1	# y0, y1
 1719 0f8c 93840700 		mv	s1,a5	# y1, y0
 1720 0f90 93070B00 		mv	a5,s6	# x0, x0
 1721 0f94 138B0900 		mv	s6,s3	# x0, x1
 1722 0f98 93890700 		mv	s3,a5	# x1, x0
 1723              	.L209:
 1724              	# main_seeed.c:427:     if (y0 == y2) {
 1725 0f9c 6312740B 		bne	s0,s7,.L196	#, y0, y2,
 1726              	# main_seeed.c:428: 	x0 = min(x0, x1) < x2 ? min(x0, x1) : x2;
 1727 0fa0 13050B00 		mv	a0,s6	# x0, x0
 1728 0fa4 63F46901 		bleu	s6,s3,.L197	#, x0, x1,
 1729 0fa8 13850900 		mv	a0,s3	# x0, x1
 1730              	.L197:
 1731              	# main_seeed.c:428: 	x0 = min(x0, x1) < x2 ? min(x0, x1) : x2;
 1732 0fac 93170501 		slli	a5,a0,16	#, x0, x0
 1733 0fb0 93D70701 		srli	a5,a5,16	#, x0, x0
 1734 0fb4 6374F700 		bleu	a5,a4,.L198	#, x0, x2,
 1735 0fb8 13050700 		mv	a0,a4	# x0, x2
 1736              	.L198:
 1737 0fbc 13150501 		slli	a0,a0,16	#, _2, x0
 1738 0fc0 13550501 		srli	a0,a0,16	#, _2, _2
 1739              	# main_seeed.c:429: 	x2 = max(x0, x1) > x2 ? max(x0, x1) : x2;
 1740 0fc4 13860900 		mv	a2,s3	# x1, x1
 1741 0fc8 63F4E900 		bgeu	s3,a4,.L199	#, x1, x2,
 1742 0fcc 13060700 		mv	a2,a4	# x1, x2
 1743              	.L199:
 1744 0fd0 93170601 		slli	a5,a2,16	#, x1, x1
 1745 0fd4 93D70701 		srli	a5,a5,16	#, x1, x1
 1746 0fd8 63F4A700 		bgeu	a5,a0,.L200	#, x1, _2,
 1747 0fdc 13060500 		mv	a2,a0	# x1, _2
 1748              	.L200:
 1749              	# main_seeed.c:430: 	drawHorizontalLine(x0, y0, x2 - x0, color);
 1750 0fe0 93050400 		mv	a1,s0	#, y0
 1751              	# main_seeed.c:464: }
 1752 0fe4 03248104 		lw	s0,72(sp)		#,
 1753 0fe8 8320C104 		lw	ra,76(sp)		#,
 1754 0fec 83244104 		lw	s1,68(sp)		#,
 1755 0ff0 03290104 		lw	s2,64(sp)		#,
 1756 0ff4 8329C103 		lw	s3,60(sp)		#,
 1757 0ff8 032A8103 		lw	s4,56(sp)		#,
 1758 0ffc 832A4103 		lw	s5,52(sp)		#,
 1759 1000 032B0103 		lw	s6,48(sp)		#,
 1760 1004 832BC102 		lw	s7,44(sp)		#,
 1761 1008 032C8102 		lw	s8,40(sp)		#,
 1762 100c 832C4102 		lw	s9,36(sp)		#,
 1763 1010 032D0102 		lw	s10,32(sp)		#,
 1764 1014 832DC101 		lw	s11,28(sp)		#,
 1765              	# main_seeed.c:430: 	drawHorizontalLine(x0, y0, x2 - x0, color);
 1766 1018 3306A640 		sub	a2,a2,a0	# tmp161, x1, _2
 1767 101c 13160601 		slli	a2,a2,16	#,, tmp161
 1768              	# main_seeed.c:464: }
 1769              	# main_seeed.c:430: 	drawHorizontalLine(x0, y0, x2 - x0, color);
 1770 1020 13560601 		srli	a2,a2,16	#,,
 1771              	# main_seeed.c:464: }
 1772 1024 13010105 		addi	sp,sp,80	#,,
 1773              	# main_seeed.c:430: 	drawHorizontalLine(x0, y0, x2 - x0, color);
 1774 1028 17030000 		tail	drawHorizontalLine		#
 1774      67000300 
 1775              	.L211:
 1776              	# main_seeed.c:422:     if (y0 > y1) {
 1777 1030 938B0700 		mv	s7,a5	# y2, y0
 1778 1034 93070B00 		mv	a5,s6	# x0, x0
 1779 1038 130B0700 		mv	s6,a4	# x0, x2
 1780 103c 13870700 		mv	a4,a5	# x2, x0
 1781              	.L196:
 1782              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1783 1040 B30C6741 		sub	s9,a4,s6	# tmp165, x2, x0
 1784              	# main_seeed.c:434:     int16_t dx01 = x1 - x0, dy01 = y1 - y0,
 1785 1044 B3876941 		sub	a5,s3,s6	# tmp163, x1, x0
 1786              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1787 1048 33073741 		sub	a4,a4,s3	# tmp167, x2, x1
 1788              	# main_seeed.c:434:     int16_t dx01 = x1 - x0, dy01 = y1 - y0,
 1789 104c 33888440 		sub	a6,s1,s0	# tmp164, y1, y0
 1790              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1791 1050 338A8B40 		sub	s4,s7,s0	# tmp166, y2, y0
 1792              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1793 1054 B38A9B40 		sub	s5,s7,s1	# tmp168, y2, y1
 1794              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1795 1058 13190701 		slli	s2,a4,16	#, _10, tmp167
 1796              	# main_seeed.c:434:     int16_t dx01 = x1 - x0, dy01 = y1 - y0,
 1797 105c 93970701 		slli	a5,a5,16	#, _6, tmp163
 1798              	# main_seeed.c:434:     int16_t dx01 = x1 - x0, dy01 = y1 - y0,
 1799 1060 13180801 		slli	a6,a6,16	#, dy01, tmp164
 1800              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1801 1064 939C0C01 		slli	s9,s9,16	#, _8, tmp165
 1802              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1803 1068 131A0A01 		slli	s4,s4,16	#, dy02, tmp166
 1804              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1805 106c 939A0A01 		slli	s5,s5,16	#, dy12, tmp168
 1806              	# main_seeed.c:434:     int16_t dx01 = x1 - x0, dy01 = y1 - y0,
 1807 1070 93D70701 		srli	a5,a5,16	#, _6, _6
 1808              	# main_seeed.c:434:     int16_t dx01 = x1 - x0, dy01 = y1 - y0,
 1809 1074 13580841 		srai	a6,a6,16	#, dy01, dy01
 1810              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1811 1078 93DC0C01 		srli	s9,s9,16	#, _8, _8
 1812              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1813 107c 135A0A41 		srai	s4,s4,16	#, dy02, dy02
 1814              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1815 1080 13590901 		srli	s2,s2,16	#, _10, _10
 1816              	# main_seeed.c:435: 	dx02 = x2 - x0, dy02 = y2 - y0, dx12 = x2 - x1, dy12 = y2 - y1;
 1817 1084 93DA0A41 		srai	s5,s5,16	#, dy12, dy12
 1818 1088 13870400 		mv	a4,s1	# last, y1
 1819              	# main_seeed.c:438:     if (y1 == y2)
 1820 108c 63887401 		beq	s1,s7,.L201	#, y1, y2,
 1821              	# main_seeed.c:441: 	last = y1 - 1;
 1822 1090 1387F4FF 		addi	a4,s1,-1	#, tmp169, y1
 1823 1094 13170701 		slli	a4,a4,16	#, last, tmp169
 1824 1098 13570701 		srli	a4,a4,16	#, last, last
 1825              	.L201:
 1826              	# main_seeed.c:443:     for (y = y0; y <= last; y++) {
 1827 109c 130C0400 		mv	s8,s0	# y, y0
 1828              	# main_seeed.c:436:     int16_t sa = 0, sb = 0;
 1829 10a0 930D0000 		li	s11,0		# sb,
 1830              	# main_seeed.c:436:     int16_t sa = 0, sb = 0;
 1831 10a4 130D0000 		li	s10,0		# sa,
 1832              	.L202:
 1833              	# main_seeed.c:443:     for (y = y0; y <= last; y++) {
 1834 10a8 63728707 		bleu	s8,a4,.L204	#, y, last,
 1835              	# main_seeed.c:453:     sa = dx12 * (y - y1);
 1836 10ac B3049C40 		sub	s1,s8,s1	# tmp187, y, y1
 1837              	# main_seeed.c:454:     sb = dx02 * (y - y0);
 1838 10b0 33048C40 		sub	s0,s8,s0	# tmp190, y, y0
 1839              	# main_seeed.c:453:     sa = dx12 * (y - y1);
 1840 10b4 B3049902 		mul	s1,s2,s1	# tmp189, _10, tmp187
 1841              	# main_seeed.c:454:     sb = dx02 * (y - y0);
 1842 10b8 33848C02 		mul	s0,s9,s0	# tmp192, _8, tmp190
 1843              	# main_seeed.c:453:     sa = dx12 * (y - y1);
 1844 10bc 93940401 		slli	s1,s1,16	#, sa, tmp189
 1845 10c0 93D40441 		srai	s1,s1,16	#, sa, sa
 1846              	# main_seeed.c:454:     sb = dx02 * (y - y0);
 1847 10c4 13140401 		slli	s0,s0,16	#, sb, tmp192
 1848 10c8 13540441 		srai	s0,s0,16	#, sb, sb
 1849              	.L205:
 1850              	# main_seeed.c:455:     for (; y <= y2; y++) {
 1851 10cc 63FA8B0D 		bleu	s8,s7,.L207	#, y, y2,
 1852              	# main_seeed.c:464: }
 1853 10d0 8320C104 		lw	ra,76(sp)		#,
 1854 10d4 03248104 		lw	s0,72(sp)		#,
 1855 10d8 83244104 		lw	s1,68(sp)		#,
 1856 10dc 03290104 		lw	s2,64(sp)		#,
 1857 10e0 8329C103 		lw	s3,60(sp)		#,
 1858 10e4 032A8103 		lw	s4,56(sp)		#,
 1859 10e8 832A4103 		lw	s5,52(sp)		#,
 1860 10ec 032B0103 		lw	s6,48(sp)		#,
 1861 10f0 832BC102 		lw	s7,44(sp)		#,
 1862 10f4 032C8102 		lw	s8,40(sp)		#,
 1863 10f8 832C4102 		lw	s9,36(sp)		#,
 1864 10fc 032D0102 		lw	s10,32(sp)		#,
 1865 1100 832DC101 		lw	s11,28(sp)		#,
 1866 1104 13010105 		addi	sp,sp,80	#,,
 1867 1108 67800000 		jr	ra		#
 1868              	.L204:
 1869              	# main_seeed.c:444: 	a = x0 + sa / dy01;
 1870 110c 33450D03 		div	a0,s10,a6	# dy01, tmp171, sa
 1871 1110 338DA701 		add	s10,a5,s10	# sa, tmp179, _6
 1872 1114 131D0D01 		slli	s10,s10,16	#, sa, tmp179
 1873 1118 135D0D41 		srai	s10,s10,16	#, sa, sa
 1874              	# main_seeed.c:445: 	b = x0 + sb / dy02;
 1875 111c 33C64D03 		div	a2,s11,s4	# dy02, tmp175, sb
 1876              	# main_seeed.c:444: 	a = x0 + sa / dy01;
 1877 1120 3305AB00 		add	a0,s6,a0	# tmp171, tmp173, x0
 1878 1124 13150501 		slli	a0,a0,16	#, a, tmp173
 1879 1128 B38DBC01 		add	s11,s9,s11	# sb, tmp181, _8
 1880 112c 939D0D01 		slli	s11,s11,16	#, sb, tmp181
 1881 1130 13550501 		srli	a0,a0,16	#, a, a
 1882 1134 93DD0D41 		srai	s11,s11,16	#, sb, sb
 1883              	# main_seeed.c:445: 	b = x0 + sb / dy02;
 1884 1138 3306CB00 		add	a2,s6,a2	# tmp175, tmp177, x0
 1885 113c 13160601 		slli	a2,a2,16	#, b, tmp177
 1886 1140 13560601 		srli	a2,a2,16	#, b, b
 1887              	# main_seeed.c:448: 	if (a > b)
 1888 1144 6378A600 		bleu	a0,a2,.L203	#, a, b,
 1889 1148 93050500 		mv	a1,a0	# a, a
 1890 114c 13050600 		mv	a0,a2	# a, b
 1891 1150 13860500 		mv	a2,a1	# b, a
 1892              	.L203:
 1893              	# main_seeed.c:450: 	drawHorizontalLine(a, y, b - a + 1, color);
 1894 1154 13061600 		addi	a2,a2,1	#, tmp182, b
 1895 1158 3306A640 		sub	a2,a2,a0	# tmp184, tmp182, a
 1896 115c 13160601 		slli	a2,a2,16	#,, tmp184
 1897 1160 93050C00 		mv	a1,s8	#, y
 1898 1164 13560601 		srli	a2,a2,16	#,,
 1899              	# main_seeed.c:443:     for (y = y0; y <= last; y++) {
 1900 1168 130C1C00 		addi	s8,s8,1	#, tmp186, y
 1901 116c 23260101 		sw	a6,12(sp)	# dy01, %sfp
 1902 1170 2324E100 		sw	a4,8(sp)	# last, %sfp
 1903 1174 2322F100 		sw	a5,4(sp)	# _6, %sfp
 1904              	# main_seeed.c:450: 	drawHorizontalLine(a, y, b - a + 1, color);
 1905 1178 2320D100 		sw	a3,0(sp)	# color, %sfp
 1906              	# main_seeed.c:443:     for (y = y0; y <= last; y++) {
 1907 117c 131C0C01 		slli	s8,s8,16	#, y, tmp186
 1908              	# main_seeed.c:450: 	drawHorizontalLine(a, y, b - a + 1, color);
 1909 1180 97000000 		call	drawHorizontalLine		#
 1909      E7800000 
 1910              	# main_seeed.c:443:     for (y = y0; y <= last; y++) {
 1911 1188 0328C100 		lw	a6,12(sp)		# dy01, %sfp
 1912 118c 03278100 		lw	a4,8(sp)		# last, %sfp
 1913 1190 83274100 		lw	a5,4(sp)		# _6, %sfp
 1914 1194 83260100 		lw	a3,0(sp)		# color, %sfp
 1915 1198 135C0C01 		srli	s8,s8,16	#, y, y
 1916 119c 6FF0DFF0 		j	.L202		#
 1917              	.L207:
 1918              	# main_seeed.c:456: 	a = x1 + sa / dy12;
 1919 11a0 33C55403 		div	a0,s1,s5	# dy12, tmp194, sa
 1920 11a4 B3049900 		add	s1,s2,s1	# sa, tmp202, _10
 1921 11a8 93940401 		slli	s1,s1,16	#, sa, tmp202
 1922 11ac 93D40441 		srai	s1,s1,16	#, sa, sa
 1923              	# main_seeed.c:457: 	b = x0 + sb / dy02;
 1924 11b0 33464403 		div	a2,s0,s4	# dy02, tmp198, sb
 1925              	# main_seeed.c:456: 	a = x1 + sa / dy12;
 1926 11b4 3385A900 		add	a0,s3,a0	# tmp194, tmp196, x1
 1927 11b8 13150501 		slli	a0,a0,16	#, _37, tmp196
 1928 11bc 33848C00 		add	s0,s9,s0	# sb, tmp204, _8
 1929 11c0 13140401 		slli	s0,s0,16	#, sb, tmp204
 1930 11c4 13550501 		srli	a0,a0,16	#, _37, _37
 1931 11c8 13540441 		srai	s0,s0,16	#, sb, sb
 1932              	# main_seeed.c:457: 	b = x0 + sb / dy02;
 1933 11cc 3306CB00 		add	a2,s6,a2	# tmp198, tmp200, x0
 1934 11d0 13160601 		slli	a2,a2,16	#, _42, tmp200
 1935 11d4 13560601 		srli	a2,a2,16	#, _42, _42
 1936              	# main_seeed.c:460: 	if (a > b)
 1937 11d8 6378A600 		bleu	a0,a2,.L206	#, _37, _42,
 1938 11dc 93070500 		mv	a5,a0	# _37, _37
 1939 11e0 13050600 		mv	a0,a2	# _37, _42
 1940 11e4 13860700 		mv	a2,a5	# _42, _37
 1941              	.L206:
 1942              	# main_seeed.c:462: 	drawHorizontalLine(a, y, b - a + 1, color);
 1943 11e8 13061600 		addi	a2,a2,1	#, tmp205, _42
 1944 11ec 3306A640 		sub	a2,a2,a0	# tmp207, tmp205, _37
 1945 11f0 13160601 		slli	a2,a2,16	#,, tmp207
 1946 11f4 93050C00 		mv	a1,s8	#, y
 1947 11f8 13560601 		srli	a2,a2,16	#,,
 1948              	# main_seeed.c:455:     for (; y <= y2; y++) {
 1949 11fc 130C1C00 		addi	s8,s8,1	#, tmp209, y
 1950              	# main_seeed.c:462: 	drawHorizontalLine(a, y, b - a + 1, color);
 1951 1200 2320D100 		sw	a3,0(sp)	# color, %sfp
 1952              	# main_seeed.c:455:     for (; y <= y2; y++) {
 1953 1204 131C0C01 		slli	s8,s8,16	#, y, tmp209
 1954              	# main_seeed.c:462: 	drawHorizontalLine(a, y, b - a + 1, color);
 1955 1208 97000000 		call	drawHorizontalLine		#
 1955      E7800000 
 1956              	# main_seeed.c:455:     for (; y <= y2; y++) {
 1957 1210 83260100 		lw	a3,0(sp)		# color, %sfp
 1958 1214 135C0C01 		srli	s8,s8,16	#, y, y
 1959 1218 6FF05FEB 		j	.L205		#
 1960              	.L194:
 1961              	# main_seeed.c:418:     if (y1 > y2) {
 1962 121c E3F097D8 		bleu	s1,a5,.L209	#, y1, y2,
 1963 1220 93070400 		mv	a5,s0	# y0, y0
 1964 1224 13840400 		mv	s0,s1	# y0, y1
 1965 1228 93840700 		mv	s1,a5	# y1, y0
 1966 122c 93070B00 		mv	a5,s6	# x0, x0
 1967 1230 138B0900 		mv	s6,s3	# x0, x1
 1968 1234 93890700 		mv	s3,a5	# x1, x0
 1969              	.L195:
 1970              	# main_seeed.c:422:     if (y0 > y1) {
 1971 1238 93070400 		mv	a5,s0	# y0, y0
 1972 123c 13840B00 		mv	s0,s7	# y0, y2
 1973 1240 E3E89BDE 		bltu	s7,s1,.L211	#, y2, y1,
 1974 1244 938B0700 		mv	s7,a5	# y2, y0
 1975 1248 93070B00 		mv	a5,s6	# x0, x0
 1976 124c 130B0700 		mv	s6,a4	# x0, x2
 1977 1250 13870700 		mv	a4,a5	# x2, x0
 1978 1254 6FF01FD3 		j	.L208		#
 1980              		.align	2
 1981              		.globl	fillRectangle
 1983              	fillRectangle:
 1984 1258 130101FE 		addi	sp,sp,-32	#,,
 1985 125c 23263101 		sw	s3,12(sp)	#,
 1986 1260 B386B600 		add	a3,a3,a1	# y, tmp80, tmp90
 1987 1264 B309A600 		add	s3,a2,a0	# x, tmp84, tmp89
 1988 1268 23282101 		sw	s2,16(sp)	#,
 1989 126c 93990901 		slli	s3,s3,16	#, _18, tmp84
 1990 1270 13990601 		slli	s2,a3,16	#, _21, tmp80
 1991 1274 232C8100 		sw	s0,24(sp)	#,
 1992 1278 23244101 		sw	s4,8(sp)	#,
 1993 127c 23225101 		sw	s5,4(sp)	#,
 1994 1280 232E1100 		sw	ra,28(sp)	#,
 1995 1284 232A9100 		sw	s1,20(sp)	#,
 1996              	# main_seeed.c:353: {
 1997 1288 130A0500 		mv	s4,a0	# x, tmp87
 1998 128c 13840500 		mv	s0,a1	# y, tmp88
 1999 1290 930A0700 		mv	s5,a4	# color, tmp91
 2000 1294 13590901 		srli	s2,s2,16	#, _21, _21
 2001 1298 93D90901 		srli	s3,s3,16	#, _18, _18
 2002              	.L216:
 2003              	# main_seeed.c:354:     for (uint16_t i = 0; i < height; i++) {
 2004 129c 63002405 		beq	s0,s2,.L215	#, y, _21,
 2005              	# main_seeed.c:354:     for (uint16_t i = 0; i < height; i++) {
 2006 12a0 93040A00 		mv	s1,s4	# ivtmp.457, x
 2007 12a4 6F004002 		j	.L219		#
 2008              	.L217:
 2009              	# main_seeed.c:356: 	    drawPixel(x + j, y + i, color);
 2010 12a8 13850400 		mv	a0,s1	#, ivtmp.457
 2011 12ac 93841400 		addi	s1,s1,1	#, tmp81, ivtmp.457
 2012 12b0 13860A00 		mv	a2,s5	#, color
 2013 12b4 93050400 		mv	a1,s0	#, y
 2014 12b8 93940401 		slli	s1,s1,16	#, ivtmp.457, tmp81
 2015 12bc 97000000 		call	drawPixel		#
 2015      E7800000 
 2016 12c4 93D40401 		srli	s1,s1,16	#, ivtmp.457, ivtmp.457
 2017              	.L219:
 2018              	# main_seeed.c:355: 	for (uint16_t j = 0; j < width; j++) {
 2019 12c8 E39034FF 		bne	s1,s3,.L217	#, ivtmp.457, _18,
 2020 12cc 13041400 		addi	s0,s0,1	#, tmp82, y
 2021 12d0 13140401 		slli	s0,s0,16	#, y, tmp82
 2022 12d4 13540401 		srli	s0,s0,16	#, y, y
 2023 12d8 6FF05FFC 		j	.L216		#
 2024              	.L215:
 2025              	# main_seeed.c:359: }
 2026 12dc 8320C101 		lw	ra,28(sp)		#,
 2027 12e0 03248101 		lw	s0,24(sp)		#,
 2028 12e4 83244101 		lw	s1,20(sp)		#,
 2029 12e8 03290101 		lw	s2,16(sp)		#,
 2030 12ec 8329C100 		lw	s3,12(sp)		#,
 2031 12f0 032A8100 		lw	s4,8(sp)		#,
 2032 12f4 832A4100 		lw	s5,4(sp)		#,
 2033 12f8 13010102 		addi	sp,sp,32	#,,
 2034 12fc 67800000 		jr	ra		#
 2036              		.align	2
 2037              		.globl	drawChar
 2039              	drawChar:
 2040 1300 130101FD 		addi	sp,sp,-48	#,,
 2041              	# main_seeed.c:470:     if ((ascii < 32) || (ascii >= 127)) {
 2042 1304 930705FE 		addi	a5,a0,-32	#, tmp104, ascii
 2043              	# main_seeed.c:469: {
 2044 1308 23286101 		sw	s6,16(sp)	#,
 2045 130c 23261102 		sw	ra,44(sp)	#,
 2046 1310 130B0700 		mv	s6,a4	# color, tmp142
 2047 1314 23248102 		sw	s0,40(sp)	#,
 2048 1318 23229102 		sw	s1,36(sp)	#,
 2049 131c 23202103 		sw	s2,32(sp)	#,
 2050 1320 232E3101 		sw	s3,28(sp)	#,
 2051 1324 232C4101 		sw	s4,24(sp)	#,
 2052 1328 232A5101 		sw	s5,20(sp)	#,
 2053 132c 23267101 		sw	s7,12(sp)	#,
 2054 1330 23248101 		sw	s8,8(sp)	#,
 2055              	# main_seeed.c:470:     if ((ascii < 32) || (ascii >= 127)) {
 2056 1334 93F7F70F 		andi	a5,a5,0xff	# tmp105, tmp104
 2057 1338 1307E005 		li	a4,94		# tmp106,
 2058 133c 6366F70C 		bgtu	a5,a4,.L221	#, tmp105, tmp106,
 2059 1340 B7040000 		lui	s1,%hi(.LANCHOR1)	# tmp108,
 2060 1344 13153500 		slli	a0,a0,3	#, tmp109, ascii
 2061 1348 93840400 		addi	s1,s1,%lo(.LANCHOR1)	# tmp107, tmp108,
 2062 134c 13890500 		mv	s2,a1	# x, tmp139
 2063 1350 930A0600 		mv	s5,a2	# y, tmp140
 2064 1354 93890600 		mv	s3,a3	# size, tmp141
 2065 1358 B384A400 		add	s1,s1,a0	# tmp109, ivtmp.472, tmp107
 2066 135c 130A8000 		li	s4,8		# ivtmp_3,
 2067              	# main_seeed.c:493: 	    if (f == FONT_Y - 1 && inrun) {
 2068 1360 930B7000 		li	s7,7		# tmp130,
 2069              	.L226:
 2070              	# main_seeed.c:475: 	uint8_t temp = pgm_read_byte(&simpleFont[ascii - 0x20][i]);
 2071 1364 03CC04F0 		lbu	s8,-256(s1)	# temp, MEM[(unsigned char *)_71 + 4294967040B]
 2072              	# main_seeed.c:477: 	int8_t runlen = 0;
 2073 1368 93070000 		li	a5,0		# runlen,
 2074              	# main_seeed.c:476: 	int8_t inrun = 0;
 2075 136c 93060000 		li	a3,0		# inrun,
 2076              	# main_seeed.c:480: 	for (int8_t f = 0; f < FONT_Y; f++) {
 2077 1370 13040000 		li	s0,0		# f,
 2078              	.L225:
 2079              	# main_seeed.c:481: 	    if ((temp >> f) & 0x01) {
 2080 1374 33578C40 		sra	a4,s8,s0	# f, tmp110, temp
 2081              	# main_seeed.c:481: 	    if ((temp >> f) & 0x01) {
 2082 1378 13771700 		andi	a4,a4,1	#, tmp111, tmp110
 2083              	# main_seeed.c:481: 	    if ((temp >> f) & 0x01) {
 2084 137c 6302070C 		beq	a4,zero,.L223	#, tmp111,,
 2085              	# main_seeed.c:482: 		if (inrun)
 2086 1380 638C060A 		beq	a3,zero,.L229	#, inrun,,
 2087              	# main_seeed.c:483: 		    runlen += 1;
 2088 1384 93871700 		addi	a5,a5,1	#, tmp113, runlen
 2089 1388 93978701 		slli	a5,a5,24	#, runlen, tmp113
 2090 138c 93D78741 		srai	a5,a5,24	#, runlen, runlen
 2091              	.L224:
 2092              	# main_seeed.c:493: 	    if (f == FONT_Y - 1 && inrun) {
 2093 1390 93061000 		li	a3,1		# inrun,
 2094 1394 63127405 		bne	s0,s7,.L228	#, f, tmp130,
 2095              	# main_seeed.c:498: 		f += 1;
 2096 1398 13048000 		li	s0,8		# f,
 2097              	.L227:
 2098              	# main_seeed.c:502: 		fillRectangle(x + i * size, y + (f - runlen) * size, size,
 2099 139c B386F902 		mul	a3,s3,a5	# tmp115, size, runlen
 2100              	# main_seeed.c:502: 		fillRectangle(x + i * size, y + (f - runlen) * size, size,
 2101 13a0 B307F440 		sub	a5,s0,a5	# tmp117, f, runlen
 2102              	# main_seeed.c:502: 		fillRectangle(x + i * size, y + (f - runlen) * size, size,
 2103 13a4 13070B00 		mv	a4,s6	#, color
 2104 13a8 13860900 		mv	a2,s3	#, size
 2105 13ac 13050900 		mv	a0,s2	#, x
 2106 13b0 B387F902 		mul	a5,s3,a5	# tmp119, size, tmp117
 2107 13b4 93960601 		slli	a3,a3,16	#,, tmp115
 2108 13b8 93D60601 		srli	a3,a3,16	#,,
 2109 13bc B387FA00 		add	a5,s5,a5	# tmp119, tmp121, y
 2110 13c0 93950701 		slli	a1,a5,16	#,, tmp121
 2111 13c4 93D50501 		srli	a1,a1,16	#,,
 2112 13c8 97000000 		call	fillRectangle		#
 2112      E7800000 
 2113              	# main_seeed.c:505: 		runlen = 0;
 2114 13d0 93070000 		li	a5,0		# runlen,
 2115              	# main_seeed.c:504: 		inrun = 0;
 2116 13d4 93060000 		li	a3,0		# inrun,
 2117              	.L228:
 2118              	# main_seeed.c:480: 	for (int8_t f = 0; f < FONT_Y; f++) {
 2119 13d8 13041400 		addi	s0,s0,1	#, tmp124, f
 2120 13dc 1377F40F 		andi	a4,s0,0xff	# _42, tmp124
 2121 13e0 13148401 		slli	s0,s0,24	#, f, tmp124
 2122 13e4 13548441 		srai	s0,s0,24	#, f, f
 2123              	# main_seeed.c:480: 	for (int8_t f = 0; f < FONT_Y; f++) {
 2124 13e8 E3F6EBF8 		bleu	a4,s7,.L225	#, _42, tmp130,
 2125              	# main_seeed.c:474:     for (int8_t i = 0; i < FONT_X; i++) {
 2126 13ec 130AFAFF 		addi	s4,s4,-1	#, tmp126, ivtmp_3
 2127 13f0 33892901 		add	s2,s3,s2	# x, tmp127, size
 2128 13f4 13190901 		slli	s2,s2,16	#, x, tmp127
 2129 13f8 137AFA0F 		andi	s4,s4,0xff	# ivtmp_3, tmp126
 2130 13fc 93841400 		addi	s1,s1,1	#, ivtmp.472, ivtmp.472
 2131 1400 13590901 		srli	s2,s2,16	#, x, x
 2132 1404 E3100AF6 		bne	s4,zero,.L226	#, ivtmp_3,,
 2133              	.L221:
 2134              	# main_seeed.c:510: }
 2135 1408 8320C102 		lw	ra,44(sp)		#,
 2136 140c 03248102 		lw	s0,40(sp)		#,
 2137 1410 83244102 		lw	s1,36(sp)		#,
 2138 1414 03290102 		lw	s2,32(sp)		#,
 2139 1418 8329C101 		lw	s3,28(sp)		#,
 2140 141c 032A8101 		lw	s4,24(sp)		#,
 2141 1420 832A4101 		lw	s5,20(sp)		#,
 2142 1424 032B0101 		lw	s6,16(sp)		#,
 2143 1428 832BC100 		lw	s7,12(sp)		#,
 2144 142c 032C8100 		lw	s8,8(sp)		#,
 2145 1430 13010103 		addi	sp,sp,48	#,,
 2146 1434 67800000 		jr	ra		#
 2147              	.L229:
 2148              	# main_seeed.c:486: 		    runlen = 1;
 2149 1438 93071000 		li	a5,1		# runlen,
 2150 143c 6FF05FF5 		j	.L224		#
 2151              	.L223:
 2152              	# main_seeed.c:501: 	    if (endrun) {
 2153 1440 E39E06F4 		bne	a3,zero,.L227	#, inrun,,
 2154 1444 6FF05FF9 		j	.L228		#
 2156              		.align	2
 2157              		.globl	drawString
 2159              	drawString:
 2160 1448 130101FD 		addi	sp,sp,-48	#,,
 2161 144c 232E3101 		sw	s3,28(sp)	#,
 2162              	# main_seeed.c:519: 	x += FONT_SPACE * size;
 2163 1450 93096000 		li	s3,6		# tmp84,
 2164 1454 B3893603 		mul	s3,a3,s3	# tmp85, size, tmp84
 2165              	# main_seeed.c:515: {
 2166 1458 232A5101 		sw	s5,20(sp)	#,
 2167              	# main_seeed.c:521: 	    y += FONT_Y * size;
 2168 145c 939A3600 		slli	s5,a3,3	#, tmp86, size
 2169 1460 939A0A01 		slli	s5,s5,16	#, _7, tmp86
 2170              	# main_seeed.c:515: {
 2171 1464 23248102 		sw	s0,40(sp)	#,
 2172 1468 23229102 		sw	s1,36(sp)	#,
 2173 146c 23202103 		sw	s2,32(sp)	#,
 2174 1470 232C4101 		sw	s4,24(sp)	#,
 2175 1474 23286101 		sw	s6,16(sp)	#,
 2176 1478 23267101 		sw	s7,12(sp)	#,
 2177              	# main_seeed.c:519: 	x += FONT_SPACE * size;
 2178 147c 93990901 		slli	s3,s3,16	#, _2, tmp85
 2179              	# main_seeed.c:515: {
 2180 1480 23261102 		sw	ra,44(sp)	#,
 2181              	# main_seeed.c:515: {
 2182 1484 13090500 		mv	s2,a0	# string, tmp94
 2183 1488 13840500 		mv	s0,a1	# x, tmp95
 2184 148c 93040600 		mv	s1,a2	# y, tmp96
 2185 1490 138A0600 		mv	s4,a3	# size, tmp97
 2186 1494 130B0700 		mv	s6,a4	# color, tmp98
 2187              	# main_seeed.c:519: 	x += FONT_SPACE * size;
 2188 1498 93D90901 		srli	s3,s3,16	#, _2, _2
 2189              	# main_seeed.c:521: 	    y += FONT_Y * size;
 2190 149c 93DA0A01 		srli	s5,s5,16	#, _7, _7
 2191              	# main_seeed.c:520: 	if (x >= _width - 1) {
 2192 14a0 B70B0000 		lui	s7,%hi(_width)	# tmp92,
 2193              	.L235:
 2194              	# main_seeed.c:516:     while (*string) {
 2195 14a4 03450900 		lbu	a0,0(s2)	# _8, MEM[(char *)string_9]
 2196 14a8 63180502 		bne	a0,zero,.L237	#, _8,,
 2197              	# main_seeed.c:525: }
 2198 14ac 8320C102 		lw	ra,44(sp)		#,
 2199 14b0 03248102 		lw	s0,40(sp)		#,
 2200 14b4 83244102 		lw	s1,36(sp)		#,
 2201 14b8 03290102 		lw	s2,32(sp)		#,
 2202 14bc 8329C101 		lw	s3,28(sp)		#,
 2203 14c0 032A8101 		lw	s4,24(sp)		#,
 2204 14c4 832A4101 		lw	s5,20(sp)		#,
 2205 14c8 032B0101 		lw	s6,16(sp)		#,
 2206 14cc 832BC100 		lw	s7,12(sp)		#,
 2207 14d0 13010103 		addi	sp,sp,48	#,,
 2208 14d4 67800000 		jr	ra		#
 2209              	.L237:
 2210              	# main_seeed.c:517: 	drawChar(*string, x, y, size, color);
 2211 14d8 93050400 		mv	a1,s0	#, x
 2212 14dc 13070B00 		mv	a4,s6	#, color
 2213 14e0 93060A00 		mv	a3,s4	#, size
 2214 14e4 13860400 		mv	a2,s1	#, y
 2215 14e8 97000000 		call	drawChar		#
 2215      E7800000 
 2216              	# main_seeed.c:520: 	if (x >= _width - 1) {
 2217 14f0 83D70B00 		lhu	a5,%lo(_width)(s7)	# _width, _width
 2218              	# main_seeed.c:519: 	x += FONT_SPACE * size;
 2219 14f4 33848900 		add	s0,s3,s0	# x, tmp87, _2
 2220 14f8 13140401 		slli	s0,s0,16	#, x, tmp87
 2221 14fc 13540401 		srli	s0,s0,16	#, x, x
 2222              	# main_seeed.c:520: 	if (x >= _width - 1) {
 2223 1500 9387F7FF 		addi	a5,a5,-1	#, tmp90, _width
 2224              	# main_seeed.c:518: 	*string++;
 2225 1504 13091900 		addi	s2,s2,1	#, string, string
 2226              	# main_seeed.c:520: 	if (x >= _width - 1) {
 2227 1508 E34EF4F8 		blt	s0,a5,.L235	#, x, tmp90,
 2228              	# main_seeed.c:521: 	    y += FONT_Y * size;
 2229 150c B3849A00 		add	s1,s5,s1	# y, tmp91, _7
 2230 1510 93940401 		slli	s1,s1,16	#, y, tmp91
 2231 1514 93D40401 		srli	s1,s1,16	#, y, y
 2232              	# main_seeed.c:522: 	    x = 0;
 2233 1518 13040000 		li	s0,0		# x,
 2234 151c 6FF09FF8 		j	.L235		#
 2236              		.align	2
 2237              		.globl	fillScreen
 2239              	fillScreen:
 2240              	# main_seeed.c:544:     fillRectangle(0, 0, _width, _height, color);
 2241 1520 B7070000 		lui	a5,%hi(_height)	# tmp75,
 2242 1524 83D60700 		lhu	a3,%lo(_height)(a5)	#, _height
 2243 1528 B7070000 		lui	a5,%hi(_width)	# tmp77,
 2244 152c 03D60700 		lhu	a2,%lo(_width)(a5)	#, _width
 2245              	# main_seeed.c:543: {
 2246 1530 13070500 		mv	a4,a0	# tmp79, color
 2247              	# main_seeed.c:544:     fillRectangle(0, 0, _width, _height, color);
 2248 1534 93050000 		li	a1,0		#,
 2249 1538 13050000 		li	a0,0		#,
 2250 153c 17030000 		tail	fillRectangle		#
 2250      67000300 
 2252              		.align	2
 2253              		.globl	drawCircle
 2255              	drawCircle:
 2256 1544 130101FC 		addi	sp,sp,-64	#,,
 2257 1548 232C8102 		sw	s0,56(sp)	#,
 2258              	# main_seeed.c:363:     int x = -r, y = 0, err = 2 - 2 * r, e2;
 2259 154c 13041000 		li	s0,1		# tmp93,
 2260 1550 3304C440 		sub	s0,s0,a2	# tmp94, tmp93, r
 2261              	# main_seeed.c:362: {
 2262 1554 232A9102 		sw	s1,52(sp)	#,
 2263 1558 23263103 		sw	s3,44(sp)	#,
 2264 155c 23244103 		sw	s4,40(sp)	#,
 2265 1560 23225103 		sw	s5,36(sp)	#,
 2266 1564 232E7101 		sw	s7,28(sp)	#,
 2267 1568 232A9101 		sw	s9,20(sp)	#,
 2268 156c 232E1102 		sw	ra,60(sp)	#,
 2269 1570 23282103 		sw	s2,48(sp)	#,
 2270 1574 23206103 		sw	s6,32(sp)	#,
 2271 1578 232C8101 		sw	s8,24(sp)	#,
 2272              	# main_seeed.c:362: {
 2273 157c 93090500 		mv	s3,a0	# poX, tmp107
 2274 1580 138A0500 		mv	s4,a1	# poY, tmp108
 2275 1584 938A0600 		mv	s5,a3	# color, tmp110
 2276              	# main_seeed.c:363:     int x = -r, y = 0, err = 2 - 2 * r, e2;
 2277 1588 B304C040 		neg	s1,a2	# x, r
 2278              	# main_seeed.c:363:     int x = -r, y = 0, err = 2 - 2 * r, e2;
 2279 158c 13141400 		slli	s0,s0,1	#, e2, tmp94
 2280              	# main_seeed.c:363:     int x = -r, y = 0, err = 2 - 2 * r, e2;
 2281 1590 930B0000 		li	s7,0		# y,
 2282              	# main_seeed.c:378:     while (x <= 0);
 2283 1594 930C1000 		li	s9,1		# tmp105,
 2284              	.L241:
 2285              	# main_seeed.c:365: 	drawPixel(poX - x, poY + y, color);
 2286 1598 139B0401 		slli	s6,s1,16	#, _3, x
 2287 159c 135B0B01 		srli	s6,s6,16	#, _3, _3
 2288 15a0 13990B01 		slli	s2,s7,16	#, _5, y
 2289 15a4 13590901 		srli	s2,s2,16	#, _5, _5
 2290 15a8 338C6941 		sub	s8,s3,s6	# tmp95, poX, _3
 2291 15ac B3054901 		add	a1,s2,s4	# poY, tmp96, _5
 2292 15b0 131C0C01 		slli	s8,s8,16	#, _4, tmp95
 2293 15b4 135C0C01 		srli	s8,s8,16	#, _4, _4
 2294 15b8 93950501 		slli	a1,a1,16	#, _6, tmp96
 2295 15bc 93D50501 		srli	a1,a1,16	#, _6, _6
 2296 15c0 13860A00 		mv	a2,s5	#, color
 2297 15c4 13050C00 		mv	a0,s8	#, _4
 2298 15c8 2324B100 		sw	a1,8(sp)	# _6, %sfp
 2299 15cc 97000000 		call	drawPixel		#
 2299      E7800000 
 2300              	# main_seeed.c:366: 	drawPixel(poX + x, poY + y, color);
 2301 15d4 83258100 		lw	a1,8(sp)		# _6, %sfp
 2302 15d8 33053B01 		add	a0,s6,s3	# poX, tmp97, _3
 2303 15dc 13150501 		slli	a0,a0,16	#, _7, tmp97
 2304 15e0 13550501 		srli	a0,a0,16	#, _7, _7
 2305 15e4 13860A00 		mv	a2,s5	#, color
 2306 15e8 2326A100 		sw	a0,12(sp)	# _7, %sfp
 2307 15ec 97000000 		call	drawPixel		#
 2307      E7800000 
 2308              	# main_seeed.c:367: 	drawPixel(poX + x, poY - y, color);
 2309 15f4 0325C100 		lw	a0,12(sp)		# _7, %sfp
 2310 15f8 33092A41 		sub	s2,s4,s2	# tmp98, poY, _5
 2311 15fc 93150901 		slli	a1,s2,16	#, _8, tmp98
 2312 1600 93D50501 		srli	a1,a1,16	#, _8, _8
 2313 1604 13860A00 		mv	a2,s5	#, color
 2314 1608 2324B100 		sw	a1,8(sp)	# _8, %sfp
 2315 160c 97000000 		call	drawPixel		#
 2315      E7800000 
 2316              	# main_seeed.c:368: 	drawPixel(poX - x, poY - y, color);
 2317 1614 83258100 		lw	a1,8(sp)		# _8, %sfp
 2318 1618 13860A00 		mv	a2,s5	#, color
 2319 161c 13050C00 		mv	a0,s8	#, _4
 2320 1620 97000000 		call	drawPixel		#
 2320      E7800000 
 2321              	# main_seeed.c:370: 	if (e2 <= y) {
 2322 1628 63CC8B06 		blt	s7,s0,.L245	#, y, e2,
 2323              	# main_seeed.c:371: 	    err += ++y * 2 + 1;
 2324 162c 938B1B00 		addi	s7,s7,1	#, y, y
 2325              	# main_seeed.c:371: 	    err += ++y * 2 + 1;
 2326 1630 93971B00 		slli	a5,s7,1	#, tmp99, y
 2327              	# main_seeed.c:371: 	    err += ++y * 2 + 1;
 2328 1634 93871700 		addi	a5,a5,1	#, tmp100, tmp99
 2329              	# main_seeed.c:372: 	    if (-x == y && e2 <= x)
 2330 1638 33079040 		neg	a4,s1	# tmp101, x
 2331              	# main_seeed.c:371: 	    err += ++y * 2 + 1;
 2332 163c B3878700 		add	a5,a5,s0	# e2, err, tmp100
 2333              	# main_seeed.c:372: 	    if (-x == y && e2 <= x)
 2334 1640 63167701 		bne	a4,s7,.L242	#, tmp101, y,
 2335              	# main_seeed.c:372: 	    if (-x == y && e2 <= x)
 2336 1644 63C68400 		blt	s1,s0,.L243	#, x, e2,
 2337              	# main_seeed.c:373: 		e2 = 0;
 2338 1648 13040000 		li	s0,0		# e2,
 2339              	.L242:
 2340              	# main_seeed.c:375: 	if (e2 > x)
 2341 164c 63D68404 		bge	s1,s0,.L244	#, x, e2,
 2342              	.L243:
 2343              	# main_seeed.c:376: 	    err += ++x * 2 + 1;
 2344 1650 93841400 		addi	s1,s1,1	#, x, x
 2345              	# main_seeed.c:376: 	    err += ++x * 2 + 1;
 2346 1654 13971400 		slli	a4,s1,1	#, tmp102, x
 2347              	# main_seeed.c:376: 	    err += ++x * 2 + 1;
 2348 1658 13071700 		addi	a4,a4,1	#, tmp103, tmp102
 2349              	# main_seeed.c:376: 	    err += ++x * 2 + 1;
 2350 165c B387E700 		add	a5,a5,a4	# tmp103, err, err
 2351              	# main_seeed.c:378:     while (x <= 0);
 2352 1660 639C9403 		bne	s1,s9,.L244	#, x, tmp105,
 2353              	# main_seeed.c:379: }
 2354 1664 8320C103 		lw	ra,60(sp)		#,
 2355 1668 03248103 		lw	s0,56(sp)		#,
 2356 166c 83244103 		lw	s1,52(sp)		#,
 2357 1670 03290103 		lw	s2,48(sp)		#,
 2358 1674 8329C102 		lw	s3,44(sp)		#,
 2359 1678 032A8102 		lw	s4,40(sp)		#,
 2360 167c 832A4102 		lw	s5,36(sp)		#,
 2361 1680 032B0102 		lw	s6,32(sp)		#,
 2362 1684 832BC101 		lw	s7,28(sp)		#,
 2363 1688 032C8101 		lw	s8,24(sp)		#,
 2364 168c 832C4101 		lw	s9,20(sp)		#,
 2365 1690 13010104 		addi	sp,sp,64	#,,
 2366 1694 67800000 		jr	ra		#
 2367              	.L244:
 2368              	# main_seeed.c:362: {
 2369 1698 13840700 		mv	s0,a5	# e2, err
 2370 169c 6FF0DFEF 		j	.L241		#
 2371              	.L245:
 2372 16a0 93070400 		mv	a5,s0	# err, e2
 2373 16a4 6FF09FFA 		j	.L242		#
 2375              		.align	2
 2376              		.globl	drawBitMap
 2378              	drawBitMap:
 2379 16a8 130101FC 		addi	sp,sp,-64	#,,
 2380 16ac 232E7101 		sw	s7,28(sp)	#,
 2381              	# main_seeed.c:531:     uint16_t i, j, byteWidth = (width + 7) / 8;
 2382 16b0 938B7600 		addi	s7,a3,7	#, tmp100, width
 2383              	# main_seeed.c:530: {
 2384 16b4 232A9102 		sw	s1,52(sp)	#,
 2385 16b8 23263103 		sw	s3,44(sp)	#,
 2386 16bc 23225103 		sw	s5,36(sp)	#,
 2387 16c0 23206103 		sw	s6,32(sp)	#,
 2388 16c4 232C8101 		sw	s8,24(sp)	#,
 2389 16c8 232A9101 		sw	s9,20(sp)	#,
 2390 16cc 2328A101 		sw	s10,16(sp)	#,
 2391 16d0 2326B101 		sw	s11,12(sp)	#,
 2392 16d4 232E1102 		sw	ra,60(sp)	#,
 2393 16d8 232C8102 		sw	s0,56(sp)	#,
 2394 16dc 23282103 		sw	s2,48(sp)	#,
 2395 16e0 23244103 		sw	s4,40(sp)	#,
 2396              	# main_seeed.c:530: {
 2397 16e4 130C0500 		mv	s8,a0	# x, tmp124
 2398 16e8 938A0500 		mv	s5,a1	# y, tmp125
 2399 16ec 130B0600 		mv	s6,a2	# bitmap, tmp126
 2400 16f0 93890600 		mv	s3,a3	# width, tmp127
 2401 16f4 930C0700 		mv	s9,a4	# height, tmp128
 2402 16f8 138D0700 		mv	s10,a5	# color, tmp129
 2403              	# main_seeed.c:531:     uint16_t i, j, byteWidth = (width + 7) / 8;
 2404 16fc 93DB3B40 		srai	s7,s7,3	#, _3, tmp100
 2405              	# main_seeed.c:532:     for (j = 0; j < height; j++) {
 2406 1700 93040000 		li	s1,0		# j,
 2407              	# main_seeed.c:535: 		(128 >> (i & 7))) {
 2408 1704 930D0008 		li	s11,128		# tmp122,
 2409              	.L248:
 2410              	# main_seeed.c:532:     for (j = 0; j < height; j++) {
 2411 1708 63DC9407 		bge	s1,s9,.L247	#, j, height,
 2412              	# main_seeed.c:534: 	    if (pgm_read_byte(bitmap + j * byteWidth + i / 8) &
 2413 170c 33899B02 		mul	s2,s7,s1	# _37, _3, j
 2414              	# main_seeed.c:536: 		drawPixel(x + i, y + j, color);
 2415 1710 338A5401 		add	s4,s1,s5	# y, tmp119, j
 2416 1714 131A0A01 		slli	s4,s4,16	#, tmp120, tmp119
 2417              	# main_seeed.c:533: 	for (i = 0; i < width; i++) {
 2418 1718 13040000 		li	s0,0		# i,
 2419              	# main_seeed.c:536: 		drawPixel(x + i, y + j, color);
 2420 171c 135A0A01 		srli	s4,s4,16	#, tmp120, tmp120
 2421              	# main_seeed.c:534: 	    if (pgm_read_byte(bitmap + j * byteWidth + i / 8) &
 2422 1720 33092B01 		add	s2,s6,s2	# _37, tmp117, bitmap
 2423 1724 6F008004 		j	.L252		#
 2424              	.L250:
 2425              	# main_seeed.c:534: 	    if (pgm_read_byte(bitmap + j * byteWidth + i / 8) &
 2426 1728 93573400 		srli	a5,s0,3	#, tmp102, i
 2427              	# main_seeed.c:534: 	    if (pgm_read_byte(bitmap + j * byteWidth + i / 8) &
 2428 172c B307F900 		add	a5,s2,a5	# tmp102, tmp104, tmp117
 2429 1730 83C70700 		lbu	a5,0(a5)	# *_9, *_9
 2430              	# main_seeed.c:535: 		(128 >> (i & 7))) {
 2431 1734 13777400 		andi	a4,s0,7	#, tmp107, i
 2432              	# main_seeed.c:535: 		(128 >> (i & 7))) {
 2433 1738 33D7ED40 		sra	a4,s11,a4	# tmp107, tmp108, tmp122
 2434              	# main_seeed.c:534: 	    if (pgm_read_byte(bitmap + j * byteWidth + i / 8) &
 2435 173c B3F7E700 		and	a5,a5,a4	# tmp108, tmp110, *_9
 2436              	# main_seeed.c:534: 	    if (pgm_read_byte(bitmap + j * byteWidth + i / 8) &
 2437 1740 63800702 		beq	a5,zero,.L249	#, tmp110,,
 2438              	# main_seeed.c:536: 		drawPixel(x + i, y + j, color);
 2439 1744 33058401 		add	a0,s0,s8	# x, tmp113, i
 2440 1748 13150501 		slli	a0,a0,16	#,, tmp113
 2441 174c 13060D00 		mv	a2,s10	#, color
 2442 1750 93050A00 		mv	a1,s4	#, tmp120
 2443 1754 13550501 		srli	a0,a0,16	#,,
 2444 1758 97000000 		call	drawPixel		#
 2444      E7800000 
 2445              	.L249:
 2446              	# main_seeed.c:533: 	for (i = 0; i < width; i++) {
 2447 1760 13041400 		addi	s0,s0,1	#, tmp115, i
 2448 1764 13140401 		slli	s0,s0,16	#, i, tmp115
 2449 1768 13540401 		srli	s0,s0,16	#, i, i
 2450              	.L252:
 2451              	# main_seeed.c:533: 	for (i = 0; i < width; i++) {
 2452 176c E31E34FB 		bne	s0,s3,.L250	#, i, width,
 2453              	# main_seeed.c:532:     for (j = 0; j < height; j++) {
 2454 1770 93841400 		addi	s1,s1,1	#, tmp116, j
 2455 1774 93940401 		slli	s1,s1,16	#, j, tmp116
 2456 1778 93D40401 		srli	s1,s1,16	#, j, j
 2457 177c 6FF0DFF8 		j	.L248		#
 2458              	.L247:
 2459              	# main_seeed.c:540: }
 2460 1780 8320C103 		lw	ra,60(sp)		#,
 2461 1784 03248103 		lw	s0,56(sp)		#,
 2462 1788 83244103 		lw	s1,52(sp)		#,
 2463 178c 03290103 		lw	s2,48(sp)		#,
 2464 1790 8329C102 		lw	s3,44(sp)		#,
 2465 1794 032A8102 		lw	s4,40(sp)		#,
 2466 1798 832A4102 		lw	s5,36(sp)		#,
 2467 179c 032B0102 		lw	s6,32(sp)		#,
 2468 17a0 832BC101 		lw	s7,28(sp)		#,
 2469 17a4 032C8101 		lw	s8,24(sp)		#,
 2470 17a8 832C4101 		lw	s9,20(sp)		#,
 2471 17ac 032D0101 		lw	s10,16(sp)		#,
 2472 17b0 832DC100 		lw	s11,12(sp)		#,
 2473 17b4 13010104 		addi	sp,sp,64	#,,
 2474 17b8 67800000 		jr	ra		#
 2476              		.align	2
 2477              		.globl	drawLine
 2479              	drawLine:
 2480              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2481 17bc B7070030 		li	a5,805306368		# tmp95,
 2482 17c0 13081002 		li	a6,33		# tmp96,
 2483 17c4 23A60701 		sw	a6,12(a5)	# tmp96, MEM[(volatile uint32_t *)805306380B]
 2484              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2485 17c8 1308F005 		li	a6,95		# tmp99,
 2486 17cc 93070500 		mv	a5,a0	# x0, x0
 2487 17d0 6374A800 		bleu	a0,a6,.L258	#, x0, tmp99,
 2488 17d4 9307F005 		li	a5,95		# x0,
 2489              	.L258:
 2490 17d8 93970701 		slli	a5,a5,16	#, _27, x0
 2491 17dc 93D70701 		srli	a5,a5,16	#, _27, _27
 2492              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2493 17e0 37050030 		li	a0,805306368		# tmp101,
 2494 17e4 2326F500 		sw	a5,12(a0)	# _27, MEM[(volatile uint32_t *)805306380B]
 2495              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2496 17e8 1305F003 		li	a0,63		# tmp104,
 2497 17ec 93870500 		mv	a5,a1	# y0, y0
 2498 17f0 6374B500 		bleu	a1,a0,.L259	#, y0, tmp104,
 2499 17f4 9307F003 		li	a5,63		# y0,
 2500              	.L259:
 2501 17f8 93970701 		slli	a5,a5,16	#, _26, y0
 2502 17fc 93D70701 		srli	a5,a5,16	#, _26, _26
 2503              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2504 1800 B7050030 		li	a1,805306368		# tmp106,
 2505 1804 23A6F500 		sw	a5,12(a1)	# _26, MEM[(volatile uint32_t *)805306380B]
 2506              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2507 1808 9305F005 		li	a1,95		# tmp109,
 2508 180c 93070600 		mv	a5,a2	# x1, x1
 2509 1810 63F4C500 		bleu	a2,a1,.L260	#, x1, tmp109,
 2510 1814 9307F005 		li	a5,95		# x1,
 2511              	.L260:
 2512 1818 93970701 		slli	a5,a5,16	#, _25, x1
 2513 181c 93D70701 		srli	a5,a5,16	#, _25, _25
 2514              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2515 1820 37060030 		li	a2,805306368		# tmp111,
 2516 1824 2326F600 		sw	a5,12(a2)	# _25, MEM[(volatile uint32_t *)805306380B]
 2517              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2518 1828 1306F003 		li	a2,63		# tmp114,
 2519 182c 93870600 		mv	a5,a3	# y1, y1
 2520 1830 6374D600 		bleu	a3,a2,.L261	#, y1, tmp114,
 2521 1834 9307F003 		li	a5,63		# y1,
 2522              	.L261:
 2523 1838 93960701 		slli	a3,a5,16	#, _24, y1
 2524 183c 93D60601 		srli	a3,a3,16	#, _24, _24
 2525              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2526 1840 B7070030 		li	a5,805306368		# tmp116,
 2527 1844 23A6D700 		sw	a3,12(a5)	# _24, MEM[(volatile uint32_t *)805306380B]
 2528              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2529 1848 9356B700 		srli	a3,a4,11	#, _23, color
 2530              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2531 184c 23A6D700 		sw	a3,12(a5)	# _23, MEM[(volatile uint32_t *)805306380B]
 2532              	# main_seeed.c:657:     _sendCmd((uint8_t) ((color >> 5) & 0x3F));	//G
 2533 1850 93565700 		srli	a3,a4,5	#, tmp120, color
 2534              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2535 1854 93F6F603 		andi	a3,a3,63	#, _22, tmp120
 2536              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2537 1858 23A6D700 		sw	a3,12(a5)	# _22, MEM[(volatile uint32_t *)805306380B]
 2538              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2539 185c 1377F701 		andi	a4,a4,31	#, _21, color
 2540              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2541 1860 23A6E700 		sw	a4,12(a5)	# _21, MEM[(volatile uint32_t *)805306380B]
 2542              	# main_seeed.c:659: }
 2543 1864 67800000 		ret	
 2545              		.align	2
 2546              		.globl	drawFrame
 2548              	drawFrame:
 2549              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2550 1868 37080030 		li	a6,805306368		# tmp105,
 2551 186c 93086002 		li	a7,38		# tmp106,
 2552 1870 23261801 		sw	a7,12(a6)	# tmp106, MEM[(volatile uint32_t *)805306380B]
 2553 1874 93081000 		li	a7,1		# tmp109,
 2554 1878 23261801 		sw	a7,12(a6)	# tmp109, MEM[(volatile uint32_t *)805306380B]
 2555 187c 93082002 		li	a7,34		# tmp112,
 2556 1880 23261801 		sw	a7,12(a6)	# tmp112, MEM[(volatile uint32_t *)805306380B]
 2557              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2558 1884 9308F005 		li	a7,95		# tmp115,
 2559 1888 13080500 		mv	a6,a0	# x0, x0
 2560 188c 63F4A800 		bleu	a0,a7,.L263	#, x0, tmp115,
 2561 1890 1308F005 		li	a6,95		# x0,
 2562              	.L263:
 2563 1894 13180801 		slli	a6,a6,16	#, _37, x0
 2564 1898 13580801 		srli	a6,a6,16	#, _37, _37
 2565              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2566 189c 37050030 		li	a0,805306368		# tmp117,
 2567 18a0 23260501 		sw	a6,12(a0)	# _37, MEM[(volatile uint32_t *)805306380B]
 2568              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2569 18a4 1308F003 		li	a6,63		# tmp120,
 2570 18a8 13850500 		mv	a0,a1	# y0, y0
 2571 18ac 6374B800 		bleu	a1,a6,.L264	#, y0, tmp120,
 2572 18b0 1305F003 		li	a0,63		# y0,
 2573              	.L264:
 2574 18b4 13150501 		slli	a0,a0,16	#, _36, y0
 2575 18b8 13550501 		srli	a0,a0,16	#, _36, _36
 2576              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2577 18bc B7050030 		li	a1,805306368		# tmp122,
 2578 18c0 23A6A500 		sw	a0,12(a1)	# _36, MEM[(volatile uint32_t *)805306380B]
 2579              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2580 18c4 1305F005 		li	a0,95		# tmp125,
 2581 18c8 93050600 		mv	a1,a2	# x1, x1
 2582 18cc 6374C500 		bleu	a2,a0,.L265	#, x1, tmp125,
 2583 18d0 9305F005 		li	a1,95		# x1,
 2584              	.L265:
 2585 18d4 93950501 		slli	a1,a1,16	#, _35, x1
 2586 18d8 93D50501 		srli	a1,a1,16	#, _35, _35
 2587              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2588 18dc 37060030 		li	a2,805306368		# tmp127,
 2589 18e0 2326B600 		sw	a1,12(a2)	# _35, MEM[(volatile uint32_t *)805306380B]
 2590              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2591 18e4 9305F003 		li	a1,63		# tmp130,
 2592 18e8 13860600 		mv	a2,a3	# y1, y1
 2593 18ec 63F4D500 		bleu	a3,a1,.L266	#, y1, tmp130,
 2594 18f0 1306F003 		li	a2,63		# y1,
 2595              	.L266:
 2596 18f4 13160601 		slli	a2,a2,16	#, _34, y1
 2597              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2598 18f8 B7060030 		li	a3,805306368		# tmp132,
 2599              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2600 18fc 13560601 		srli	a2,a2,16	#, _34, _34
 2601              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2602 1900 23A6C600 		sw	a2,12(a3)	# _34, MEM[(volatile uint32_t *)805306380B]
 2603              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2604 1904 1356B700 		srli	a2,a4,11	#, _33, outColor
 2605              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2606 1908 23A6C600 		sw	a2,12(a3)	# _33, MEM[(volatile uint32_t *)805306380B]
 2607              	# main_seeed.c:685:     _sendCmd((uint8_t) ((outColor >> 5) & 0x3F));	//G
 2608 190c 13565700 		srli	a2,a4,5	#, tmp136, outColor
 2609              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2610 1910 1376F603 		andi	a2,a2,63	#, _32, tmp136
 2611              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2612 1914 23A6C600 		sw	a2,12(a3)	# _32, MEM[(volatile uint32_t *)805306380B]
 2613              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2614 1918 1377F701 		andi	a4,a4,31	#, _31, outColor
 2615              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2616 191c 23A6E600 		sw	a4,12(a3)	# _31, MEM[(volatile uint32_t *)805306380B]
 2617              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2618 1920 13D7B700 		srli	a4,a5,11	#, _30, fillColor
 2619              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2620 1924 23A6E600 		sw	a4,12(a3)	# _30, MEM[(volatile uint32_t *)805306380B]
 2621              	# main_seeed.c:688:     _sendCmd((uint8_t) ((fillColor >> 5) & 0x3F));	//G
 2622 1928 13D75700 		srli	a4,a5,5	#, tmp148, fillColor
 2623              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2624 192c 1377F703 		andi	a4,a4,63	#, _29, tmp148
 2625              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2626 1930 23A6E600 		sw	a4,12(a3)	# _29, MEM[(volatile uint32_t *)805306380B]
 2627              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2628 1934 93F7F701 		andi	a5,a5,31	#, _28, fillColor
 2629              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2630 1938 23A6F600 		sw	a5,12(a3)	# _28, MEM[(volatile uint32_t *)805306380B]
 2631              	# main_seeed.c:690: }
 2632 193c 67800000 		ret	
 2634              		.align	2
 2635              		.globl	copyWindow
 2637              	copyWindow:
 2638              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2639 1940 37080030 		li	a6,805306368		# tmp91,
 2640 1944 93083002 		li	a7,35		# tmp92,
 2641 1948 23261801 		sw	a7,12(a6)	# tmp92, MEM[(volatile uint32_t *)805306380B]
 2642              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2643 194c 1375F50F 		andi	a0,a0,0xff	# _19, tmp105
 2644              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2645 1950 2326A800 		sw	a0,12(a6)	# _19, MEM[(volatile uint32_t *)805306380B]
 2646              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2647 1954 93F5F50F 		andi	a1,a1,0xff	# _18, tmp106
 2648              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2649 1958 2326B800 		sw	a1,12(a6)	# _18, MEM[(volatile uint32_t *)805306380B]
 2650              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2651 195c 1376F60F 		andi	a2,a2,0xff	# _17, tmp107
 2652              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2653 1960 2326C800 		sw	a2,12(a6)	# _17, MEM[(volatile uint32_t *)805306380B]
 2654              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2655 1964 93F6F60F 		andi	a3,a3,0xff	# _16, tmp108
 2656              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2657 1968 2326D800 		sw	a3,12(a6)	# _16, MEM[(volatile uint32_t *)805306380B]
 2658              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2659 196c 1377F70F 		andi	a4,a4,0xff	# _15, tmp109
 2660              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2661 1970 2326E800 		sw	a4,12(a6)	# _15, MEM[(volatile uint32_t *)805306380B]
 2662              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2663 1974 93F7F70F 		andi	a5,a5,0xff	# _14, tmp110
 2664              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2665 1978 2326F800 		sw	a5,12(a6)	# _14, MEM[(volatile uint32_t *)805306380B]
 2666              	# main_seeed.c:703: }
 2667 197c 67800000 		ret	
 2669              		.align	2
 2670              		.globl	dimWindow
 2672              	dimWindow:
 2673              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2674 1980 B7070030 		li	a5,805306368		# tmp85,
 2675 1984 13074002 		li	a4,36		# tmp86,
 2676 1988 23A6E700 		sw	a4,12(a5)	# tmp86, MEM[(volatile uint32_t *)805306380B]
 2677              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2678 198c 1375F50F 		andi	a0,a0,0xff	# _13, tmp95
 2679              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2680 1990 23A6A700 		sw	a0,12(a5)	# _13, MEM[(volatile uint32_t *)805306380B]
 2681              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2682 1994 93F5F50F 		andi	a1,a1,0xff	# _12, tmp96
 2683              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2684 1998 23A6B700 		sw	a1,12(a5)	# _12, MEM[(volatile uint32_t *)805306380B]
 2685              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2686 199c 1376F60F 		andi	a2,a2,0xff	# _11, tmp97
 2687              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2688 19a0 23A6C700 		sw	a2,12(a5)	# _11, MEM[(volatile uint32_t *)805306380B]
 2689              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2690 19a4 93F6F60F 		andi	a3,a3,0xff	# _10, tmp98
 2691              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2692 19a8 23A6D700 		sw	a3,12(a5)	# _10, MEM[(volatile uint32_t *)805306380B]
 2693              	# main_seeed.c:712: }
 2694 19ac 67800000 		ret	
 2696              		.align	2
 2697              		.globl	clearWindow
 2699              	clearWindow:
 2700              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2701 19b0 B7070030 		li	a5,805306368		# tmp85,
 2702 19b4 13075002 		li	a4,37		# tmp86,
 2703 19b8 23A6E700 		sw	a4,12(a5)	# tmp86, MEM[(volatile uint32_t *)805306380B]
 2704              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2705 19bc 1375F50F 		andi	a0,a0,0xff	# _13, tmp95
 2706              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2707 19c0 23A6A700 		sw	a0,12(a5)	# _13, MEM[(volatile uint32_t *)805306380B]
 2708              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2709 19c4 93F5F50F 		andi	a1,a1,0xff	# _12, tmp96
 2710              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2711 19c8 23A6B700 		sw	a1,12(a5)	# _12, MEM[(volatile uint32_t *)805306380B]
 2712              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2713 19cc 1376F60F 		andi	a2,a2,0xff	# _11, tmp97
 2714              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2715 19d0 23A6C700 		sw	a2,12(a5)	# _11, MEM[(volatile uint32_t *)805306380B]
 2716              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2717 19d4 93F6F60F 		andi	a3,a3,0xff	# _10, tmp98
 2718              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2719 19d8 23A6D700 		sw	a3,12(a5)	# _10, MEM[(volatile uint32_t *)805306380B]
 2720              	# main_seeed.c:721: }
 2721 19dc 67800000 		ret	
 2723              		.align	2
 2724              		.globl	setScolling
 2726              	setScolling:
 2727 19e0 93072000 		li	a5,2		# tmp83,
 2728 19e4 63E8A704 		bgtu	a0,a5,.L272	#, direction, tmp83,
 2729 19e8 B7070000 		lui	a5,%hi(CSWTCH.183)	# tmp84,
 2730 19ec 93870700 		addi	a5,a5,%lo(CSWTCH.183)	# tmp86, tmp84,
 2731 19f0 B307F500 		add	a5,a0,a5	# tmp86, tmp85, direction
 2732 19f4 03C80700 		lbu	a6,0(a5)	# scolling_horizontal, CSWTCH.183[direction_5(D)]
 2733 19f8 B7070000 		lui	a5,%hi(CSWTCH.184)	# tmp87,
 2734 19fc 93870700 		addi	a5,a5,%lo(CSWTCH.184)	# tmp89, tmp87,
 2735 1a00 3305F500 		add	a0,a0,a5	# tmp89, tmp88, direction
 2736 1a04 03470500 		lbu	a4,0(a0)	# scolling_vertical, CSWTCH.184[direction_5(D)]
 2737              	.L271:
 2738              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2739 1a08 B7070030 		li	a5,805306368		# tmp91,
 2740 1a0c 13057002 		li	a0,39		# tmp92,
 2741 1a10 23A6A700 		sw	a0,12(a5)	# tmp92, MEM[(volatile uint32_t *)805306380B]
 2742 1a14 23A60701 		sw	a6,12(a5)	# scolling_horizontal, MEM[(volatile uint32_t *)805306380B]
 2743 1a18 23A6B700 		sw	a1,12(a5)	# rowAddr, MEM[(volatile uint32_t *)805306380B]
 2744 1a1c 23A6C700 		sw	a2,12(a5)	# rowNum, MEM[(volatile uint32_t *)805306380B]
 2745 1a20 23A6E700 		sw	a4,12(a5)	# scolling_vertical, MEM[(volatile uint32_t *)805306380B]
 2746 1a24 23A6D700 		sw	a3,12(a5)	# timeInterval, MEM[(volatile uint32_t *)805306380B]
 2747 1a28 1307F002 		li	a4,47		# tmp105,
 2748 1a2c 23A6E700 		sw	a4,12(a5)	# tmp105, MEM[(volatile uint32_t *)805306380B]
 2749              	# main_seeed.c:752: }
 2750 1a30 67800000 		ret	
 2751              	.L272:
 2752              	# main_seeed.c:726: {
 2753 1a34 13070000 		li	a4,0		# scolling_vertical,
 2754 1a38 13080000 		li	a6,0		# scolling_horizontal,
 2755 1a3c 6FF0DFFC 		j	.L271		#
 2757              		.align	2
 2758              		.globl	enableScolling
 2760              	enableScolling:
 2761              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2762 1a40 B7070030 		li	a5,805306368		# tmp74,
 2763 1a44 1307F002 		li	a4,47		# tmp75,
 2764              	# main_seeed.c:756:     if (enable)
 2765 1a48 63140500 		bne	a0,zero,.L276	#, tmp79,,
 2766              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2767 1a4c 1307E002 		li	a4,46		# tmp78,
 2768              	.L276:
 2769 1a50 23A6E700 		sw	a4,12(a5)	# tmp78,
 2770              	# main_seeed.c:760: }
 2771 1a54 67800000 		ret	
 2773              		.align	2
 2774              		.globl	setDisplayMode
 2776              	setDisplayMode:
 2777 1a58 1375F50F 		andi	a0,a0,0xff	# _3, tmp76
 2778              	# main_seeed.c:552:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 2779 1a5c B7070030 		li	a5,805306368		# tmp75,
 2780 1a60 23A6A700 		sw	a0,12(a5)	# _3, MEM[(volatile uint32_t *)805306380B]
 2781              	# main_seeed.c:765: }
 2782 1a64 67800000 		ret	
 2784              		.align	2
 2785              		.globl	setDisplayPower
 2787              	setDisplayPower:
 2788 1a68 1375F50F 		andi	a0,a0,0xff	# _4, tmp76
 2789 1a6c B7070030 		li	a5,805306368		# tmp75,
 2790 1a70 23A6A700 		sw	a0,12(a5)	# _4, MEM[(volatile uint32_t *)805306380B]
 2791 1a74 67800000 		ret	
 2793              		.align	2
 2794              		.globl	setup
 2796              	setup:
 2797 1a78 130101FF 		addi	sp,sp,-16	#,,
 2798 1a7c 23261100 		sw	ra,12(sp)	#,
 2799              	# main_seeed.c:780:     init();
 2800 1a80 97000000 		call	init		#
 2800      E7800000 
 2801              	# main_seeed.c:782: }
 2802 1a88 8320C100 		lw	ra,12(sp)		#,
 2803              	# main_seeed.c:781:     fillScreen(COLOR_BLACK);
 2804 1a8c 13050000 		li	a0,0		#,
 2805              	# main_seeed.c:782: }
 2806 1a90 13010101 		addi	sp,sp,16	#,,
 2807              	# main_seeed.c:781:     fillScreen(COLOR_BLACK);
 2808 1a94 17030000 		tail	fillScreen		#
 2808      67000300 
 2810              		.section	.rodata.str1.4
 2811 0011 000000   		.align	2
 2812              	.LC1:
 2813 0014 72756E2E 		.string	"run..."
 2813      2E2E00
 2814 001b 00       		.align	2
 2815              	.LC2:
 2816 001c 53656565 		.string	"Seeed"
 2816      6400
 2817              		.section	.text.startup,"ax",@progbits
 2818              		.align	2
 2819              		.globl	main
 2821              	main:
 2822 0000 130101FA 		addi	sp,sp,-96	#,,
 2823              	# main_seeed.c:797:             drawBitMap(0, 0, SeeedLogo, 96, 64, COLOR_YELLOW);
 2824 0004 B7070000 		lui	a5,%hi(.LANCHOR1+768)	# tmp127,
 2825              	# main_seeed.c:785: {
 2826 0008 232C8104 		sw	s0,88(sp)	#,
 2827 000c 23282105 		sw	s2,80(sp)	#,
 2828 0010 23244105 		sw	s4,72(sp)	#,
 2829 0014 23206105 		sw	s6,64(sp)	#,
 2830              	# main_seeed.c:789:         delay(450000);
 2831 0018 37E40600 		li	s0,450560		# tmp220,
 2832              	# main_seeed.c:794:             delay(45000000);
 2833 001c 37A9AE02 		li	s2,44998656		# tmp221,
 2834              	# main_seeed.c:797:             drawBitMap(0, 0, SeeedLogo, 96, 64, COLOR_YELLOW);
 2835 0020 93870730 		addi	a5,a5,%lo(.LANCHOR1+768)	# tmp129, tmp127,
 2836 0024 370A0100 		li	s4,65536		# tmp130,
 2837              	# main_seeed.c:812:             drawCircle(48, 32, i, COLOR_PURPLE);
 2838 0028 37AB0000 		li	s6,40960		# tmp136,
 2839              	# main_seeed.c:785: {
 2840 002c 232A9104 		sw	s1,84(sp)	#,
 2841 0030 23263105 		sw	s3,76(sp)	#,
 2842 0034 23225105 		sw	s5,68(sp)	#,
 2843 0038 232E1104 		sw	ra,92(sp)	#,
 2844 003c 232E7103 		sw	s7,60(sp)	#,
 2845 0040 232C8103 		sw	s8,56(sp)	#,
 2846 0044 232A9103 		sw	s9,52(sp)	#,
 2847 0048 2328A103 		sw	s10,48(sp)	#,
 2848 004c 2326B103 		sw	s11,44(sp)	#,
 2849              	# main_seeed.c:789:         delay(450000);
 2850 0050 130404DD 		addi	s0,s0,-560	#, tmp220, tmp220
 2851 0054 93040000 		li	s1,0		#,
 2852              	# main_seeed.c:794:             delay(45000000);
 2853 0058 13090954 		addi	s2,s2,1344	#, tmp221, tmp221
 2854 005c 93090000 		li	s3,0		#,
 2855              	# main_seeed.c:797:             drawBitMap(0, 0, SeeedLogo, 96, 64, COLOR_YELLOW);
 2856 0060 2326F100 		sw	a5,12(sp)	# tmp129, %sfp
 2857 0064 930A0AFE 		addi	s5,s4,-32	#, tmp222, tmp130
 2858              	# main_seeed.c:812:             drawCircle(48, 32, i, COLOR_PURPLE);
 2859 0068 130BEB11 		addi	s6,s6,286	#, tmp215, tmp136
 2860              	.L291:
 2861              	# main_seeed.c:787:         print_str_ln("run...");
 2862 006c B7070000 		lui	a5,%hi(.LC1)	# tmp232,
 2863 0070 13850700 		addi	a0,a5,%lo(.LC1)	#, tmp232,
 2864 0074 97000000 		call	print_str_ln		#
 2864      E7800000 
 2865              	# main_seeed.c:788:         setup();
 2866 007c 97000000 		call	setup		#
 2866      E7800000 
 2867              	# main_seeed.c:789:         delay(450000);
 2868 0084 13050400 		mv	a0,s0	#, tmp220
 2869 0088 93850400 		mv	a1,s1	#,
 2870 008c 97000000 		call	wait_cycles		#
 2870      E7800000 
 2871              	# main_seeed.c:790:         drawString("Seeed", 15, 25, 2, COLOR_GREEN);
 2872 0094 B7070000 		lui	a5,%hi(.LC2)	# tmp233,
 2873 0098 13850700 		addi	a0,a5,%lo(.LC2)	#, tmp233,
 2874 009c 1307007E 		li	a4,2016		#,
 2875 00a0 93062000 		li	a3,2		#,
 2876 00a4 13069001 		li	a2,25		#,
 2877 00a8 9305F000 		li	a1,15		#,
 2878 00ac 97000000 		call	drawString		#
 2878      E7800000 
 2879              	# main_seeed.c:791:         delay(450000);
 2880 00b4 13050400 		mv	a0,s0	#, tmp220
 2881 00b8 93850400 		mv	a1,s1	#,
 2882 00bc 97000000 		call	wait_cycles		#
 2882      E7800000 
 2883              	# main_seeed.c:793:             setScolling(Horizontal, 0, 64, 1);
 2884 00c4 93061000 		li	a3,1		#,
 2885 00c8 13060004 		li	a2,64		#,
 2886 00cc 93050000 		li	a1,0		#,
 2887 00d0 13050000 		li	a0,0		#,
 2888 00d4 97000000 		call	setScolling		#
 2888      E7800000 
 2889              	# main_seeed.c:794:             delay(45000000);
 2890 00dc 13050900 		mv	a0,s2	#, tmp221
 2891 00e0 93850900 		mv	a1,s3	#,
 2892 00e4 97000000 		call	wait_cycles		#
 2892      E7800000 
 2893              	# main_seeed.c:795:             delay(45000000);
 2894 00ec 13050900 		mv	a0,s2	#, tmp221
 2895 00f0 93850900 		mv	a1,s3	#,
 2896 00f4 97000000 		call	wait_cycles		#
 2896      E7800000 
 2897              	# main_seeed.c:796:         setup();
 2898 00fc 97000000 		call	setup		#
 2898      E7800000 
 2899              	# main_seeed.c:797:             drawBitMap(0, 0, SeeedLogo, 96, 64, COLOR_YELLOW);
 2900 0104 0326C100 		lw	a2,12(sp)		#, %sfp
 2901 0108 93870A00 		mv	a5,s5	#, tmp222
 2902 010c 13070004 		li	a4,64		#,
 2903 0110 93060006 		li	a3,96		#,
 2904 0114 93050000 		li	a1,0		#,
 2905 0118 13050000 		li	a0,0		#,
 2906 011c 97000000 		call	drawBitMap		#
 2906      E7800000 
 2907              	# main_seeed.c:798:             setScolling(Vertical, 0, 64, 0);
 2908 0124 93060000 		li	a3,0		#,
 2909 0128 13060004 		li	a2,64		#,
 2910 012c 93050000 		li	a1,0		#,
 2911 0130 13051000 		li	a0,1		#,
 2912 0134 97000000 		call	setScolling		#
 2912      E7800000 
 2913              	# main_seeed.c:799:             delay(45000000);
 2914 013c 13050900 		mv	a0,s2	#, tmp221
 2915 0140 93850900 		mv	a1,s3	#,
 2916 0144 97000000 		call	wait_cycles		#
 2916      E7800000 
 2917              	# main_seeed.c:800:             delay(45000000);
 2918 014c 13050900 		mv	a0,s2	#, tmp221
 2919 0150 93850900 		mv	a1,s3	#,
 2920 0154 97000000 		call	wait_cycles		#
 2920      E7800000 
 2921              	# main_seeed.c:803:         for (int i = 30; i > 0; i--) {
 2922 015c 930BE001 		li	s7,30		# i,
 2923              	# main_seeed.c:801:         setup();
 2924 0160 97000000 		call	setup		#
 2924      E7800000 
 2925              	.L282:
 2926              	# main_seeed.c:804:             drawCircle(48, 32, i, COLOR_CYAN);
 2927 0168 13960B01 		slli	a2,s7,16	#,, i
 2928 016c 9306F07F 		li	a3,2047		#,
 2929 0170 13560601 		srli	a2,a2,16	#,,
 2930 0174 93050002 		li	a1,32		#,
 2931 0178 13050003 		li	a0,48		#,
 2932 017c 97000000 		call	drawCircle		#
 2932      E7800000 
 2933              	# main_seeed.c:805:             delay(450000);
 2934 0184 13050400 		mv	a0,s0	#, tmp220
 2935 0188 93850400 		mv	a1,s1	#,
 2936              	# main_seeed.c:803:         for (int i = 30; i > 0; i--) {
 2937 018c 938BFBFF 		addi	s7,s7,-1	#, i, i
 2938              	# main_seeed.c:805:             delay(450000);
 2939 0190 97000000 		call	wait_cycles		#
 2939      E7800000 
 2940              	# main_seeed.c:803:         for (int i = 30; i > 0; i--) {
 2941 0198 E3980BFC 		bne	s7,zero,.L282	#, i,,
 2942              	# main_seeed.c:807:         for (int i = 1; i <= 30; i++) {
 2943 019c 930B1000 		li	s7,1		# i,
 2944              	# main_seeed.c:808:             drawCircle(48, 32, i, COLOR_RED);
 2945 01a0 930C0A80 		addi	s9,s4,-2048	#, tmp217, tmp130
 2946              	# main_seeed.c:807:         for (int i = 1; i <= 30; i++) {
 2947 01a4 130CF001 		li	s8,31		# tmp134,
 2948              	.L283:
 2949              	# main_seeed.c:808:             drawCircle(48, 32, i, COLOR_RED);
 2950 01a8 13960B01 		slli	a2,s7,16	#,, i
 2951 01ac 93860C00 		mv	a3,s9	#, tmp217
 2952 01b0 13560601 		srli	a2,a2,16	#,,
 2953 01b4 93050002 		li	a1,32		#,
 2954 01b8 13050003 		li	a0,48		#,
 2955 01bc 97000000 		call	drawCircle		#
 2955      E7800000 
 2956              	# main_seeed.c:809:             delay(450000);
 2957 01c4 13050400 		mv	a0,s0	#, tmp220
 2958 01c8 93850400 		mv	a1,s1	#,
 2959              	# main_seeed.c:807:         for (int i = 1; i <= 30; i++) {
 2960 01cc 938B1B00 		addi	s7,s7,1	#, i, i
 2961              	# main_seeed.c:809:             delay(450000);
 2962 01d0 97000000 		call	wait_cycles		#
 2962      E7800000 
 2963              	# main_seeed.c:807:         for (int i = 1; i <= 30; i++) {
 2964 01d8 E3988BFD 		bne	s7,s8,.L283	#, i, tmp134,
 2965              	# main_seeed.c:811:         for (int i = 30; i > 0; i--) {
 2966 01dc 930BE001 		li	s7,30		# i,
 2967              	.L284:
 2968              	# main_seeed.c:812:             drawCircle(48, 32, i, COLOR_PURPLE);
 2969 01e0 13960B01 		slli	a2,s7,16	#,, i
 2970 01e4 93060B00 		mv	a3,s6	#, tmp215
 2971 01e8 13560601 		srli	a2,a2,16	#,,
 2972 01ec 93050002 		li	a1,32		#,
 2973 01f0 13050003 		li	a0,48		#,
 2974 01f4 97000000 		call	drawCircle		#
 2974      E7800000 
 2975              	# main_seeed.c:813:             delay(450000);
 2976 01fc 13050400 		mv	a0,s0	#, tmp220
 2977 0200 93850400 		mv	a1,s1	#,
 2978              	# main_seeed.c:811:         for (int i = 30; i > 0; i--) {
 2979 0204 938BFBFF 		addi	s7,s7,-1	#, i, i
 2980              	# main_seeed.c:813:             delay(450000);
 2981 0208 97000000 		call	wait_cycles		#
 2981      E7800000 
 2982              	# main_seeed.c:811:         for (int i = 30; i > 0; i--) {
 2983 0210 E3980BFC 		bne	s7,zero,.L284	#, i,,
 2984              	# main_seeed.c:815:         for (int i = 1; i <= 30; i++) {
 2985 0214 930B1000 		li	s7,1		# i,
 2986              	# main_seeed.c:816:             drawCircle(48, 32, i, COLOR_GOLDEN);
 2987 0218 930C0AEA 		addi	s9,s4,-352	#, tmp213, tmp130
 2988              	# main_seeed.c:815:         for (int i = 1; i <= 30; i++) {
 2989 021c 130CF001 		li	s8,31		# tmp139,
 2990              	.L285:
 2991              	# main_seeed.c:816:             drawCircle(48, 32, i, COLOR_GOLDEN);
 2992 0220 13960B01 		slli	a2,s7,16	#,, i
 2993 0224 93860C00 		mv	a3,s9	#, tmp213
 2994 0228 13560601 		srli	a2,a2,16	#,,
 2995 022c 93050002 		li	a1,32		#,
 2996 0230 13050003 		li	a0,48		#,
 2997 0234 97000000 		call	drawCircle		#
 2997      E7800000 
 2998              	# main_seeed.c:817:             delay(450000);
 2999 023c 13050400 		mv	a0,s0	#, tmp220
 3000 0240 93850400 		mv	a1,s1	#,
 3001              	# main_seeed.c:815:         for (int i = 1; i <= 30; i++) {
 3002 0244 938B1B00 		addi	s7,s7,1	#, i, i
 3003              	# main_seeed.c:817:             delay(450000);
 3004 0248 97000000 		call	wait_cycles		#
 3004      E7800000 
 3005              	# main_seeed.c:815:         for (int i = 1; i <= 30; i++) {
 3006 0250 E3988BFD 		bne	s7,s8,.L285	#, i, tmp139,
 3007              	# main_seeed.c:819:         setup();
 3008 0254 97000000 		call	setup		#
 3008      E7800000 
 3009 025c 930C4006 		li	s9,100		# ivtmp_40,
 3010              	# main_seeed.c:827:             uint8_t y2 = rand() % 64;
 3011 0260 930D0004 		li	s11,64		# tmp145,
 3012              	# main_seeed.c:826:             uint8_t x2 = rand() % 96;
 3013 0264 130D0006 		li	s10,96		# tmp150,
 3014              	.L286:
 3015              	# main_seeed.c:822:             uint8_t x0 = rand() % 96;
 3016 0268 97000000 		call	rand		#
 3016      E7800000 
 3017 0270 232EA100 		sw	a0,28(sp)	# _5, %sfp
 3018              	# main_seeed.c:823:             uint8_t y0 = rand() % 64;
 3019 0274 97000000 		call	rand		#
 3019      E7800000 
 3020 027c 232CA100 		sw	a0,24(sp)	# _7, %sfp
 3021              	# main_seeed.c:824:             uint8_t x1 = rand() % 96;
 3022 0280 97000000 		call	rand		#
 3022      E7800000 
 3023 0288 232AA100 		sw	a0,20(sp)	# _9, %sfp
 3024              	# main_seeed.c:825:             uint8_t y1 = rand() % 64;
 3025 028c 97000000 		call	rand		#
 3025      E7800000 
 3026 0294 2328A100 		sw	a0,16(sp)	# _11, %sfp
 3027              	# main_seeed.c:826:             uint8_t x2 = rand() % 96;
 3028 0298 97000000 		call	rand		#
 3028      E7800000 
 3029 02a0 930B0500 		mv	s7,a0	# _13, tmp227
 3030              	# main_seeed.c:827:             uint8_t y2 = rand() % 64;
 3031 02a4 97000000 		call	rand		#
 3031      E7800000 
 3032 02ac 130C0500 		mv	s8,a0	# _15, tmp228
 3033              	# main_seeed.c:828:             drawTraingle(x0, y0, x1, y1, x2, y2, rand() % 65536);
 3034 02b0 97000000 		call	rand		#
 3034      E7800000 
 3035              	# main_seeed.c:822:             uint8_t x0 = rand() % 96;
 3036 02b8 8328C101 		lw	a7,28(sp)		# _5, %sfp
 3037              	# main_seeed.c:825:             uint8_t y1 = rand() % 64;
 3038 02bc 83260101 		lw	a3,16(sp)		# _11, %sfp
 3039              	# main_seeed.c:824:             uint8_t x1 = rand() % 96;
 3040 02c0 03264101 		lw	a2,20(sp)		# _9, %sfp
 3041              	# main_seeed.c:823:             uint8_t y0 = rand() % 64;
 3042 02c4 83258101 		lw	a1,24(sp)		# _7, %sfp
 3043              	# main_seeed.c:828:             drawTraingle(x0, y0, x1, y1, x2, y2, rand() % 65536);
 3044 02c8 33684503 		rem	a6,a0,s4	# tmp130, tmp142, tmp229
 3045              	# main_seeed.c:821:         for (int i = 0; i < 100; i++) {
 3046 02cc 938CFCFF 		addi	s9,s9,-1	#, ivtmp_40, ivtmp_40
 3047              	# main_seeed.c:822:             uint8_t x0 = rand() % 96;
 3048 02d0 33E5A803 		rem	a0,a7,s10	# tmp150, tmp171, _5
 3049              	# main_seeed.c:828:             drawTraingle(x0, y0, x1, y1, x2, y2, rand() % 65536);
 3050 02d4 13180801 		slli	a6,a6,16	#,, tmp142
 3051 02d8 13580801 		srli	a6,a6,16	#,,
 3052              	# main_seeed.c:827:             uint8_t y2 = rand() % 64;
 3053 02dc B367BC03 		rem	a5,s8,s11	# tmp145, tmp146, _15
 3054              	# main_seeed.c:828:             drawTraingle(x0, y0, x1, y1, x2, y2, rand() % 65536);
 3055 02e0 1375F50F 		andi	a0,a0,0xff	#, tmp171
 3056              	# main_seeed.c:826:             uint8_t x2 = rand() % 96;
 3057 02e4 33E7AB03 		rem	a4,s7,s10	# tmp150, tmp151, _13
 3058              	# main_seeed.c:828:             drawTraingle(x0, y0, x1, y1, x2, y2, rand() % 65536);
 3059 02e8 93F7F70F 		andi	a5,a5,0xff	#, tmp146
 3060              	# main_seeed.c:825:             uint8_t y1 = rand() % 64;
 3061 02ec B3E6B603 		rem	a3,a3,s11	# tmp145, tmp156, _11
 3062              	# main_seeed.c:828:             drawTraingle(x0, y0, x1, y1, x2, y2, rand() % 65536);
 3063 02f0 1377F70F 		andi	a4,a4,0xff	#, tmp151
 3064              	# main_seeed.c:824:             uint8_t x1 = rand() % 96;
 3065 02f4 3366A603 		rem	a2,a2,s10	# tmp150, tmp161, _9
 3066              	# main_seeed.c:828:             drawTraingle(x0, y0, x1, y1, x2, y2, rand() % 65536);
 3067 02f8 93F6F60F 		andi	a3,a3,0xff	#, tmp156
 3068              	# main_seeed.c:823:             uint8_t y0 = rand() % 64;
 3069 02fc B3E5B503 		rem	a1,a1,s11	# tmp145, tmp166, _7
 3070              	# main_seeed.c:828:             drawTraingle(x0, y0, x1, y1, x2, y2, rand() % 65536);
 3071 0300 1376F60F 		andi	a2,a2,0xff	#, tmp161
 3072 0304 93F5F50F 		andi	a1,a1,0xff	#, tmp166
 3073 0308 97000000 		call	drawTraingle		#
 3073      E7800000 
 3074              	# main_seeed.c:830:             delay(450000);
 3075 0310 13050400 		mv	a0,s0	#, tmp220
 3076 0314 93850400 		mv	a1,s1	#,
 3077 0318 97000000 		call	wait_cycles		#
 3077      E7800000 
 3078              	# main_seeed.c:821:         for (int i = 0; i < 100; i++) {
 3079 0320 E3940CF4 		bne	s9,zero,.L286	#, ivtmp_40,,
 3080              	# main_seeed.c:832:         setup();
 3081 0324 97000000 		call	setup		#
 3081      E7800000 
 3082 032c 930B5000 		li	s7,5		# ivtmp_137,
 3083              	# main_seeed.c:835:           drawRectangle(3 * i, 2 * i, 95 - 6 * i, 63 - 4 * i,
 3084 0330 130CC0FF 		li	s8,-4		# tmp174,
 3085 0334 930CA0FF 		li	s9,-6		# tmp179,
 3086 0338 130D3000 		li	s10,3		# tmp186,
 3087              	# main_seeed.c:834:             for (int i = 1; i < 16; i++) {
 3088 033c 930D0001 		li	s11,16		# tmp190,
 3089              	.L287:
 3090              	# main_seeed.c:834:             for (int i = 1; i < 16; i++) {
 3091 0340 93071000 		li	a5,1		# i,
 3092              	.L288:
 3093 0344 13950701 		slli	a0,a5,16	#, _130, i
 3094 0348 13550501 		srli	a0,a0,16	#, _130, _130
 3095              	# main_seeed.c:835:           drawRectangle(3 * i, 2 * i, 95 - 6 * i, 63 - 4 * i,
 3096 034c B3068503 		mul	a3,a0,s8	# tmp175, _130, tmp174
 3097 0350 93151500 		slli	a1,a0,1	#, tmp184, _130
 3098 0354 93950501 		slli	a1,a1,16	#, tmp185, tmp184
 3099 0358 93D50501 		srli	a1,a1,16	#, tmp185, tmp185
 3100 035c 13870A00 		mv	a4,s5	#, tmp222
 3101 0360 2328F100 		sw	a5,16(sp)	# i, %sfp
 3102 0364 33069503 		mul	a2,a0,s9	# tmp180, _130, tmp179
 3103 0368 9386F603 		addi	a3,a3,63	#, tmp177, tmp175
 3104 036c 93960601 		slli	a3,a3,16	#,, tmp177
 3105 0370 93D60601 		srli	a3,a3,16	#,,
 3106 0374 3305A503 		mul	a0,a0,s10	# tmp187, _130, tmp186
 3107 0378 1306F605 		addi	a2,a2,95	#, tmp182, tmp180
 3108 037c 13160601 		slli	a2,a2,16	#,, tmp182
 3109 0380 13560601 		srli	a2,a2,16	#,,
 3110 0384 13150501 		slli	a0,a0,16	#,, tmp187
 3111 0388 13550501 		srli	a0,a0,16	#,,
 3112 038c 97000000 		call	drawRectangle		#
 3112      E7800000 
 3113              	# main_seeed.c:837:           delay(450000);
 3114 0394 13050400 		mv	a0,s0	#, tmp220
 3115 0398 93850400 		mv	a1,s1	#,
 3116 039c 97000000 		call	wait_cycles		#
 3116      E7800000 
 3117              	# main_seeed.c:834:             for (int i = 1; i < 16; i++) {
 3118 03a4 83270101 		lw	a5,16(sp)		# i, %sfp
 3119 03a8 93871700 		addi	a5,a5,1	#, i, i
 3120              	# main_seeed.c:834:             for (int i = 1; i < 16; i++) {
 3121 03ac E39CB7F9 		bne	a5,s11,.L288	#, i, tmp190,
 3122              	# main_seeed.c:839:             delay(450000);
 3123 03b0 13050400 		mv	a0,s0	#, tmp220
 3124 03b4 93850400 		mv	a1,s1	#,
 3125 03b8 97000000 		call	wait_cycles		#
 3125      E7800000 
 3126              	# main_seeed.c:840:             for (int i = 15; i > 0; i--) {
 3127 03c0 9307F000 		li	a5,15		# i,
 3128              	.L289:
 3129 03c4 13950701 		slli	a0,a5,16	#, _132, i
 3130 03c8 13550501 		srli	a0,a0,16	#, _132, _132
 3131              	# main_seeed.c:841:           drawRectangle(3 * i, 2 * i, 95 - 6 * i, 63 - 4 * i,
 3132 03cc B3068503 		mul	a3,a0,s8	# tmp192, _132, tmp174
 3133 03d0 93151500 		slli	a1,a0,1	#, tmp201, _132
 3134 03d4 93950501 		slli	a1,a1,16	#, tmp202, tmp201
 3135 03d8 93D50501 		srli	a1,a1,16	#, tmp202, tmp202
 3136 03dc 1307F001 		li	a4,31		#,
 3137 03e0 2328F100 		sw	a5,16(sp)	# i, %sfp
 3138 03e4 33069503 		mul	a2,a0,s9	# tmp197, _132, tmp179
 3139 03e8 9386F603 		addi	a3,a3,63	#, tmp194, tmp192
 3140 03ec 93960601 		slli	a3,a3,16	#,, tmp194
 3141 03f0 93D60601 		srli	a3,a3,16	#,,
 3142 03f4 3305A503 		mul	a0,a0,s10	# tmp204, _132, tmp186
 3143 03f8 1306F605 		addi	a2,a2,95	#, tmp199, tmp197
 3144 03fc 13160601 		slli	a2,a2,16	#,, tmp199
 3145 0400 13560601 		srli	a2,a2,16	#,,
 3146 0404 13150501 		slli	a0,a0,16	#,, tmp204
 3147 0408 13550501 		srli	a0,a0,16	#,,
 3148 040c 97000000 		call	drawRectangle		#
 3148      E7800000 
 3149              	# main_seeed.c:843:           delay(450000);
 3150 0414 13050400 		mv	a0,s0	#, tmp220
 3151 0418 93850400 		mv	a1,s1	#,
 3152 041c 97000000 		call	wait_cycles		#
 3152      E7800000 
 3153              	# main_seeed.c:840:             for (int i = 15; i > 0; i--) {
 3154 0424 83270101 		lw	a5,16(sp)		# i, %sfp
 3155 0428 9387F7FF 		addi	a5,a5,-1	#, i, i
 3156              	# main_seeed.c:840:             for (int i = 15; i > 0; i--) {
 3157 042c E39C07F8 		bne	a5,zero,.L289	#, i,,
 3158              	# main_seeed.c:845:             delay(200000);
 3159 0430 37150300 		li	a0,200704		#,
 3160 0434 130505D4 		addi	a0,a0,-704	#,,
 3161 0438 93050000 		li	a1,0		#,
 3162              	# main_seeed.c:833:         for (int i = 0; i < 5; i++) {
 3163 043c 938BFBFF 		addi	s7,s7,-1	#, ivtmp_137, ivtmp_137
 3164              	# main_seeed.c:845:             delay(200000);
 3165 0440 97000000 		call	wait_cycles		#
 3165      E7800000 
 3166              	# main_seeed.c:833:         for (int i = 0; i < 5; i++) {
 3167 0448 E39C0BEE 		bne	s7,zero,.L287	#, ivtmp_137,,
 3168              	# main_seeed.c:848:         setup();
 3169 044c 97000000 		call	setup		#
 3169      E7800000 
 3170              	# main_seeed.c:849:         delay(2000);
 3171 0454 1305007D 		li	a0,2000		#,
 3172 0458 93050000 		li	a1,0		#,
 3173 045c 97000000 		call	wait_cycles		#
 3173      E7800000 
 3174              	# main_seeed.c:850:             drawLine(5, 7, 65, 48, COLOR_BLUE);
 3175 0464 1307F001 		li	a4,31		#,
 3176 0468 93060003 		li	a3,48		#,
 3177 046c 13061004 		li	a2,65		#,
 3178 0470 93057000 		li	a1,7		#,
 3179 0474 13055000 		li	a0,5		#,
 3180 0478 97000000 		call	drawLine		#
 3180      E7800000 
 3181              	# main_seeed.c:851:             delay(4500000);
 3182 0480 37B54400 		li	a0,4501504		#,
 3183 0484 130505A2 		addi	a0,a0,-1504	#,,
 3184 0488 93050000 		li	a1,0		#,
 3185 048c 97000000 		call	wait_cycles		#
 3185      E7800000 
 3186              	# main_seeed.c:852:             drawLine(5, 40, 48, 7, COLOR_RED);
 3187 0494 13070A80 		addi	a4,s4,-2048	#,, tmp130
 3188 0498 93067000 		li	a3,7		#,
 3189 049c 13060003 		li	a2,48		#,
 3190 04a0 93058002 		li	a1,40		#,
 3191 04a4 13055000 		li	a0,5		#,
 3192 04a8 97000000 		call	drawLine		#
 3192      E7800000 
 3193              	# main_seeed.c:853:             delay(4500000);
 3194 04b0 37B54400 		li	a0,4501504		#,
 3195 04b4 130505A2 		addi	a0,a0,-1504	#,,
 3196 04b8 93050000 		li	a1,0		#,
 3197 04bc 97000000 		call	wait_cycles		#
 3197      E7800000 
 3198              	# main_seeed.c:854:             drawLine(65, 5, 47, 50, COLOR_GREEN);
 3199 04c4 1307007E 		li	a4,2016		#,
 3200 04c8 93062003 		li	a3,50		#,
 3201 04cc 1306F002 		li	a2,47		#,
 3202 04d0 93055000 		li	a1,5		#,
 3203 04d4 13051004 		li	a0,65		#,
 3204 04d8 97000000 		call	drawLine		#
 3204      E7800000 
 3205              	# main_seeed.c:855:             delay(4500000);
 3206 04e0 37B54400 		li	a0,4501504		#,
 3207 04e4 130505A2 		addi	a0,a0,-1504	#,,
 3208 04e8 93050000 		li	a1,0		#,
 3209 04ec 97000000 		call	wait_cycles		#
 3209      E7800000 
 3210              	# main_seeed.c:856:             drawLine(3, 10, 80, 21, COLOR_YELLOW);
 3211 04f4 13870A00 		mv	a4,s5	#, tmp222
 3212 04f8 93065001 		li	a3,21		#,
 3213 04fc 13060005 		li	a2,80		#,
 3214 0500 9305A000 		li	a1,10		#,
 3215 0504 13053000 		li	a0,3		#,
 3216 0508 97000000 		call	drawLine		#
 3216      E7800000 
 3217              	# main_seeed.c:857:         delay(45000000);
 3218 0510 13050900 		mv	a0,s2	#, tmp221
 3219 0514 93850900 		mv	a1,s3	#,
 3220 0518 97000000 		call	wait_cycles		#
 3220      E7800000 
 3221              	# main_seeed.c:787:         print_str_ln("run...");
 3222 0520 6FF0DFB4 		j	.L291		#
 3224              		.globl	_height
 3225              		.globl	_width
 3226              		.globl	simpleFont
 3227              		.globl	SeeedLogo
 3228              		.globl	heap_memory_used
 3229              		.globl	heap_memory
 3230              		.section	.rodata
 3231              		.align	2
 3232              		.set	.LANCHOR1,. + 0
 3235              	simpleFont:
 3236 0000 00       		.string	""
 3237 0001 00       		.string	""
 3238 0002 00       		.string	""
 3239 0003 00       		.string	""
 3240 0004 00       		.string	""
 3241 0005 00       		.string	""
 3242 0006 00       		.string	""
 3243 0007 00       		.string	""
 3244 0008 00       		.string	""
 3245 0009 00       		.string	""
 3246 000a 5F00     		.string	"_"
 3247 000c 00       		.string	""
 3248 000d 00       		.string	""
 3249 000e 00       		.string	""
 3250 000f 00       		.string	""
 3251 0010 00       		.string	""
 3252 0011 00       		.string	""
 3253 0012 0700     		.string	"\007"
 3254 0014 0700     		.string	"\007"
 3255 0016 00       		.string	""
 3256 0017 00       		.string	""
 3257 0018 00       		.string	""
 3258 0019 147F147F 		.string	"\024\177\024\177\024"
 3258      1400
 3259 001f 00       		.string	""
 3260 0020 00       		.string	""
 3261 0021 242A7F2A 		.string	"$*\177*\022"
 3261      1200
 3262 0027 00       		.string	""
 3263 0028 00       		.string	""
 3264 0029 23130864 		.string	"#\023\bdb"
 3264      6200
 3265 002f 00       		.string	""
 3266 0030 00       		.string	""
 3267 0031 36495522 		.string	"6IU\"P"
 3267      5000
 3268 0037 00       		.string	""
 3269 0038 00       		.string	""
 3270 0039 00       		.string	""
 3271 003a 050300   		.string	"\005\003"
 3272 003d 00       		.string	""
 3273 003e 00       		.string	""
 3274 003f 00       		.string	""
 3275 0040 00       		.string	""
 3276 0041 1C224100 		.string	"\034\"A"
 3277 0045 00       		.string	""
 3278 0046 00       		.string	""
 3279 0047 00       		.string	""
 3280 0048 00       		.string	""
 3281 0049 41221C00 		.string	"A\"\034"
 3282 004d 00       		.string	""
 3283 004e 00       		.string	""
 3284 004f 00       		.string	""
 3285 0050 00       		.string	""
 3286 0051 082A1C2A 		.string	"\b*\034*\b"
 3286      0800
 3287 0057 00       		.string	""
 3288 0058 00       		.string	""
 3289 0059 08083E08 		.string	"\b\b>\b\b"
 3289      0800
 3290 005f 00       		.string	""
 3291 0060 00       		.string	""
 3292 0061 A06000   		.string	"\240`"
 3293 0064 00       		.string	""
 3294 0065 00       		.string	""
 3295 0066 00       		.string	""
 3296 0067 00       		.string	""
 3297 0068 00       		.string	""
 3298 0069 08080808 		.string	"\b\b\b\b\b"
 3298      0800
 3299 006f 00       		.string	""
 3300 0070 00       		.string	""
 3301 0071 606000   		.string	"``"
 3302 0074 00       		.string	""
 3303 0075 00       		.string	""
 3304 0076 00       		.string	""
 3305 0077 00       		.string	""
 3306 0078 00       		.string	""
 3307 0079 20100804 		.string	" \020\b\004\002"
 3307      0200
 3308 007f 00       		.string	""
 3309 0080 00       		.string	""
 3310 0081 3E514945 		.string	">QIE>"
 3310      3E00
 3311 0087 00       		.string	""
 3312 0088 00       		.string	""
 3313 0089 00       		.string	""
 3314 008a 427F4000 		.string	"B\177@"
 3315 008e 00       		.string	""
 3316 008f 00       		.string	""
 3317 0090 00       		.string	""
 3318 0091 62514949 		.string	"bQIIF"
 3318      4600
 3319 0097 00       		.string	""
 3320 0098 00       		.string	""
 3321 0099 22414949 		.string	"\"AII6"
 3321      3600
 3322 009f 00       		.string	""
 3323 00a0 00       		.string	""
 3324 00a1 1814127F 		.string	"\030\024\022\177\020"
 3324      1000
 3325 00a7 00       		.string	""
 3326 00a8 00       		.string	""
 3327 00a9 27454545 		.string	"'EEE9"
 3327      3900
 3328 00af 00       		.string	""
 3329 00b0 00       		.string	""
 3330 00b1 3C4A4949 		.string	"<JII0"
 3330      3000
 3331 00b7 00       		.string	""
 3332 00b8 00       		.string	""
 3333 00b9 01710905 		.string	"\001q\t\005\003"
 3333      0300
 3334 00bf 00       		.string	""
 3335 00c0 00       		.string	""
 3336 00c1 36494949 		.string	"6III6"
 3336      3600
 3337 00c7 00       		.string	""
 3338 00c8 00       		.string	""
 3339 00c9 06494929 		.string	"\006II)\036"
 3339      1E00
 3340 00cf 00       		.string	""
 3341 00d0 00       		.string	""
 3342 00d1 00       		.string	""
 3343 00d2 363600   		.string	"66"
 3344 00d5 00       		.string	""
 3345 00d6 00       		.string	""
 3346 00d7 00       		.string	""
 3347 00d8 00       		.string	""
 3348 00d9 00       		.string	""
 3349 00da AC6C00   		.string	"\254l"
 3350 00dd 00       		.string	""
 3351 00de 00       		.string	""
 3352 00df 00       		.string	""
 3353 00e0 00       		.string	""
 3354 00e1 08142241 		.string	"\b\024\"A"
 3354      00
 3355 00e6 00       		.string	""
 3356 00e7 00       		.string	""
 3357 00e8 00       		.string	""
 3358 00e9 14141414 		.string	"\024\024\024\024\024"
 3358      1400
 3359 00ef 00       		.string	""
 3360 00f0 00       		.string	""
 3361 00f1 41221408 		.string	"A\"\024\b"
 3361      00
 3362 00f6 00       		.string	""
 3363 00f7 00       		.string	""
 3364 00f8 00       		.string	""
 3365 00f9 02015109 		.string	"\002\001Q\t\006"
 3365      0600
 3366 00ff 00       		.string	""
 3367 0100 00       		.string	""
 3368 0101 32497941 		.string	"2IyA>"
 3368      3E00
 3369 0107 00       		.string	""
 3370 0108 00       		.string	""
 3371 0109 7E090909 		.string	"~\t\t\t~"
 3371      7E00
 3372 010f 00       		.string	""
 3373 0110 00       		.string	""
 3374 0111 7F494949 		.string	"\177III6"
 3374      3600
 3375 0117 00       		.string	""
 3376 0118 00       		.string	""
 3377 0119 3E414141 		.string	">AAA\""
 3377      2200
 3378 011f 00       		.string	""
 3379 0120 00       		.string	""
 3380 0121 7F414122 		.string	"\177AA\"\034"
 3380      1C00
 3381 0127 00       		.string	""
 3382 0128 00       		.string	""
 3383 0129 7F494949 		.string	"\177IIIA"
 3383      4100
 3384 012f 00       		.string	""
 3385 0130 00       		.string	""
 3386 0131 7F090909 		.string	"\177\t\t\t\001"
 3386      0100
 3387 0137 00       		.string	""
 3388 0138 00       		.string	""
 3389 0139 3E414151 		.string	">AAQr"
 3389      7200
 3390 013f 00       		.string	""
 3391 0140 00       		.string	""
 3392 0141 7F080808 		.string	"\177\b\b\b\177"
 3392      7F00
 3393 0147 00       		.string	""
 3394 0148 00       		.string	""
 3395 0149 417F4100 		.string	"A\177A"
 3396 014d 00       		.string	""
 3397 014e 00       		.string	""
 3398 014f 00       		.string	""
 3399 0150 00       		.string	""
 3400 0151 2040413F 		.string	" @A?\001"
 3400      0100
 3401 0157 00       		.string	""
 3402 0158 00       		.string	""
 3403 0159 7F081422 		.string	"\177\b\024\"A"
 3403      4100
 3404 015f 00       		.string	""
 3405 0160 00       		.string	""
 3406 0161 7F404040 		.string	"\177@@@@"
 3406      4000
 3407 0167 00       		.string	""
 3408 0168 00       		.string	""
 3409 0169 7F020C02 		.string	"\177\002\f\002\177"
 3409      7F00
 3410 016f 00       		.string	""
 3411 0170 00       		.string	""
 3412 0171 7F040810 		.string	"\177\004\b\020\177"
 3412      7F00
 3413 0177 00       		.string	""
 3414 0178 00       		.string	""
 3415 0179 3E414141 		.string	">AAA>"
 3415      3E00
 3416 017f 00       		.string	""
 3417 0180 00       		.string	""
 3418 0181 7F090909 		.string	"\177\t\t\t\006"
 3418      0600
 3419 0187 00       		.string	""
 3420 0188 00       		.string	""
 3421 0189 3E415121 		.string	">AQ!^"
 3421      5E00
 3422 018f 00       		.string	""
 3423 0190 00       		.string	""
 3424 0191 7F091929 		.string	"\177\t\031)F"
 3424      4600
 3425 0197 00       		.string	""
 3426 0198 00       		.string	""
 3427 0199 26494949 		.string	"&III2"
 3427      3200
 3428 019f 00       		.string	""
 3429 01a0 00       		.string	""
 3430 01a1 01017F01 		.string	"\001\001\177\001\001"
 3430      0100
 3431 01a7 00       		.string	""
 3432 01a8 00       		.string	""
 3433 01a9 3F404040 		.string	"?@@@?"
 3433      3F00
 3434 01af 00       		.string	""
 3435 01b0 00       		.string	""
 3436 01b1 1F204020 		.string	"\037 @ \037"
 3436      1F00
 3437 01b7 00       		.string	""
 3438 01b8 00       		.string	""
 3439 01b9 3F403840 		.string	"?@8@?"
 3439      3F00
 3440 01bf 00       		.string	""
 3441 01c0 00       		.string	""
 3442 01c1 63140814 		.string	"c\024\b\024c"
 3442      6300
 3443 01c7 00       		.string	""
 3444 01c8 00       		.string	""
 3445 01c9 03047804 		.string	"\003\004x\004\003"
 3445      0300
 3446 01cf 00       		.string	""
 3447 01d0 00       		.string	""
 3448 01d1 61514945 		.string	"aQIEC"
 3448      4300
 3449 01d7 00       		.string	""
 3450 01d8 00       		.string	""
 3451 01d9 7F414100 		.string	"\177AA"
 3452 01dd 00       		.string	""
 3453 01de 00       		.string	""
 3454 01df 00       		.string	""
 3455 01e0 00       		.string	""
 3456 01e1 02040810 		.string	"\002\004\b\020 "
 3456      2000
 3457 01e7 00       		.string	""
 3458 01e8 00       		.string	""
 3459 01e9 41417F00 		.string	"AA\177"
 3460 01ed 00       		.string	""
 3461 01ee 00       		.string	""
 3462 01ef 00       		.string	""
 3463 01f0 00       		.string	""
 3464 01f1 04020102 		.string	"\004\002\001\002\004"
 3464      0400
 3465 01f7 00       		.string	""
 3466 01f8 00       		.string	""
 3467 01f9 80808080 		.string	"\200\200\200\200\200"
 3467      8000
 3468 01ff 00       		.string	""
 3469 0200 00       		.string	""
 3470 0201 01020400 		.string	"\001\002\004"
 3471 0205 00       		.string	""
 3472 0206 00       		.string	""
 3473 0207 00       		.string	""
 3474 0208 00       		.string	""
 3475 0209 20545454 		.string	" TTTx"
 3475      7800
 3476 020f 00       		.string	""
 3477 0210 00       		.string	""
 3478 0211 7F484444 		.string	"\177HDD8"
 3478      3800
 3479 0217 00       		.string	""
 3480 0218 00       		.string	""
 3481 0219 38444428 		.string	"8DD("
 3481      00
 3482 021e 00       		.string	""
 3483 021f 00       		.string	""
 3484 0220 00       		.string	""
 3485 0221 38444448 		.string	"8DDH\177"
 3485      7F00
 3486 0227 00       		.string	""
 3487 0228 00       		.string	""
 3488 0229 38545454 		.string	"8TTT\030"
 3488      1800
 3489 022f 00       		.string	""
 3490 0230 00       		.string	""
 3491 0231 087E0902 		.string	"\b~\t\002"
 3491      00
 3492 0236 00       		.string	""
 3493 0237 00       		.string	""
 3494 0238 00       		.string	""
 3495 0239 18A4A4A4 		.string	"\030\244\244\244|"
 3495      7C00
 3496 023f 00       		.string	""
 3497 0240 00       		.string	""
 3498 0241 7F080404 		.string	"\177\b\004\004x"
 3498      7800
 3499 0247 00       		.string	""
 3500 0248 00       		.string	""
 3501 0249 00       		.string	""
 3502 024a 7D00     		.string	"}"
 3503 024c 00       		.string	""
 3504 024d 00       		.string	""
 3505 024e 00       		.string	""
 3506 024f 00       		.string	""
 3507 0250 00       		.string	""
 3508 0251 80847D00 		.string	"\200\204}"
 3509 0255 00       		.string	""
 3510 0256 00       		.string	""
 3511 0257 00       		.string	""
 3512 0258 00       		.string	""
 3513 0259 7F102844 		.string	"\177\020(D"
 3513      00
 3514 025e 00       		.string	""
 3515 025f 00       		.string	""
 3516 0260 00       		.string	""
 3517 0261 417F4000 		.string	"A\177@"
 3518 0265 00       		.string	""
 3519 0266 00       		.string	""
 3520 0267 00       		.string	""
 3521 0268 00       		.string	""
 3522 0269 7C041804 		.string	"|\004\030\004x"
 3522      7800
 3523 026f 00       		.string	""
 3524 0270 00       		.string	""
 3525 0271 7C08047C 		.string	"|\b\004|"
 3525      00
 3526 0276 00       		.string	""
 3527 0277 00       		.string	""
 3528 0278 00       		.string	""
 3529 0279 38444438 		.string	"8DD8"
 3529      00
 3530 027e 00       		.string	""
 3531 027f 00       		.string	""
 3532 0280 00       		.string	""
 3533 0281 FC242418 		.string	"\374$$\030"
 3533      00
 3534 0286 00       		.string	""
 3535 0287 00       		.string	""
 3536 0288 00       		.string	""
 3537 0289 182424FC 		.string	"\030$$\374"
 3537      00
 3538 028e 00       		.string	""
 3539 028f 00       		.string	""
 3540 0290 00       		.string	""
 3541 0291 00       		.string	""
 3542 0292 7C080400 		.string	"|\b\004"
 3543 0296 00       		.string	""
 3544 0297 00       		.string	""
 3545 0298 00       		.string	""
 3546 0299 48545424 		.string	"HTT$"
 3546      00
 3547 029e 00       		.string	""
 3548 029f 00       		.string	""
 3549 02a0 00       		.string	""
 3550 02a1 047F4400 		.string	"\004\177D"
 3551 02a5 00       		.string	""
 3552 02a6 00       		.string	""
 3553 02a7 00       		.string	""
 3554 02a8 00       		.string	""
 3555 02a9 3C40407C 		.string	"<@@|"
 3555      00
 3556 02ae 00       		.string	""
 3557 02af 00       		.string	""
 3558 02b0 00       		.string	""
 3559 02b1 1C204020 		.string	"\034 @ \034"
 3559      1C00
 3560 02b7 00       		.string	""
 3561 02b8 00       		.string	""
 3562 02b9 3C403040 		.string	"<@0@<"
 3562      3C00
 3563 02bf 00       		.string	""
 3564 02c0 00       		.string	""
 3565 02c1 44281028 		.string	"D(\020(D"
 3565      4400
 3566 02c7 00       		.string	""
 3567 02c8 00       		.string	""
 3568 02c9 1CA0A07C 		.string	"\034\240\240|"
 3568      00
 3569 02ce 00       		.string	""
 3570 02cf 00       		.string	""
 3571 02d0 00       		.string	""
 3572 02d1 4464544C 		.string	"DdTLD"
 3572      4400
 3573 02d7 00       		.string	""
 3574 02d8 00       		.string	""
 3575 02d9 08364100 		.string	"\b6A"
 3576 02dd 00       		.string	""
 3577 02de 00       		.string	""
 3578 02df 00       		.string	""
 3579 02e0 00       		.string	""
 3580 02e1 00       		.string	""
 3581 02e2 7F00     		.string	"\177"
 3582 02e4 00       		.string	""
 3583 02e5 00       		.string	""
 3584 02e6 00       		.string	""
 3585 02e7 00       		.string	""
 3586 02e8 00       		.string	""
 3587 02e9 41360800 		.string	"A6\b"
 3588 02ed 00       		.string	""
 3589 02ee 00       		.string	""
 3590 02ef 00       		.string	""
 3591 02f0 00       		.string	""
 3592 02f1 02010102 		.string	"\002\001\001\002\001"
 3592      0100
 3593 02f7 00       		.string	""
 3594 02f8 00       		.string	""
 3595 02f9 02050502 		.string	"\002\005\005\002"
 3595      00
 3596 02fe 00       		.string	""
 3597 02ff 00       		.string	""
 3600              	SeeedLogo:
 3601 0300 00       		.string	""
 3602 0301 00       		.string	""
 3603 0302 00       		.string	""
 3604 0303 00       		.string	""
 3605 0304 00       		.string	""
 3606 0305 00       		.string	""
 3607 0306 00       		.string	""
 3608 0307 00       		.string	""
 3609 0308 00       		.string	""
 3610 0309 00       		.string	""
 3611 030a 00       		.string	""
 3612 030b 00       		.string	""
 3613 030c 00       		.string	""
 3614 030d 00       		.string	""
 3615 030e 00       		.string	""
 3616 030f 00       		.string	""
 3617 0310 00       		.string	""
 3618 0311 800400   		.string	"\200\004"
 3619 0314 00       		.string	""
 3620 0315 00       		.string	""
 3621 0316 00       		.string	""
 3622 0317 00       		.string	""
 3623 0318 00       		.string	""
 3624 0319 00       		.string	""
 3625 031a 00       		.string	""
 3626 031b 00       		.string	""
 3627 031c 01800600 		.string	"\001\200\006"
 3628 0320 00       		.string	""
 3629 0321 00       		.string	""
 3630 0322 00       		.string	""
 3631 0323 00       		.string	""
 3632 0324 00       		.string	""
 3633 0325 00       		.string	""
 3634 0326 00       		.string	""
 3635 0327 00       		.string	""
 3636 0328 03800700 		.string	"\003\200\007"
 3637 032c 00       		.string	""
 3638 032d 00       		.string	""
 3639 032e 00       		.string	""
 3640 032f 00       		.string	""
 3641 0330 00       		.string	""
 3642 0331 00       		.string	""
 3643 0332 00       		.string	""
 3644 0333 00       		.string	""
 3645 0334 0700     		.string	"\007"
 3646 0336 038000   		.string	"\003\200"
 3647 0339 00       		.string	""
 3648 033a 00       		.string	""
 3649 033b 00       		.string	""
 3650 033c 00       		.string	""
 3651 033d 00       		.string	""
 3652 033e 00       		.string	""
 3653 033f 00       		.string	""
 3654 0340 0F00     		.string	"\017"
 3655 0342 03C000   		.string	"\003\300"
 3656 0345 00       		.string	""
 3657 0346 00       		.string	""
 3658 0347 00       		.string	""
 3659 0348 00       		.string	""
 3660 0349 00       		.string	""
 3661 034a 00       		.string	""
 3662 034b 00       		.string	""
 3663 034c 1E00     		.string	"\036"
 3664 034e 01E000   		.string	"\001\340"
 3665 0351 00       		.string	""
 3666 0352 00       		.string	""
 3667 0353 00       		.string	""
 3668 0354 00       		.string	""
 3669 0355 00       		.string	""
 3670 0356 00       		.string	""
 3671 0357 00       		.string	""
 3672 0358 1E00     		.string	"\036"
 3673 035a 01E000   		.string	"\001\340"
 3674 035d 00       		.string	""
 3675 035e 00       		.string	""
 3676 035f 00       		.string	""
 3677 0360 00       		.string	""
 3678 0361 00       		.string	""
 3679 0362 00       		.string	""
 3680 0363 00       		.string	""
 3681 0364 3E00     		.string	">"
 3682 0366 01F000   		.string	"\001\360"
 3683 0369 00       		.string	""
 3684 036a 00       		.string	""
 3685 036b 00       		.string	""
 3686 036c 00       		.string	""
 3687 036d 00       		.string	""
 3688 036e 00       		.string	""
 3689 036f 00       		.string	""
 3690 0370 3E00     		.string	">"
 3691 0372 01F800   		.string	"\001\370"
 3692 0375 00       		.string	""
 3693 0376 00       		.string	""
 3694 0377 00       		.string	""
 3695 0378 00       		.string	""
 3696 0379 00       		.string	""
 3697 037a 00       		.string	""
 3698 037b 00       		.string	""
 3699 037c 7C00     		.string	"|"
 3700 037e 00       		.string	""
 3701 037f F800     		.string	"\370"
 3702 0381 00       		.string	""
 3703 0382 00       		.string	""
 3704 0383 00       		.string	""
 3705 0384 00       		.string	""
 3706 0385 00       		.string	""
 3707 0386 1800     		.string	"\030"
 3708 0388 7C00     		.string	"|"
 3709 038a 00       		.string	""
 3710 038b F800     		.string	"\370"
 3711 038d 6000     		.string	"`"
 3712 038f 00       		.string	""
 3713 0390 00       		.string	""
 3714 0391 00       		.string	""
 3715 0392 1800     		.string	"\030"
 3716 0394 FC00     		.string	"\374"
 3717 0396 00       		.string	""
 3718 0397 FC00     		.string	"\374"
 3719 0399 6000     		.string	"`"
 3720 039b 00       		.string	""
 3721 039c 00       		.string	""
 3722 039d 00       		.string	""
 3723 039e 1800     		.string	"\030"
 3724 03a0 FC00     		.string	"\374"
 3725 03a2 00       		.string	""
 3726 03a3 FC00     		.string	"\374"
 3727 03a5 6000     		.string	"`"
 3728 03a7 00       		.string	""
 3729 03a8 00       		.string	""
 3730 03a9 00       		.string	""
 3731 03aa 1C00     		.string	"\034"
 3732 03ac FC00     		.string	"\374"
 3733 03ae 00       		.string	""
 3734 03af FC00     		.string	"\374"
 3735 03b1 6000     		.string	"`"
 3736 03b3 00       		.string	""
 3737 03b4 00       		.string	""
 3738 03b5 00       		.string	""
 3739 03b6 1C00     		.string	"\034"
 3740 03b8 FC00     		.string	"\374"
 3741 03ba 00       		.string	""
 3742 03bb FC00     		.string	"\374"
 3743 03bd E000     		.string	"\340"
 3744 03bf 00       		.string	""
 3745 03c0 00       		.string	""
 3746 03c1 00       		.string	""
 3747 03c2 1C00     		.string	"\034"
 3748 03c4 FC00     		.string	"\374"
 3749 03c6 00       		.string	""
 3750 03c7 FC00     		.string	"\374"
 3751 03c9 F000     		.string	"\360"
 3752 03cb 00       		.string	""
 3753 03cc 00       		.string	""
 3754 03cd 00       		.string	""
 3755 03ce 1E00     		.string	"\036"
 3756 03d0 FC00     		.string	"\374"
 3757 03d2 00       		.string	""
 3758 03d3 FC01F000 		.string	"\374\001\360"
 3759 03d7 00       		.string	""
 3760 03d8 00       		.string	""
 3761 03d9 00       		.string	""
 3762 03da 1E00     		.string	"\036"
 3763 03dc FC00     		.string	"\374"
 3764 03de 00       		.string	""
 3765 03df FC01E000 		.string	"\374\001\340"
 3766 03e3 00       		.string	""
 3767 03e4 00       		.string	""
 3768 03e5 00       		.string	""
 3769 03e6 1E00     		.string	"\036"
 3770 03e8 FC00     		.string	"\374"
 3771 03ea 00       		.string	""
 3772 03eb FC01E000 		.string	"\374\001\340"
 3773 03ef 00       		.string	""
 3774 03f0 00       		.string	""
 3775 03f1 00       		.string	""
 3776 03f2 1F00     		.string	"\037"
 3777 03f4 FC00     		.string	"\374"
 3778 03f6 00       		.string	""
 3779 03f7 FC03E000 		.string	"\374\003\340"
 3780 03fb 00       		.string	""
 3781 03fc 00       		.string	""
 3782 03fd 00       		.string	""
 3783 03fe 1F80FC00 		.string	"\037\200\374"
 3784 0402 00       		.string	""
 3785 0403 FC03E000 		.string	"\374\003\340"
 3786 0407 00       		.string	""
 3787 0408 00       		.string	""
 3788 0409 00       		.string	""
 3789 040a 1F80FE00 		.string	"\037\200\376"
 3790 040e 00       		.string	""
 3791 040f FC07E000 		.string	"\374\007\340"
 3792 0413 00       		.string	""
 3793 0414 00       		.string	""
 3794 0415 00       		.string	""
 3795 0416 0FC07E00 		.string	"\017\300~"
 3796 041a 01FC0FE0 		.string	"\001\374\017\340"
 3796      00
 3797 041f 00       		.string	""
 3798 0420 00       		.string	""
 3799 0421 00       		.string	""
 3800 0422 0FC07E00 		.string	"\017\300~"
 3801 0426 01F80FC0 		.string	"\001\370\017\300"
 3801      00
 3802 042b 00       		.string	""
 3803 042c 00       		.string	""
 3804 042d 00       		.string	""
 3805 042e 0FE07E00 		.string	"\017\340~"
 3806 0432 01F81FC0 		.string	"\001\370\037\300"
 3806      00
 3807 0437 00       		.string	""
 3808 0438 00       		.string	""
 3809 0439 00       		.string	""
 3810 043a 07F03F00 		.string	"\007\360?"
 3811 043e 01F03F80 		.string	"\001\360?\200"
 3811      00
 3812 0443 00       		.string	""
 3813 0444 00       		.string	""
 3814 0445 00       		.string	""
 3815 0446 07F03F00 		.string	"\007\360?"
 3816 044a 03F03F80 		.string	"\003\360?\200"
 3816      00
 3817 044f 00       		.string	""
 3818 0450 00       		.string	""
 3819 0451 00       		.string	""
 3820 0452 03F81F00 		.string	"\003\370\037"
 3821 0456 03E07F00 		.string	"\003\340\177"
 3822 045a 00       		.string	""
 3823 045b 00       		.string	""
 3824 045c 00       		.string	""
 3825 045d 00       		.string	""
 3826 045e 01FC1F80 		.string	"\001\374\037\200\007\340\376"
 3826      07E0FE00 
 3827 0466 00       		.string	""
 3828 0467 00       		.string	""
 3829 0468 00       		.string	""
 3830 0469 00       		.string	""
 3831 046a 01FE0F80 		.string	"\001\376\017\200\007\301\376"
 3831      07C1FE00 
 3832 0472 00       		.string	""
 3833 0473 00       		.string	""
 3834 0474 00       		.string	""
 3835 0475 00       		.string	""
 3836 0476 00       		.string	""
 3837 0477 FF07C007 		.string	"\377\007\300\007\203\374"
 3837      83FC00
 3838 047e 00       		.string	""
 3839 047f 00       		.string	""
 3840 0480 00       		.string	""
 3841 0481 00       		.string	""
 3842 0482 00       		.string	""
 3843 0483 7F83C00F 		.string	"\177\203\300\017\007\370"
 3843      07F800
 3844 048a 00       		.string	""
 3845 048b 00       		.string	""
 3846 048c 00       		.string	""
 3847 048d 00       		.string	""
 3848 048e 00       		.string	""
 3849 048f 3FC1E00E 		.string	"?\301\340\016\017\360"
 3849      0FF000
 3850 0496 00       		.string	""
 3851 0497 00       		.string	""
 3852 0498 00       		.string	""
 3853 0499 00       		.string	""
 3854 049a 00       		.string	""
 3855 049b 1FF0E01C 		.string	"\037\360\340\034\037\340"
 3855      1FE000
 3856 04a2 00       		.string	""
 3857 04a3 00       		.string	""
 3858 04a4 00       		.string	""
 3859 04a5 00       		.string	""
 3860 04a6 00       		.string	""
 3861 04a7 07F87038 		.string	"\007\370p8\177\200"
 3861      7F8000
 3862 04ae 00       		.string	""
 3863 04af 00       		.string	""
 3864 04b0 00       		.string	""
 3865 04b1 00       		.string	""
 3866 04b2 00       		.string	""
 3867 04b3 03FC3830 		.string	"\003\37480\377"
 3867      FF00
 3868 04b9 00       		.string	""
 3869 04ba 00       		.string	""
 3870 04bb 00       		.string	""
 3871 04bc 00       		.string	""
 3872 04bd 00       		.string	""
 3873 04be 00       		.string	""
 3874 04bf 00       		.string	""
 3875 04c0 FF00     		.string	"\377"
 3876 04c2 03FC00   		.string	"\003\374"
 3877 04c5 00       		.string	""
 3878 04c6 00       		.string	""
 3879 04c7 00       		.string	""
 3880 04c8 00       		.string	""
 3881 04c9 00       		.string	""
 3882 04ca 00       		.string	""
 3883 04cb 00       		.string	""
 3884 04cc 3F8007F0 		.string	"?\200\007\360"
 3884      00
 3885 04d1 00       		.string	""
 3886 04d2 00       		.string	""
 3887 04d3 00       		.string	""
 3888 04d4 00       		.string	""
 3889 04d5 00       		.string	""
 3890 04d6 00       		.string	""
 3891 04d7 00       		.string	""
 3892 04d8 0FF03FC0 		.string	"\017\360?\300"
 3892      00
 3893 04dd 00       		.string	""
 3894 04de 00       		.string	""
 3895 04df 00       		.string	""
 3896 04e0 00       		.string	""
 3897 04e1 00       		.string	""
 3898 04e2 00       		.string	""
 3899 04e3 00       		.string	""
 3900 04e4 01F87E00 		.string	"\001\370~"
 3901 04e8 00       		.string	""
 3902 04e9 00       		.string	""
 3903 04ea 00       		.string	""
 3904 04eb 00       		.string	""
 3905 04ec 00       		.string	""
 3906 04ed 00       		.string	""
 3907 04ee 00       		.string	""
 3908 04ef 00       		.string	""
 3909 04f0 00       		.string	""
 3910 04f1 084000   		.string	"\b@"
 3911 04f4 00       		.string	""
 3912 04f5 00       		.string	""
 3913 04f6 3C00     		.string	"<"
 3914 04f8 00       		.string	""
 3915 04f9 00       		.string	""
 3916 04fa 00       		.string	""
 3917 04fb 00       		.string	""
 3918 04fc 00       		.string	""
 3919 04fd 00       		.string	""
 3920 04fe 00       		.string	""
 3921 04ff 00       		.string	""
 3922 0500 00       		.string	""
 3923 0501 00       		.string	""
 3924 0502 3C00     		.string	"<"
 3925 0504 00       		.string	""
 3926 0505 00       		.string	""
 3927 0506 00       		.string	""
 3928 0507 00       		.string	""
 3929 0508 00       		.string	""
 3930 0509 00       		.string	""
 3931 050a 00       		.string	""
 3932 050b 00       		.string	""
 3933 050c 00       		.string	""
 3934 050d 00       		.string	""
 3935 050e 3C00     		.string	"<"
 3936 0510 00       		.string	""
 3937 0511 03F00FC0 		.string	"\003\360\017\300\017\300\017\200\037\274"
 3937      0FC00F80 
 3937      1FBC00
 3938 051c 00       		.string	""
 3939 051d 0FF83FF0 		.string	"\017\370?\360?\360?\340\177\374"
 3939      3FF03FE0 
 3939      7FFC00
 3940 0528 00       		.string	""
 3941 0529 1FFC7FF8 		.string	"\037\374\177\370\177\370\177\370\377\374"
 3941      7FF87FF8 
 3941      FFFC00
 3942 0534 00       		.string	""
 3943 0535 1F7EFEFC 		.string	"\037~\376\374\375\374\375\375\375\374"
 3943      FDFCFDFD 
 3943      FDFC00
 3944 0540 00       		.string	""
 3945 0541 1E1EF03F 		.string	"\036\036\360?\360=\340=\340|"
 3945      F03DE03D 
 3945      E07C00
 3946 054c 00       		.string	""
 3947 054d 1FF1FFFF 		.string	"\037\361\377\377\377\377\377\375\340<"
 3947      FFFFFFFD 
 3947      E03C00
 3948 0558 00       		.string	""
 3949 0559 0FFDFFFF 		.string	"\017\375\377\377\377\377\377\375\300<"
 3949      FFFFFFFD 
 3949      C03C00
 3950 0564 00       		.string	""
 3951 0565 03FFFFFF 		.string	"\003\377\377\377\377\377\377\375\300<"
 3951      FFFFFFFD 
 3951      C03C00
 3952 0570 00       		.string	""
 3953 0571 3C1EF031 		.string	"<\036\3601\360!\340!\340|"
 3953      F021E021 
 3953      E07C00
 3954 057c 00       		.string	""
 3955 057d 3F3EFEFC 		.string	"?>\376\374\374\370\375\371\375\374"
 3955      FCF8FDF9 
 3955      FDFC00
 3956 0588 00       		.string	""
 3957 0589 1FFE7FFC 		.string	"\037\376\177\374\177\370\177\370\377\374"
 3957      7FF87FF8 
 3957      FFFC00
 3958 0594 00       		.string	""
 3959 0595 0FFC3FF0 		.string	"\017\374?\360?\360?\340\177\374"
 3959      3FF03FE0 
 3959      7FFC00
 3960 05a0 00       		.string	""
 3961 05a1 03F00FC0 		.string	"\003\360\017\300\017\300\017\200\037\274"
 3961      0FC00F80 
 3961      1FBC00
 3962 05ac 00       		.string	""
 3963 05ad 00       		.string	""
 3964 05ae 00       		.string	""
 3965 05af 00       		.string	""
 3966 05b0 00       		.string	""
 3967 05b1 00       		.string	""
 3968 05b2 00       		.string	""
 3969 05b3 00       		.string	""
 3970 05b4 00       		.string	""
 3971 05b5 00       		.string	""
 3972 05b6 00       		.string	""
 3973 05b7 00       		.string	""
 3974 05b8 00       		.string	""
 3975 05b9 1F64CDF6 		.string	"\037d\315\366\341\311??\373\246"
 3975      E1C93F3F 
 3975      FBA600
 3976 05c4 00       		.string	""
 3977 05c5 1FFFEFFF 		.string	"\037\377\357\377\377\377\277\377\377\376"
 3977      FFFFBFFF 
 3977      FFFE00
 3978 05d0 00       		.string	""
 3979 05d1 1FFFEFFF 		.string	"\037\377\357\377\377\377\277\377\377\374"
 3979      FFFFBFFF 
 3979      FFFC00
 3980 05dc 00       		.string	""
 3981 05dd 1FFFEDFF 		.string	"\037\377\355\377\377\377\267\377\377\374"
 3981      FFFFB7FF 
 3981      FFFC00
 3982 05e8 00       		.string	""
 3983 05e9 00       		.string	""
 3984 05ea C000     		.string	"\300"
 3985 05ec 2000     		.string	" "
 3986 05ee 0100     		.string	"\001"
 3987 05f0 00       		.string	""
 3988 05f1 0800     		.string	"\b"
 3989 05f3 00       		.string	""
 3990 05f4 00       		.string	""
 3991 05f5 00       		.string	""
 3992 05f6 8000     		.string	"\200"
 3993 05f8 00       		.string	""
 3994 05f9 00       		.string	""
 3995 05fa 00       		.string	""
 3996 05fb 00       		.string	""
 3997 05fc 00       		.string	""
 3998 05fd 00       		.string	""
 3999 05fe 00       		.string	""
 4000 05ff 00       		.string	""
 4001              		.bss
 4002              		.align	2
 4003              		.set	.LANCHOR0,. + 0
 4006              	heap_memory:
 4007 0000 00000000 		.zero	1024
 4007      00000000 
 4007      00000000 
 4007      00000000 
 4007      00000000 
 4008              		.section	.sbss,"aw",@nobits
 4009              		.align	2
 4012              	heap_memory_used:
 4013 0000 00000000 		.zero	4
 4014              		.section	.sdata,"aw"
 4015              		.align	1
 4018              	_height:
 4019 0000 4000     		.half	64
 4022              	_width:
 4023 0002 6000     		.half	96
 4024              		.section	.srodata,"a"
 4025              		.align	2
 4028              	CSWTCH.184:
 4029 0000 00       		.byte	0
 4030 0001 01       		.byte	1
 4031 0002 01       		.byte	1
 4032 0003 00       		.zero	1
 4035              	CSWTCH.183:
 4036 0004 01       		.byte	1
 4037 0005 00       		.byte	0
 4038 0006 01       		.byte	1
 4039              		.ident	"GCC: (GNU) 11.1.0"
