   1              		.file	"main_cube3d_rotate.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              	# GNU C17 (GCC) version 11.1.0 (riscv32-unknown-elf)
   7              	#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   8              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   9              	# options passed: -march=rv32im -mabi=ilp32 -mtune=rocket -march=rv32im -O3 -fno-pic -fno-stack-pro
  10              		.text
  11              		.align	2
  13              	fb_draw_bresenham.constprop.0:
  14 0000 130101FE 		addi	sp,sp,-32	#,,
  15 0004 232A9100 		sw	s1,20(sp)	#,
  16 0008 93040500 		mv	s1,a0	# x0, tmp124
  17              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  18 000c 3305A640 		sub	a0,a2,a0	#, x1, x0
  19              	# gfx_lib.h:194: void fb_draw_bresenham(uint16_t *fb, int x0, int y0, int x1, int y1, short color)
  20 0010 232E1100 		sw	ra,28(sp)	#,
  21 0014 232C8100 		sw	s0,24(sp)	#,
  22 0018 23282101 		sw	s2,16(sp)	#,
  23 001c 13840500 		mv	s0,a1	# y0, tmp125
  24 0020 23263101 		sw	s3,12(sp)	#,
  25 0024 23244101 		sw	s4,8(sp)	#,
  26 0028 93090600 		mv	s3,a2	# x1, tmp126
  27 002c 23225101 		sw	s5,4(sp)	#,
  28              	# gfx_lib.h:194: void fb_draw_bresenham(uint16_t *fb, int x0, int y0, int x1, int y1, short color)
  29 0030 938A0600 		mv	s5,a3	# y1, tmp127
  30              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  31 0034 97000000 		call	abs		#
  31      E7800000 
  32 003c 13090500 		mv	s2,a0	# tmp128,
  33              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  34 0040 33858A40 		sub	a0,s5,s0	#, y1, y0
  35 0044 97000000 		call	abs		#
  35      E7800000 
  36              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  37 004c 33AA3401 		sgt	s4,s3,s1	# tmp112, x1, x0
  38              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  39 0050 B32E5401 		sgt	t4,s5,s0	# tmp116, y1, y0
  40              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  41 0054 131A1A00 		slli	s4,s4,1	#, iftmp.52_16, tmp112
  42              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  43 0058 939E1E00 		slli	t4,t4,1	#, iftmp.53_20, tmp116
  44              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  45 005c 37060000 		lui	a2,%hi(framebuffer)	# tmp121,
  46              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  47 0060 130AFAFF 		addi	s4,s4,-1	#, iftmp.52_16, iftmp.52_16
  48              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  49 0064 330EA040 		neg	t3,a0	# dy, _8
  50              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  51 0068 938EFEFF 		addi	t4,t4,-1	#, iftmp.53_20, iftmp.53_20
  52 006c 3307A940 		sub	a4,s2,a0	# err, dx, _8
  53 0070 1388F4FF 		addi	a6,s1,-1	#, tmp110, x0
  54              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
  55 0074 1303E005 		li	t1,94		# tmp97,
  56              	# gfx_lib.h:190:   if  ( y <= 0) return;
  57 0078 9306E003 		li	a3,62		# tmp120,
  58              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  59 007c 13060600 		addi	a2,a2,%lo(framebuffer)	# tmp122, tmp121,
  60 0080 130FF00E 		li	t5,239		# tmp123,
  61              	.L4:
  62              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  63 0084 93171400 		slli	a5,s0,1	#, tmp101, y0
  64 0088 B3878700 		add	a5,a5,s0	# y0, tmp102, tmp101
  65 008c 93975700 		slli	a5,a5,5	#, tmp103, tmp102
  66 0090 B3879700 		add	a5,a5,s1	# x0, tmp104, tmp103
  67              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  68 0094 93971700 		slli	a5,a5,1	#, tmp105, tmp104
  69              	# gfx_lib.h:205:     e2 = 2*err;
  70 0098 93151700 		slli	a1,a4,1	#, e2, err
  71              	# gfx_lib.h:190:   if  ( y <= 0) return;
  72 009c 9308F4FF 		addi	a7,s0,-1	#, tmp98, y0
  73              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  74 00a0 B387C700 		add	a5,a5,a2	# tmp122, tmp106, tmp105
  75              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
  76 00a4 63660301 		bgtu	a6,t1,.L5	#, tmp110, tmp97,
  77              	# gfx_lib.h:190:   if  ( y <= 0) return;
  78 00a8 63E41601 		bgtu	a7,a3,.L5	#, tmp98, tmp120,
  79              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
  80 00ac 2390E701 		sh	t5,0(a5)	# tmp123, *_36
  81              	.L5:
  82              	# gfx_lib.h:203:     if (x0 == x1 && y0 == y1) break;
  83 00b0 63829902 		beq	s3,s1,.L14	#, x1, x0,
  84              	.L6:
  85              	# gfx_lib.h:206:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
  86 00b4 63C8C501 		bgt	t3,a1,.L8	#, dy, e2,
  87              	# gfx_lib.h:206:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
  88 00b8 B3844401 		add	s1,s1,s4	# iftmp.52_16, x0, x0
  89 00bc 3307A740 		sub	a4,a4,a0	# err, err, _8
  90 00c0 1388F4FF 		addi	a6,s1,-1	#, tmp110, x0
  91              	.L8:
  92              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  93 00c4 E340B9FC 		blt	s2,a1,.L4	#, dx, e2,
  94              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  95 00c8 33072701 		add	a4,a4,s2	# dx, err, err
  96              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  97 00cc 3304D401 		add	s0,s0,t4	# iftmp.53_20, y0, y0
  98 00d0 6FF05FFB 		j	.L4		#
  99              	.L14:
 100              	# gfx_lib.h:203:     if (x0 == x1 && y0 == y1) break;
 101 00d4 E3908AFE 		bne	s5,s0,.L6	#, y1, y0,
 102              	# gfx_lib.h:209: }
 103 00d8 8320C101 		lw	ra,28(sp)		#,
 104 00dc 03248101 		lw	s0,24(sp)		#,
 105 00e0 83244101 		lw	s1,20(sp)		#,
 106 00e4 03290101 		lw	s2,16(sp)		#,
 107 00e8 8329C100 		lw	s3,12(sp)		#,
 108 00ec 032A8100 		lw	s4,8(sp)		#,
 109 00f0 832A4100 		lw	s5,4(sp)		#,
 110 00f4 13010102 		addi	sp,sp,32	#,,
 111 00f8 67800000 		jr	ra		#
 113              		.align	2
 114              		.globl	set_reg
 116              	set_reg:
 117              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 118 00fc 03270500 		lw	a4,0(a0)		# _1,* p
 119              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 120 0100 93071000 		li	a5,1		# tmp85,
 121 0104 B397B700 		sll	a5,a5,a1	# tmp88, _12, tmp85
 122              	# kianv_stdlib.h:42:     if (bit) {
 123 0108 63080600 		beq	a2,zero,.L16	#, tmp89,,
 124              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 125 010c B3E7E700 		or	a5,a5,a4	# _1, _5, _12
 126 0110 2320F500 		sw	a5,0(a0)	# _5,* p
 127 0114 67800000 		ret	
 128              	.L16:
 129              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 130 0118 93C7F7FF 		not	a5,a5	# tmp86, _12
 131              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 132 011c B3F7E700 		and	a5,a5,a4	# _13, _18, tmp86
 133 0120 2320F500 		sw	a5,0(a0)	# _18,* p
 134              	# kianv_stdlib.h:47: }
 135 0124 67800000 		ret	
 137              		.align	2
 138              		.globl	gpio_set_value
 140              	gpio_set_value:
 141              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 142 0128 37070030 		li	a4,805306368		# tmp86,
 143 012c 8326C701 		lw	a3,28(a4)		# _4,
 144              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 145 0130 93071000 		li	a5,1		# tmp84,
 146 0134 B397A700 		sll	a5,a5,a0	# tmp94, _19, tmp84
 147              	# kianv_stdlib.h:42:     if (bit) {
 148 0138 63880500 		beq	a1,zero,.L19	#, tmp95,,
 149              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 150 013c B3E7D700 		or	a5,a5,a3	# _4, _8, _19
 151 0140 232EF700 		sw	a5,28(a4)	# _8,
 152 0144 67800000 		ret	
 153              	.L19:
 154              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 155 0148 93C7F7FF 		not	a5,a5	# tmp91, _19
 156              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 157 014c B3F7D700 		and	a5,a5,a3	# _12, _17, tmp91
 158 0150 232EF700 		sw	a5,28(a4)	# _17,
 159              	# kianv_stdlib.h:51: }
 160 0154 67800000 		ret	
 162              		.align	2
 163              		.globl	gpio_get_input_value
 165              	gpio_get_input_value:
 166              	# kianv_stdlib.h:54:   uint32_t read = IO_IN(GPIO_INPUT);
 167 0158 B7070030 		li	a5,805306368		# tmp77,
 168 015c 83A70702 		lw	a5,32(a5)		# read, MEM[(volatile uint32_t *)805306400B]
 169              	# kianv_stdlib.h:57:   return ((read >> gpio) & 0x01);
 170 0160 33D5A700 		srl	a0,a5,a0	# tmp80, tmp79, read
 171              	# kianv_stdlib.h:58: }
 172 0164 13751500 		andi	a0,a0,1	#,, tmp79
 173 0168 67800000 		ret	
 175              		.align	2
 176              		.globl	gpio_set_direction
 178              	gpio_set_direction:
 179              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 180 016c 37070030 		li	a4,805306368		# tmp86,
 181 0170 83264701 		lw	a3,20(a4)		# _4,
 182              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 183 0174 93071000 		li	a5,1		# tmp84,
 184 0178 B397A700 		sll	a5,a5,a0	# tmp94, _19, tmp84
 185              	# kianv_stdlib.h:42:     if (bit) {
 186 017c 63880500 		beq	a1,zero,.L23	#, tmp95,,
 187              	# kianv_stdlib.h:43:       *p |=  (0x01 << (gpio & 0x1f));
 188 0180 B3E7D700 		or	a5,a5,a3	# _4, _8, _19
 189 0184 232AF700 		sw	a5,20(a4)	# _8,
 190 0188 67800000 		ret	
 191              	.L23:
 192              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 193 018c 93C7F7FF 		not	a5,a5	# tmp91, _19
 194              	# kianv_stdlib.h:45:       *p &= ~( 0x01 << (gpio & 0x1f));
 195 0190 B3F7D700 		and	a5,a5,a3	# _12, _17, tmp91
 196 0194 232AF700 		sw	a5,20(a4)	# _17,
 197              	# kianv_stdlib.h:62: }
 198 0198 67800000 		ret	
 200              		.align	2
 201              		.globl	get_cycles
 203              	get_cycles:
 204 019c 130101FF 		addi	sp,sp,-16	#,,
 205              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 206              	 #APP
 207              	# 68 "kianv_stdlib.h" 1
   1              	#include <stdint.h>
   2              	#include <math.h>
   3              	
   4              	/* kian hardware register */
   5              	#define IO_BASE 0x30000000
   6              	#define UART_TX             (volatile uint32_t *) (IO_BASE + 0x0000)
   7              	#define UART_READY          (volatile uint32_t *) (IO_BASE + 0x0000)
   8              	#define VIDEOENABLE         (volatile uint32_t *) (IO_BASE + 0x0008)
   9              	#define VIDEO               (volatile uint32_t *) (IO_BASE + 0x0008)
  10              	#define VIDEO_RAW           (volatile uint32_t *) (IO_BASE + 0x000C)
  11              	#define CPU_FREQ            (volatile uint32_t *) (IO_BASE + 0x0010)
  12              	// gpio hack stuff
  13              	#define GPIO_DIR            ( volatile uint32_t  *) (IO_BASE + 0x0014)
  14              	#define GPIO_PULLUP         ( volatile uint32_t  *) (IO_BASE + 0x0018) // not implemented
  15              	#define GPIO_OUTPUT         ( volatile uint32_t  *) (IO_BASE + 0x001C)
  16              	#define GPIO_INPUT          ( volatile uint32_t  *) (IO_BASE + 0x0020)
  17              	#define IO_OUT(reg, value) *((volatile uint32_t  *) (reg)) = (value)
  18              	#define IO_IN(reg)         *((volatile uint32_t  *) reg)
  19              	
  20              	#define GPIO_INPUT_PIN  0
  21              	#define GPIO_OUTPUT_PIN 1
  22              	//#define RV32_FASTCODE __attribute((section(".fastcode")))
  23              	#define RV32_FASTCODE
  24              	
  25              	//__attribute((section(".fastcode")))
  26              	
  27              	#define RED   "\x1B[31m"
  28              	#define GRN   "\x1B[32m"
  29              	#define YEL   "\x1B[33m"
  30              	#define BLU   "\x1B[34m"
  31              	#define MAG   "\x1B[35m"
  32              	#define CYN   "\x1B[36m"
  33              	#define WHT   "\x1B[37m"
  34              	#define RESET "\x1B[0m"
  35              	
  36              	#define CLS       "\x1B[2J"
  37              	#define BOLD      "\x1B[1m"
  38              	#define BLINK     "\x1B[5m"
  39              	#define BLINK_OFF "\x1B[25m"
  40              	
  41              	void set_reg(volatile uint32_t *p, int gpio, int bit) {
  42              	    if (bit) {
  43              	      *p |=  (0x01 << (gpio & 0x1f));
  44              	    } else {
  45              	      *p &= ~( 0x01 << (gpio & 0x1f));
  46              	    }
  47              	}
  48              	
  49              	void gpio_set_value(int gpio, int bit) {
  50              	    set_reg(GPIO_OUTPUT, gpio, bit);
  51              	}
  52              	
  53              	uint32_t gpio_get_input_value(int gpio) {
  54              	  uint32_t read = IO_IN(GPIO_INPUT);
  55              	
  56              	  //  return ((read & (1<<gpio)) >> gpio);
  57              	  return ((read >> gpio) & 0x01);
  58              	}
  59              	
  60              	void gpio_set_direction(int gpio, int bit) {
  61              	    set_reg(GPIO_DIR, gpio, bit);
  62              	}
  63              	
  64              	uint64_t get_cycles() {
  65              	  volatile uint32_t tmph0;
  66              	  volatile uint32_t tmpl0;
  67              	
  68 01a0 F32700C8 	  asm volatile ("rdcycleh %0" : "=r"(tmph0));
  69              	  asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 208              		rdcycleh a5	# tmp78
 209              	# 0 "" 2
 210              	 #NO_APP
 211 01a4 2324F100 		sw	a5,8(sp)	# tmp78, tmph0
 212              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 213              	 #APP
 214              	# 69 "kianv_stdlib.h" 1
  70              	
 215              		rdcycle  a5	# tmp79
 216              	# 0 "" 2
 217              	 #NO_APP
 218 01ac 2326F100 		sw	a5,12(sp)	# tmp79, tmpl0
 219              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 220 01b0 83258100 		lw	a1,8(sp)		# tmph0.0_1, tmph0
 221              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 222 01b4 0325C100 		lw	a0,12(sp)		# tmpl0.1_4, tmpl0
 223              	# kianv_stdlib.h:73: }
 224 01b8 13010101 		addi	sp,sp,16	#,,
 225 01bc 67800000 		jr	ra		#
 227              		.align	2
 228              		.globl	wait_cycles
 230              	wait_cycles:
 231 01c0 130101FF 		addi	sp,sp,-16	#,,
 232              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 233              	 #APP
 234              	# 68 "kianv_stdlib.h" 1
 235              		rdcycleh a5	# tmp86
 236              	# 0 "" 2
 237              	 #NO_APP
 238 01c8 2320F100 		sw	a5,0(sp)	# tmp86, tmph0
 239              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 240              	 #APP
 241              	# 69 "kianv_stdlib.h" 1
 242              		rdcycle  a5	# tmp87
 243              	# 0 "" 2
 244              	 #NO_APP
 245 01d0 2322F100 		sw	a5,4(sp)	# tmp87, tmpl0
 246              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 247 01d4 83270100 		lw	a5,0(sp)		# tmph0.0_5, tmph0
 248              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 249 01d8 03264100 		lw	a2,4(sp)		# tmpl0.1_8, tmpl0
 250              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 251 01dc B387B700 		add	a5,a5,a1	# wait, tmp126, tmph0.0_5
 252 01e0 3306C500 		add	a2,a0,a2	# tmpl0.1_8, tmp129, wait
 253 01e4 3335A600 		sltu	a0,a2,a0	# wait, tmp98, tmp129
 254 01e8 3307F500 		add	a4,a0,a5	# tmp126, tmp100, tmp98
 255              	.L30:
 256              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 257              	 #APP
 258              	# 68 "kianv_stdlib.h" 1
 259              		rdcycleh a5	# tmp101
 260              	# 0 "" 2
 261              	 #NO_APP
 262 01f0 2324F100 		sw	a5,8(sp)	# tmp101, tmph0
 263              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 264              	 #APP
 265              	# 69 "kianv_stdlib.h" 1
 266              		rdcycle  a5	# tmp102
 267              	# 0 "" 2
 268              	 #NO_APP
 269 01f8 2326F100 		sw	a5,12(sp)	# tmp102, tmpl0
 270              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 271 01fc 83278100 		lw	a5,8(sp)		# tmph0.0_11, tmph0
 272              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 273 0200 8326C100 		lw	a3,12(sp)		# tmpl0.1_14, tmpl0
 274              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 275 0204 E3E4E7FE 		bgtu	a4,a5,.L30	#, tmp100, tmph0.0_11,
 276 0208 6314F700 		bne	a4,a5,.L27	#, tmp100, tmph0.0_11,
 277 020c E3E0C6FE 		bgtu	a2,a3,.L30	#, tmp129, tmpl0.1_14,
 278              	.L27:
 279              	# kianv_stdlib.h:83: }
 280 0210 13010101 		addi	sp,sp,16	#,,
 281 0214 67800000 		jr	ra		#
 283              		.align	2
 284              		.globl	usleep
 286              	usleep:
 287              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 288 0218 63080506 		beq	a0,zero,.L41	#, us,,
 289              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 290 021c B7070030 		li	a5,805306368		# tmp91,
 291              	# kianv_stdlib.h:85: void usleep(uint32_t us) {
 292 0220 130101FF 		addi	sp,sp,-16	#,,
 293              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 294 0224 83A70701 		lw	a5,16(a5)		# _20, MEM[(volatile uint32_t *)805306384B]
 295              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 296              	 #APP
 297              	# 68 "kianv_stdlib.h" 1
 298              		rdcycleh a4	# tmp92
 299              	# 0 "" 2
 300              	 #NO_APP
 301 022c 2324E100 		sw	a4,8(sp)	# tmp92, tmph0
 302              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 303              	 #APP
 304              	# 69 "kianv_stdlib.h" 1
 305              		rdcycle  a3	# tmp93
 306              	# 0 "" 2
 307              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 308              	 #NO_APP
 309 0234 37470F00 		li	a4,999424		# tmp97,
 310 0238 13070724 		addi	a4,a4,576	#, tmp96, tmp97
 311 023c B3D7E702 		divu	a5,a5,a4	# tmp96, tmp95, _20
 312              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 313 0240 2326D100 		sw	a3,12(sp)	# tmp93, tmpl0
 314              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 315 0244 03278100 		lw	a4,8(sp)		# tmph0.0_7, tmph0
 316              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 317 0248 0326C100 		lw	a2,12(sp)		# tmpl0.1_10, tmpl0
 318              	# kianv_stdlib.h:86:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 319 024c B387A702 		mul	a5,a5,a0	# tmp98, tmp95, us
 320              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 321 0250 3386C700 		add	a2,a5,a2	# tmpl0.1_10, tmp141, tmp98
 322 0254 B337F600 		sltu	a5,a2,a5	# tmp98, tmp110, tmp141
 323 0258 B387E700 		add	a5,a5,a4	# tmph0.0_7, tmp112, tmp110
 324              	.L38:
 325              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 326              	 #APP
 327              	# 68 "kianv_stdlib.h" 1
 328              		rdcycleh a4	# tmp113
 329              	# 0 "" 2
 330              	 #NO_APP
 331 0260 2320E100 		sw	a4,0(sp)	# tmp113, tmph0
 332              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 333              	 #APP
 334              	# 69 "kianv_stdlib.h" 1
 335              		rdcycle  a4	# tmp114
 336              	# 0 "" 2
 337              	 #NO_APP
 338 0268 2322E100 		sw	a4,4(sp)	# tmp114, tmpl0
 339              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 340 026c 03270100 		lw	a4,0(sp)		# tmph0.0_14, tmph0
 341              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 342 0270 83264100 		lw	a3,4(sp)		# tmpl0.1_17, tmpl0
 343              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 344 0274 E364F7FE 		bgtu	a5,a4,.L38	#, tmp112, tmph0.0_14,
 345 0278 6394E700 		bne	a5,a4,.L32	#, tmp112, tmph0.0_14,
 346 027c E3E0C6FE 		bgtu	a2,a3,.L38	#, tmp141, tmpl0.1_17,
 347              	.L32:
 348              	# kianv_stdlib.h:87: }
 349 0280 13010101 		addi	sp,sp,16	#,,
 350 0284 67800000 		jr	ra		#
 351              	.L41:
 352 0288 67800000 		ret	
 354              		.align	2
 355              		.globl	msleep
 357              	msleep:
 358              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 359 028c 63060506 		beq	a0,zero,.L53	#, ms,,
 360              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 361 0290 B7070030 		li	a5,805306368		# tmp91,
 362              	# kianv_stdlib.h:89: void msleep(uint32_t ms) {
 363 0294 130101FF 		addi	sp,sp,-16	#,,
 364              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 365 0298 83A70701 		lw	a5,16(a5)		# _20, MEM[(volatile uint32_t *)805306384B]
 366              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 367              	 #APP
 368              	# 68 "kianv_stdlib.h" 1
 369              		rdcycleh a4	# tmp92
 370              	# 0 "" 2
 371              	 #NO_APP
 372 02a0 2324E100 		sw	a4,8(sp)	# tmp92, tmph0
 373              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 374              	 #APP
 375              	# 69 "kianv_stdlib.h" 1
 376              		rdcycle  a4	# tmp93
 377              	# 0 "" 2
 378              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 379              	 #NO_APP
 380 02a8 9306803E 		li	a3,1000		# tmp95,
 381 02ac B3D7D702 		divu	a5,a5,a3	# tmp95, tmp96, _20
 382              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 383 02b0 2326E100 		sw	a4,12(sp)	# tmp93, tmpl0
 384              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 385 02b4 03278100 		lw	a4,8(sp)		# tmph0.0_7, tmph0
 386              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 387 02b8 0326C100 		lw	a2,12(sp)		# tmpl0.1_10, tmpl0
 388              	# kianv_stdlib.h:90:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 389 02bc B387A702 		mul	a5,a5,a0	# tmp97, tmp96, ms
 390              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 391 02c0 3386C700 		add	a2,a5,a2	# tmpl0.1_10, tmp140, tmp97
 392 02c4 B337F600 		sltu	a5,a2,a5	# tmp97, tmp109, tmp140
 393 02c8 B387E700 		add	a5,a5,a4	# tmph0.0_7, tmp111, tmp109
 394              	.L50:
 395              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 396              	 #APP
 397              	# 68 "kianv_stdlib.h" 1
 398              		rdcycleh a4	# tmp112
 399              	# 0 "" 2
 400              	 #NO_APP
 401 02d0 2320E100 		sw	a4,0(sp)	# tmp112, tmph0
 402              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 403              	 #APP
 404              	# 69 "kianv_stdlib.h" 1
 405              		rdcycle  a4	# tmp113
 406              	# 0 "" 2
 407              	 #NO_APP
 408 02d8 2322E100 		sw	a4,4(sp)	# tmp113, tmpl0
 409              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 410 02dc 03270100 		lw	a4,0(sp)		# tmph0.0_14, tmph0
 411              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 412 02e0 83264100 		lw	a3,4(sp)		# tmpl0.1_17, tmpl0
 413              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 414 02e4 E364F7FE 		bgtu	a5,a4,.L50	#, tmp111, tmph0.0_14,
 415 02e8 6394E700 		bne	a5,a4,.L44	#, tmp111, tmph0.0_14,
 416 02ec E3E0C6FE 		bgtu	a2,a3,.L50	#, tmp140, tmpl0.1_17,
 417              	.L44:
 418              	# kianv_stdlib.h:91: }
 419 02f0 13010101 		addi	sp,sp,16	#,,
 420 02f4 67800000 		jr	ra		#
 421              	.L53:
 422 02f8 67800000 		ret	
 424              		.align	2
 425              		.globl	sleep
 427              	sleep:
 428              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 429 02fc 63020506 		beq	a0,zero,.L65	#, sec,,
 430              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 431 0300 B7070030 		li	a5,805306368		# tmp90,
 432              	# kianv_stdlib.h:93: void sleep(uint32_t sec) {
 433 0304 130101FF 		addi	sp,sp,-16	#,,
 434              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 435 0308 03A70701 		lw	a4,16(a5)		# _19, MEM[(volatile uint32_t *)805306384B]
 436              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 437              	 #APP
 438              	# 68 "kianv_stdlib.h" 1
 439              		rdcycleh a5	# tmp91
 440              	# 0 "" 2
 441              	 #NO_APP
 442 0310 2324F100 		sw	a5,8(sp)	# tmp91, tmph0
 443              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 444              	 #APP
 445              	# 69 "kianv_stdlib.h" 1
 446              		rdcycle  a5	# tmp92
 447              	# 0 "" 2
 448              	# kianv_stdlib.h:94:   if (sec) wait_cycles(sec * get_cpu_freq());
 449              	 #NO_APP
 450 0318 3305E502 		mul	a0,a0,a4	# tmp101, sec, _19
 451              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 452 031c 2326F100 		sw	a5,12(sp)	# tmp92, tmpl0
 453              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 454 0320 83278100 		lw	a5,8(sp)		# tmph0.0_6, tmph0
 455              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 456 0324 0327C100 		lw	a4,12(sp)		# tmpl0.1_9, tmpl0
 457              	# kianv_stdlib.h:80:   uint64_t lim = get_cycles() + wait;
 458 0328 3305A700 		add	a0,a4,a0	# tmp101, tmp136, tmpl0.1_9
 459 032c 3337E500 		sltu	a4,a0,a4	# tmpl0.1_9, tmp105, tmp136
 460 0330 3307F700 		add	a4,a4,a5	# tmph0.0_6, tmp107, tmp105
 461              	.L62:
 462              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 463              	 #APP
 464              	# 68 "kianv_stdlib.h" 1
 465              		rdcycleh a5	# tmp108
 466              	# 0 "" 2
 467              	 #NO_APP
 468 0338 2320F100 		sw	a5,0(sp)	# tmp108, tmph0
 469              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 470              	 #APP
 471              	# 69 "kianv_stdlib.h" 1
 472              		rdcycle  a5	# tmp109
 473              	# 0 "" 2
 474              	 #NO_APP
 475 0340 2322F100 		sw	a5,4(sp)	# tmp109, tmpl0
 476              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 477 0344 83270100 		lw	a5,0(sp)		# tmph0.0_13, tmph0
 478              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 479 0348 83264100 		lw	a3,4(sp)		# tmpl0.1_16, tmpl0
 480              	# kianv_stdlib.h:81:   while (get_cycles() < lim)
 481 034c E3E4E7FE 		bgtu	a4,a5,.L62	#, tmp107, tmph0.0_13,
 482 0350 6314F700 		bne	a4,a5,.L56	#, tmp107, tmph0.0_13,
 483 0354 E3E0A6FE 		bgtu	a0,a3,.L62	#, tmp136, tmpl0.1_16,
 484              	.L56:
 485              	# kianv_stdlib.h:95: }
 486 0358 13010101 		addi	sp,sp,16	#,,
 487 035c 67800000 		jr	ra		#
 488              	.L65:
 489 0360 67800000 		ret	
 491              		.globl	__udivdi3
 492              		.align	2
 493              		.globl	nanoseconds
 495              	nanoseconds:
 496 0364 130101FE 		addi	sp,sp,-32	#,,
 497 0368 232E1100 		sw	ra,28(sp)	#,
 498              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 499              	 #APP
 500              	# 68 "kianv_stdlib.h" 1
 501              		rdcycleh a5	# tmp82
 502              	# 0 "" 2
 503              	 #NO_APP
 504 0370 2324F100 		sw	a5,8(sp)	# tmp82, tmph0
 505              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 506              	 #APP
 507              	# 69 "kianv_stdlib.h" 1
 508              		rdcycle  a5	# tmp83
 509              	# 0 "" 2
 510              	 #NO_APP
 511 0378 2326F100 		sw	a5,12(sp)	# tmp83, tmpl0
 512              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 513 037c B7070030 		li	a5,805306368		# tmp85,
 514              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 515 0380 83258100 		lw	a1,8(sp)		# tmph0.0_6, tmph0
 516              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 517 0384 0325C100 		lw	a0,12(sp)		# tmpl0.1_9, tmpl0
 518              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 519 0388 03A60701 		lw	a2,16(a5)		# _5, MEM[(volatile uint32_t *)805306384B]
 520              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 521 038c B7470F00 		li	a5,999424		# tmp98,
 522 0390 93870724 		addi	a5,a5,576	#, tmp97, tmp98
 523              	# kianv_stdlib.h:98:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 524 0394 3356F602 		divu	a2,a2,a5	# tmp97,, _5
 525 0398 93060000 		li	a3,0		#,
 526 039c 97000000 		call	__udivdi3		#
 526      E7800000 
 527              	# kianv_stdlib.h:99: }
 528 03a4 8320C101 		lw	ra,28(sp)		#,
 529 03a8 13010102 		addi	sp,sp,32	#,,
 530 03ac 67800000 		jr	ra		#
 532              		.align	2
 533              		.globl	milliseconds
 535              	milliseconds:
 536 03b0 130101FE 		addi	sp,sp,-32	#,,
 537 03b4 232E1100 		sw	ra,28(sp)	#,
 538              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 539              	 #APP
 540              	# 68 "kianv_stdlib.h" 1
 541              		rdcycleh a5	# tmp82
 542              	# 0 "" 2
 543              	 #NO_APP
 544 03bc 2324F100 		sw	a5,8(sp)	# tmp82, tmph0
 545              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 546              	 #APP
 547              	# 69 "kianv_stdlib.h" 1
 548              		rdcycle  a5	# tmp83
 549              	# 0 "" 2
 550              	 #NO_APP
 551 03c4 2326F100 		sw	a5,12(sp)	# tmp83, tmpl0
 552              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 553 03c8 B7070030 		li	a5,805306368		# tmp85,
 554              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 555 03cc 83258100 		lw	a1,8(sp)		# tmph0.0_6, tmph0
 556              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 557 03d0 0325C100 		lw	a0,12(sp)		# tmpl0.1_9, tmpl0
 558              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 559 03d4 03A60701 		lw	a2,16(a5)		# _5, MEM[(volatile uint32_t *)805306384B]
 560              	# kianv_stdlib.h:102:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 561 03d8 9307803E 		li	a5,1000		# tmp96,
 562 03dc 93060000 		li	a3,0		#,
 563 03e0 3356F602 		divu	a2,a2,a5	# tmp96,, _5
 564 03e4 97000000 		call	__udivdi3		#
 564      E7800000 
 565              	# kianv_stdlib.h:103: }
 566 03ec 8320C101 		lw	ra,28(sp)		#,
 567 03f0 13010102 		addi	sp,sp,32	#,,
 568 03f4 67800000 		jr	ra		#
 570              		.align	2
 571              		.globl	seconds
 573              	seconds:
 574 03f8 130101FE 		addi	sp,sp,-32	#,,
 575 03fc 232E1100 		sw	ra,28(sp)	#,
 576              	# kianv_stdlib.h:68:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 577              	 #APP
 578              	# 68 "kianv_stdlib.h" 1
 579              		rdcycleh a5	# tmp81
 580              	# 0 "" 2
 581              	 #NO_APP
 582 0404 2324F100 		sw	a5,8(sp)	# tmp81, tmph0
 583              	# kianv_stdlib.h:69:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 584              	 #APP
 585              	# 69 "kianv_stdlib.h" 1
 586              		rdcycle  a5	# tmp82
 587              	# 0 "" 2
 588              	 #NO_APP
 589 040c 2326F100 		sw	a5,12(sp)	# tmp82, tmpl0
 590              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 591 0410 B7070030 		li	a5,805306368		# tmp84,
 592              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 593 0414 83258100 		lw	a1,8(sp)		# tmph0.0_5, tmph0
 594              	# kianv_stdlib.h:71:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 595 0418 0325C100 		lw	a0,12(sp)		# tmpl0.1_8, tmpl0
 596              	# kianv_stdlib.h:76:   return *((volatile uint32_t*) CPU_FREQ);
 597 041c 03A60701 		lw	a2,16(a5)		# _4, MEM[(volatile uint32_t *)805306384B]
 598              	# kianv_stdlib.h:106:   return get_cycles() / (uint64_t) (get_cpu_freq());
 599 0420 93060000 		li	a3,0		#,
 600 0424 97000000 		call	__udivdi3		#
 600      E7800000 
 601              	# kianv_stdlib.h:107: }
 602 042c 8320C101 		lw	ra,28(sp)		#,
 603 0430 13010102 		addi	sp,sp,32	#,,
 604 0434 67800000 		jr	ra		#
 606              		.align	2
 607              		.globl	putchar
 609              	putchar:
 610              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 611 0438 37070030 		li	a4,805306368		# tmp75,
 612              	.L75:
 613              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 614 043c 83270700 		lw	a5,0(a4)		# _1, MEM[(volatile uint32_t *)805306368B]
 615              	# kianv_stdlib.h:110:   while (!*((volatile uint32_t*) UART_READY))
 616 0440 E38E07FE 		beq	a5,zero,.L75	#, _1,,
 617              	# kianv_stdlib.h:112:   *((volatile uint32_t*) UART_TX) = c;
 618 0444 2320A700 		sw	a0,0(a4)	# c, MEM[(volatile uint32_t *)805306368B]
 619              	# kianv_stdlib.h:113: }
 620 0448 67800000 		ret	
 622              		.align	2
 623              		.globl	print_chr
 625              	print_chr:
 626 044c 37070030 		li	a4,805306368		# tmp75,
 627              	.L79:
 628 0450 83270700 		lw	a5,0(a4)		# _4, MEM[(volatile uint32_t *)805306368B]
 629 0454 E38E07FE 		beq	a5,zero,.L79	#, _4,,
 630 0458 2320A700 		sw	a0,0(a4)	# ch, MEM[(volatile uint32_t *)805306368B]
 631 045c 67800000 		ret	
 633              		.align	2
 634              		.globl	print_str
 636              	print_str:
 637              	# kianv_stdlib.h:122:   while (*p != 0) {
 638 0460 83460500 		lbu	a3,0(a0)	# _3, *p_6(D)
 639              	# kianv_stdlib.h:122:   while (*p != 0) {
 640 0464 63800602 		beq	a3,zero,.L82	#, _3,,
 641              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 642 0468 37070030 		li	a4,805306368		# tmp76,
 643              	.L84:
 644              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 645 046c 83270700 		lw	a5,0(a4)		# _1, MEM[(volatile uint32_t *)805306368B]
 646              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 647 0470 E38E07FE 		beq	a5,zero,.L84	#, _1,,
 648              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 649 0474 13051500 		addi	a0,a0,1	#, p, p
 650              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 651 0478 2320D700 		sw	a3,0(a4)	# _3, MEM[(volatile uint32_t *)805306368B]
 652              	# kianv_stdlib.h:122:   while (*p != 0) {
 653 047c 83460500 		lbu	a3,0(a0)	# _3, MEM[(char *)p_8]
 654              	# kianv_stdlib.h:122:   while (*p != 0) {
 655 0480 E39606FE 		bne	a3,zero,.L84	#, _3,,
 656              	.L82:
 657              	# kianv_stdlib.h:127: }
 658 0484 67800000 		ret	
 660              		.align	2
 661              		.globl	print_str_ln
 663              	print_str_ln:
 664              	# kianv_stdlib.h:122:   while (*p != 0) {
 665 0488 83460500 		lbu	a3,0(a0)	# _7, *p_2(D)
 666              	# kianv_stdlib.h:122:   while (*p != 0) {
 667 048c 63800602 		beq	a3,zero,.L93	#, _7,,
 668              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 669 0490 37070030 		li	a4,805306368		# tmp77,
 670              	.L94:
 671 0494 83270700 		lw	a5,0(a4)		# _4, MEM[(volatile uint32_t *)805306368B]
 672              	# kianv_stdlib.h:123:     while (!*((volatile uint32_t*) UART_READY))
 673 0498 E38E07FE 		beq	a5,zero,.L94	#, _4,,
 674              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 675 049c 13051500 		addi	a0,a0,1	#, p, p
 676              	# kianv_stdlib.h:125:     *((volatile uint32_t*) UART_TX) = *(p++);
 677 04a0 2320D700 		sw	a3,0(a4)	# _7, MEM[(volatile uint32_t *)805306368B]
 678              	# kianv_stdlib.h:122:   while (*p != 0) {
 679 04a4 83460500 		lbu	a3,0(a0)	# _7, MEM[(char *)p_6]
 680              	# kianv_stdlib.h:122:   while (*p != 0) {
 681 04a8 E39606FE 		bne	a3,zero,.L94	#, _7,,
 682              	.L93:
 683              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 684 04ac 37070030 		li	a4,805306368		# tmp79,
 685              	.L96:
 686 04b0 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 687              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 688 04b4 E38E07FE 		beq	a5,zero,.L96	#, _3,,
 689              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 690 04b8 9307A000 		li	a5,10		# tmp81,
 691 04bc 2320F700 		sw	a5,0(a4)	# tmp81, MEM[(volatile uint32_t *)805306368B]
 692              	# kianv_stdlib.h:131: }
 693 04c0 67800000 		ret	
 695              		.align	2
 696              		.globl	print_dec
 698              	print_dec:
 699 04c4 130101FF 		addi	sp,sp,-16	#,,
 700              	# kianv_stdlib.h:135:   char *p = buffer;
 701 04c8 13064100 		addi	a2,sp,4	#, tmp92,
 702 04cc 13070600 		mv	a4,a2	# p, tmp92
 703              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 704 04d0 9307A000 		li	a5,10		# tmp93,
 705              	.L106:
 706              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 707 04d4 63140500 		bne	a0,zero,.L107	#, val,,
 708              	# kianv_stdlib.h:136:   while (val || p == buffer) {
 709 04d8 631CC700 		bne	a4,a2,.L114	#, p, tmp92,
 710              	.L107:
 711              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 712 04dc B376F502 		remu	a3,a0,a5	# tmp93, tmp83, val
 713              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 714 04e0 13071700 		addi	a4,a4,1	#, p, p
 715              	# kianv_stdlib.h:138:     val = val / 10;
 716 04e4 3355F502 		divu	a0,a0,a5	# tmp93, val, val
 717              	# kianv_stdlib.h:137:     *(p++) = val % 10;
 718 04e8 A30FD7FE 		sb	a3,-1(a4)	# tmp83, MEM[(char *)p_18 + 4294967295B]
 719 04ec 6FF09FFE 		j	.L106		#
 720              	.L114:
 721              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 722 04f0 B7060030 		li	a3,805306368		# tmp88,
 723              	.L108:
 724              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 725 04f4 83A70600 		lw	a5,0(a3)		# _3, MEM[(volatile uint32_t *)805306368B]
 726              	# kianv_stdlib.h:142:     while (!*((volatile uint32_t*) UART_READY))
 727 04f8 E38E07FE 		beq	a5,zero,.L108	#, _3,,
 728              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 729 04fc 8347F7FF 		lbu	a5,-1(a4)	# MEM[(char *)p_16], MEM[(char *)p_16]
 730              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 731 0500 1307F7FF 		addi	a4,a4,-1	#, p, p
 732              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 733 0504 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 734              	# kianv_stdlib.h:144:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 735 0508 23A0F600 		sw	a5,0(a3)	# _7, MEM[(volatile uint32_t *)805306368B]
 736              	# kianv_stdlib.h:141:   while (p != buffer) {
 737 050c E314C7FE 		bne	a4,a2,.L108	#, p, tmp92,
 738              	# kianv_stdlib.h:146: }
 739 0510 13010101 		addi	sp,sp,16	#,,
 740 0514 67800000 		jr	ra		#
 742              		.align	2
 743              		.globl	print_dec64
 745              	print_dec64:
 746 0518 130101FE 		addi	sp,sp,-32	#,,
 747              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 748 051c B7DECCCC 		li	t4,-858992640		# tmp258,
 749              	# kianv_stdlib.h:150:   char *p = buffer;
 750 0520 130EC100 		addi	t3,sp,12	#, tmp254,
 751              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 752 0524 37030010 		li	t1,268435456		# tmp255,
 753 0528 9388DECC 		addi	a7,t4,-819	#, tmp259, tmp258
 754              	# kianv_stdlib.h:148: void print_dec64(uint64_t val) {
 755 052c 13070500 		mv	a4,a0	# val, tmp261
 756 0530 13880500 		mv	a6,a1	# val, tmp262
 757              	# kianv_stdlib.h:150:   char *p = buffer;
 758 0534 13060E00 		mv	a2,t3	# p, tmp254
 759              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 760 0538 1303F3FF 		addi	t1,t1,-1	#, tmp256, tmp255
 761 053c 130F5000 		li	t5,5		# tmp257,
 762 0540 938ECECC 		addi	t4,t4,-820	#, tmp260, tmp258
 763              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 764 0544 6F008005 		j	.L116		#
 765              	.L117:
 766              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 767 0548 B3F7E703 		remu	a5,a5,t5	# tmp257, tmp97, tmp94
 768              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 769 054c 13061600 		addi	a2,a2,1	#, p, p
 770              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 771 0550 B307F740 		sub	a5,a4,a5	# tmp214, val, tmp97
 772 0554 B335F700 		sgtu	a1,a5,a4	# tmp101, tmp214, val
 773 0558 B305B840 		sub	a1,a6,a1	# tmp103, val, tmp101
 774 055c 3385D703 		mul	a0,a5,t4	# tmp107, tmp214, tmp260
 775 0560 B3851503 		mul	a1,a1,a7	# tmp104, tmp103, tmp259
 776 0564 B3B61703 		mulhu	a3,a5,a7	# tmp217, tmp214, tmp259
 777 0568 B385A500 		add	a1,a1,a0	# tmp107, tmp110, tmp104
 778 056c B3871703 		mul	a5,a5,a7	# tmp114, tmp214, tmp259
 779 0570 B385D500 		add	a1,a1,a3	# tmp217, tmp115, tmp110
 780 0574 9396F501 		slli	a3,a1,31	#, tmp133, tmp115
 781              	# kianv_stdlib.h:153:     val = val / 10;
 782 0578 13D81500 		srli	a6,a1,1	#, val, tmp115
 783              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 784 057c 93D71700 		srli	a5,a5,1	#, tmp224, tmp114
 785 0580 B3E7F600 		or	a5,a3,a5	# tmp224, tmp224, tmp133
 786 0584 13952700 		slli	a0,a5,2	#, tmp228, tmp224
 787 0588 3305F500 		add	a0,a0,a5	# tmp224, tmp230, tmp228
 788 058c 13151500 		slli	a0,a0,1	#, tmp232, tmp230
 789 0590 3305A740 		sub	a0,a4,a0	# tmp234, val, tmp232
 790              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 791 0594 A30FA6FE 		sb	a0,-1(a2)	# tmp234, MEM[(char *)p_18 + 4294967295B]
 792              	# kianv_stdlib.h:153:     val = val / 10;
 793 0598 13870700 		mv	a4,a5	# val, tmp224
 794              	.L116:
 795              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 796 059c 93174800 		slli	a5,a6,4	#, tmp88, val
 797 05a0 9356C701 		srli	a3,a4,28	#, tmp208, val
 798 05a4 B3E6D700 		or	a3,a5,a3	# tmp208, tmp208, tmp88
 799 05a8 B3F66600 		and	a3,a3,t1	# tmp256, tmp89, tmp208
 800 05ac B3776700 		and	a5,a4,t1	# tmp256, tmp84, val
 801 05b0 B387D700 		add	a5,a5,a3	# tmp89, tmp92, tmp84
 802 05b4 93558801 		srli	a1,a6,24	#, tmp210, val
 803              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 804 05b8 B3660701 		or	a3,a4,a6	# val, val, val
 805              	# kianv_stdlib.h:152:     *(p++) = val % 10;
 806 05bc B387B700 		add	a5,a5,a1	# tmp210, tmp94, tmp92
 807              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 808 05c0 E39406F8 		bne	a3,zero,.L117	#, val,,
 809              	# kianv_stdlib.h:151:   while (val || p == buffer) {
 810 05c4 E302C6F9 		beq	a2,t3,.L117	#, p, tmp254,
 811              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 812 05c8 37070030 		li	a4,805306368		# tmp202,
 813              	.L118:
 814              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 815 05cc 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 816              	# kianv_stdlib.h:157:     while (!*((volatile uint32_t*) UART_READY))
 817 05d0 E38E07FE 		beq	a5,zero,.L118	#, _3,,
 818              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 819 05d4 8347F6FF 		lbu	a5,-1(a2)	# MEM[(char *)p_16], MEM[(char *)p_16]
 820              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 821 05d8 1306F6FF 		addi	a2,a2,-1	#, p, p
 822              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 823 05dc 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 824              	# kianv_stdlib.h:159:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 825 05e0 2320F700 		sw	a5,0(a4)	# _7, MEM[(volatile uint32_t *)805306368B]
 826              	# kianv_stdlib.h:156:   while (p != buffer) {
 827 05e4 E314C6FF 		bne	a2,t3,.L118	#, p, tmp254,
 828              	# kianv_stdlib.h:161: }
 829 05e8 13010102 		addi	sp,sp,32	#,,
 830 05ec 67800000 		jr	ra		#
 832              		.section	.rodata.str1.4,"aMS",@progbits,1
 833              		.align	2
 834              	.LC0:
 835 0000 30313233 		.string	"0123456789ABCDEF"
 835      34353637 
 835      38394142 
 835      43444546 
 835      00
 836              		.text
 837              		.align	2
 838              		.globl	print_hex
 840              	print_hex:
 841              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 842 05f0 9386F5FF 		addi	a3,a1,-1	#, tmp85, tmp98
 843              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 844 05f4 93962600 		slli	a3,a3,2	#, i, tmp85
 845              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 846 05f8 63CC0602 		blt	a3,zero,.L124	#, i,,
 847 05fc 37060000 		lui	a2,%hi(.LC0)	# tmp95,
 848 0600 9305C0FF 		li	a1,-4		# _8,
 849 0604 13060600 		addi	a2,a2,%lo(.LC0)	# tmp94, tmp95,
 850              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 851 0608 37070030 		li	a4,805306368		# tmp87,
 852              	.L126:
 853              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 854 060c 83270700 		lw	a5,0(a4)		# _2, MEM[(volatile uint32_t *)805306368B]
 855              	# kianv_stdlib.h:165:     while (!*((volatile uint32_t*) UART_READY))
 856 0610 E38E07FE 		beq	a5,zero,.L126	#, _2,,
 857              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 858 0614 B357D500 		srl	a5,a0,a3	# i, tmp90, val
 859              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 860 0618 93F7F700 		andi	a5,a5,15	#, tmp91, tmp90
 861              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 862 061c B307F600 		add	a5,a2,a5	# tmp91, tmp92, tmp94
 863 0620 83C70700 		lbu	a5,0(a5)	# _6, "0123456789ABCDEF"[_4]
 864              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 865 0624 9386C6FF 		addi	a3,a3,-4	#, i, i
 866              	# kianv_stdlib.h:167:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 867 0628 2320F700 		sw	a5,0(a4)	# _6, MEM[(volatile uint32_t *)805306368B]
 868              	# kianv_stdlib.h:164:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 869 062c E390D5FE 		bne	a1,a3,.L126	#, _8, i,
 870              	.L124:
 871              	# kianv_stdlib.h:169: }
 872 0630 67800000 		ret	
 874              		.align	2
 875              		.globl	setpixel
 877              	setpixel:
 878              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 879 0634 B7070100 		li	a5,65536		# tmp88,
 880 0638 9387F7FF 		addi	a5,a5,-1	#, tmp87, tmp88
 881 063c 93958500 		slli	a1,a1,8	#, tmp85, tmp94
 882 0640 B3F5F500 		and	a1,a1,a5	# tmp87, tmp86, tmp85
 883              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 884 0644 93960601 		slli	a3,a3,16	#, tmp89, tmp96
 885              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 886 0648 B3E5D500 		or	a1,a1,a3	# tmp89, tmp90, tmp86
 887              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 888 064c 1376F60F 		andi	a2,a2,0xff	# tmp91, tmp95
 889              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 890 0650 B3E5C500 		or	a1,a1,a2	# tmp91, _9, tmp90
 891              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 892 0654 B7070030 		li	a5,805306368		# tmp93,
 893 0658 23A4B700 		sw	a1,8(a5)	# _9, MEM[(volatile uint32_t *)805306376B]
 894              	# kianv_stdlib.h:184: }
 895 065c 67800000 		ret	
 897              		.align	2
 898              		.globl	draw_bresenham
 900              	draw_bresenham:
 901 0660 130101FE 		addi	sp,sp,-32	#,,
 902              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 903 0664 3385B640 		sub	a0,a3,a1	#, x1, x0
 904              	# kianv_stdlib.h:187: {
 905 0668 232E1100 		sw	ra,28(sp)	#,
 906 066c 232C8100 		sw	s0,24(sp)	#,
 907 0670 232A9100 		sw	s1,20(sp)	#,
 908 0674 13840500 		mv	s0,a1	# x0, tmp114
 909 0678 93040600 		mv	s1,a2	# y0, tmp115
 910 067c 23282101 		sw	s2,16(sp)	#,
 911 0680 23263101 		sw	s3,12(sp)	#,
 912 0684 23244101 		sw	s4,8(sp)	#,
 913 0688 93890700 		mv	s3,a5	# color, tmp118
 914 068c 138A0600 		mv	s4,a3	# x1, tmp116
 915 0690 23225101 		sw	s5,4(sp)	#,
 916 0694 23206101 		sw	s6,0(sp)	#,
 917              	# kianv_stdlib.h:187: {
 918 0698 130B0700 		mv	s6,a4	# y1, tmp117
 919              	# kianv_stdlib.h:189:   int dx =  abs(x1 - x0);
 920 069c 97000000 		call	abs		#
 920      E7800000 
 921 06a4 13090500 		mv	s2,a0	# tmp119,
 922              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 923 06a8 33059B40 		sub	a0,s6,s1	#, y1, y0
 924 06ac 97000000 		call	abs		#
 924      E7800000 
 925              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 926 06b4 B32A4401 		sgt	s5,s4,s0	# tmp109, x1, x0
 927              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 928 06b8 33AF6401 		sgt	t5,s6,s1	# tmp112, y1, y0
 929              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 930 06bc 939A1A00 		slli	s5,s5,1	#, iftmp.6_9, tmp109
 931              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 932 06c0 131F1F00 		slli	t5,t5,1	#, iftmp.7_10, tmp112
 933              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 934 06c4 B7060100 		li	a3,65536		# tmp103,
 935              	# kianv_stdlib.h:190:   int sx = x0 < x1 ? 1 : -1;
 936 06c8 938AFAFF 		addi	s5,s5,-1	#, iftmp.6_9, iftmp.6_9
 937              	# kianv_stdlib.h:191:   int dy = -abs(y1 - y0);
 938 06cc B30EA040 		neg	t4,a0	# dy, _3
 939              	# kianv_stdlib.h:192:   int sy = y0 < y1 ? 1 : -1;
 940 06d0 130FFFFF 		addi	t5,t5,-1	#, iftmp.7_10, iftmp.7_10
 941 06d4 3308A940 		sub	a6,s2,a0	# err, dx, _3
 942              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 943 06d8 13930901 		slli	t1,s3,16	#, _33, color
 944 06dc 93F8F40F 		andi	a7,s1,255	#, tmp106, y0
 945 06e0 93158400 		slli	a1,s0,8	#, tmp107, x0
 946              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 947 06e4 9386F6FF 		addi	a3,a3,-1	#, tmp102, tmp103
 948              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 949 06e8 370E0030 		li	t3,805306368		# tmp105,
 950              	.L135:
 951              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 952 06ec B3E76800 		or	a5,a7,t1	# _33, tmp99, tmp106
 953              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 954 06f0 33F6D500 		and	a2,a1,a3	# tmp102, tmp101, tmp107
 955              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 956 06f4 B3E7C700 		or	a5,a5,a2	# tmp101, _40, tmp99
 957              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 958 06f8 2324FE00 		sw	a5,8(t3)	# _40, MEM[(volatile uint32_t *)805306376B]
 959              	# kianv_stdlib.h:198:     e2 = 2*err;
 960 06fc 93171800 		slli	a5,a6,1	#, e2, err
 961              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 962 0700 630E4403 		beq	s0,s4,.L143	#, x0, x1,
 963              	.L136:
 964              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 965 0704 63C8D701 		bgt	t4,a5,.L138	#, dy, e2,
 966              	# kianv_stdlib.h:199:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 967 0708 33045401 		add	s0,s0,s5	# iftmp.6_9, x0, x0
 968 070c 3308A840 		sub	a6,a6,a0	# err, err, _3
 969 0710 93158400 		slli	a1,s0,8	#, tmp107, x0
 970              	.L138:
 971              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 972 0714 E34CF9FC 		blt	s2,a5,.L135	#, dx, e2,
 973              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 974 0718 B384E401 		add	s1,s1,t5	# iftmp.7_10, y0, y0
 975 071c 93F8F40F 		andi	a7,s1,255	#, tmp106, y0
 976              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 977 0720 B3E76800 		or	a5,a7,t1	# _33, tmp99, tmp106
 978              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 979 0724 33F6D500 		and	a2,a1,a3	# tmp102, tmp101, tmp107
 980              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 981 0728 B3E7C700 		or	a5,a5,a2	# tmp101, _40, tmp99
 982              	# kianv_stdlib.h:200:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 983 072c 33082801 		add	a6,a6,s2	# dx, err, err
 984              	# kianv_stdlib.h:183: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 985 0730 2324FE00 		sw	a5,8(t3)	# _40, MEM[(volatile uint32_t *)805306376B]
 986              	# kianv_stdlib.h:198:     e2 = 2*err;
 987 0734 93171800 		slli	a5,a6,1	#, e2, err
 988              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 989 0738 E31644FD 		bne	s0,s4,.L136	#, x0, x1,
 990              	.L143:
 991              	# kianv_stdlib.h:197:     if (x0 == x1 && y0 == y1) break;
 992 073c E39464FD 		bne	s1,s6,.L136	#, y0, y1,
 993              	# kianv_stdlib.h:202: }
 994 0740 8320C101 		lw	ra,28(sp)		#,
 995 0744 03248101 		lw	s0,24(sp)		#,
 996 0748 83244101 		lw	s1,20(sp)		#,
 997 074c 03290101 		lw	s2,16(sp)		#,
 998 0750 8329C100 		lw	s3,12(sp)		#,
 999 0754 032A8100 		lw	s4,8(sp)		#,
 1000 0758 832A4100 		lw	s5,4(sp)		#,
 1001 075c 032B0100 		lw	s6,0(sp)		#,
 1002 0760 13010102 		addi	sp,sp,32	#,,
 1003 0764 67800000 		jr	ra		#
 1005              		.align	2
 1006              		.globl	time
 1008              	time:
 1009              	# stdlib.c:33: 	asm volatile ("rdcycle %0" : "=r"(cycles));
 1010              	 #APP
 1011              	# 33 "stdlib.c" 1
   1              	// This is free and unencumbered software released into the public domain.
   2              	//
   3              	// Anyone is free to copy, modify, publish, use, compile, sell, or
   4              	// distribute this software, either in source code form or as a compiled
   5              	// binary, for any purpose, commercial or non-commercial, and by any
   6              	// means.
   7              	
   8              	#ifndef KV_STDLIB_H
   9              	#define KV_STDLIB_H
  10              	
  11              	#include <stdarg.h>
  12              	#include <stdint.h>
  13              	#include "kianv_stdlib.h"
  14              	extern long time();
  15              	extern long insn();
  16              	
  17              	#if defined(NOT_USE_MYSTDLIB)
  18              	#else
  19              	extern char *malloc();
  20              	extern int printf(const char *format, ...);
  21              	
  22              	extern void *memcpy(void *dest, const void *src, long n);
  23              	extern char *strcpy(char *dest, const char *src);
  24              	extern int strcmp(const char *s1, const char *s2);
  25              	
  26              	char heap_memory[1024];
  27              	int heap_memory_used = 0;
  28              	#endif
  29              	
  30              	long time()
  31              	{
  32              		int cycles;
  33 0768 732500C0 		asm volatile ("rdcycle %0" : "=r"(cycles));
  34              		// printf("[time() -> %d]", cycles);
 1012              		rdcycle a0	# cycles
 1013              	# 0 "" 2
 1014              	# stdlib.c:36: }
 1015              	 #NO_APP
 1016 076c 67800000 		ret	
 1018              		.align	2
 1019              		.globl	insn
 1021              	insn:
 1022              	# stdlib.c:41: 	asm volatile ("rdinstret %0" : "=r"(insns));
 1023              	 #APP
 1024              	# 41 "stdlib.c" 1
  35              		return cycles;
  36              	}
  37              	
  38              	long insn()
  39              	{
  40              		int insns;
  41 0770 732520C0 		asm volatile ("rdinstret %0" : "=r"(insns));
  42              		// printf("[insn() -> %d]", insns);
 1025              		rdinstret a0	# insns
 1026              	# 0 "" 2
 1027              	# stdlib.c:44: }
 1028              	 #NO_APP
 1029 0774 67800000 		ret	
 1031              		.align	2
 1032              		.globl	printf
 1034              	printf:
 1035 0778 130101FB 		addi	sp,sp,-80	#,,
 1036              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1037 077c 03430500 		lbu	t1,0(a0)	# _14, *format_22(D)
 1038              	# stdlib.c:90: {
 1039 0780 2322F104 		sw	a5,68(sp)	#,
 1040              	# stdlib.c:94: 	va_start(ap, format);
 1041 0784 93074103 		addi	a5,sp,52	#, tmp118,
 1042              	# stdlib.c:90: {
 1043 0788 232AB102 		sw	a1,52(sp)	#,
 1044 078c 232CC102 		sw	a2,56(sp)	#,
 1045 0790 232ED102 		sw	a3,60(sp)	#,
 1046 0794 2320E104 		sw	a4,64(sp)	#,
 1047 0798 23240105 		sw	a6,72(sp)	#,
 1048 079c 23261105 		sw	a7,76(sp)	#,
 1049              	# stdlib.c:94: 	va_start(ap, format);
 1050 07a0 2326F100 		sw	a5,12(sp)	# tmp118, MEM[(void * *)&ap]
 1051              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1052 07a4 63060304 		beq	t1,zero,.L147	#, _14,,
 1053              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1054 07a8 93060000 		li	a3,0		# i,
 1055              	# stdlib.c:97: 		if (format[i] == '%') {
 1056 07ac 93025002 		li	t0,37		# tmp119,
 1057              	# stdlib.c:99: 				if (format[i] == 'c') {
 1058 07b0 93083006 		li	a7,99		# tmp186,
 1059              	# stdlib.c:103: 				if (format[i] == 's') {
 1060 07b4 130E3007 		li	t3,115		# tmp187,
 1061              	# stdlib.c:107: 				if (format[i] == 'd') {
 1062 07b8 930E4006 		li	t4,100		# tmp188,
 1063              	# stdlib.c:111: 				if (format[i] == 'u') {
 1064 07bc 130F5007 		li	t5,117		# tmp189,
 1065              	# stdlib.c:78: 	char *p = buffer;
 1066 07c0 930F0101 		addi	t6,sp,16	#, tmp194,
 1067              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1068 07c4 9305A000 		li	a1,10		# tmp195,
 1069              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1070 07c8 B7070030 		li	a5,805306368		# tmp196,
 1071              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1072 07cc 9303D002 		li	t2,45		# tmp198,
 1073              	.L168:
 1074              	# stdlib.c:97: 		if (format[i] == '%') {
 1075 07d0 630E5302 		beq	t1,t0,.L148	#, _14, tmp119,
 1076              	.L149:
 1077              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1078 07d4 03A70700 		lw	a4,0(a5)		# _41, MEM[(volatile uint32_t *)805306368B]
 1079              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1080 07d8 E30E07FE 		beq	a4,zero,.L149	#, _41,,
 1081              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1082 07dc 23A06700 		sw	t1,0(a5)	# _14, MEM[(volatile uint32_t *)805306368B]
 1083              	.L152:
 1084              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1085 07e0 93861600 		addi	a3,a3,1	#, i, i
 1086              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1087 07e4 3307D500 		add	a4,a0,a3	# i, tmp177, format
 1088 07e8 03430700 		lbu	t1,0(a4)	# _14, *_13
 1089              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1090 07ec E31203FE 		bne	t1,zero,.L168	#, _14,,
 1091              	.L147:
 1092              	# stdlib.c:121: }
 1093 07f0 13050000 		li	a0,0		#,
 1094 07f4 13010105 		addi	sp,sp,80	#,,
 1095 07f8 67800000 		jr	ra		#
 1096              	.L167:
 1097              	# stdlib.c:99: 				if (format[i] == 'c') {
 1098 07fc 63021703 		beq	a4,a7,.L194	#, _10, tmp186,
 1099              	# stdlib.c:103: 				if (format[i] == 's') {
 1100 0800 6302C705 		beq	a4,t3,.L195	#, _10, tmp187,
 1101              	# stdlib.c:107: 				if (format[i] == 'd') {
 1102 0804 630AD707 		beq	a4,t4,.L196	#, _10, tmp188,
 1103              	# stdlib.c:111: 				if (format[i] == 'u') {
 1104 0808 630EE70D 		beq	a4,t5,.L197	#, _10, tmp189,
 1105              	.L148:
 1106              	# stdlib.c:98: 			while (format[++i]) {
 1107 080c 93861600 		addi	a3,a3,1	#, i, i
 1108              	# stdlib.c:98: 			while (format[++i]) {
 1109 0810 3307D500 		add	a4,a0,a3	# i, tmp174, format
 1110 0814 03470700 		lbu	a4,0(a4)	# _10, MEM[(const char *)_125]
 1111              	# stdlib.c:98: 			while (format[++i]) {
 1112 0818 E31207FE 		bne	a4,zero,.L167	#, _10,,
 1113 081c 6FF05FFC 		j	.L152		#
 1114              	.L194:
 1115              	# stdlib.c:100: 					printf_c(va_arg(ap,int));
 1116 0820 0327C100 		lw	a4,12(sp)		# D.2612, ap
 1117 0824 03260700 		lw	a2,0(a4)		# _4, MEM[(int *)_109]
 1118 0828 13074700 		addi	a4,a4,4	#, D.2613, D.2612
 1119 082c 2326E100 		sw	a4,12(sp)	# D.2613, ap
 1120              	.L151:
 1121              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1122 0830 03A70700 		lw	a4,0(a5)		# _33, MEM[(volatile uint32_t *)805306368B]
 1123              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1124 0834 E30E07FE 		beq	a4,zero,.L151	#, _33,,
 1125              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1126 0838 1377F60F 		andi	a4,a2,255	#, _35, _4
 1127 083c 23A0E700 		sw	a4,0(a5)	# _35, MEM[(volatile uint32_t *)805306368B]
 1128              	# stdlib.c:50: }
 1129 0840 6FF01FFA 		j	.L152		#
 1130              	.L195:
 1131              	# stdlib.c:104: 					printf_s(va_arg(ap,char*));
 1132 0844 0327C100 		lw	a4,12(sp)		# D.2614, ap
 1133 0848 03280700 		lw	a6,0(a4)		# p, MEM[(char * *)_78]
 1134 084c 13074700 		addi	a4,a4,4	#, D.2615, D.2614
 1135 0850 2326E100 		sw	a4,12(sp)	# D.2615, ap
 1136              	# stdlib.c:54: 	while (*p)
 1137 0854 03460800 		lbu	a2,0(a6)	# _39,* p
 1138 0858 E30406F8 		beq	a2,zero,.L152	#, _39,,
 1139              	.L155:
 1140              	# stdlib.c:56:     print_chr(*(p++));
 1141 085c 13081800 		addi	a6,a6,1	#, p, p
 1142              	.L154:
 1143              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1144 0860 03A70700 		lw	a4,0(a5)		# _38, MEM[(volatile uint32_t *)805306368B]
 1145              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1146 0864 E30E07FE 		beq	a4,zero,.L154	#, _38,,
 1147              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1148 0868 23A0C700 		sw	a2,0(a5)	# _39, MEM[(volatile uint32_t *)805306368B]
 1149              	# stdlib.c:54: 	while (*p)
 1150 086c 03460800 		lbu	a2,0(a6)	# _39,* p
 1151 0870 E31606FE 		bne	a2,zero,.L155	#, _39,,
 1152 0874 6FF0DFF6 		j	.L152		#
 1153              	.L196:
 1154              	# stdlib.c:108: 					printf_d(va_arg(ap,int));
 1155 0878 0326C100 		lw	a2,12(sp)		# D.2616, ap
 1156 087c 03270600 		lw	a4,0(a2)		# val, MEM[(int *)_110]
 1157 0880 13064600 		addi	a2,a2,4	#, D.2617, D.2616
 1158 0884 2326C100 		sw	a2,12(sp)	# D.2617, ap
 1159              	# stdlib.c:63: 	if (val < 0) {
 1160 0888 63440702 		blt	a4,zero,.L158	#, val,,
 1161              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1162 088c 13860F00 		mv	a2,t6	# p, tmp194
 1163              	.L159:
 1164              	# stdlib.c:67: 	while (val || p == buffer) {
 1165 0890 63140700 		bne	a4,zero,.L160	#, val,,
 1166 0894 631EF603 		bne	a2,t6,.L162	#, p, tmp194,
 1167              	.L160:
 1168              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1169 0898 3368B702 		rem	a6,a4,a1	# tmp195, tmp138, val
 1170              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1171 089c 13061600 		addi	a2,a2,1	#, p, p
 1172              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1173 08a0 13080803 		addi	a6,a6,48	#, tmp140, tmp138
 1174              	# stdlib.c:69: 		val = val / 10;
 1175 08a4 3347B702 		div	a4,a4,a1	# tmp195, val, val
 1176              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1177 08a8 A30F06FF 		sb	a6,-1(a2)	# tmp140, MEM[(char *)p_53 + 4294967295B]
 1178 08ac 6FF05FFE 		j	.L159		#
 1179              	.L158:
 1180              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1181 08b0 03A60700 		lw	a2,0(a5)		# _47, MEM[(volatile uint32_t *)805306368B]
 1182              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1183 08b4 E30E06FE 		beq	a2,zero,.L158	#, _47,,
 1184              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1185 08b8 23A07700 		sw	t2,0(a5)	# tmp198, MEM[(volatile uint32_t *)805306368B]
 1186              	# stdlib.c:65: 		val = -val;
 1187 08bc 3307E040 		neg	a4,a4	# val, val
 1188              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1189 08c0 13860F00 		mv	a2,t6	# p, tmp194
 1190 08c4 6FF0DFFC 		j	.L159		#
 1191              	.L198:
 1192              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1193 08c8 23A00701 		sw	a6,0(a5)	# _58, MEM[(volatile uint32_t *)805306368B]
 1194              	# stdlib.c:71: 	while (p != buffer)
 1195 08cc E30AF6F1 		beq	a2,t6,.L152	#, p, tmp194,
 1196              	.L162:
 1197              	# stdlib.c:72: 		printf_c(*(--p));
 1198 08d0 0348F6FF 		lbu	a6,-1(a2)	# _58, MEM[(char *)p_57]
 1199              	# stdlib.c:72: 		printf_c(*(--p));
 1200 08d4 1306F6FF 		addi	a2,a2,-1	#, p, p
 1201              	.L161:
 1202              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1203 08d8 03A70700 		lw	a4,0(a5)		# _59, MEM[(volatile uint32_t *)805306368B]
 1204              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1205 08dc E30E07FE 		beq	a4,zero,.L161	#, _59,,
 1206 08e0 6FF09FFE 		j	.L198		#
 1207              	.L197:
 1208              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 1209 08e4 0328C100 		lw	a6,12(sp)		# D.2618, ap
 1210              	# stdlib.c:78: 	char *p = buffer;
 1211 08e8 13860F00 		mv	a2,t6	# p, tmp194
 1212              	# stdlib.c:80:   val = val >= 0 ? val : -val;
 1213 08ec 03270800 		lw	a4,0(a6)		# MEM[(int *)_113], MEM[(int *)_113]
 1214              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 1215 08f0 13084800 		addi	a6,a6,4	#, D.2619, D.2618
 1216 08f4 23260101 		sw	a6,12(sp)	# D.2619, ap
 1217              	# stdlib.c:80:   val = val >= 0 ? val : -val;
 1218 08f8 1358F741 		srai	a6,a4,31	#, tmp153, MEM[(int *)_113]
 1219 08fc 3347E800 		xor	a4,a6,a4	# MEM[(int *)_113], val, tmp153
 1220 0900 33070741 		sub	a4,a4,a6	# val, val, tmp153
 1221              	.L163:
 1222              	# stdlib.c:81: 	while (val || p == buffer) {
 1223 0904 63140700 		bne	a4,zero,.L164	#, val,,
 1224 0908 6312F603 		bne	a2,t6,.L166	#, p, tmp194,
 1225              	.L164:
 1226              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1227 090c 3368B702 		rem	a6,a4,a1	# tmp195, tmp161, val
 1228              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1229 0910 13061600 		addi	a2,a2,1	#, p, p
 1230              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1231 0914 13080803 		addi	a6,a6,48	#, tmp163, tmp161
 1232              	# stdlib.c:83: 		val = val / 10;
 1233 0918 3347B702 		div	a4,a4,a1	# tmp195, val, val
 1234              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1235 091c A30F06FF 		sb	a6,-1(a2)	# tmp163, MEM[(char *)p_68 + 4294967295B]
 1236 0920 6FF05FFE 		j	.L163		#
 1237              	.L199:
 1238              	# kianv_stdlib.h:118:   *((volatile uint32_t*) UART_TX) = ch;
 1239 0924 23A00701 		sw	a6,0(a5)	# _73, MEM[(volatile uint32_t *)805306368B]
 1240              	# stdlib.c:85: 	while (p != buffer)
 1241 0928 E30CF6EB 		beq	a2,t6,.L152	#, p, tmp194,
 1242              	.L166:
 1243              	# stdlib.c:86: 		printf_c(*(--p));
 1244 092c 0348F6FF 		lbu	a6,-1(a2)	# _73, MEM[(char *)p_72]
 1245              	# stdlib.c:86: 		printf_c(*(--p));
 1246 0930 1306F6FF 		addi	a2,a2,-1	#, p, p
 1247              	.L165:
 1248              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1249 0934 03A70700 		lw	a4,0(a5)		# _74, MEM[(volatile uint32_t *)805306368B]
 1250              	# kianv_stdlib.h:116:   while (!*((volatile uint32_t*) UART_READY))
 1251 0938 E30E07FE 		beq	a4,zero,.L165	#, _74,,
 1252 093c 6FF09FFE 		j	.L199		#
 1254              		.align	2
 1255              		.globl	malloc
 1257              	malloc:
 1258              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1259 0940 B7060000 		lui	a3,%hi(heap_memory_used)	# tmp77,
 1260 0944 03A70600 		lw	a4,%lo(heap_memory_used)(a3)		# heap_memory_used.19_1, heap_memory_used
 1261              	# stdlib.c:128: 	heap_memory_used += size;
 1262 0948 B307A700 		add	a5,a4,a0	# tmp83, _3, heap_memory_used.19_1
 1263              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1264 094c 37050000 		lui	a0,%hi(.LANCHOR0)	# tmp79,
 1265              	# stdlib.c:128: 	heap_memory_used += size;
 1266 0950 23A0F600 		sw	a5,%lo(heap_memory_used)(a3)	# _3, heap_memory_used
 1267              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1268 0954 13050500 		addi	a0,a0,%lo(.LANCHOR0)	# tmp78, tmp79,
 1269              	# stdlib.c:129: 	if (heap_memory_used > 1024)
 1270 0958 93060040 		li	a3,1024		# tmp81,
 1271              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1272 095c 3305E500 		add	a0,a0,a4	# heap_memory_used.19_1, <retval>, tmp78
 1273              	# stdlib.c:129: 	if (heap_memory_used > 1024)
 1274 0960 63D4F600 		ble	a5,a3,.L200	#, _3, tmp81,
 1275              	# stdlib.c:130: 		asm volatile ("ebreak");
 1276              	 #APP
 1277              	# 130 "stdlib.c" 1
  43              		return insns;
  44              	}
  45              	
  46              	static void printf_c(int c)
  47              	{
  48              		//*((volatile int*)0x10000000) = c;
  49              	    print_chr(c);
  50              	}
  51              	
  52              	static void printf_s(char *p)
  53              	{
  54              		while (*p)
  55              			//*((volatile int*)0x10000000) = *(p++);
  56              	    print_chr(*(p++));
  57              	}
  58              	
  59              	static void printf_d(int val)
  60              	{
  61              		char buffer[32];
  62              		char *p = buffer;
  63              		if (val < 0) {
  64              			printf_c('-');
  65              			val = -val;
  66              		}
  67              		while (val || p == buffer) {
  68              			*(p++) = '0' + val % 10;
  69              			val = val / 10;
  70              		}
  71              		while (p != buffer)
  72              			printf_c(*(--p));
  73              	}
  74              	
  75              	static void printf_u(int val)
  76              	{
  77              		char buffer[32];
  78              		char *p = buffer;
  79              	
  80              	  val = val >= 0 ? val : -val;
  81              		while (val || p == buffer) {
  82              			*(p++) = '0' + val % 10;
  83              			val = val / 10;
  84              		}
  85              		while (p != buffer)
  86              			printf_c(*(--p));
  87              	}
  88              	
  89              	int printf(const char *format, ...)
  90              	{
  91              		int i;
  92              		va_list ap;
  93              	
  94              		va_start(ap, format);
  95              	
  96              		for (i = 0; format[i]; i++)
  97              			if (format[i] == '%') {
  98              				while (format[++i]) {
  99              					if (format[i] == 'c') {
 100              						printf_c(va_arg(ap,int));
 101              						break;
 102              					}
 103              					if (format[i] == 's') {
 104              						printf_s(va_arg(ap,char*));
 105              						break;
 106              					}
 107              					if (format[i] == 'd') {
 108              						printf_d(va_arg(ap,int));
 109              						break;
 110              					}
 111              					if (format[i] == 'u') {
 112              						printf_u(va_arg(ap,int));
 113              						break;
 114              					}
 115              				}
 116              			} else
 117              				printf_c(format[i]);
 118              	
 119              		va_end(ap);
 120              	  return 0;
 121              	}
 122              	
 123              	#if !defined(NOT_USE_MYSTDLIB)
 124              	char *malloc(int size)
 125              	{
 126              		char *p = heap_memory + heap_memory_used;
 127              		// printf("[malloc(%d) -> %d (%d..%d)]", size, (int)p, heap_memory_used, heap_memory_used + size);
 128              		heap_memory_used += size;
 129              		if (heap_memory_used > 1024)
 130 0964 73001000 			asm volatile ("ebreak");
 131              		return p;
 1278              		ebreak
 1279              	# 0 "" 2
 1280              	 #NO_APP
 1281              	.L200:
 1282              	# stdlib.c:132: }
 1283 0968 67800000 		ret	
 1285              		.align	2
 1286              		.globl	memcpy
 1288              	memcpy:
 1289              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1290 096c 9308F6FF 		addi	a7,a2,-1	#, n, n
 1291              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1292 0970 6306060A 		beq	a2,zero,.L203	#, n,,
 1293 0974 13871500 		addi	a4,a1,1	#, bb, bb
 1294 0978 B307E540 		sub	a5,a0,a4	# tmp111, aa, bb
 1295 097c 93B73700 		sltiu	a5,a5,3	#, tmp114, tmp111
 1296 0980 93B67800 		sltiu	a3,a7,7	#, tmp117, n
 1297 0984 93C71700 		xori	a5,a5,1	#, tmp113, tmp114
 1298 0988 93C61600 		xori	a3,a3,1	#, tmp116, tmp117
 1299 098c B3F7D700 		and	a5,a5,a3	# tmp116, tmp120, tmp113
 1300 0990 63880706 		beq	a5,zero,.L204	#, tmp120,,
 1301 0994 B367B500 		or	a5,a0,a1	# bb, tmp121, aa
 1302 0998 93F73700 		andi	a5,a5,3	#, tmp122, tmp121
 1303 099c 63920706 		bne	a5,zero,.L204	#, tmp122,,
 1304 09a0 1378C6FF 		andi	a6,a2,-4	#, tmp127, n
 1305 09a4 93870500 		mv	a5,a1	# ivtmp.316, bb
 1306 09a8 13070500 		mv	a4,a0	# ivtmp.319, aa
 1307 09ac 3308B800 		add	a6,a6,a1	# bb, _77, tmp127
 1308              	.L205:
 1309              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1310 09b0 83A60700 		lw	a3,0(a5)		# vect__1.302, MEM <const vector(4) char> [(const char *)_43]
 1311 09b4 93874700 		addi	a5,a5,4	#, ivtmp.316, ivtmp.316
 1312 09b8 13074700 		addi	a4,a4,4	#, ivtmp.319, ivtmp.319
 1313              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1314 09bc 232ED7FE 		sw	a3,-4(a4)	# vect__1.302, MEM <vector(4) char> [(char *)_45]
 1315 09c0 E39807FF 		bne	a5,a6,.L205	#, ivtmp.316, _77,
 1316 09c4 9377C6FF 		andi	a5,a2,-4	#, niters_vector_mult_vf.296, n
 1317 09c8 3307F500 		add	a4,a0,a5	# niters_vector_mult_vf.296, tmp.297, aa
 1318 09cc B385F500 		add	a1,a1,a5	# niters_vector_mult_vf.296, tmp.298, bb
 1319 09d0 B388F840 		sub	a7,a7,a5	# tmp.299, n, niters_vector_mult_vf.296
 1320 09d4 6304F604 		beq	a2,a5,.L203	#, n, niters_vector_mult_vf.296,
 1321              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1322 09d8 83C70500 		lbu	a5,0(a1)	# _10, *tmp.298_55
 1323              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1324 09dc 2300F700 		sb	a5,0(a4)	# _10, *tmp.297_54
 1325              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1326 09e0 638E0802 		beq	a7,zero,.L203	#, tmp.299,,
 1327              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1328 09e4 83C61500 		lbu	a3,1(a1)	# _72, MEM[(const char *)tmp.298_55 + 1B]
 1329              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1330 09e8 93071000 		li	a5,1		# tmp128,
 1331              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1332 09ec A300D700 		sb	a3,1(a4)	# _72, MEM[(char *)tmp.297_54 + 1B]
 1333              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1334 09f0 6386F802 		beq	a7,a5,.L203	#, tmp.299, tmp128,
 1335              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1336 09f4 83C72500 		lbu	a5,2(a1)	# _48, MEM[(const char *)tmp.298_55 + 2B]
 1337              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1338 09f8 2301F700 		sb	a5,2(a4)	# _48, MEM[(char *)tmp.297_54 + 2B]
 1339 09fc 67800000 		ret	
 1340              	.L204:
 1341 0a00 3306C500 		add	a2,a0,a2	# n, _23, aa
 1342              	# stdlib.c:138: 	char *a = (char *) aa;
 1343 0a04 93070500 		mv	a5,a0	# a, aa
 1344              	.L207:
 1345              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1346 0a08 8346F7FF 		lbu	a3,-1(a4)	# _37, MEM[(const char *)b_35 + 4294967295B]
 1347              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1348 0a0c 93871700 		addi	a5,a5,1	#, a, a
 1349 0a10 13071700 		addi	a4,a4,1	#, bb, bb
 1350              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1351 0a14 A38FD7FE 		sb	a3,-1(a5)	# _37, MEM[(char *)a_36 + 4294967295B]
 1352              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1353 0a18 E318F6FE 		bne	a2,a5,.L207	#, _23, a,
 1354              	.L203:
 1355              	# stdlib.c:142: }
 1356 0a1c 67800000 		ret	
 1358              		.align	2
 1359              		.globl	strcpy
 1361              	strcpy:
 1362              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1363 0a20 93070500 		mv	a5,a0	# dst, dst
 1364 0a24 6F008001 		j	.L224		#
 1365              	.L226:
 1366              	# stdlib.c:150: 		char c = *(src++);
 1367 0a28 03C70500 		lbu	a4,0(a1)	# c, MEM[(const char *)src_40 + 4294967295B]
 1368              	# stdlib.c:151: 		*(dst++) = c;
 1369 0a2c 93871700 		addi	a5,a5,1	#, dst, dst
 1370              	# stdlib.c:150: 		char c = *(src++);
 1371 0a30 93851500 		addi	a1,a1,1	#, src, src
 1372              	# stdlib.c:151: 		*(dst++) = c;
 1373 0a34 A38FE7FE 		sb	a4,-1(a5)	# c, MEM[(char *)dst_42 + 4294967295B]
 1374              	# stdlib.c:152: 		if (!c) return r;
 1375 0a38 63040708 		beq	a4,zero,.L228	#, c,,
 1376              	.L224:
 1377              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1378 0a3c 33E7B700 		or	a4,a5,a1	# src, tmp101, dst
 1379              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1380 0a40 13773700 		andi	a4,a4,3	#, tmp102, tmp101
 1381              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1382 0a44 E31207FE 		bne	a4,zero,.L226	#, tmp102,,
 1383              	# stdlib.c:157: 		uint32_t v = *(uint32_t*)src;
 1384 0a48 83A60500 		lw	a3,0(a1)		# v, MEM[(uint32_t *)src_20]
 1385              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1386 0a4c B708FFFE 		li	a7,-16842752		# tmp105,
 1387 0a50 9388F8EF 		addi	a7,a7,-257	#, tmp104, tmp105
 1388 0a54 33871601 		add	a4,a3,a7	# tmp104, tmp103, v
 1389              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1390 0a58 13C6F6FF 		not	a2,a3	# tmp106, v
 1391              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1392 0a5c 37888080 		li	a6,-2139062272		# tmp110,
 1393              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1394 0a60 3377C700 		and	a4,a4,a2	# tmp106, tmp107, tmp103
 1395              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1396 0a64 13080808 		addi	a6,a6,128	#, tmp109, tmp110
 1397 0a68 33770701 		and	a4,a4,a6	# tmp109, tmp108, tmp107
 1398              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1399 0a6c 63140702 		bne	a4,zero,.L229	#, tmp108,,
 1400              	.L227:
 1401              	# stdlib.c:180: 		*(uint32_t*)dst = v;
 1402 0a70 23A0D700 		sw	a3,0(a5)	# v, MEM[(uint32_t *)dst_51]
 1403              	# stdlib.c:157: 		uint32_t v = *(uint32_t*)src;
 1404 0a74 83A64500 		lw	a3,4(a1)		# v, MEM[(uint32_t *)src_31]
 1405              	# stdlib.c:182: 		dst += 4;
 1406 0a78 93874700 		addi	a5,a5,4	#, dst, dst
 1407              	# stdlib.c:181: 		src += 4;
 1408 0a7c 93854500 		addi	a1,a1,4	#, src, src
 1409              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1410 0a80 33871601 		add	a4,a3,a7	# tmp104, tmp115, v
 1411              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1412 0a84 13C6F6FF 		not	a2,a3	# tmp118, v
 1413              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1414 0a88 3377C700 		and	a4,a4,a2	# tmp118, tmp119, tmp115
 1415              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1416 0a8c 33770701 		and	a4,a4,a6	# tmp109, tmp120, tmp119
 1417              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1418 0a90 E30007FE 		beq	a4,zero,.L227	#, tmp120,,
 1419              	.L229:
 1420              	# stdlib.c:161: 			dst[0] = v & 0xff;
 1421 0a94 2380D700 		sb	a3,0(a5)	# v, *dst_50
 1422              	# stdlib.c:162: 			if ((v & 0xff) == 0)
 1423 0a98 13F7F60F 		andi	a4,a3,255	#, tmp111, v
 1424              	# stdlib.c:162: 			if ((v & 0xff) == 0)
 1425 0a9c 63020702 		beq	a4,zero,.L228	#, tmp111,,
 1426              	# stdlib.c:164: 			v = v >> 8;
 1427 0aa0 13D78600 		srli	a4,a3,8	#, v, v
 1428              	# stdlib.c:166: 			dst[1] = v & 0xff;
 1429 0aa4 A380E700 		sb	a4,1(a5)	# v, MEM[(char *)dst_50 + 1B]
 1430              	# stdlib.c:167: 			if ((v & 0xff) == 0)
 1431 0aa8 1377F70F 		andi	a4,a4,255	#, tmp112, v
 1432              	# stdlib.c:167: 			if ((v & 0xff) == 0)
 1433 0aac 630A0700 		beq	a4,zero,.L228	#, tmp112,,
 1434              	# stdlib.c:169: 			v = v >> 8;
 1435 0ab0 13D70601 		srli	a4,a3,16	#, v, v
 1436              	# stdlib.c:171: 			dst[2] = v & 0xff;
 1437 0ab4 2381E700 		sb	a4,2(a5)	# v, MEM[(char *)dst_50 + 2B]
 1438              	# stdlib.c:172: 			if ((v & 0xff) == 0)
 1439 0ab8 1377F70F 		andi	a4,a4,255	#, tmp113, v
 1440              	# stdlib.c:172: 			if ((v & 0xff) == 0)
 1441 0abc 63140700 		bne	a4,zero,.L244	#, tmp113,,
 1442              	.L228:
 1443              	# stdlib.c:184: }
 1444 0ac0 67800000 		ret	
 1445              	.L244:
 1446              	# stdlib.c:174: 			v = v >> 8;
 1447 0ac4 93D68601 		srli	a3,a3,24	#, v, v
 1448              	# stdlib.c:176: 			dst[3] = v & 0xff;
 1449 0ac8 A381D700 		sb	a3,3(a5)	# v, MEM[(char *)dst_50 + 3B]
 1450              	# stdlib.c:177: 			return r;
 1451 0acc 67800000 		ret	
 1453              		.align	2
 1454              		.globl	strcmp
 1456              	strcmp:
 1457              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1458 0ad0 6F00C001 		j	.L246		#
 1459              	.L250:
 1460              	# stdlib.c:190: 		char c1 = *(s1++);
 1461 0ad4 83470500 		lbu	a5,0(a0)	# c1, MEM[(const char *)s1_48 + 4294967295B]
 1462              	# stdlib.c:191: 		char c2 = *(s2++);
 1463 0ad8 03C70500 		lbu	a4,0(a1)	# c2, MEM[(const char *)s2_50 + 4294967295B]
 1464              	# stdlib.c:190: 		char c1 = *(s1++);
 1465 0adc 13051500 		addi	a0,a0,1	#, s1, s1
 1466              	# stdlib.c:191: 		char c2 = *(s2++);
 1467 0ae0 93851500 		addi	a1,a1,1	#, s2, s2
 1468              	# stdlib.c:193: 		if (c1 != c2)
 1469 0ae4 6392E706 		bne	a5,a4,.L275	#, c1, c2,
 1470              	# stdlib.c:195: 		else if (!c1)
 1471 0ae8 638C0704 		beq	a5,zero,.L265	#, c1,,
 1472              	.L246:
 1473              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1474 0aec B367B500 		or	a5,a0,a1	# s2, tmp101, s1
 1475              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1476 0af0 93F73700 		andi	a5,a5,3	#, tmp102, tmp101
 1477              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1478 0af4 E39007FE 		bne	a5,zero,.L250	#, tmp102,,
 1479              	# stdlib.c:201: 		uint32_t v1 = *(uint32_t*)s1;
 1480 0af8 83270500 		lw	a5,0(a0)		# v1, MEM[(uint32_t *)s1_14]
 1481              	# stdlib.c:202: 		uint32_t v2 = *(uint32_t*)s2;
 1482 0afc 03A70500 		lw	a4,0(a1)		# v2, MEM[(uint32_t *)s2_16]
 1483              	# stdlib.c:204: 		if (__builtin_expect(v1 != v2, 0))
 1484 0b00 639CE704 		bne	a5,a4,.L255	#, v1, v2,
 1485              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1486 0b04 3706FFFE 		li	a2,-16842752		# tmp111,
 1487              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1488 0b08 B7868080 		li	a3,-2139062272		# tmp116,
 1489              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1490 0b0c 1306F6EF 		addi	a2,a2,-257	#, tmp110, tmp111
 1491              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1492 0b10 93860608 		addi	a3,a3,128	#, tmp115, tmp116
 1493 0b14 6F000001 		j	.L251		#
 1494              	.L276:
 1495              	# stdlib.c:201: 		uint32_t v1 = *(uint32_t*)s1;
 1496 0b18 83270500 		lw	a5,0(a0)		# v1, MEM[(uint32_t *)s1_29]
 1497              	# stdlib.c:202: 		uint32_t v2 = *(uint32_t*)s2;
 1498 0b1c 03A70500 		lw	a4,0(a1)		# v2, MEM[(uint32_t *)s2_30]
 1499              	# stdlib.c:204: 		if (__builtin_expect(v1 != v2, 0))
 1500 0b20 639CE702 		bne	a5,a4,.L255	#, v1, v2,
 1501              	.L251:
 1502              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1503 0b24 3387C700 		add	a4,a5,a2	# tmp110, tmp109, v1
 1504              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1505 0b28 93C7F7FF 		not	a5,a5	# tmp112, v1
 1506              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1507 0b2c B377F700 		and	a5,a4,a5	# tmp112, tmp113, tmp109
 1508              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1509 0b30 B3F7D700 		and	a5,a5,a3	# tmp115, tmp114, tmp113
 1510              	# stdlib.c:231: 		s1 += 4;
 1511 0b34 13054500 		addi	a0,a0,4	#, s1, s1
 1512              	# stdlib.c:232: 		s2 += 4;
 1513 0b38 93854500 		addi	a1,a1,4	#, s2, s2
 1514              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1515 0b3c E38E07FC 		beq	a5,zero,.L276	#, tmp114,,
 1516              	.L265:
 1517              	# stdlib.c:196: 			return 0;
 1518 0b40 13050000 		li	a0,0		# <retval>,
 1519              	.L245:
 1520              	# stdlib.c:234: }
 1521 0b44 67800000 		ret	
 1522              	.L275:
 1523              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1524 0b48 33B5E700 		sltu	a0,a5,a4	# c2, tmp119, c1
 1525 0b4c 3305A040 		neg	a0,a0	# tmp120, tmp119
 1526 0b50 13651500 		ori	a0,a0,1	#, <retval>, tmp120
 1527 0b54 67800000 		ret	
 1528              	.L255:
 1529              	# stdlib.c:208: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1530 0b58 93F6F70F 		andi	a3,a5,0xff	# c1, v1
 1531              	# stdlib.c:208: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1532 0b5c 1376F70F 		andi	a2,a4,0xff	# c2, v2
 1533              	# stdlib.c:209: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1534 0b60 639AC604 		bne	a3,a2,.L273	#, c1, c2,
 1535              	# stdlib.c:196: 			return 0;
 1536 0b64 13050000 		li	a0,0		# <retval>,
 1537              	# stdlib.c:210: 			if (!c1) return 0;
 1538 0b68 E38E06FC 		beq	a3,zero,.L245	#, c1,,
 1539              	# stdlib.c:211: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1540 0b6c 93D68700 		srli	a3,a5,8	#, v1, v1
 1541              	# stdlib.c:211: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1542 0b70 13568700 		srli	a2,a4,8	#, v2, v2
 1543              	# stdlib.c:213: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1544 0b74 93F6F60F 		andi	a3,a3,0xff	# c1, v1
 1545              	# stdlib.c:213: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1546 0b78 1376F60F 		andi	a2,a2,0xff	# c2, v2
 1547              	# stdlib.c:214: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1548 0b7c 639CC602 		bne	a3,a2,.L273	#, c1, c2,
 1549              	# stdlib.c:215: 			if (!c1) return 0;
 1550 0b80 E38206FC 		beq	a3,zero,.L245	#, c1,,
 1551              	# stdlib.c:216: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1552 0b84 93D60701 		srli	a3,a5,16	#, v1, v1
 1553              	# stdlib.c:216: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1554 0b88 13560701 		srli	a2,a4,16	#, v2, v2
 1555              	# stdlib.c:218: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1556 0b8c 93F6F60F 		andi	a3,a3,0xff	# c1, v1
 1557              	# stdlib.c:218: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1558 0b90 1376F60F 		andi	a2,a2,0xff	# c2, v2
 1559              	# stdlib.c:219: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1560 0b94 6390C602 		bne	a3,a2,.L273	#, c1, c2,
 1561              	# stdlib.c:220: 			if (!c1) return 0;
 1562 0b98 E38606FA 		beq	a3,zero,.L245	#, c1,,
 1563              	# stdlib.c:223: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1564 0b9c 93D78701 		srli	a5,a5,24	#, c1, v1
 1565              	# stdlib.c:223: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1566 0ba0 13578701 		srli	a4,a4,24	#, c2, v2
 1567              	# stdlib.c:224: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1568 0ba4 E380E7FA 		beq	a5,a4,.L245	#, c1, c2,
 1569              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1570 0ba8 13051000 		li	a0,1		# <retval>,
 1571              	# stdlib.c:224: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1572 0bac E3FCE7F8 		bgeu	a5,a4,.L245	#, c1, c2,
 1573 0bb0 6F00C000 		j	.L271		#
 1574              	.L273:
 1575              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1576 0bb4 13051000 		li	a0,1		# <retval>,
 1577              	# stdlib.c:219: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1578 0bb8 E3F6C6F8 		bgeu	a3,a2,.L245	#, c1, c2,
 1579              	.L271:
 1580              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1581 0bbc 1305F0FF 		li	a0,-1		# <retval>,
 1582 0bc0 67800000 		ret	
 1584              		.align	2
 1585              		.globl	sin1
 1587              	sin1:
 1588              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1589 0bc4 635A0500 		bge	a0,zero,.L278	#, angle,,
 1590              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1591 0bc8 B787FFFF 		li	a5,-32768		# tmp96,
 1592 0bcc 3305F500 		add	a0,a0,a5	# tmp96, tmp98, angle
 1593 0bd0 13150501 		slli	a0,a0,16	#, angle, tmp98
 1594 0bd4 13550541 		srai	a0,a0,16	#, angle, angle
 1595              	.L278:
 1596              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 1597 0bd8 93578540 		srai	a5,a0,8	#, v0, angle
 1598              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1599 0bdc 93960701 		slli	a3,a5,16	#, v0.41_4, v0
 1600              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1601 0be0 13F70702 		andi	a4,a5,32	#, tmp102, v0
 1602              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1603 0be4 93D60601 		srli	a3,a3,16	#, v0.41_4, v0.41_4
 1604              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1605 0be8 630A0700 		beq	a4,zero,.L279	#, tmp102,,
 1606              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1607 0bec 93C7F7FF 		not	a5,a5	# tmp104, v0
 1608 0bf0 93970701 		slli	a5,a5,16	#, v0, tmp104
 1609 0bf4 93D70741 		srai	a5,a5,16	#, v0, v0
 1610              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1611 0bf8 1345F5FF 		not	a0,a0	# angle, angle
 1612              	.L279:
 1613              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1614 0bfc 93F7F701 		andi	a5,a5,31	#, _6, v0
 1615              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1616 0c00 13861700 		addi	a2,a5,1	#, tmp114, _6
 1617              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1618 0c04 37070000 		lui	a4,%hi(.LANCHOR1)	# tmp109,
 1619 0c08 13070700 		addi	a4,a4,%lo(.LANCHOR1)	# tmp108, tmp109,
 1620              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1621 0c0c 13161600 		slli	a2,a2,1	#, tmp115, tmp114
 1622              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1623 0c10 93971700 		slli	a5,a5,1	#, tmp110, _6
 1624 0c14 B307F700 		add	a5,a4,a5	# tmp110, tmp111, tmp108
 1625              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1626 0c18 3307C700 		add	a4,a4,a2	# tmp115, tmp116, tmp108
 1627              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1628 0c1c 03960700 		lh	a2,0(a5)		# _7, sin90[_6]
 1629              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1630 0c20 83170700 		lh	a5,0(a4)		# sin90[_9], sin90[_9]
 1631              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1632 0c24 1377F50F 		andi	a4,a0,0xff	# tmp121, angle
 1633              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1634 0c28 93F60604 		andi	a3,a3,64	#, tmp129, v0.41_4
 1635              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1636 0c2c 3385C740 		sub	a0,a5,a2	# tmp118, sin90[_9], _7
 1637              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1638 0c30 3305E502 		mul	a0,a0,a4	# tmp122, tmp118, tmp121
 1639              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1640 0c34 13558540 		srai	a0,a0,8	#, tmp123, tmp122
 1641              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1642 0c38 3305C500 		add	a0,a0,a2	# _7, tmp126, tmp123
 1643 0c3c 13150501 		slli	a0,a0,16	#, _5, tmp126
 1644 0c40 13550501 		srli	a0,a0,16	#, _5, _5
 1645              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1646 0c44 63880600 		beq	a3,zero,.L280	#, tmp129,,
 1647              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1648 0c48 3305A040 		neg	a0,a0	# tmp131, _5
 1649 0c4c 13150501 		slli	a0,a0,16	#, _5, tmp131
 1650 0c50 13550501 		srli	a0,a0,16	#, _5, _5
 1651              	.L280:
 1652              	# gfx_lib.h:94: }
 1653 0c54 13150501 		slli	a0,a0,16	#,, _5
 1654 0c58 13550541 		srai	a0,a0,16	#,,
 1655 0c5c 67800000 		ret	
 1657              		.align	2
 1658              		.globl	cos1
 1660              	cos1:
 1661              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1662 0c60 13160501 		slli	a2,a0,16	#, prephitmp_78, angle
 1663 0c64 13560601 		srli	a2,a2,16	#, prephitmp_78, prephitmp_78
 1664              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1665 0c68 63560500 		bge	a0,zero,.L288	#, angle,,
 1666              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1667 0c6c B7870000 		li	a5,32768		# tmp98,
 1668 0c70 3346F600 		xor	a2,a2,a5	# tmp98, prephitmp_78, prephitmp_78
 1669              	.L288:
 1670              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1671 0c74 B7A7FFFF 		li	a5,-24576		# tmp101,
 1672 0c78 93871700 		addi	a5,a5,1	#, tmp100, tmp101
 1673 0c7c B307F600 		add	a5,a2,a5	# tmp100, tmp99, prephitmp_78
 1674              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1675 0c80 93960701 		slli	a3,a5,16	#, angle, tmp99
 1676              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1677 0c84 13970701 		slli	a4,a5,16	#, _4, tmp99
 1678              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1679 0c88 93D60641 		srai	a3,a3,16	#, angle, angle
 1680              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1681 0c8c 13570701 		srli	a4,a4,16	#, _4, _4
 1682              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1683 0c90 63D00602 		bge	a3,zero,.L289	#, angle,,
 1684              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1685 0c94 B7270000 		li	a5,8192		# tmp104,
 1686 0c98 93871700 		addi	a5,a5,1	#, tmp103, tmp104
 1687 0c9c 3306F600 		add	a2,a2,a5	# tmp103, tmp102, prephitmp_78
 1688 0ca0 13170601 		slli	a4,a2,16	#, _4, tmp102
 1689 0ca4 93160601 		slli	a3,a2,16	#, angle, tmp102
 1690 0ca8 13570701 		srli	a4,a4,16	#, _4, _4
 1691 0cac 93D60641 		srai	a3,a3,16	#, angle, angle
 1692              	.L289:
 1693              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 1694 0cb0 93D78640 		srai	a5,a3,8	#, v0, angle
 1695              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1696 0cb4 13960701 		slli	a2,a5,16	#, v0.41_16, v0
 1697              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1698 0cb8 93F50702 		andi	a1,a5,32	#, tmp108, v0
 1699              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1700 0cbc 13560601 		srli	a2,a2,16	#, v0.41_16, v0.41_16
 1701              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1702 0cc0 638A0500 		beq	a1,zero,.L290	#, tmp108,,
 1703              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1704 0cc4 93C6F6FF 		not	a3,a3	# tmp112, angle
 1705              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1706 0cc8 13970601 		slli	a4,a3,16	#, _4, tmp112
 1707              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1708 0ccc 93C7F7FF 		not	a5,a5	# v0, v0
 1709              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1710 0cd0 13570701 		srli	a4,a4,16	#, _4, _4
 1711              	.L290:
 1712              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1713 0cd4 93F7F701 		andi	a5,a5,31	#, _22, v0
 1714              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1715 0cd8 93851700 		addi	a1,a5,1	#, tmp120, _22
 1716              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1717 0cdc B7060000 		lui	a3,%hi(.LANCHOR1)	# tmp115,
 1718 0ce0 93860600 		addi	a3,a3,%lo(.LANCHOR1)	# tmp114, tmp115,
 1719              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1720 0ce4 93951500 		slli	a1,a1,1	#, tmp121, tmp120
 1721              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1722 0ce8 93971700 		slli	a5,a5,1	#, tmp116, _22
 1723 0cec B387F600 		add	a5,a3,a5	# tmp116, tmp117, tmp114
 1724              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1725 0cf0 B386B600 		add	a3,a3,a1	# tmp121, tmp122, tmp114
 1726 0cf4 03950600 		lh	a0,0(a3)		# sin90[_25], sin90[_25]
 1727              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1728 0cf8 83950700 		lh	a1,0(a5)		# _23, sin90[_22]
 1729              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1730 0cfc 9377F70F 		andi	a5,a4,0xff	# tmp126, _4
 1731              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1732 0d00 13770604 		andi	a4,a2,64	#, tmp134, v0.41_16
 1733              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1734 0d04 3305B540 		sub	a0,a0,a1	# tmp124, sin90[_25], _23
 1735              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1736 0d08 3305F502 		mul	a0,a0,a5	# tmp127, tmp124, tmp126
 1737              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1738 0d0c 13558540 		srai	a0,a0,8	#, tmp128, tmp127
 1739              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 1740 0d10 3305B500 		add	a0,a0,a1	# _23, tmp131, tmp128
 1741 0d14 13150501 		slli	a0,a0,16	#, _37, tmp131
 1742 0d18 13550501 		srli	a0,a0,16	#, _37, _37
 1743              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1744 0d1c 63080700 		beq	a4,zero,.L291	#, tmp134,,
 1745              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1746 0d20 3305A040 		neg	a0,a0	# tmp136, _37
 1747 0d24 13150501 		slli	a0,a0,16	#, _37, tmp136
 1748 0d28 13550501 		srli	a0,a0,16	#, _37, _37
 1749              	.L291:
 1750              	# gfx_lib.h:110: }
 1751 0d2c 13150501 		slli	a0,a0,16	#,, _37
 1752 0d30 13550541 		srai	a0,a0,16	#,,
 1753 0d34 67800000 		ret	
 1755              		.align	2
 1756              		.globl	oled_spi_tx
 1758              	oled_spi_tx:
 1759              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1760 0d38 93958500 		slli	a1,a1,8	#, tmp80, tmp85
 1761 0d3c 93F50510 		andi	a1,a1,256	#, tmp81, tmp80
 1762              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1763 0d40 B3E5A500 		or	a1,a1,a0	# tmp84, _6, tmp81
 1764              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1765 0d44 B7070030 		li	a5,805306368		# tmp83,
 1766 0d48 23A6B700 		sw	a1,12(a5)	# _6, MEM[(volatile uint32_t *)805306380B]
 1767              	# gfx_lib.h:115: }
 1768 0d4c 67800000 		ret	
 1770              		.align	2
 1771              		.globl	oled_max_window
 1773              	oled_max_window:
 1774              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1775 0d50 B7070030 		li	a5,805306368		# tmp73,
 1776 0d54 13075001 		li	a4,21		# tmp74,
 1777 0d58 23A6E700 		sw	a4,12(a5)	# tmp74, MEM[(volatile uint32_t *)805306380B]
 1778 0d5c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1779 0d60 1307F005 		li	a4,95		# tmp79,
 1780 0d64 23A6E700 		sw	a4,12(a5)	# tmp79, MEM[(volatile uint32_t *)805306380B]
 1781 0d68 13075007 		li	a4,117		# tmp82,
 1782 0d6c 23A6E700 		sw	a4,12(a5)	# tmp82, MEM[(volatile uint32_t *)805306380B]
 1783 0d70 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1784 0d74 1307F003 		li	a4,63		# tmp87,
 1785 0d78 23A6E700 		sw	a4,12(a5)	# tmp87, MEM[(volatile uint32_t *)805306380B]
 1786              	# gfx_lib.h:120: }
 1787 0d7c 67800000 		ret	
 1789              		.align	2
 1790              		.globl	oled_show_fb_8or16
 1792              	oled_show_fb_8or16:
 1793              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1794 0d80 B7070030 		li	a5,805306368		# tmp94,
 1795 0d84 93065001 		li	a3,21		# tmp95,
 1796 0d88 23A6D700 		sw	a3,12(a5)	# tmp95, MEM[(volatile uint32_t *)805306380B]
 1797 0d8c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1798 0d90 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1799 0d94 13075007 		li	a4,117		# tmp102,
 1800 0d98 23A6E700 		sw	a4,12(a5)	# tmp102, MEM[(volatile uint32_t *)805306380B]
 1801 0d9c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1802 0da0 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1803 0da4 23A6D700 		sw	a3,12(a5)	# tmp95, MEM[(volatile uint32_t *)805306380B]
 1804 0da8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1805 0dac 9306F005 		li	a3,95		# tmp114,
 1806 0db0 23A6D700 		sw	a3,12(a5)	# tmp114, MEM[(volatile uint32_t *)805306380B]
 1807 0db4 23A6E700 		sw	a4,12(a5)	# tmp102, MEM[(volatile uint32_t *)805306380B]
 1808 0db8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1809 0dbc 1307F003 		li	a4,63		# tmp122,
 1810 0dc0 23A6E700 		sw	a4,12(a5)	# tmp122, MEM[(volatile uint32_t *)805306380B]
 1811              	# gfx_lib.h:122: void oled_show_fb_8or16(uint16_t *framebuffer, int _8bit) {
 1812 0dc4 93070500 		mv	a5,a0	# framebuffer, tmp154
 1813 0dc8 638A0504 		beq	a1,zero,.L301	#, tmp155,,
 1814 0dcc B7360000 		li	a3,12288		# tmp123,
 1815 0dd0 B306D500 		add	a3,a0,a3	# tmp123, _27, ivtmp.374
 1816              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1817 0dd4 37060030 		li	a2,805306368		# tmp128,
 1818              	.L302:
 1819              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1820 0dd8 03C70700 		lbu	a4,0(a5)	# MEM[(uint16_t *)_46], MEM[(uint16_t *)_46]
 1821              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1822 0ddc 93872700 		addi	a5,a5,2	#, ivtmp.374, ivtmp.374
 1823              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1824 0de0 13670710 		ori	a4,a4,256	#, _23, MEM[(uint16_t *)_46]
 1825              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1826 0de4 2326E600 		sw	a4,12(a2)	# _23, MEM[(volatile uint32_t *)805306380B]
 1827              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1828 0de8 E398D7FE 		bne	a5,a3,.L302	#, ivtmp.374, _27,
 1829              	.L303:
 1830              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1831 0dec B7070030 		li	a5,805306368		# tmp139,
 1832 0df0 13075001 		li	a4,21		# tmp140,
 1833 0df4 23A6E700 		sw	a4,12(a5)	# tmp140, MEM[(volatile uint32_t *)805306380B]
 1834 0df8 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1835 0dfc 1307F005 		li	a4,95		# tmp145,
 1836 0e00 23A6E700 		sw	a4,12(a5)	# tmp145, MEM[(volatile uint32_t *)805306380B]
 1837 0e04 13075007 		li	a4,117		# tmp148,
 1838 0e08 23A6E700 		sw	a4,12(a5)	# tmp148, MEM[(volatile uint32_t *)805306380B]
 1839 0e0c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1840 0e10 1307F003 		li	a4,63		# tmp153,
 1841 0e14 23A6E700 		sw	a4,12(a5)	# tmp153, MEM[(volatile uint32_t *)805306380B]
 1842              	# gfx_lib.h:144: }
 1843 0e18 67800000 		ret	
 1844              	.L301:
 1845 0e1c B7350000 		li	a1,12288		# tmp129,
 1846 0e20 B305B500 		add	a1,a0,a1	# tmp129, _19, ivtmp.380
 1847              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1848 0e24 37060030 		li	a2,805306368		# tmp135,
 1849              	.L304:
 1850              	# gfx_lib.h:133:       buf[0] = (framebuffer[i] >> 8) & 0xff;
 1851 0e28 03D70700 		lhu	a4,0(a5)	# pretmp_64, MEM[(uint16_t *)_4]
 1852              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1853 0e2c 93872700 		addi	a5,a5,2	#, ivtmp.380, ivtmp.380
 1854              	# gfx_lib.h:133:       buf[0] = (framebuffer[i] >> 8) & 0xff;
 1855 0e30 93568700 		srli	a3,a4,8	#, tmp131, pretmp_64
 1856              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1857 0e34 93E60610 		ori	a3,a3,256	#, _24, tmp131
 1858 0e38 1377F70F 		andi	a4,a4,0xff	# pretmp_64, pretmp_64
 1859 0e3c 13670710 		ori	a4,a4,256	#, _68, pretmp_64
 1860              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1861 0e40 2326D600 		sw	a3,12(a2)	# _24, MEM[(volatile uint32_t *)805306380B]
 1862 0e44 2326E600 		sw	a4,12(a2)	# _68, MEM[(volatile uint32_t *)805306380B]
 1863              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1864 0e48 E390B7FE 		bne	a5,a1,.L304	#, ivtmp.380, _19,
 1865 0e4c 6FF01FFA 		j	.L303		#
 1867              		.align	2
 1868              		.globl	oled_show_fb
 1870              	oled_show_fb:
 1871              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1872 0e50 B7070030 		li	a5,805306368		# tmp85,
 1873 0e54 93065001 		li	a3,21		# tmp86,
 1874 0e58 23A6D700 		sw	a3,12(a5)	# tmp86, MEM[(volatile uint32_t *)805306380B]
 1875 0e5c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1876 0e60 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1877 0e64 13075007 		li	a4,117		# tmp93,
 1878 0e68 23A6E700 		sw	a4,12(a5)	# tmp93, MEM[(volatile uint32_t *)805306380B]
 1879 0e6c 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1880 0e70 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1881 0e74 23A6D700 		sw	a3,12(a5)	# tmp86, MEM[(volatile uint32_t *)805306380B]
 1882 0e78 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1883 0e7c 9306F005 		li	a3,95		# tmp105,
 1884 0e80 23A6D700 		sw	a3,12(a5)	# tmp105, MEM[(volatile uint32_t *)805306380B]
 1885 0e84 23A6E700 		sw	a4,12(a5)	# tmp93, MEM[(volatile uint32_t *)805306380B]
 1886 0e88 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 1887 0e8c 1307F003 		li	a4,63		# tmp113,
 1888 0e90 B7350000 		li	a1,12288		# tmp114,
 1889 0e94 23A6E700 		sw	a4,12(a5)	# tmp113, MEM[(volatile uint32_t *)805306380B]
 1890 0e98 B305B500 		add	a1,a0,a1	# tmp114, _54, ivtmp.389
 1891 0e9c B7060030 		li	a3,805306368		# tmp119,
 1892              	.L308:
 1893              	# gfx_lib.h:133:       buf[0] = (framebuffer[i] >> 8) & 0xff;
 1894 0ea0 83570500 		lhu	a5,0(a0)	# _8, MEM[(uint16_t *)_56]
 1895              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1896 0ea4 13052500 		addi	a0,a0,2	#, ivtmp.389, ivtmp.389
 1897              	# gfx_lib.h:133:       buf[0] = (framebuffer[i] >> 8) & 0xff;
 1898 0ea8 13D78700 		srli	a4,a5,8	#, tmp115, _8
 1899              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1900 0eac 13670710 		ori	a4,a4,256	#, _13, tmp115
 1901 0eb0 93F7F70F 		andi	a5,a5,0xff	# _8, _8
 1902              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1903 0eb4 23A6E600 		sw	a4,12(a3)	# _13, MEM[(volatile uint32_t *)805306380B]
 1904              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1905 0eb8 93E70710 		ori	a5,a5,256	#, _16, _8
 1906              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1907 0ebc 23A6F600 		sw	a5,12(a3)	# _16, MEM[(volatile uint32_t *)805306380B]
 1908              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 1909 0ec0 E390A5FE 		bne	a1,a0,.L308	#, _54, ivtmp.389,
 1910              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1911 0ec4 93075001 		li	a5,21		# tmp125,
 1912 0ec8 23A6F600 		sw	a5,12(a3)	# tmp125, MEM[(volatile uint32_t *)805306380B]
 1913 0ecc 23A60600 		sw	zero,12(a3)	#, MEM[(volatile uint32_t *)805306380B]
 1914 0ed0 9307F005 		li	a5,95		# tmp130,
 1915 0ed4 23A6F600 		sw	a5,12(a3)	# tmp130, MEM[(volatile uint32_t *)805306380B]
 1916 0ed8 93075007 		li	a5,117		# tmp133,
 1917 0edc 23A6F600 		sw	a5,12(a3)	# tmp133, MEM[(volatile uint32_t *)805306380B]
 1918 0ee0 23A60600 		sw	zero,12(a3)	#, MEM[(volatile uint32_t *)805306380B]
 1919 0ee4 9307F003 		li	a5,63		# tmp138,
 1920 0ee8 23A6F600 		sw	a5,12(a3)	# tmp138, MEM[(volatile uint32_t *)805306380B]
 1921              	# gfx_lib.h:149: }
 1922 0eec 67800000 		ret	
 1924              		.align	2
 1925              		.globl	init_oled8bit_colors
 1927              	init_oled8bit_colors:
 1928 0ef0 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp78,
 1929 0ef4 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# ivtmp.399, tmp78,
 1930 0ef8 13865702 		addi	a2,a5,37	#, _15, ivtmp.399
 1931              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1932 0efc B7060030 		li	a3,805306368		# tmp80,
 1933              	.L311:
 1934              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1935 0f00 03C70700 		lbu	a4,0(a5)	# _7, MEM[(char *)_13]
 1936              	# gfx_lib.h:177:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 1937 0f04 93871700 		addi	a5,a5,1	#, ivtmp.399, ivtmp.399
 1938              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1939 0f08 23A6E600 		sw	a4,12(a3)	# _7, MEM[(volatile uint32_t *)805306380B]
 1940              	# gfx_lib.h:177:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 1941 0f0c E39AC7FE 		bne	a5,a2,.L311	#, ivtmp.399, _15,
 1942              	# gfx_lib.h:183: }
 1943 0f10 67800000 		ret	
 1945              		.align	2
 1946              		.globl	fb_setpixel
 1948              	fb_setpixel:
 1949              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
 1950 0f14 1387F5FF 		addi	a4,a1,-1	#, tmp86, x
 1951 0f18 9307E005 		li	a5,94		# tmp87,
 1952 0f1c 63E6E702 		bgtu	a4,a5,.L313	#, tmp86, tmp87,
 1953              	# gfx_lib.h:190:   if  ( y <= 0) return;
 1954 0f20 9307F6FF 		addi	a5,a2,-1	#, tmp88, y
 1955 0f24 1307E003 		li	a4,62		# tmp89,
 1956 0f28 6360F702 		bgtu	a5,a4,.L313	#, tmp88, tmp89,
 1957              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 1958 0f2c 93171600 		slli	a5,a2,1	#, tmp91, y
 1959 0f30 B387C700 		add	a5,a5,a2	# y, tmp92, tmp91
 1960 0f34 93975700 		slli	a5,a5,5	#, tmp93, tmp92
 1961 0f38 B387B700 		add	a5,a5,a1	# x, tmp94, tmp93
 1962              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 1963 0f3c 93971700 		slli	a5,a5,1	#, tmp95, tmp94
 1964 0f40 3305F500 		add	a0,a0,a5	# tmp95, tmp96, fb
 1965 0f44 2310D500 		sh	a3,0(a0)	# color, *_12
 1966              	.L313:
 1967              	# gfx_lib.h:192: }
 1968 0f48 67800000 		ret	
 1970              		.align	2
 1971              		.globl	fb_draw_bresenham
 1973              	fb_draw_bresenham:
 1974 0f4c 130101FD 		addi	sp,sp,-48	#,,
 1975 0f50 232C4101 		sw	s4,24(sp)	#,
 1976 0f54 130A0500 		mv	s4,a0	# tmp121, fb
 1977              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 1978 0f58 3385B640 		sub	a0,a3,a1	#, x1, x0
 1979              	# gfx_lib.h:195: {
 1980 0f5c 23261102 		sw	ra,44(sp)	#,
 1981 0f60 23248102 		sw	s0,40(sp)	#,
 1982 0f64 23229102 		sw	s1,36(sp)	#,
 1983 0f68 13040600 		mv	s0,a2	# y0, tmp123
 1984 0f6c 93840500 		mv	s1,a1	# x0, tmp122
 1985 0f70 23202103 		sw	s2,32(sp)	#,
 1986 0f74 232E3101 		sw	s3,28(sp)	#,
 1987 0f78 232A5101 		sw	s5,20(sp)	#,
 1988 0f7c 93890600 		mv	s3,a3	# x1, tmp124
 1989 0f80 23286101 		sw	s6,16(sp)	#,
 1990 0f84 23267101 		sw	s7,12(sp)	#,
 1991              	# gfx_lib.h:195: {
 1992 0f88 130B0700 		mv	s6,a4	# y1, tmp125
 1993 0f8c 938B0700 		mv	s7,a5	# color, tmp126
 1994              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 1995 0f90 97000000 		call	abs		#
 1995      E7800000 
 1996 0f98 13090500 		mv	s2,a0	# tmp127,
 1997              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 1998 0f9c 33058B40 		sub	a0,s6,s0	#, y1, y0
 1999 0fa0 97000000 		call	abs		#
 1999      E7800000 
 2000              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2001 0fa8 B3AA3401 		sgt	s5,s3,s1	# tmp112, x1, x0
 2002              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2003 0fac B32E6401 		sgt	t4,s6,s0	# tmp116, y1, y0
 2004              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2005 0fb0 939A1A00 		slli	s5,s5,1	#, iftmp.52_9, tmp112
 2006              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2007 0fb4 939E1E00 		slli	t4,t4,1	#, iftmp.53_10, tmp116
 2008              	# gfx_lib.h:197:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2009 0fb8 938AFAFF 		addi	s5,s5,-1	#, iftmp.52_9, iftmp.52_9
 2010              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2011 0fbc 330EA040 		neg	t3,a0	# dy, _3
 2012              	# gfx_lib.h:198:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2013 0fc0 938EFEFF 		addi	t4,t4,-1	#, iftmp.53_10, iftmp.53_10
 2014 0fc4 3306A940 		sub	a2,s2,a0	# err, dx, _3
 2015 0fc8 9388F4FF 		addi	a7,s1,-1	#, tmp110, x0
 2016              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
 2017 0fcc 9306E005 		li	a3,94		# tmp100,
 2018              	# gfx_lib.h:190:   if  ( y <= 0) return;
 2019 0fd0 9307E003 		li	a5,62		# tmp120,
 2020              	.L318:
 2021              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 2022 0fd4 13181400 		slli	a6,s0,1	#, tmp104, y0
 2023 0fd8 33088800 		add	a6,a6,s0	# y0, tmp105, tmp104
 2024 0fdc 13185800 		slli	a6,a6,5	#, tmp106, tmp105
 2025 0fe0 33089800 		add	a6,a6,s1	# x0, tmp107, tmp106
 2026              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 2027 0fe4 13181800 		slli	a6,a6,1	#, tmp108, tmp107
 2028              	# gfx_lib.h:205:     e2 = 2*err;
 2029 0fe8 93151600 		slli	a1,a2,1	#, e2, err
 2030              	# gfx_lib.h:190:   if  ( y <= 0) return;
 2031 0fec 1303F4FF 		addi	t1,s0,-1	#, tmp101, y0
 2032              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 2033 0ff0 33080A01 		add	a6,s4,a6	# tmp108, tmp109, fb
 2034              	# gfx_lib.h:189:   if  ( x <= 0 ) return;
 2035 0ff4 63E61601 		bgtu	a7,a3,.L319	#, tmp110, tmp100,
 2036              	# gfx_lib.h:190:   if  ( y <= 0) return;
 2037 0ff8 63E46700 		bgtu	t1,a5,.L319	#, tmp101, tmp120,
 2038              	# gfx_lib.h:191:   fb[x + y*HRES] = color;
 2039 0ffc 23107801 		sh	s7,0(a6)	# color, *_38
 2040              	.L319:
 2041              	# gfx_lib.h:203:     if (x0 == x1 && y0 == y1) break;
 2042 1000 63823403 		beq	s1,s3,.L327	#, x0, x1,
 2043              	.L320:
 2044              	# gfx_lib.h:206:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 2045 1004 63C8C501 		bgt	t3,a1,.L322	#, dy, e2,
 2046              	# gfx_lib.h:206:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 2047 1008 B3845401 		add	s1,s1,s5	# iftmp.52_9, x0, x0
 2048 100c 3306A640 		sub	a2,a2,a0	# err, err, _3
 2049 1010 9388F4FF 		addi	a7,s1,-1	#, tmp110, x0
 2050              	.L322:
 2051              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2052 1014 E340B9FC 		blt	s2,a1,.L318	#, dx, e2,
 2053              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2054 1018 33062601 		add	a2,a2,s2	# dx, err, err
 2055              	# gfx_lib.h:207:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2056 101c 3304D401 		add	s0,s0,t4	# iftmp.53_10, y0, y0
 2057 1020 6FF05FFB 		j	.L318		#
 2058              	.L327:
 2059              	# gfx_lib.h:203:     if (x0 == x1 && y0 == y1) break;
 2060 1024 E31064FF 		bne	s0,s6,.L320	#, y0, y1,
 2061              	# gfx_lib.h:209: }
 2062 1028 8320C102 		lw	ra,44(sp)		#,
 2063 102c 03248102 		lw	s0,40(sp)		#,
 2064 1030 83244102 		lw	s1,36(sp)		#,
 2065 1034 03290102 		lw	s2,32(sp)		#,
 2066 1038 8329C101 		lw	s3,28(sp)		#,
 2067 103c 032A8101 		lw	s4,24(sp)		#,
 2068 1040 832A4101 		lw	s5,20(sp)		#,
 2069 1044 032B0101 		lw	s6,16(sp)		#,
 2070 1048 832BC100 		lw	s7,12(sp)		#,
 2071 104c 13010103 		addi	sp,sp,48	#,,
 2072 1050 67800000 		jr	ra		#
 2074              		.align	2
 2075              		.globl	fill_oled
 2077              	fill_oled:
 2078 1054 93571500 		srli	a5,a0,1	#, tmp95, framebuffer
 2079              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 2080 1058 93960501 		slli	a3,a1,16	#, _14, tmp116
 2081 105c 93F71700 		andi	a5,a5,1	#, prolog_loop_niters.410, tmp95
 2082 1060 93D60601 		srli	a3,a3,16	#, _14, _14
 2083              	# gfx_lib.h:212:   for (int i = 0; i < (VRES*HRES); i++) {
 2084 1064 13070000 		li	a4,0		# i,
 2085 1068 63860700 		beq	a5,zero,.L329	#, prolog_loop_niters.410,,
 2086              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 2087 106c 2310D500 		sh	a3,0(a0)	# _14, *framebuffer_8(D)
 2088              	# gfx_lib.h:212:   for (int i = 0; i < (VRES*HRES); i++) {
 2089 1070 13071000 		li	a4,1		# i,
 2090              	.L329:
 2091 1074 37280000 		li	a6,8192		# tmp98,
 2092 1078 13080880 		addi	a6,a6,-2048	#, tmp97, tmp98
 2093 107c 3308F840 		sub	a6,a6,a5	# niters.411, tmp97, prolog_loop_niters.410
 2094 1080 13561800 		srli	a2,a6,1	#, bnd.412, niters.411
 2095 1084 93971700 		slli	a5,a5,1	#, tmp108, prolog_loop_niters.410
 2096 1088 93950601 		slli	a1,a3,16	#, tmp103, _14
 2097 108c B307F500 		add	a5,a0,a5	# tmp108, ivtmp.420, framebuffer
 2098 1090 13162600 		slli	a2,a2,2	#, tmp110, bnd.412
 2099 1094 B3E5B600 		or	a1,a3,a1	# tmp103, tmp107, _14
 2100 1098 3306F600 		add	a2,a2,a5	# ivtmp.420, _26, tmp110
 2101              	.L330:
 2102              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 2103 109c 23A0B700 		sw	a1,0(a5)	# tmp107, MEM <vector(2) short unsigned int> [(uint16_t *)_22]
 2104 10a0 93874700 		addi	a5,a5,4	#, ivtmp.420, ivtmp.420
 2105 10a4 E39CC7FE 		bne	a5,a2,.L330	#, ivtmp.420, _26,
 2106 10a8 1376E8FF 		andi	a2,a6,-2	#, niters_vector_mult_vf.413, niters.411
 2107 10ac B307E600 		add	a5,a2,a4	# i, tmp.414, niters_vector_mult_vf.413
 2108 10b0 6308C800 		beq	a6,a2,.L328	#, niters.411, niters_vector_mult_vf.413,
 2109              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 2110 10b4 93971700 		slli	a5,a5,1	#, tmp111, tmp.414
 2111 10b8 3305F500 		add	a0,a0,a5	# tmp111, tmp112, framebuffer
 2112 10bc 2310D500 		sh	a3,0(a0)	# _14, *_42
 2113              	.L328:
 2114              	# gfx_lib.h:215: }
 2115 10c0 67800000 		ret	
 2117              		.align	2
 2118              		.globl	mirror_x_axis
 2120              	mirror_x_axis:
 2121              	# gfx_lib.h:218:   point transformed = {p->x, 1.0 * p->y};
 2122 10c4 03A74500 		lw	a4,4(a1)		# vect__1.430, MEM[(int *)p_4(D) + 4B]
 2123              	# gfx_lib.h:219:   return transformed;
 2124 10c8 83A60500 		lw	a3,0(a1)		# MEM[(int *)p_4(D)], MEM[(int *)p_4(D)]
 2125 10cc 23240500 		sw	zero,8(a0)	#, <retval>.z
 2126 10d0 2322E500 		sw	a4,4(a0)	# vect__1.430, MEM[(int *)&<retval> + 4B]
 2127 10d4 2320D500 		sw	a3,0(a0)	# MEM[(int *)p_4(D)], MEM[(int *)&<retval>]
 2128              	# gfx_lib.h:220: }
 2129 10d8 67800000 		ret	
 2131              		.globl	__floatsidf
 2132              		.globl	__fixdfsi
 2133              		.align	2
 2134              		.globl	mirror_y_axis
 2136              	mirror_y_axis:
 2137 10dc 130101FF 		addi	sp,sp,-16	#,,
 2138 10e0 23248100 		sw	s0,8(sp)	#,
 2139 10e4 13040500 		mv	s0,a0	# tmp88, .result_ptr
 2140              	# gfx_lib.h:223:   point transformed = {-1.0 * p->x, p->y};
 2141 10e8 03A50500 		lw	a0,0(a1)		#, p_7(D)->x
 2142              	# gfx_lib.h:222: point mirror_y_axis(point *p) {
 2143 10ec 23261100 		sw	ra,12(sp)	#,
 2144 10f0 23229100 		sw	s1,4(sp)	#,
 2145              	# gfx_lib.h:223:   point transformed = {-1.0 * p->x, p->y};
 2146 10f4 83A44500 		lw	s1,4(a1)		# _5, p_7(D)->y
 2147              	# gfx_lib.h:223:   point transformed = {-1.0 * p->x, p->y};
 2148 10f8 97000000 		call	__floatsidf		#
 2148      E7800000 
 2149              	# gfx_lib.h:223:   point transformed = {-1.0 * p->x, p->y};
 2150 1100 B7070080 		li	a5,-2147483648		# tmp81,
 2151 1104 13070500 		mv	a4,a0	# tmp93, tmp90
 2152 1108 B3C7B700 		xor	a5,a5,a1	# tmp91, tmp94, tmp81
 2153 110c 13050700 		mv	a0,a4	# tmp95, tmp93
 2154 1110 93850700 		mv	a1,a5	#, tmp94
 2155 1114 97000000 		call	__fixdfsi		#
 2155      E7800000 
 2156 111c 2320A400 		sw	a0,0(s0)	# tmp92, <retval>.x
 2157              	# gfx_lib.h:224:   return transformed;
 2158 1120 23229400 		sw	s1,4(s0)	# _5, <retval>.y
 2159              	# gfx_lib.h:225: }
 2160 1124 8320C100 		lw	ra,12(sp)		#,
 2161              	# gfx_lib.h:224:   return transformed;
 2162 1128 23240400 		sw	zero,8(s0)	#, <retval>.z
 2163              	# gfx_lib.h:225: }
 2164 112c 13050400 		mv	a0,s0	#, .result_ptr
 2165 1130 03248100 		lw	s0,8(sp)		#,
 2166 1134 83244100 		lw	s1,4(sp)		#,
 2167 1138 13010101 		addi	sp,sp,16	#,,
 2168 113c 67800000 		jr	ra		#
 2170              		.align	2
 2171              		.globl	mirror_z_axis
 2173              	mirror_z_axis:
 2174 1140 130101FF 		addi	sp,sp,-16	#,,
 2175 1144 23248100 		sw	s0,8(sp)	#,
 2176 1148 13040500 		mv	s0,a0	# tmp89, .result_ptr
 2177              	# gfx_lib.h:228:   point transformed = {p->x, p->y, -1.0 * p->z};
 2178 114c 03A58500 		lw	a0,8(a1)		#, p_8(D)->z
 2179              	# gfx_lib.h:227: point mirror_z_axis(point *p) {
 2180 1150 23261100 		sw	ra,12(sp)	#,
 2181 1154 23229100 		sw	s1,4(sp)	#,
 2182 1158 23202101 		sw	s2,0(sp)	#,
 2183              	# gfx_lib.h:227: point mirror_z_axis(point *p) {
 2184 115c 93840500 		mv	s1,a1	# p, tmp90
 2185              	# gfx_lib.h:228:   point transformed = {p->x, p->y, -1.0 * p->z};
 2186 1160 03A94500 		lw	s2,4(a1)		# vect__1.442, MEM[(int *)p_8(D) + 4B]
 2187              	# gfx_lib.h:228:   point transformed = {p->x, p->y, -1.0 * p->z};
 2188 1164 97000000 		call	__floatsidf		#
 2188      E7800000 
 2189              	# gfx_lib.h:228:   point transformed = {p->x, p->y, -1.0 * p->z};
 2190 116c B7070080 		li	a5,-2147483648		# tmp82,
 2191 1170 B3C7B700 		xor	a5,a5,a1	# tmp92, tmp95, tmp82
 2192 1174 13070500 		mv	a4,a0	# tmp94, tmp91
 2193 1178 93850700 		mv	a1,a5	#, tmp95
 2194 117c 13050700 		mv	a0,a4	# tmp96, tmp94
 2195 1180 97000000 		call	__fixdfsi		#
 2195      E7800000 
 2196              	# gfx_lib.h:229:   return transformed;
 2197 1188 83A70400 		lw	a5,0(s1)		# MEM[(int *)p_8(D)], MEM[(int *)p_8(D)]
 2198 118c 23222401 		sw	s2,4(s0)	# vect__1.442, MEM[(int *)&<retval> + 4B]
 2199 1190 2324A400 		sw	a0,8(s0)	# tmp93, <retval>.z
 2200              	# gfx_lib.h:230: }
 2201 1194 8320C100 		lw	ra,12(sp)		#,
 2202              	# gfx_lib.h:229:   return transformed;
 2203 1198 2320F400 		sw	a5,0(s0)	# MEM[(int *)p_8(D)], MEM[(int *)&<retval>]
 2204              	# gfx_lib.h:230: }
 2205 119c 13050400 		mv	a0,s0	#, .result_ptr
 2206 11a0 03248100 		lw	s0,8(sp)		#,
 2207 11a4 83244100 		lw	s1,4(sp)		#,
 2208 11a8 03290100 		lw	s2,0(sp)		#,
 2209 11ac 13010101 		addi	sp,sp,16	#,,
 2210 11b0 67800000 		jr	ra		#
 2212              		.globl	__floatsisf
 2213              		.globl	__mulsf3
 2214              		.globl	__fixsfsi
 2215              		.align	2
 2216              		.globl	scale
 2218              	scale:
 2219 11b4 130101FE 		addi	sp,sp,-32	#,,
 2220 11b8 232C8100 		sw	s0,24(sp)	#,
 2221 11bc 13040500 		mv	s0,a0	# tmp96, .result_ptr
 2222              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2223 11c0 03A54500 		lw	a0,4(a1)		#, p_14(D)->y
 2224              	# gfx_lib.h:232: point scale(point *p, float sx, float sy, float sz) {
 2225 11c4 232E1100 		sw	ra,28(sp)	#,
 2226 11c8 232A9100 		sw	s1,20(sp)	#,
 2227 11cc 23282101 		sw	s2,16(sp)	#,
 2228 11d0 23263101 		sw	s3,12(sp)	#,
 2229 11d4 13890600 		mv	s2,a3	# sy, tmp99
 2230 11d8 93090600 		mv	s3,a2	# sx, tmp98
 2231 11dc 23244101 		sw	s4,8(sp)	#,
 2232              	# gfx_lib.h:232: point scale(point *p, float sx, float sy, float sz) {
 2233 11e0 93840500 		mv	s1,a1	# p, tmp97
 2234 11e4 130A0700 		mv	s4,a4	# sz, tmp100
 2235              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2236 11e8 97000000 		call	__floatsisf		#
 2236      E7800000 
 2237 11f0 93050900 		mv	a1,s2	#, sy
 2238 11f4 97000000 		call	__mulsf3		#
 2238      E7800000 
 2239              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2240 11fc 97000000 		call	__fixsfsi		#
 2240      E7800000 
 2241 1204 13090500 		mv	s2,a0	# tmp101,
 2242              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2243 1208 03A58400 		lw	a0,8(s1)		#, p_14(D)->z
 2244 120c 97000000 		call	__floatsisf		#
 2244      E7800000 
 2245 1214 93050A00 		mv	a1,s4	#, sz
 2246 1218 97000000 		call	__mulsf3		#
 2246      E7800000 
 2247              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2248 1220 97000000 		call	__fixsfsi		#
 2248      E7800000 
 2249 1228 93070500 		mv	a5,a0	# tmp102,
 2250              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2251 122c 03A50400 		lw	a0,0(s1)		#, p_14(D)->x
 2252              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2253 1230 93840700 		mv	s1,a5	# _12, tmp102
 2254              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2255 1234 97000000 		call	__floatsisf		#
 2255      E7800000 
 2256 123c 93850900 		mv	a1,s3	#, sx
 2257 1240 97000000 		call	__mulsf3		#
 2257      E7800000 
 2258              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2259 1248 97000000 		call	__fixsfsi		#
 2259      E7800000 
 2260 1250 2320A400 		sw	a0,0(s0)	# tmp103, <retval>.x
 2261              	# gfx_lib.h:234:   return transformed;
 2262 1254 23222401 		sw	s2,4(s0)	# _8, <retval>.y
 2263 1258 23249400 		sw	s1,8(s0)	# _12, <retval>.z
 2264              	# gfx_lib.h:235: }
 2265 125c 8320C101 		lw	ra,28(sp)		#,
 2266 1260 13050400 		mv	a0,s0	#, .result_ptr
 2267 1264 03248101 		lw	s0,24(sp)		#,
 2268 1268 83244101 		lw	s1,20(sp)		#,
 2269 126c 03290101 		lw	s2,16(sp)		#,
 2270 1270 8329C100 		lw	s3,12(sp)		#,
 2271 1274 032A8100 		lw	s4,8(sp)		#,
 2272 1278 13010102 		addi	sp,sp,32	#,,
 2273 127c 67800000 		jr	ra		#
 2275              		.align	2
 2276              		.globl	translate
 2278              	translate:
 2279              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2280 1280 83A84500 		lw	a7,4(a1)		# p_8(D)->y, p_8(D)->y
 2281              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2282 1284 03A88500 		lw	a6,8(a1)		# p_8(D)->z, p_8(D)->z
 2283              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2284 1288 83A50500 		lw	a1,0(a1)		# p_8(D)->x, p_8(D)->x
 2285              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2286 128c B3861601 		add	a3,a3,a7	# p_8(D)->y, _4, tmp90
 2287              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2288 1290 33070701 		add	a4,a4,a6	# p_8(D)->z, _6, tmp91
 2289              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2290 1294 B385C500 		add	a1,a1,a2	# tmp89, tmp85, p_8(D)->x
 2291              	# gfx_lib.h:239:   return transformed;
 2292 1298 2320B500 		sw	a1,0(a0)	# tmp85, <retval>.x
 2293 129c 2322D500 		sw	a3,4(a0)	# _4, <retval>.y
 2294 12a0 2324E500 		sw	a4,8(a0)	# _6, <retval>.z
 2295              	# gfx_lib.h:240: }
 2296 12a4 67800000 		ret	
 2298              		.globl	__muldf3
 2299              		.globl	__divdf3
 2300              		.globl	__truncdfsf2
 2301              		.globl	__subsf3
 2302              		.globl	__addsf3
 2303              		.align	2
 2304              		.globl	rotateX_pivot
 2306              	rotateX_pivot:
 2307 12a8 130101FD 		addi	sp,sp,-48	#,,
 2308 12ac 23248102 		sw	s0,40(sp)	#,
 2309 12b0 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2310              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2311 12b4 13850600 		mv	a0,a3	#, tmp262
 2312              	# gfx_lib.h:243: point rotateX_pivot(point *p, point *pivot, int angle) {
 2313 12b8 23261102 		sw	ra,44(sp)	#,
 2314 12bc 23229102 		sw	s1,36(sp)	#,
 2315 12c0 23202103 		sw	s2,32(sp)	#,
 2316              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2317 12c4 83A48500 		lw	s1,8(a1)		# p_32(D)->z, p_32(D)->z
 2318              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2319 12c8 03A94500 		lw	s2,4(a1)		# p_32(D)->y, p_32(D)->y
 2320              	# gfx_lib.h:243: point rotateX_pivot(point *p, point *pivot, int angle) {
 2321 12cc 232E3101 		sw	s3,28(sp)	#,
 2322 12d0 232C4101 		sw	s4,24(sp)	#,
 2323              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2324 12d4 83298600 		lw	s3,8(a2)		# _6, pivot_33(D)->z
 2325              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2326 12d8 032A4600 		lw	s4,4(a2)		# _3, pivot_33(D)->y
 2327              	# gfx_lib.h:243: point rotateX_pivot(point *p, point *pivot, int angle) {
 2328 12dc 23286101 		sw	s6,16(sp)	#,
 2329 12e0 23248101 		sw	s8,8(sp)	#,
 2330              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2331 12e4 03AB0500 		lw	s6,0(a1)		# _1, p_32(D)->x
 2332              	# gfx_lib.h:243: point rotateX_pivot(point *p, point *pivot, int angle) {
 2333 12e8 232A5101 		sw	s5,20(sp)	#,
 2334 12ec 23267101 		sw	s7,12(sp)	#,
 2335 12f0 23229101 		sw	s9,4(sp)	#,
 2336              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2337 12f4 97000000 		call	__floatsidf		#
 2337      E7800000 
 2338 12fc B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 2339 1300 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 2340 1304 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 2341              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2342 1308 33094941 		sub	s2,s2,s4	# _4, p_32(D)->y, _3
 2343              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2344 130c B3843441 		sub	s1,s1,s3	# _7, p_32(D)->z, _6
 2345              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2346 1310 97000000 		call	__muldf3		#
 2346      E7800000 
 2347 1318 B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 2348 131c 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 2349 1320 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 2350 1324 97000000 		call	__divdf3		#
 2350      E7800000 
 2351 132c 97000000 		call	__fixdfsi		#
 2351      E7800000 
 2352 1334 13170501 		slli	a4,a0,16	#, angle, tmp263
 2353              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2354 1338 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 2355              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2356 133c 13570741 		srai	a4,a4,16	#, angle, angle
 2357              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2358 1340 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 2359              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2360 1344 635A0700 		bge	a4,zero,.L344	#, angle,,
 2361              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2362 1348 B7870000 		li	a5,32768		# tmp163,
 2363 134c 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 2364 1350 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 2365 1354 13570741 		srai	a4,a4,16	#, angle, angle
 2366              	.L344:
 2367              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2368 1358 93578740 		srai	a5,a4,8	#, v0, angle
 2369              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2370 135c 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 2371              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2372 1360 93F50702 		andi	a1,a5,32	#, tmp167, v0
 2373              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2374 1364 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 2375 1368 93060C00 		mv	a3,s8	# _235, prephitmp_203
 2376              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2377 136c 638A0500 		beq	a1,zero,.L345	#, tmp167,,
 2378              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2379 1370 1347F7FF 		not	a4,a4	# tmp171, angle
 2380              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2381 1374 93160701 		slli	a3,a4,16	#, _235, tmp171
 2382              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2383 1378 93C7F7FF 		not	a5,a5	# v0, v0
 2384              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2385 137c 93D60601 		srli	a3,a3,16	#, _235, _235
 2386              	.L345:
 2387              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2388 1380 93F7F701 		andi	a5,a5,31	#, _59, v0
 2389              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2390 1384 13871700 		addi	a4,a5,1	#, tmp179, _59
 2391              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2392 1388 B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 2393 138c 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 2394 1390 93971700 		slli	a5,a5,1	#, tmp175, _59
 2395              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2396 1394 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 2397              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2398 1398 B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 2399              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2400 139c 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 2401              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2402 13a0 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 2403              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2404 13a4 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 2405              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2406 13a8 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 2407              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2408 13ac 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 2409              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2410 13b0 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 2411              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2412 13b4 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 2413              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2414 13b8 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 2415              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2416 13bc 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 2417 13c0 13150501 		slli	a0,a0,16	#, _74, tmp190
 2418 13c4 13550501 		srli	a0,a0,16	#, _74, _74
 2419              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2420 13c8 63880700 		beq	a5,zero,.L346	#, tmp193,,
 2421              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2422 13cc 3305A040 		neg	a0,a0	# tmp195, _74
 2423 13d0 13150501 		slli	a0,a0,16	#, _74, tmp195
 2424 13d4 13550501 		srli	a0,a0,16	#, _74, _74
 2425              	.L346:
 2426              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2427 13d8 13150501 		slli	a0,a0,16	#,, _74
 2428 13dc 13550541 		srai	a0,a0,16	#,,
 2429 13e0 97000000 		call	__floatsidf		#
 2429      E7800000 
 2430 13e8 B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 2431 13ec 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2432 13f0 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2433 13f4 97000000 		call	__muldf3		#
 2433      E7800000 
 2434              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2435 13fc 97000000 		call	__truncdfsf2		#
 2435      E7800000 
 2436              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2437 1404 B7A7FFFF 		li	a5,-24576		# tmp203,
 2438 1408 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 2439 140c B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 2440              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2441 1410 93960701 		slli	a3,a5,16	#, angle, tmp201
 2442              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2443 1414 13970701 		slli	a4,a5,16	#, _42, tmp201
 2444              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2445 1418 93D60641 		srai	a3,a3,16	#, angle, angle
 2446              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 2447 141c 930C0500 		mv	s9,a0	# sin_theta, tmp264
 2448              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2449 1420 13570701 		srli	a4,a4,16	#, _42, _42
 2450              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2451 1424 63D00602 		bge	a3,zero,.L347	#, angle,,
 2452              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2453 1428 B7270000 		li	a5,8192		# tmp206,
 2454 142c 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 2455 1430 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 2456 1434 13170C01 		slli	a4,s8,16	#, _42, tmp204
 2457 1438 93160C01 		slli	a3,s8,16	#, angle, tmp204
 2458 143c 13570701 		srli	a4,a4,16	#, _42, _42
 2459 1440 93D60641 		srai	a3,a3,16	#, angle, angle
 2460              	.L347:
 2461              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2462 1444 93D78640 		srai	a5,a3,8	#, v0, angle
 2463              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2464 1448 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 2465              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2466 144c 93F50702 		andi	a1,a5,32	#, tmp210, v0
 2467              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2468 1450 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 2469              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2470 1454 638A0500 		beq	a1,zero,.L348	#, tmp210,,
 2471              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2472 1458 93C6F6FF 		not	a3,a3	# tmp214, angle
 2473              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2474 145c 13970601 		slli	a4,a3,16	#, _42, tmp214
 2475              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2476 1460 93C7F7FF 		not	a5,a5	# v0, v0
 2477              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2478 1464 13570701 		srli	a4,a4,16	#, _42, _42
 2479              	.L348:
 2480              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2481 1468 93F7F701 		andi	a5,a5,31	#, _90, v0
 2482              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2483 146c 93861700 		addi	a3,a5,1	#, tmp222, _90
 2484 1470 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 2485              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2486 1474 93971700 		slli	a5,a5,1	#, tmp218, _90
 2487 1478 B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 2488              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2489 147c B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 2490              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2491 1480 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 2492              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2493 1484 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 2494              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2495 1488 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 2496              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2497 148c 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 2498              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2499 1490 B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 2500              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2501 1494 B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 2502              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2503 1498 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 2504              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2505 149c B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 2506 14a0 93970701 		slli	a5,a5,16	#, _105, tmp233
 2507 14a4 93D70701 		srli	a5,a5,16	#, _105, _105
 2508              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2509 14a8 63880600 		beq	a3,zero,.L349	#, tmp236,,
 2510              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2511 14ac B307F040 		neg	a5,a5	# tmp238, _105
 2512 14b0 93970701 		slli	a5,a5,16	#, _105, tmp238
 2513 14b4 93D70701 		srli	a5,a5,16	#, _105, _105
 2514              	.L349:
 2515              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 2516 14b8 13950701 		slli	a0,a5,16	#,, _105
 2517 14bc 13550541 		srai	a0,a0,16	#,,
 2518 14c0 97000000 		call	__floatsidf		#
 2518      E7800000 
 2519 14c8 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2520 14cc 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2521 14d0 97000000 		call	__muldf3		#
 2521      E7800000 
 2522              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 2523 14d8 97000000 		call	__truncdfsf2		#
 2523      E7800000 
 2524 14e0 93070500 		mv	a5,a0	# tmp265,
 2525              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2526 14e4 13050900 		mv	a0,s2	#, _4
 2527              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 2528 14e8 13890700 		mv	s2,a5	# tmp243, tmp265
 2529              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2530 14ec 97000000 		call	__floatsisf		#
 2530      E7800000 
 2531 14f4 930A0500 		mv	s5,a0	# tmp266,
 2532              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2533 14f8 13850400 		mv	a0,s1	#, _7
 2534 14fc 97000000 		call	__floatsisf		#
 2534      E7800000 
 2535 1504 93040500 		mv	s1,a0	# tmp267,
 2536              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2537 1508 93050900 		mv	a1,s2	#, tmp243
 2538              	# gfx_lib.h:255:   return transformed;
 2539 150c 23206401 		sw	s6,0(s0)	# _1, <retval>.x
 2540              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2541 1510 13850A00 		mv	a0,s5	#, _18
 2542 1514 97000000 		call	__mulsf3		#
 2542      E7800000 
 2543 151c 130B0500 		mv	s6,a0	# tmp244, tmp268
 2544              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2545 1520 93850C00 		mv	a1,s9	#, sin_theta
 2546 1524 13850400 		mv	a0,s1	#, _20
 2547 1528 97000000 		call	__mulsf3		#
 2547      E7800000 
 2548 1530 93050500 		mv	a1,a0	# tmp269,
 2549              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2550 1534 13050B00 		mv	a0,s6	#, tmp244
 2551 1538 97000000 		call	__subsf3		#
 2551      E7800000 
 2552 1540 130B0500 		mv	s6,a0	# tmp246, tmp270
 2553              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2554 1544 13050A00 		mv	a0,s4	#, _3
 2555 1548 97000000 		call	__floatsisf		#
 2555      E7800000 
 2556 1550 93050500 		mv	a1,a0	# tmp271,
 2557 1554 13050B00 		mv	a0,s6	#, tmp246
 2558 1558 97000000 		call	__addsf3		#
 2558      E7800000 
 2559              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2560 1560 97000000 		call	__fixsfsi		#
 2560      E7800000 
 2561              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2562 1568 93850C00 		mv	a1,s9	#, sin_theta
 2563              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 2564 156c 2322A400 		sw	a0,4(s0)	# tmp272, <retval>.y
 2565              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2566 1570 13850A00 		mv	a0,s5	#, _18
 2567 1574 97000000 		call	__mulsf3		#
 2567      E7800000 
 2568 157c 130A0500 		mv	s4,a0	# tmp250, tmp273
 2569              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2570 1580 93050900 		mv	a1,s2	#, tmp243
 2571 1584 13850400 		mv	a0,s1	#, _20
 2572 1588 97000000 		call	__mulsf3		#
 2572      E7800000 
 2573 1590 93050500 		mv	a1,a0	# tmp274,
 2574              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2575 1594 13050A00 		mv	a0,s4	#, tmp250
 2576 1598 97000000 		call	__addsf3		#
 2576      E7800000 
 2577 15a0 93040500 		mv	s1,a0	# tmp252, tmp275
 2578              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2579 15a4 13850900 		mv	a0,s3	#, _6
 2580 15a8 97000000 		call	__floatsisf		#
 2580      E7800000 
 2581 15b0 93050500 		mv	a1,a0	# tmp276,
 2582 15b4 13850400 		mv	a0,s1	#, tmp252
 2583 15b8 97000000 		call	__addsf3		#
 2583      E7800000 
 2584              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 2585 15c0 97000000 		call	__fixsfsi		#
 2585      E7800000 
 2586 15c8 2324A400 		sw	a0,8(s0)	# tmp277, <retval>.z
 2587              	# gfx_lib.h:256: }
 2588 15cc 8320C102 		lw	ra,44(sp)		#,
 2589 15d0 13050400 		mv	a0,s0	#, .result_ptr
 2590 15d4 03248102 		lw	s0,40(sp)		#,
 2591 15d8 83244102 		lw	s1,36(sp)		#,
 2592 15dc 03290102 		lw	s2,32(sp)		#,
 2593 15e0 8329C101 		lw	s3,28(sp)		#,
 2594 15e4 032A8101 		lw	s4,24(sp)		#,
 2595 15e8 832A4101 		lw	s5,20(sp)		#,
 2596 15ec 032B0101 		lw	s6,16(sp)		#,
 2597 15f0 832BC100 		lw	s7,12(sp)		#,
 2598 15f4 032C8100 		lw	s8,8(sp)		#,
 2599 15f8 832C4100 		lw	s9,4(sp)		#,
 2600 15fc 13010103 		addi	sp,sp,48	#,,
 2601 1600 67800000 		jr	ra		#
 2603              		.align	2
 2604              		.globl	rotateY_pivot
 2606              	rotateY_pivot:
 2607 1604 130101FD 		addi	sp,sp,-48	#,,
 2608 1608 23248102 		sw	s0,40(sp)	#,
 2609 160c 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2610              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2611 1610 13850600 		mv	a0,a3	#, tmp262
 2612              	# gfx_lib.h:258: point rotateY_pivot(point *p, point *pivot, int angle) {
 2613 1614 23261102 		sw	ra,44(sp)	#,
 2614 1618 23229102 		sw	s1,36(sp)	#,
 2615 161c 23202103 		sw	s2,32(sp)	#,
 2616              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2617 1620 83A48500 		lw	s1,8(a1)		# p_32(D)->z, p_32(D)->z
 2618              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2619 1624 03A90500 		lw	s2,0(a1)		# p_32(D)->x, p_32(D)->x
 2620              	# gfx_lib.h:258: point rotateY_pivot(point *p, point *pivot, int angle) {
 2621 1628 232E3101 		sw	s3,28(sp)	#,
 2622 162c 232C4101 		sw	s4,24(sp)	#,
 2623              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2624 1630 83298600 		lw	s3,8(a2)		# _6, pivot_33(D)->z
 2625              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2626 1634 032A0600 		lw	s4,0(a2)		# _2, pivot_33(D)->x
 2627              	# gfx_lib.h:258: point rotateY_pivot(point *p, point *pivot, int angle) {
 2628 1638 23286101 		sw	s6,16(sp)	#,
 2629 163c 23248101 		sw	s8,8(sp)	#,
 2630              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2631 1640 03AB4500 		lw	s6,4(a1)		# _4, p_32(D)->y
 2632              	# gfx_lib.h:258: point rotateY_pivot(point *p, point *pivot, int angle) {
 2633 1644 232A5101 		sw	s5,20(sp)	#,
 2634 1648 23267101 		sw	s7,12(sp)	#,
 2635 164c 23229101 		sw	s9,4(sp)	#,
 2636              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2637 1650 97000000 		call	__floatsidf		#
 2637      E7800000 
 2638 1658 B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 2639 165c 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 2640 1660 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 2641              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2642 1664 33094941 		sub	s2,s2,s4	# _3, p_32(D)->x, _2
 2643              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2644 1668 B3843441 		sub	s1,s1,s3	# _7, p_32(D)->z, _6
 2645              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2646 166c 97000000 		call	__muldf3		#
 2646      E7800000 
 2647 1674 B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 2648 1678 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 2649 167c 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 2650 1680 97000000 		call	__divdf3		#
 2650      E7800000 
 2651 1688 97000000 		call	__fixdfsi		#
 2651      E7800000 
 2652 1690 13170501 		slli	a4,a0,16	#, angle, tmp263
 2653              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2654 1694 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 2655              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2656 1698 13570741 		srai	a4,a4,16	#, angle, angle
 2657              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2658 169c 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 2659              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2660 16a0 635A0700 		bge	a4,zero,.L363	#, angle,,
 2661              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2662 16a4 B7870000 		li	a5,32768		# tmp163,
 2663 16a8 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 2664 16ac 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 2665 16b0 13570741 		srai	a4,a4,16	#, angle, angle
 2666              	.L363:
 2667              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2668 16b4 93578740 		srai	a5,a4,8	#, v0, angle
 2669              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2670 16b8 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 2671              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2672 16bc 93F50702 		andi	a1,a5,32	#, tmp167, v0
 2673              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2674 16c0 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 2675 16c4 93060C00 		mv	a3,s8	# _235, prephitmp_203
 2676              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2677 16c8 638A0500 		beq	a1,zero,.L364	#, tmp167,,
 2678              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2679 16cc 1347F7FF 		not	a4,a4	# tmp171, angle
 2680              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2681 16d0 93160701 		slli	a3,a4,16	#, _235, tmp171
 2682              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2683 16d4 93C7F7FF 		not	a5,a5	# v0, v0
 2684              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2685 16d8 93D60601 		srli	a3,a3,16	#, _235, _235
 2686              	.L364:
 2687              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2688 16dc 93F7F701 		andi	a5,a5,31	#, _59, v0
 2689              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2690 16e0 13871700 		addi	a4,a5,1	#, tmp179, _59
 2691              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2692 16e4 B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 2693 16e8 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 2694 16ec 93971700 		slli	a5,a5,1	#, tmp175, _59
 2695              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2696 16f0 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 2697              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2698 16f4 B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 2699              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2700 16f8 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 2701              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2702 16fc 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 2703              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2704 1700 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 2705              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2706 1704 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 2707              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2708 1708 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 2709              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2710 170c 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 2711              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2712 1710 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 2713              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2714 1714 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 2715              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2716 1718 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 2717 171c 13150501 		slli	a0,a0,16	#, _74, tmp190
 2718 1720 13550501 		srli	a0,a0,16	#, _74, _74
 2719              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2720 1724 63880700 		beq	a5,zero,.L365	#, tmp193,,
 2721              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2722 1728 3305A040 		neg	a0,a0	# tmp195, _74
 2723 172c 13150501 		slli	a0,a0,16	#, _74, tmp195
 2724 1730 13550501 		srli	a0,a0,16	#, _74, _74
 2725              	.L365:
 2726              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2727 1734 13150501 		slli	a0,a0,16	#,, _74
 2728 1738 13550541 		srai	a0,a0,16	#,,
 2729 173c 97000000 		call	__floatsidf		#
 2729      E7800000 
 2730 1744 B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 2731 1748 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2732 174c 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2733 1750 97000000 		call	__muldf3		#
 2733      E7800000 
 2734              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2735 1758 97000000 		call	__truncdfsf2		#
 2735      E7800000 
 2736              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2737 1760 B7A7FFFF 		li	a5,-24576		# tmp203,
 2738 1764 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 2739 1768 B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 2740              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2741 176c 93960701 		slli	a3,a5,16	#, angle, tmp201
 2742              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2743 1770 13970701 		slli	a4,a5,16	#, _42, tmp201
 2744              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2745 1774 93D60641 		srai	a3,a3,16	#, angle, angle
 2746              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 2747 1778 930C0500 		mv	s9,a0	# sin_theta, tmp264
 2748              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2749 177c 13570701 		srli	a4,a4,16	#, _42, _42
 2750              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2751 1780 63D00602 		bge	a3,zero,.L366	#, angle,,
 2752              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2753 1784 B7270000 		li	a5,8192		# tmp206,
 2754 1788 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 2755 178c 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 2756 1790 13170C01 		slli	a4,s8,16	#, _42, tmp204
 2757 1794 93160C01 		slli	a3,s8,16	#, angle, tmp204
 2758 1798 13570701 		srli	a4,a4,16	#, _42, _42
 2759 179c 93D60641 		srai	a3,a3,16	#, angle, angle
 2760              	.L366:
 2761              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2762 17a0 93D78640 		srai	a5,a3,8	#, v0, angle
 2763              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2764 17a4 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 2765              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2766 17a8 93F50702 		andi	a1,a5,32	#, tmp210, v0
 2767              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2768 17ac 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 2769              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2770 17b0 638A0500 		beq	a1,zero,.L367	#, tmp210,,
 2771              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2772 17b4 93C6F6FF 		not	a3,a3	# tmp214, angle
 2773              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2774 17b8 13970601 		slli	a4,a3,16	#, _42, tmp214
 2775              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2776 17bc 93C7F7FF 		not	a5,a5	# v0, v0
 2777              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2778 17c0 13570701 		srli	a4,a4,16	#, _42, _42
 2779              	.L367:
 2780              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2781 17c4 93F7F701 		andi	a5,a5,31	#, _90, v0
 2782              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2783 17c8 93861700 		addi	a3,a5,1	#, tmp222, _90
 2784 17cc 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 2785              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2786 17d0 93971700 		slli	a5,a5,1	#, tmp218, _90
 2787 17d4 B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 2788              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2789 17d8 B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 2790              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2791 17dc 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 2792              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2793 17e0 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 2794              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2795 17e4 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 2796              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2797 17e8 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 2798              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2799 17ec B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 2800              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2801 17f0 B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 2802              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2803 17f4 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 2804              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2805 17f8 B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 2806 17fc 93970701 		slli	a5,a5,16	#, _105, tmp233
 2807 1800 93D70701 		srli	a5,a5,16	#, _105, _105
 2808              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2809 1804 63880600 		beq	a3,zero,.L368	#, tmp236,,
 2810              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2811 1808 B307F040 		neg	a5,a5	# tmp238, _105
 2812 180c 93970701 		slli	a5,a5,16	#, _105, tmp238
 2813 1810 93D70701 		srli	a5,a5,16	#, _105, _105
 2814              	.L368:
 2815              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 2816 1814 13950701 		slli	a0,a5,16	#,, _105
 2817 1818 13550541 		srai	a0,a0,16	#,,
 2818 181c 97000000 		call	__floatsidf		#
 2818      E7800000 
 2819 1824 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2820 1828 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2821 182c 97000000 		call	__muldf3		#
 2821      E7800000 
 2822              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 2823 1834 97000000 		call	__truncdfsf2		#
 2823      E7800000 
 2824 183c 930A0500 		mv	s5,a0	# tmp265,
 2825              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2826 1840 13050900 		mv	a0,s2	#, _3
 2827 1844 97000000 		call	__floatsisf		#
 2827      E7800000 
 2828 184c 93070500 		mv	a5,a0	# tmp266,
 2829              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2830 1850 13850400 		mv	a0,s1	#, _7
 2831              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2832 1854 93840700 		mv	s1,a5	# _18, tmp266
 2833              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2834 1858 97000000 		call	__floatsisf		#
 2834      E7800000 
 2835 1860 13090500 		mv	s2,a0	# tmp267,
 2836              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2837 1864 93850A00 		mv	a1,s5	#, tmp243
 2838 1868 13850400 		mv	a0,s1	#, _18
 2839 186c 97000000 		call	__mulsf3		#
 2839      E7800000 
 2840 1874 930B0500 		mv	s7,a0	# tmp244, tmp268
 2841              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2842 1878 93850C00 		mv	a1,s9	#, sin_theta
 2843 187c 13050900 		mv	a0,s2	#, _20
 2844 1880 97000000 		call	__mulsf3		#
 2844      E7800000 
 2845 1888 93050500 		mv	a1,a0	# tmp269,
 2846              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2847 188c 13850B00 		mv	a0,s7	#, tmp244
 2848 1890 97000000 		call	__addsf3		#
 2848      E7800000 
 2849 1898 930B0500 		mv	s7,a0	# tmp246, tmp270
 2850              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2851 189c 13050A00 		mv	a0,s4	#, _2
 2852 18a0 97000000 		call	__floatsisf		#
 2852      E7800000 
 2853 18a8 93050500 		mv	a1,a0	# tmp271,
 2854 18ac 13850B00 		mv	a0,s7	#, tmp246
 2855 18b0 97000000 		call	__addsf3		#
 2855      E7800000 
 2856              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2857 18b8 97000000 		call	__fixsfsi		#
 2857      E7800000 
 2858              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2859 18c0 93850A00 		mv	a1,s5	#, tmp243
 2860              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 2861 18c4 2320A400 		sw	a0,0(s0)	# tmp272, <retval>.x
 2862              	# gfx_lib.h:270:   return transformed;
 2863 18c8 23226401 		sw	s6,4(s0)	# _4, <retval>.y
 2864              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2865 18cc 13050900 		mv	a0,s2	#, _20
 2866 18d0 97000000 		call	__mulsf3		#
 2866      E7800000 
 2867 18d8 13090500 		mv	s2,a0	# tmp250, tmp273
 2868              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2869 18dc 93850C00 		mv	a1,s9	#, sin_theta
 2870 18e0 13850400 		mv	a0,s1	#, _18
 2871 18e4 97000000 		call	__mulsf3		#
 2871      E7800000 
 2872 18ec 93050500 		mv	a1,a0	# tmp274,
 2873              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2874 18f0 13050900 		mv	a0,s2	#, tmp250
 2875 18f4 97000000 		call	__subsf3		#
 2875      E7800000 
 2876 18fc 93040500 		mv	s1,a0	# tmp252, tmp275
 2877              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2878 1900 13850900 		mv	a0,s3	#, _6
 2879 1904 97000000 		call	__floatsisf		#
 2879      E7800000 
 2880 190c 93050500 		mv	a1,a0	# tmp276,
 2881 1910 13850400 		mv	a0,s1	#, tmp252
 2882 1914 97000000 		call	__addsf3		#
 2882      E7800000 
 2883              	# gfx_lib.h:268:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin_thet
 2884 191c 97000000 		call	__fixsfsi		#
 2884      E7800000 
 2885 1924 2324A400 		sw	a0,8(s0)	# tmp277, <retval>.z
 2886              	# gfx_lib.h:271: }
 2887 1928 8320C102 		lw	ra,44(sp)		#,
 2888 192c 13050400 		mv	a0,s0	#, .result_ptr
 2889 1930 03248102 		lw	s0,40(sp)		#,
 2890 1934 83244102 		lw	s1,36(sp)		#,
 2891 1938 03290102 		lw	s2,32(sp)		#,
 2892 193c 8329C101 		lw	s3,28(sp)		#,
 2893 1940 032A8101 		lw	s4,24(sp)		#,
 2894 1944 832A4101 		lw	s5,20(sp)		#,
 2895 1948 032B0101 		lw	s6,16(sp)		#,
 2896 194c 832BC100 		lw	s7,12(sp)		#,
 2897 1950 032C8100 		lw	s8,8(sp)		#,
 2898 1954 832C4100 		lw	s9,4(sp)		#,
 2899 1958 13010103 		addi	sp,sp,48	#,,
 2900 195c 67800000 		jr	ra		#
 2902              		.align	2
 2903              		.globl	rotateZ_pivot
 2905              	rotateZ_pivot:
 2906 1960 130101FD 		addi	sp,sp,-48	#,,
 2907 1964 23248102 		sw	s0,40(sp)	#,
 2908 1968 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2909              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 2910 196c 13850600 		mv	a0,a3	#, tmp262
 2911              	# gfx_lib.h:273: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2912 1970 23261102 		sw	ra,44(sp)	#,
 2913 1974 23229102 		sw	s1,36(sp)	#,
 2914 1978 23202103 		sw	s2,32(sp)	#,
 2915              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2916 197c 83A44500 		lw	s1,4(a1)		# p_32(D)->y, p_32(D)->y
 2917              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2918 1980 03A90500 		lw	s2,0(a1)		# p_32(D)->x, p_32(D)->x
 2919              	# gfx_lib.h:273: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2920 1984 232E3101 		sw	s3,28(sp)	#,
 2921 1988 232C4101 		sw	s4,24(sp)	#,
 2922              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2923 198c 83294600 		lw	s3,4(a2)		# _5, pivot_33(D)->y
 2924              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2925 1990 032A0600 		lw	s4,0(a2)		# _2, pivot_33(D)->x
 2926              	# gfx_lib.h:273: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2927 1994 23286101 		sw	s6,16(sp)	#,
 2928 1998 23248101 		sw	s8,8(sp)	#,
 2929              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2930 199c 03AB8500 		lw	s6,8(a1)		# _7, p_32(D)->z
 2931              	# gfx_lib.h:273: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2932 19a0 232A5101 		sw	s5,20(sp)	#,
 2933 19a4 23267101 		sw	s7,12(sp)	#,
 2934 19a8 23229101 		sw	s9,4(sp)	#,
 2935              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 2936 19ac 97000000 		call	__floatsidf		#
 2936      E7800000 
 2937 19b4 B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 2938 19b8 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 2939 19bc 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 2940              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2941 19c0 33094941 		sub	s2,s2,s4	# _3, p_32(D)->x, _2
 2942              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2943 19c4 B3843441 		sub	s1,s1,s3	# _6, p_32(D)->y, _5
 2944              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 2945 19c8 97000000 		call	__muldf3		#
 2945      E7800000 
 2946 19d0 B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 2947 19d4 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 2948 19d8 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 2949 19dc 97000000 		call	__divdf3		#
 2949      E7800000 
 2950 19e4 97000000 		call	__fixdfsi		#
 2950      E7800000 
 2951 19ec 13170501 		slli	a4,a0,16	#, angle, tmp263
 2952              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2953 19f0 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 2954              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 2955 19f4 13570741 		srai	a4,a4,16	#, angle, angle
 2956              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2957 19f8 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 2958              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2959 19fc 635A0700 		bge	a4,zero,.L382	#, angle,,
 2960              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2961 1a00 B7870000 		li	a5,32768		# tmp163,
 2962 1a04 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 2963 1a08 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 2964 1a0c 13570741 		srai	a4,a4,16	#, angle, angle
 2965              	.L382:
 2966              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 2967 1a10 93578740 		srai	a5,a4,8	#, v0, angle
 2968              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2969 1a14 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 2970              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2971 1a18 93F50702 		andi	a1,a5,32	#, tmp167, v0
 2972              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2973 1a1c 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 2974 1a20 93060C00 		mv	a3,s8	# _235, prephitmp_203
 2975              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2976 1a24 638A0500 		beq	a1,zero,.L383	#, tmp167,,
 2977              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2978 1a28 1347F7FF 		not	a4,a4	# tmp171, angle
 2979              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2980 1a2c 93160701 		slli	a3,a4,16	#, _235, tmp171
 2981              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2982 1a30 93C7F7FF 		not	a5,a5	# v0, v0
 2983              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2984 1a34 93D60601 		srli	a3,a3,16	#, _235, _235
 2985              	.L383:
 2986              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2987 1a38 93F7F701 		andi	a5,a5,31	#, _59, v0
 2988              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2989 1a3c 13871700 		addi	a4,a5,1	#, tmp179, _59
 2990              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2991 1a40 B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 2992 1a44 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 2993 1a48 93971700 		slli	a5,a5,1	#, tmp175, _59
 2994              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2995 1a4c 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 2996              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2997 1a50 B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 2998              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 2999 1a54 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 3000              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3001 1a58 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 3002              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3003 1a5c 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 3004              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3005 1a60 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 3006              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3007 1a64 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 3008              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3009 1a68 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 3010              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3011 1a6c 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 3012              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3013 1a70 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 3014              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3015 1a74 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 3016 1a78 13150501 		slli	a0,a0,16	#, _74, tmp190
 3017 1a7c 13550501 		srli	a0,a0,16	#, _74, _74
 3018              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3019 1a80 63880700 		beq	a5,zero,.L384	#, tmp193,,
 3020              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3021 1a84 3305A040 		neg	a0,a0	# tmp195, _74
 3022 1a88 13150501 		slli	a0,a0,16	#, _74, tmp195
 3023 1a8c 13550501 		srli	a0,a0,16	#, _74, _74
 3024              	.L384:
 3025              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3026 1a90 13150501 		slli	a0,a0,16	#,, _74
 3027 1a94 13550541 		srai	a0,a0,16	#,,
 3028 1a98 97000000 		call	__floatsidf		#
 3028      E7800000 
 3029 1aa0 B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 3030 1aa4 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 3031 1aa8 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 3032 1aac 97000000 		call	__muldf3		#
 3032      E7800000 
 3033              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3034 1ab4 97000000 		call	__truncdfsf2		#
 3034      E7800000 
 3035              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3036 1abc B7A7FFFF 		li	a5,-24576		# tmp203,
 3037 1ac0 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 3038 1ac4 B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 3039              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3040 1ac8 93960701 		slli	a3,a5,16	#, angle, tmp201
 3041              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3042 1acc 13970701 		slli	a4,a5,16	#, _42, tmp201
 3043              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3044 1ad0 93D60641 		srai	a3,a3,16	#, angle, angle
 3045              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3046 1ad4 930C0500 		mv	s9,a0	# sin_theta, tmp264
 3047              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3048 1ad8 13570701 		srli	a4,a4,16	#, _42, _42
 3049              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3050 1adc 63D00602 		bge	a3,zero,.L385	#, angle,,
 3051              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3052 1ae0 B7270000 		li	a5,8192		# tmp206,
 3053 1ae4 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 3054 1ae8 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 3055 1aec 13170C01 		slli	a4,s8,16	#, _42, tmp204
 3056 1af0 93160C01 		slli	a3,s8,16	#, angle, tmp204
 3057 1af4 13570701 		srli	a4,a4,16	#, _42, _42
 3058 1af8 93D60641 		srai	a3,a3,16	#, angle, angle
 3059              	.L385:
 3060              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3061 1afc 93D78640 		srai	a5,a3,8	#, v0, angle
 3062              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3063 1b00 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 3064              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3065 1b04 93F50702 		andi	a1,a5,32	#, tmp210, v0
 3066              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3067 1b08 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 3068              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3069 1b0c 638A0500 		beq	a1,zero,.L386	#, tmp210,,
 3070              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3071 1b10 93C6F6FF 		not	a3,a3	# tmp214, angle
 3072              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3073 1b14 13970601 		slli	a4,a3,16	#, _42, tmp214
 3074              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3075 1b18 93C7F7FF 		not	a5,a5	# v0, v0
 3076              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3077 1b1c 13570701 		srli	a4,a4,16	#, _42, _42
 3078              	.L386:
 3079              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3080 1b20 93F7F701 		andi	a5,a5,31	#, _90, v0
 3081              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3082 1b24 93861700 		addi	a3,a5,1	#, tmp222, _90
 3083 1b28 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 3084              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3085 1b2c 93971700 		slli	a5,a5,1	#, tmp218, _90
 3086 1b30 B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 3087              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3088 1b34 B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 3089              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3090 1b38 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 3091              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3092 1b3c 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 3093              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3094 1b40 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 3095              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3096 1b44 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 3097              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3098 1b48 B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 3099              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3100 1b4c B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 3101              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3102 1b50 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 3103              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3104 1b54 B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 3105 1b58 93970701 		slli	a5,a5,16	#, _105, tmp233
 3106 1b5c 93D70701 		srli	a5,a5,16	#, _105, _105
 3107              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3108 1b60 63880600 		beq	a3,zero,.L387	#, tmp236,,
 3109              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3110 1b64 B307F040 		neg	a5,a5	# tmp238, _105
 3111 1b68 93970701 		slli	a5,a5,16	#, _105, tmp238
 3112 1b6c 93D70701 		srli	a5,a5,16	#, _105, _105
 3113              	.L387:
 3114              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3115 1b70 13950701 		slli	a0,a5,16	#,, _105
 3116 1b74 13550541 		srai	a0,a0,16	#,,
 3117 1b78 97000000 		call	__floatsidf		#
 3117      E7800000 
 3118 1b80 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 3119 1b84 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 3120 1b88 97000000 		call	__muldf3		#
 3120      E7800000 
 3121              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3122 1b90 97000000 		call	__truncdfsf2		#
 3122      E7800000 
 3123 1b98 93070500 		mv	a5,a0	# tmp265,
 3124              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3125 1b9c 13050900 		mv	a0,s2	#, _3
 3126              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3127 1ba0 13890700 		mv	s2,a5	# tmp243, tmp265
 3128              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3129 1ba4 97000000 		call	__floatsisf		#
 3129      E7800000 
 3130 1bac 930A0500 		mv	s5,a0	# tmp266,
 3131              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3132 1bb0 13850400 		mv	a0,s1	#, _6
 3133 1bb4 97000000 		call	__floatsisf		#
 3133      E7800000 
 3134 1bbc 93040500 		mv	s1,a0	# tmp267,
 3135              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3136 1bc0 93050900 		mv	a1,s2	#, tmp243
 3137 1bc4 13850A00 		mv	a0,s5	#, _18
 3138 1bc8 97000000 		call	__mulsf3		#
 3138      E7800000 
 3139 1bd0 930B0500 		mv	s7,a0	# tmp244, tmp268
 3140              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3141 1bd4 93850C00 		mv	a1,s9	#, sin_theta
 3142 1bd8 13850400 		mv	a0,s1	#, _20
 3143 1bdc 97000000 		call	__mulsf3		#
 3143      E7800000 
 3144 1be4 93050500 		mv	a1,a0	# tmp269,
 3145              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3146 1be8 13850B00 		mv	a0,s7	#, tmp244
 3147 1bec 97000000 		call	__subsf3		#
 3147      E7800000 
 3148 1bf4 930B0500 		mv	s7,a0	# tmp246, tmp270
 3149              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3150 1bf8 13050A00 		mv	a0,s4	#, _2
 3151 1bfc 97000000 		call	__floatsisf		#
 3151      E7800000 
 3152 1c04 93050500 		mv	a1,a0	# tmp271,
 3153 1c08 13850B00 		mv	a0,s7	#, tmp246
 3154 1c0c 97000000 		call	__addsf3		#
 3154      E7800000 
 3155              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3156 1c14 97000000 		call	__fixsfsi		#
 3156      E7800000 
 3157              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3158 1c1c 93850C00 		mv	a1,s9	#, sin_theta
 3159              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3160 1c20 2320A400 		sw	a0,0(s0)	# tmp272, <retval>.x
 3161              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3162 1c24 13850A00 		mv	a0,s5	#, _18
 3163 1c28 97000000 		call	__mulsf3		#
 3163      E7800000 
 3164 1c30 130A0500 		mv	s4,a0	# tmp250, tmp273
 3165              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3166 1c34 93050900 		mv	a1,s2	#, tmp243
 3167 1c38 13850400 		mv	a0,s1	#, _20
 3168 1c3c 97000000 		call	__mulsf3		#
 3168      E7800000 
 3169 1c44 93050500 		mv	a1,a0	# tmp274,
 3170              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3171 1c48 13050A00 		mv	a0,s4	#, tmp250
 3172 1c4c 97000000 		call	__addsf3		#
 3172      E7800000 
 3173 1c54 93040500 		mv	s1,a0	# tmp252, tmp275
 3174              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3175 1c58 13850900 		mv	a0,s3	#, _5
 3176 1c5c 97000000 		call	__floatsisf		#
 3176      E7800000 
 3177 1c64 93050500 		mv	a1,a0	# tmp276,
 3178 1c68 13850400 		mv	a0,s1	#, tmp252
 3179 1c6c 97000000 		call	__addsf3		#
 3179      E7800000 
 3180              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 3181 1c74 97000000 		call	__fixsfsi		#
 3181      E7800000 
 3182 1c7c 2322A400 		sw	a0,4(s0)	# tmp277, <retval>.y
 3183              	# gfx_lib.h:285:   return transformed;
 3184 1c80 23246401 		sw	s6,8(s0)	# _7, <retval>.z
 3185              	# gfx_lib.h:286: }
 3186 1c84 8320C102 		lw	ra,44(sp)		#,
 3187 1c88 13050400 		mv	a0,s0	#, .result_ptr
 3188 1c8c 03248102 		lw	s0,40(sp)		#,
 3189 1c90 83244102 		lw	s1,36(sp)		#,
 3190 1c94 03290102 		lw	s2,32(sp)		#,
 3191 1c98 8329C101 		lw	s3,28(sp)		#,
 3192 1c9c 032A8101 		lw	s4,24(sp)		#,
 3193 1ca0 832A4101 		lw	s5,20(sp)		#,
 3194 1ca4 032B0101 		lw	s6,16(sp)		#,
 3195 1ca8 832BC100 		lw	s7,12(sp)		#,
 3196 1cac 032C8100 		lw	s8,8(sp)		#,
 3197 1cb0 832C4100 		lw	s9,4(sp)		#,
 3198 1cb4 13010103 		addi	sp,sp,48	#,,
 3199 1cb8 67800000 		jr	ra		#
 3201              		.align	2
 3202              		.globl	render_lines
 3204              	render_lines:
 3205 1cbc 130101F7 		addi	sp,sp,-144	#,,
 3206              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 3207 1cc0 9385F5FF 		addi	a1,a1,-1	#, _82, tmp863
 3208              	# main_cube3d_rotate.c:70: void render_lines(point points [], size_t s, float angle_x, float angle_
 3209 1cc4 23261108 		sw	ra,140(sp)	#,
 3210 1cc8 23248108 		sw	s0,136(sp)	#,
 3211 1ccc 23229108 		sw	s1,132(sp)	#,
 3212 1cd0 23202109 		sw	s2,128(sp)	#,
 3213 1cd4 232E3107 		sw	s3,124(sp)	#,
 3214 1cd8 232C4107 		sw	s4,120(sp)	#,
 3215 1cdc 232A5107 		sw	s5,116(sp)	#,
 3216 1ce0 23286107 		sw	s6,112(sp)	#,
 3217 1ce4 23267107 		sw	s7,108(sp)	#,
 3218 1ce8 23248107 		sw	s8,104(sp)	#,
 3219 1cec 23229107 		sw	s9,100(sp)	#,
 3220 1cf0 2320A107 		sw	s10,96(sp)	#,
 3221 1cf4 232EB105 		sw	s11,92(sp)	#,
 3222              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 3223 1cf8 2324B102 		sw	a1,40(sp)	# _82, %sfp
 3224              	# main_cube3d_rotate.c:70: void render_lines(point points [], size_t s, float angle_x, float angle_
 3225 1cfc 2328A100 		sw	a0,16(sp)	# tmp862, %sfp
 3226              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 3227 1d00 E3860536 		beq	a1,zero,.L400	#, _82,,
 3228 1d04 93840700 		mv	s1,a5	# scalef, tmp867
 3229              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3230 1d08 B7070000 		lui	a5,%hi(.LC4)	# tmp418,
 3231 1d0c 83A50700 		lw	a1,%lo(.LC4)(a5)		#,
 3232 1d10 13850400 		mv	a0,s1	#, scalef
 3233 1d14 130A0600 		mv	s4,a2	# angle_x, tmp864
 3234 1d18 13840600 		mv	s0,a3	# angle_y, tmp865
 3235 1d1c 93090700 		mv	s3,a4	# angle_z, tmp866
 3236 1d20 97000000 		call	__mulsf3		#
 3236      E7800000 
 3237              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3238 1d28 B7070000 		lui	a5,%hi(.LC5)	# tmp956,
 3239              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3240 1d2c 13090500 		mv	s2,a0	# tmp868,
 3241              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3242 1d30 03A50700 		lw	a0,%lo(.LC5)(a5)		#,
 3243 1d34 93050900 		mv	a1,s2	#, tmp419
 3244              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3245 1d38 B70A0080 		li	s5,-2147483648		# tmp427,
 3246              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3247 1d3c 97000000 		call	__subsf3		#
 3247      E7800000 
 3248              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3249 1d44 97000000 		call	__fixsfsi		#
 3249      E7800000 
 3250              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3251 1d4c 37070000 		lui	a4,%hi(.LC6)	# tmp422,
 3252 1d50 83250700 		lw	a1,%lo(.LC6)(a4)		#,
 3253              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3254 1d54 93070500 		mv	a5,a0	# tmp869,
 3255              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3256 1d58 13850400 		mv	a0,s1	#, scalef
 3257              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3258 1d5c 2326F100 		sw	a5,12(sp)	# tmp869, %sfp
 3259              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3260 1d60 97000000 		call	__mulsf3		#
 3260      E7800000 
 3261              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3262 1d68 B7070000 		lui	a5,%hi(.LC7)	# tmp957,
 3263              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3264 1d6c 93050500 		mv	a1,a0	# tmp870,
 3265              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3266 1d70 03A50700 		lw	a0,%lo(.LC7)(a5)		#,
 3267 1d74 97000000 		call	__subsf3		#
 3267      E7800000 
 3268              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3269 1d7c 97000000 		call	__fixsfsi		#
 3269      E7800000 
 3270 1d84 130C0500 		mv	s8,a0	# tmp871,
 3271 1d88 33C52A01 		xor	a0,s5,s2	# tmp419,, tmp427
 3272 1d8c 23268103 		sw	s8,44(sp)	# tmp871, %sfp
 3273 1d90 97000000 		call	__fixsfsi		#
 3273      E7800000 
 3274 1d98 930C0500 		mv	s9,a0	# tmp872,
 3275              	# main_cube3d_rotate.c:84:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 3276 1d9c 33C54A01 		xor	a0,s5,s4	# angle_x,, tmp427
 3277              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 3278 1da0 23289103 		sw	s9,48(sp)	# tmp872, %sfp
 3279              	# main_cube3d_rotate.c:84:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 3280 1da4 97000000 		call	__fixsfsi		#
 3280      E7800000 
 3281              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3282 1dac 97000000 		call	__floatsidf		#
 3282      E7800000 
 3283 1db4 B70A0000 		lui	s5,%hi(.LC1)	# tmp812,
 3284 1db8 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3285 1dbc 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3286 1dc0 370A0000 		lui	s4,%hi(.LC2)	# tmp813,
 3287 1dc4 97000000 		call	__muldf3		#
 3287      E7800000 
 3288 1dcc 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3289 1dd0 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3290 1dd4 97000000 		call	__divdf3		#
 3290      E7800000 
 3291 1ddc 97000000 		call	__fixdfsi		#
 3291      E7800000 
 3292 1de4 13150501 		slli	a0,a0,16	#, _296, tmp873
 3293 1de8 13550541 		srai	a0,a0,16	#, _296, _296
 3294              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3295 1dec B787FFFF 		li	a5,-32768		# tmp438,
 3296 1df0 B307F500 		add	a5,a0,a5	# tmp438, _296, _296
 3297 1df4 63440500 		blt	a0,zero,.L403	#, _296,,
 3298 1df8 93070500 		mv	a5,a0	# _296, _296
 3299              	.L403:
 3300 1dfc 139B0701 		slli	s6,a5,16	#, angle, _296
 3301 1e00 135B0B41 		srai	s6,s6,16	#, angle, angle
 3302              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3303 1e04 13578B40 		srai	a4,s6,8	#, v0, angle
 3304              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3305 1e08 93C7F7FF 		not	a5,a5	# tmp447, _296
 3306              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3307 1e0c 93160701 		slli	a3,a4,16	#, v0.41_331, v0
 3308              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3309 1e10 93970701 		slli	a5,a5,16	#, v1, tmp447
 3310              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3311 1e14 93D60601 		srli	a3,a3,16	#, v0.41_331, v0.41_331
 3312              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3313 1e18 93D70741 		srai	a5,a5,16	#, v1, v1
 3314 1e1c 937B0702 		andi	s7,a4,32	#, _332, v0
 3315              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3316 1e20 232AD100 		sw	a3,20(sp)	# v0.41_331, %sfp
 3317              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3318 1e24 232CF100 		sw	a5,24(sp)	# v1, %sfp
 3319 1e28 1349F7FF 		not	s2,a4	# v0, v0
 3320 1e2c E3820B30 		beq	s7,zero,.L458	#, _332,,
 3321              	.L405:
 3322              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3323 1e30 93170B01 		slli	a5,s6,16	#, angle.46_305, angle
 3324 1e34 37A7FFFF 		li	a4,-24576		# tmp452,
 3325 1e38 93D70701 		srli	a5,a5,16	#, angle.46_305, angle.46_305
 3326 1e3c 13071700 		addi	a4,a4,1	#, tmp451, tmp452
 3327 1e40 3387E700 		add	a4,a5,a4	# tmp451, tmp450, angle.46_305
 3328              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3329 1e44 13170701 		slli	a4,a4,16	#, _307, tmp450
 3330 1e48 B7260000 		li	a3,8192		# tmp455,
 3331 1e4c 93861600 		addi	a3,a3,1	#, tmp454, tmp455
 3332 1e50 13570741 		srai	a4,a4,16	#, _307, _307
 3333              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3334 1e54 1379F901 		andi	s2,s2,31	#, _337, v0
 3335 1e58 B387D700 		add	a5,a5,a3	# tmp454, _307, angle.46_305
 3336 1e5c 63440700 		blt	a4,zero,.L407	#, _307,,
 3337 1e60 93070700 		mv	a5,a4	# _307, _307
 3338              	.L407:
 3339 1e64 939D0701 		slli	s11,a5,16	#, angle, _307
 3340 1e68 93DD0D41 		srai	s11,s11,16	#, angle, angle
 3341              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3342 1e6c 13D78D40 		srai	a4,s11,8	#, v0, angle
 3343              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3344 1e70 93C7F7FF 		not	a5,a5	# tmp462, _307
 3345              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3346 1e74 93160701 		slli	a3,a4,16	#, v0.41_362, v0
 3347              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3348 1e78 93970701 		slli	a5,a5,16	#, v1, tmp462
 3349 1e7c 93D70741 		srai	a5,a5,16	#, v1, v1
 3350              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3351 1e80 93D60601 		srli	a3,a3,16	#, v0.41_362, v0.41_362
 3352              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3353 1e84 2320F102 		sw	a5,32(sp)	# v1, %sfp
 3354 1e88 137D0702 		andi	s10,a4,32	#, _363, v0
 3355              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3356 1e8c 232ED100 		sw	a3,28(sp)	# v0.41_362, %sfp
 3357 1e90 9347F7FF 		not	a5,a4	# v0, v0
 3358 1e94 E30A0D28 		beq	s10,zero,.L459	#, _363,,
 3359              	.L409:
 3360              	# main_cube3d_rotate.c:86:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3361 1e98 37050080 		li	a0,-2147483648		# tmp466,
 3362              	# main_cube3d_rotate.c:86:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3363 1e9c 33458500 		xor	a0,a0,s0	# angle_y,, tmp466
 3364              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3365 1ea0 13F4F701 		andi	s0,a5,31	#, _368, v0
 3366              	# main_cube3d_rotate.c:86:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3367 1ea4 97000000 		call	__fixsfsi		#
 3367      E7800000 
 3368              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3369 1eac 97000000 		call	__floatsidf		#
 3369      E7800000 
 3370 1eb4 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3371 1eb8 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3372 1ebc 97000000 		call	__muldf3		#
 3372      E7800000 
 3373 1ec4 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3374 1ec8 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3375 1ecc 97000000 		call	__divdf3		#
 3375      E7800000 
 3376 1ed4 97000000 		call	__fixdfsi		#
 3376      E7800000 
 3377 1edc 13150501 		slli	a0,a0,16	#, _216, tmp874
 3378 1ee0 13550541 		srai	a0,a0,16	#, _216, _216
 3379              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3380 1ee4 B787FFFF 		li	a5,-32768		# tmp475,
 3381 1ee8 B307F500 		add	a5,a0,a5	# tmp475, _216, _216
 3382 1eec 63440500 		blt	a0,zero,.L411	#, _216,,
 3383 1ef0 93070500 		mv	a5,a0	# _216, _216
 3384              	.L411:
 3385 1ef4 13980701 		slli	a6,a5,16	#, angle, _216
 3386 1ef8 13580841 		srai	a6,a6,16	#, angle, angle
 3387              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3388 1efc 13578840 		srai	a4,a6,8	#, v0, angle
 3389              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3390 1f00 93C7F7FF 		not	a5,a5	# tmp484, _216
 3391              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3392 1f04 93160701 		slli	a3,a4,16	#, v0.41_455, v0
 3393              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3394 1f08 93970701 		slli	a5,a5,16	#, v1, tmp484
 3395              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3396 1f0c 93D60601 		srli	a3,a3,16	#, v0.41_455, v0.41_455
 3397              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3398 1f10 93D70741 		srai	a5,a5,16	#, v1, v1
 3399 1f14 13730702 		andi	t1,a4,32	#, _456, v0
 3400              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3401 1f18 2322D102 		sw	a3,36(sp)	# v0.41_455, %sfp
 3402              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3403 1f1c 232AF102 		sw	a5,52(sp)	# v1, %sfp
 3404 1f20 134EF7FF 		not	t3,a4	# v0, v0
 3405 1f24 E30E031E 		beq	t1,zero,.L460	#, _456,,
 3406              	.L413:
 3407              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3408 1f28 93170801 		slli	a5,a6,16	#, angle.46_225, angle
 3409 1f2c 37A7FFFF 		li	a4,-24576		# tmp489,
 3410 1f30 93D70701 		srli	a5,a5,16	#, angle.46_225, angle.46_225
 3411 1f34 13071700 		addi	a4,a4,1	#, tmp488, tmp489
 3412 1f38 3387E700 		add	a4,a5,a4	# tmp488, tmp487, angle.46_225
 3413              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3414 1f3c 13170701 		slli	a4,a4,16	#, _227, tmp487
 3415 1f40 B7260000 		li	a3,8192		# tmp492,
 3416 1f44 93861600 		addi	a3,a3,1	#, tmp491, tmp492
 3417 1f48 13570741 		srai	a4,a4,16	#, _227, _227
 3418              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3419 1f4c 137EFE01 		andi	t3,t3,31	#, _461, v0
 3420 1f50 B387D700 		add	a5,a5,a3	# tmp491, _227, angle.46_225
 3421 1f54 63440700 		blt	a4,zero,.L415	#, _227,,
 3422 1f58 93070700 		mv	a5,a4	# _227, _227
 3423              	.L415:
 3424 1f5c 139C0701 		slli	s8,a5,16	#, angle, _227
 3425 1f60 135C0C41 		srai	s8,s8,16	#, angle, angle
 3426              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3427 1f64 13578C40 		srai	a4,s8,8	#, v0, angle
 3428              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3429 1f68 93C7F7FF 		not	a5,a5	# tmp499, _227
 3430              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3431 1f6c 93160701 		slli	a3,a4,16	#, v0.41_486, v0
 3432              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3433 1f70 93970701 		slli	a5,a5,16	#, v1, tmp499
 3434 1f74 93D70741 		srai	a5,a5,16	#, v1, v1
 3435              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3436 1f78 93D60601 		srli	a3,a3,16	#, v0.41_486, v0.41_486
 3437              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3438 1f7c 232EF102 		sw	a5,60(sp)	# v1, %sfp
 3439 1f80 93780702 		andi	a7,a4,32	#, _487, v0
 3440              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3441 1f84 232CD102 		sw	a3,56(sp)	# v0.41_486, %sfp
 3442 1f88 9347F7FF 		not	a5,a4	# v0, v0
 3443 1f8c E3860818 		beq	a7,zero,.L461	#, _487,,
 3444              	.L417:
 3445              	# main_cube3d_rotate.c:88:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 3446 1f90 13850900 		mv	a0,s3	#, angle_z
 3447 1f94 23261105 		sw	a7,76(sp)	# _487, %sfp
 3448 1f98 2324C105 		sw	t3,72(sp)	# _461, %sfp
 3449 1f9c 23226104 		sw	t1,68(sp)	# _456, %sfp
 3450 1fa0 23200105 		sw	a6,64(sp)	# angle, %sfp
 3451              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3452 1fa4 93F9F701 		andi	s3,a5,31	#, _492, v0
 3453              	# main_cube3d_rotate.c:88:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 3454 1fa8 97000000 		call	__fixsfsi		#
 3454      E7800000 
 3455              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3456 1fb0 97000000 		call	__floatsidf		#
 3456      E7800000 
 3457 1fb8 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3458 1fbc 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3459 1fc0 97000000 		call	__muldf3		#
 3459      E7800000 
 3460 1fc8 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3461 1fcc 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3462 1fd0 97000000 		call	__divdf3		#
 3462      E7800000 
 3463 1fd8 97000000 		call	__fixdfsi		#
 3463      E7800000 
 3464 1fe0 13150501 		slli	a0,a0,16	#, _136, tmp875
 3465 1fe4 13550541 		srai	a0,a0,16	#, _136, _136
 3466              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3467 1fe8 B787FFFF 		li	a5,-32768		# tmp510,
 3468 1fec 03280104 		lw	a6,64(sp)		# angle, %sfp
 3469 1ff0 03234104 		lw	t1,68(sp)		# _456, %sfp
 3470 1ff4 032E8104 		lw	t3,72(sp)		# _461, %sfp
 3471 1ff8 8328C104 		lw	a7,76(sp)		# _487, %sfp
 3472 1ffc B307F500 		add	a5,a0,a5	# tmp510, _136, _136
 3473 2000 63440500 		blt	a0,zero,.L419	#, _136,,
 3474 2004 93070500 		mv	a5,a0	# _136, _136
 3475              	.L419:
 3476 2008 13950701 		slli	a0,a5,16	#, angle, _136
 3477 200c 13550541 		srai	a0,a0,16	#, angle, angle
 3478              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3479 2010 13578540 		srai	a4,a0,8	#, v0, angle
 3480              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3481 2014 93160701 		slli	a3,a4,16	#, v0.41_579, v0
 3482              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3483 2018 93C7F7FF 		not	a5,a5	# tmp519, _136
 3484              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3485 201c 93D60601 		srli	a3,a3,16	#, v0.41_579, v0.41_579
 3486              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3487 2020 139A0701 		slli	s4,a5,16	#, v1, tmp519
 3488 2024 137F0702 		andi	t5,a4,32	#, _580, v0
 3489              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3490 2028 2320D104 		sw	a3,64(sp)	# v0.41_579, %sfp
 3491              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3492 202c 135A0A41 		srai	s4,s4,16	#, v1, v1
 3493 2030 9345F7FF 		not	a1,a4	# v0, v0
 3494 2034 E30E0F0C 		beq	t5,zero,.L462	#, _580,,
 3495              	.L421:
 3496              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3497 2038 93170501 		slli	a5,a0,16	#, angle.46_145, angle
 3498 203c 37A7FFFF 		li	a4,-24576		# tmp524,
 3499 2040 93D70701 		srli	a5,a5,16	#, angle.46_145, angle.46_145
 3500 2044 13071700 		addi	a4,a4,1	#, tmp523, tmp524
 3501 2048 3387E700 		add	a4,a5,a4	# tmp523, tmp522, angle.46_145
 3502              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3503 204c 13170701 		slli	a4,a4,16	#, _147, tmp522
 3504 2050 B7260000 		li	a3,8192		# tmp527,
 3505 2054 93861600 		addi	a3,a3,1	#, tmp526, tmp527
 3506 2058 13570741 		srai	a4,a4,16	#, _147, _147
 3507              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3508 205c 93F5F501 		andi	a1,a1,31	#, _585, v0
 3509 2060 B387D700 		add	a5,a5,a3	# tmp526, _147, angle.46_145
 3510 2064 63440700 		blt	a4,zero,.L423	#, _147,,
 3511 2068 93070700 		mv	a5,a4	# _147, _147
 3512              	.L423:
 3513 206c 939F0701 		slli	t6,a5,16	#, angle, _147
 3514 2070 93DF0F41 		srai	t6,t6,16	#, angle, angle
 3515              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 3516 2074 13D78F40 		srai	a4,t6,8	#, v0, angle
 3517              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3518 2078 93C7F7FF 		not	a5,a5	# tmp534, _147
 3519              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3520 207c 931C0701 		slli	s9,a4,16	#, v0.41_610, v0
 3521              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3522 2080 93970701 		slli	a5,a5,16	#, v1, tmp534
 3523 2084 937E0702 		andi	t4,a4,32	#, _611, v0
 3524              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3525 2088 93DC0C01 		srli	s9,s9,16	#, v0.41_610, v0.41_610
 3526              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3527 208c 93D70741 		srai	a5,a5,16	#, v1, v1
 3528 2090 1346F7FF 		not	a2,a4	# v0, v0
 3529 2094 E38A0E06 		beq	t4,zero,.L463	#, _611,,
 3530              	.L425:
 3531              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3532 2098 93061900 		addi	a3,s2,1	#, tmp543, _337
 3533              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3534 209c 37070000 		lui	a4,%hi(.LANCHOR1)	# tmp817,
 3535 20a0 13070700 		addi	a4,a4,%lo(.LANCHOR1)	# tmp811, tmp817,
 3536 20a4 13191900 		slli	s2,s2,1	#, tmp539, _337
 3537              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3538 20a8 93961600 		slli	a3,a3,1	#, tmp544, tmp543
 3539              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3540 20ac 33092701 		add	s2,a4,s2	# tmp539, tmp540, tmp811
 3541              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3542 20b0 B306D700 		add	a3,a4,a3	# tmp544, tmp545, tmp811
 3543              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3544 20b4 83130900 		lh	t2,0(s2)		# pretmp_412, sin90[_337]
 3545              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3546 20b8 83960600 		lh	a3,0(a3)		# sin90[_340], sin90[_340]
 3547              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3548 20bc 83528101 		lhu	t0,24(sp)	#, %sfp
 3549              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3550 20c0 1376F601 		andi	a2,a2,31	#, _616, v0
 3551              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3552 20c4 B3867640 		sub	a3,a3,t2	# tmp547, sin90[_340], pretmp_412
 3553              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3554 20c8 E38C0B02 		beq	s7,zero,.L464	#, _332,,
 3555              	.L427:
 3556 20cc 93F2F20F 		andi	t0,t0,0xff	# tmp550, v1
 3557              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3558 20d0 B3865602 		mul	a3,a3,t0	# tmp551, tmp547, tmp550
 3559              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3560 20d4 93021400 		addi	t0,s0,1	#, tmp562, _368
 3561 20d8 93921200 		slli	t0,t0,1	#, tmp563, tmp562
 3562              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3563 20dc 13141400 		slli	s0,s0,1	#, tmp558, _368
 3564 20e0 33048700 		add	s0,a4,s0	# tmp558, tmp559, tmp811
 3565              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3566 20e4 B3025700 		add	t0,a4,t0	# tmp563, tmp564, tmp811
 3567              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3568 20e8 03140400 		lh	s0,0(s0)		# pretmp_178, sin90[_368]
 3569              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3570 20ec 83920200 		lh	t0,0(t0)		# sin90[_371], sin90[_371]
 3571              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3572 20f0 03590102 		lhu	s2,32(sp)	#, %sfp
 3573              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3574 20f4 93D68640 		srai	a3,a3,8	#, tmp552, tmp551
 3575              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3576 20f8 B3867600 		add	a3,a3,t2	# pretmp_412, tmp555, tmp552
 3577 20fc 93960601 		slli	a3,a3,16	#, _542, tmp555
 3578 2100 93D60601 		srli	a3,a3,16	#, _542, _542
 3579              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3580 2104 B3828240 		sub	t0,t0,s0	# tmp566, sin90[_371], pretmp_178
 3581              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3582 2108 63080D7E 		beq	s10,zero,.L465	#, _363,,
 3583              	.L429:
 3584 210c 1379F90F 		andi	s2,s2,0xff	# tmp569, v1
 3585              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3586 2110 33892203 		mul	s2,t0,s2	# tmp570, tmp566, tmp569
 3587              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3588 2114 93031E00 		addi	t2,t3,1	#, tmp581, _461
 3589 2118 93931300 		slli	t2,t2,1	#, tmp582, tmp581
 3590              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3591 211c 131E1E00 		slli	t3,t3,1	#, tmp577, _461
 3592 2120 330EC701 		add	t3,a4,t3	# tmp577, tmp578, tmp811
 3593              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3594 2124 B3037700 		add	t2,a4,t2	# tmp582, tmp583, tmp811
 3595              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3596 2128 83120E00 		lh	t0,0(t3)		# pretmp_562, sin90[_461]
 3597              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3598 212c 039E0300 		lh	t3,0(t2)		# sin90[_464], sin90[_464]
 3599              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3600 2130 83534103 		lhu	t2,52(sp)	#, %sfp
 3601              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3602 2134 13598940 		srai	s2,s2,8	#, tmp571, tmp570
 3603              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3604 2138 33098900 		add	s2,s2,s0	# pretmp_178, tmp574, tmp571
 3605 213c 931A0901 		slli	s5,s2,16	#, _552, tmp574
 3606 2140 93DA0A01 		srli	s5,s5,16	#, _552, _552
 3607              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3608 2144 330E5E40 		sub	t3,t3,t0	# tmp585, sin90[_464], pretmp_562
 3609              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3610 2148 6304037A 		beq	t1,zero,.L466	#, _456,,
 3611              	.L431:
 3612 214c 93F3F30F 		andi	t2,t2,0xff	# tmp588, v1
 3613              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3614 2150 B3037E02 		mul	t2,t3,t2	# tmp589, tmp585, tmp588
 3615              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3616 2154 13881900 		addi	a6,s3,1	#, tmp600, _492
 3617 2158 13181800 		slli	a6,a6,1	#, tmp601, tmp600
 3618              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3619 215c 93991900 		slli	s3,s3,1	#, tmp596, _492
 3620 2160 B3093701 		add	s3,a4,s3	# tmp596, tmp597, tmp811
 3621              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3622 2164 33080701 		add	a6,a4,a6	# tmp601, tmp602, tmp811
 3623              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3624 2168 03930900 		lh	t1,0(s3)		# pretmp_565, sin90[_492]
 3625              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3626 216c 03180800 		lh	a6,0(a6)		# sin90[_495], sin90[_495]
 3627              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3628 2170 035EC103 		lhu	t3,60(sp)	#, %sfp
 3629              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3630 2174 93D38340 		srai	t2,t2,8	#, tmp590, tmp589
 3631              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3632 2178 B3835300 		add	t2,t2,t0	# pretmp_562, tmp593, tmp590
 3633 217c 139D0301 		slli	s10,t2,16	#, _564, tmp593
 3634 2180 135D0D01 		srli	s10,s10,16	#, _564, _564
 3635              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3636 2184 33086840 		sub	a6,a6,t1	# tmp604, sin90[_495], pretmp_565
 3637              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3638 2188 63800876 		beq	a7,zero,.L467	#, _487,,
 3639              	.L433:
 3640 218c 137EFE0F 		andi	t3,t3,0xff	# tmp607, v1
 3641              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3642 2190 3308C803 		mul	a6,a6,t3	# tmp608, tmp604, tmp607
 3643              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3644 2194 93881500 		addi	a7,a1,1	#, tmp619, _585
 3645 2198 93981800 		slli	a7,a7,1	#, tmp620, tmp619
 3646              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3647 219c 93951500 		slli	a1,a1,1	#, tmp615, _585
 3648              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3649 21a0 B3081701 		add	a7,a4,a7	# tmp620, tmp621, tmp811
 3650              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3651 21a4 B305B700 		add	a1,a4,a1	# tmp615, tmp616, tmp811
 3652              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3653 21a8 83990800 		lh	s3,0(a7)		# sin90[_588], sin90[_588]
 3654              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3655 21ac 83950500 		lh	a1,0(a1)		# pretmp_200, sin90[_585]
 3656              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3657 21b0 93080A00 		mv	a7,s4	# v1, v1
 3658              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3659 21b4 935B8840 		srai	s7,a6,8	#, tmp609, tmp608
 3660              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3661 21b8 B38B6B00 		add	s7,s7,t1	# pretmp_565, tmp612, tmp609
 3662 21bc 939B0B01 		slli	s7,s7,16	#, _192, tmp612
 3663 21c0 93DB0B01 		srli	s7,s7,16	#, _192, _192
 3664              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3665 21c4 B389B940 		sub	s3,s3,a1	# tmp623, sin90[_588], pretmp_200
 3666              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3667 21c8 630C0F70 		beq	t5,zero,.L468	#, _580,,
 3668              	.L435:
 3669 21cc 93F8F80F 		andi	a7,a7,0xff	# tmp626, v1
 3670              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3671 21d0 B3891903 		mul	s3,s3,a7	# tmp627, tmp623, tmp626
 3672              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3673 21d4 13051600 		addi	a0,a2,1	#, tmp638, _616
 3674 21d8 13151500 		slli	a0,a0,1	#, tmp639, tmp638
 3675              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3676 21dc 13161600 		slli	a2,a2,1	#, tmp634, _616
 3677 21e0 3306C700 		add	a2,a4,a2	# tmp634, tmp635, tmp811
 3678              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3679 21e4 3307A700 		add	a4,a4,a0	# tmp639, tmp640, tmp811
 3680              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3681 21e8 03160600 		lh	a2,0(a2)		# pretmp_90, sin90[_616]
 3682              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3683 21ec 03190700 		lh	s2,0(a4)		# sin90[_619], sin90[_619]
 3684              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3685 21f0 93D98940 		srai	s3,s3,8	#, tmp628, tmp627
 3686              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3687 21f4 B389B900 		add	s3,s3,a1	# pretmp_200, tmp631, tmp628
 3688 21f8 93990901 		slli	s3,s3,16	#, _89, tmp631
 3689 21fc 93D90901 		srli	s3,s3,16	#, _89, _89
 3690              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3691 2200 3309C940 		sub	s2,s2,a2	# tmp642, sin90[_619], pretmp_90
 3692              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3693 2204 638A0E6C 		beq	t4,zero,.L469	#, _611,,
 3694              	.L437:
 3695 2208 93F7F70F 		andi	a5,a5,0xff	# tmp645, v1
 3696              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3697 220c 3309F902 		mul	s2,s2,a5	# tmp646, tmp642, tmp645
 3698              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3699 2210 83274101 		lw	a5,20(sp)		# v0.41_331, %sfp
 3700 2214 03240101 		lw	s0,16(sp)		# ivtmp.473, %sfp
 3701 2218 13850600 		mv	a0,a3	# v1, _542
 3702 221c 93F70704 		andi	a5,a5,64	#, tmp654, v0.41_331
 3703              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3704 2220 13598940 		srai	s2,s2,8	#, tmp647, tmp646
 3705              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 3706 2224 3309C900 		add	s2,s2,a2	# pretmp_90, tmp650, tmp647
 3707 2228 13190901 		slli	s2,s2,16	#, _655, tmp650
 3708 222c 13590901 		srli	s2,s2,16	#, _655, _655
 3709              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3710 2230 6390076A 		bne	a5,zero,.L470	#, tmp654,,
 3711              	.L439:
 3712 2234 13150501 		slli	a0,a0,16	#,, v1
 3713 2238 13550541 		srai	a0,a0,16	#,,
 3714 223c 97000000 		call	__floatsidf		#
 3714      E7800000 
 3715 2244 370B0000 		lui	s6,%hi(.LC3)	# tmp814,
 3716 2248 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3717 224c 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3718 2250 97000000 		call	__muldf3		#
 3718      E7800000 
 3719              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3720 2258 97000000 		call	__truncdfsf2		#
 3720      E7800000 
 3721              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 3722 2260 8327C101 		lw	a5,28(sp)		# v0.41_362, %sfp
 3723              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 3724 2264 130A0500 		mv	s4,a0	# sin_theta, tmp876
 3725              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 3726 2268 13850A00 		mv	a0,s5	# v1, _552
 3727 226c 93F70704 		andi	a5,a5,64	#, tmp665, v0.41_362
 3728 2270 639C0764 		bne	a5,zero,.L471	#, tmp665,,
 3729              	.L441:
 3730 2274 13150501 		slli	a0,a0,16	#,, v1
 3731 2278 13550541 		srai	a0,a0,16	#,,
 3732 227c 97000000 		call	__floatsidf		#
 3732      E7800000 
 3733 2284 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3734 2288 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3735 228c 97000000 		call	__muldf3		#
 3735      E7800000 
 3736              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 3737 2294 97000000 		call	__truncdfsf2		#
 3737      E7800000 
 3738              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3739 229c 83274102 		lw	a5,36(sp)		# v0.41_455, %sfp
 3740              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 3741 22a0 930A0500 		mv	s5,a0	# cos_theta, tmp877
 3742              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3743 22a4 13050D00 		mv	a0,s10	# v1, _564
 3744 22a8 93F70704 		andi	a5,a5,64	#, tmp676, v0.41_455
 3745 22ac 639A0760 		bne	a5,zero,.L472	#, tmp676,,
 3746              	.L443:
 3747 22b0 13150501 		slli	a0,a0,16	#,, v1
 3748 22b4 13550541 		srai	a0,a0,16	#,,
 3749 22b8 97000000 		call	__floatsidf		#
 3749      E7800000 
 3750 22c0 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3751 22c4 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3752 22c8 97000000 		call	__muldf3		#
 3752      E7800000 
 3753              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3754 22d0 97000000 		call	__truncdfsf2		#
 3754      E7800000 
 3755              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 3756 22d8 83278103 		lw	a5,56(sp)		# v0.41_486, %sfp
 3757              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 3758 22dc 2328A100 		sw	a0,16(sp)	# tmp878, %sfp
 3759              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 3760 22e0 33057041 		neg	a0,s7	# v1, _192
 3761 22e4 93F70704 		andi	a5,a5,64	#, tmp687, v0.41_486
 3762 22e8 6388075C 		beq	a5,zero,.L473	#, tmp687,,
 3763              	.L445:
 3764 22ec 13150501 		slli	a0,a0,16	#,, v1
 3765 22f0 13550541 		srai	a0,a0,16	#,,
 3766 22f4 97000000 		call	__floatsidf		#
 3766      E7800000 
 3767 22fc 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3768 2300 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3769 2304 97000000 		call	__muldf3		#
 3769      E7800000 
 3770              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 3771 230c 97000000 		call	__truncdfsf2		#
 3771      E7800000 
 3772              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3773 2314 83270104 		lw	a5,64(sp)		# v0.41_579, %sfp
 3774              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 3775 2318 232AA100 		sw	a0,20(sp)	# tmp879, %sfp
 3776              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3777 231c 33053041 		neg	a0,s3	# v1, _89
 3778 2320 93F70704 		andi	a5,a5,64	#, tmp698, v0.41_579
 3779 2324 63860758 		beq	a5,zero,.L474	#, tmp698,,
 3780              	.L447:
 3781 2328 13150501 		slli	a0,a0,16	#,, v1
 3782 232c 13550541 		srai	a0,a0,16	#,,
 3783 2330 97000000 		call	__floatsidf		#
 3783      E7800000 
 3784 2338 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3785 233c 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3786 2340 97000000 		call	__muldf3		#
 3786      E7800000 
 3787              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3788 2348 97000000 		call	__truncdfsf2		#
 3788      E7800000 
 3789              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3790 2350 93F70C04 		andi	a5,s9,64	#, tmp709, v0.41_610
 3791              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 3792 2354 93090500 		mv	s3,a0	# sin_theta, tmp880
 3793              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3794 2358 13050900 		mv	a0,s2	# v1, _655
 3795 235c 63960754 		bne	a5,zero,.L475	#, tmp709,,
 3796              	.L449:
 3797 2360 13150501 		slli	a0,a0,16	#,, v1
 3798 2364 13550541 		srai	a0,a0,16	#,,
 3799 2368 97000000 		call	__floatsidf		#
 3799      E7800000 
 3800 2370 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3801 2374 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3802              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 3803 2378 93070000 		li	a5,0		# i,
 3804 237c 232CF100 		sw	a5,24(sp)	# i, %sfp
 3805              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3806 2380 97000000 		call	__muldf3		#
 3806      E7800000 
 3807              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3808 2388 97000000 		call	__truncdfsf2		#
 3808      E7800000 
 3809              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3810 2390 B7070000 		lui	a5,%hi(.LC5)	# tmp972,
 3811 2394 83AB0700 		lw	s7,%lo(.LC5)(a5)		# tmp854,
 3812              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3813 2398 B7070000 		lui	a5,%hi(.LC7)	# tmp973,
 3814 239c 03AB0700 		lw	s6,%lo(.LC7)(a5)		# tmp855,
 3815              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 3816 23a0 13090500 		mv	s2,a0	# cos_theta, tmp881
 3817 23a4 93070000 		li	a5,0		# i,
 3818              	.L450:
 3819              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3820 23a8 03254400 		lw	a0,4(s0)		#, MEM[(int *)_736 + 4B]
 3821              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 3822 23ac 93872700 		addi	a5,a5,2	#, i, i
 3823 23b0 2322F102 		sw	a5,36(sp)	# i, %sfp
 3824              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3825 23b4 97000000 		call	__floatsisf		#
 3825      E7800000 
 3826 23bc 93850400 		mv	a1,s1	#, scalef
 3827 23c0 97000000 		call	__mulsf3		#
 3827      E7800000 
 3828              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3829 23c8 97000000 		call	__fixsfsi		#
 3829      E7800000 
 3830              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3831 23d0 032CC102 		lw	s8,44(sp)		# _11, %sfp
 3832              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 3833 23d4 13048401 		addi	s0,s0,24	#, ivtmp.473, ivtmp.473
 3834              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3835 23d8 33058501 		add	a0,a0,s8	# _11, tmp720, tmp882
 3836              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3837 23dc 130505FE 		addi	a0,a0,-32	#,, tmp720
 3838 23e0 97000000 		call	__floatsisf		#
 3838      E7800000 
 3839 23e8 130D0500 		mv	s10,a0	# tmp883,
 3840              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3841 23ec 032504FF 		lw	a0,-16(s0)		#, MEM[(int *)_736 + 8B]
 3842 23f0 97000000 		call	__floatsisf		#
 3842      E7800000 
 3843 23f8 93850400 		mv	a1,s1	#, scalef
 3844 23fc 97000000 		call	__mulsf3		#
 3844      E7800000 
 3845              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3846 2404 97000000 		call	__fixsfsi		#
 3846      E7800000 
 3847              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3848 240c 832D0103 		lw	s11,48(sp)		# _12, %sfp
 3849 2410 3305B501 		add	a0,a0,s11	# _12,, tmp884
 3850 2414 97000000 		call	__floatsisf		#
 3850      E7800000 
 3851 241c 930C0500 		mv	s9,a0	# tmp885,
 3852              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3853 2420 032584FF 		lw	a0,-8(s0)		#, MEM[(int *)_736 + 16B]
 3854 2424 97000000 		call	__floatsisf		#
 3854      E7800000 
 3855 242c 93850400 		mv	a1,s1	#, scalef
 3856 2430 97000000 		call	__mulsf3		#
 3856      E7800000 
 3857              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3858 2438 97000000 		call	__fixsfsi		#
 3858      E7800000 
 3859              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3860 2440 33058501 		add	a0,a0,s8	# _11, tmp729, tmp886
 3861              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3862 2444 130505FE 		addi	a0,a0,-32	#,, tmp729
 3863 2448 97000000 		call	__floatsisf		#
 3863      E7800000 
 3864 2450 130C0500 		mv	s8,a0	# tmp887,
 3865              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3866 2454 0325C4FF 		lw	a0,-4(s0)		#, MEM[(int *)_736 + 20B]
 3867 2458 97000000 		call	__floatsisf		#
 3867      E7800000 
 3868 2460 93850400 		mv	a1,s1	#, scalef
 3869 2464 97000000 		call	__mulsf3		#
 3869      E7800000 
 3870              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3871 246c 97000000 		call	__fixsfsi		#
 3871      E7800000 
 3872              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3873 2474 3305B501 		add	a0,a0,s11	# _12,, tmp888
 3874 2478 97000000 		call	__floatsisf		#
 3874      E7800000 
 3875 2480 930D0500 		mv	s11,a0	# tmp889,
 3876              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3877 2484 032584FE 		lw	a0,-24(s0)		#, MEM[(int *)_736]
 3878 2488 97000000 		call	__floatsisf		#
 3878      E7800000 
 3879 2490 93850400 		mv	a1,s1	#, scalef
 3880 2494 97000000 		call	__mulsf3		#
 3880      E7800000 
 3881              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3882 249c 97000000 		call	__fixsfsi		#
 3882      E7800000 
 3883              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3884 24a4 8327C100 		lw	a5,12(sp)		# _8, %sfp
 3885 24a8 3305F500 		add	a0,a0,a5	# _8, tmp738, tmp890
 3886              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3887 24ac 130505FD 		addi	a0,a0,-48	#,, tmp738
 3888 24b0 97000000 		call	__floatsisf		#
 3888      E7800000 
 3889 24b8 83254101 		lw	a1,20(sp)		#, %sfp
 3890 24bc 97000000 		call	__mulsf3		#
 3890      E7800000 
 3891 24c4 13080500 		mv	a6,a0	# tmp891,
 3892              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3893 24c8 93050D00 		mv	a1,s10	#, _313
 3894 24cc 13050A00 		mv	a0,s4	#, sin_theta
 3895              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3896 24d0 232E0101 		sw	a6,28(sp)	# tmp741, %sfp
 3897              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3898 24d4 97000000 		call	__mulsf3		#
 3898      E7800000 
 3899              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3900 24dc 93850C00 		mv	a1,s9	#, _315
 3901              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3902 24e0 232CA100 		sw	a0,24(sp)	# tmp742, %sfp
 3903              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3904 24e4 13850A00 		mv	a0,s5	#, cos_theta
 3905 24e8 97000000 		call	__mulsf3		#
 3905      E7800000 
 3906              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3907 24f0 03238101 		lw	t1,24(sp)		# tmp742, %sfp
 3908              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3909 24f4 93050500 		mv	a1,a0	# tmp893,
 3910              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3911 24f8 13050300 		mv	a0,t1	#, tmp742
 3912 24fc 97000000 		call	__addsf3		#
 3912      E7800000 
 3913              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3914 2504 93050000 		mv	a1,zero	#,
 3915 2508 97000000 		call	__addsf3		#
 3915      E7800000 
 3916              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3917 2510 97000000 		call	__fixsfsi		#
 3917      E7800000 
 3918              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3919 2518 97000000 		call	__floatsisf		#
 3919      E7800000 
 3920 2520 83250101 		lw	a1,16(sp)		#, %sfp
 3921 2524 97000000 		call	__mulsf3		#
 3921      E7800000 
 3922              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3923 252c 0328C101 		lw	a6,28(sp)		# tmp741, %sfp
 3924              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3925 2530 93050500 		mv	a1,a0	# tmp894,
 3926              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3927 2534 13050800 		mv	a0,a6	#, tmp741
 3928 2538 97000000 		call	__addsf3		#
 3928      E7800000 
 3929              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3930 2540 93850B00 		mv	a1,s7	#, tmp854
 3931 2544 97000000 		call	__addsf3		#
 3931      E7800000 
 3932              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3933 254c 97000000 		call	__fixsfsi		#
 3933      E7800000 
 3934              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3935 2554 130505FD 		addi	a0,a0,-48	#,, tmp895
 3936 2558 97000000 		call	__floatsisf		#
 3936      E7800000 
 3937 2560 13070500 		mv	a4,a0	# tmp896,
 3938              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3939 2564 93050D00 		mv	a1,s10	#, _313
 3940 2568 13850A00 		mv	a0,s5	#, cos_theta
 3941              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3942 256c 130D0700 		mv	s10,a4	# _153, tmp896
 3943              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3944 2570 97000000 		call	__mulsf3		#
 3944      E7800000 
 3945              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3946 2578 93850C00 		mv	a1,s9	#, _315
 3947              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3948 257c 232CA100 		sw	a0,24(sp)	# tmp754, %sfp
 3949              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3950 2580 13050A00 		mv	a0,s4	#, sin_theta
 3951 2584 97000000 		call	__mulsf3		#
 3951      E7800000 
 3952              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3953 258c 03278101 		lw	a4,24(sp)		# tmp754, %sfp
 3954              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3955 2590 93050500 		mv	a1,a0	# tmp898,
 3956              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3957 2594 13050700 		mv	a0,a4	#, tmp754
 3958 2598 97000000 		call	__subsf3		#
 3958      E7800000 
 3959              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3960 25a0 93050B00 		mv	a1,s6	#, tmp855
 3961 25a4 97000000 		call	__addsf3		#
 3961      E7800000 
 3962              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 3963 25ac 97000000 		call	__fixsfsi		#
 3963      E7800000 
 3964              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 3965 25b4 130505FE 		addi	a0,a0,-32	#,, tmp899
 3966 25b8 97000000 		call	__floatsisf		#
 3966      E7800000 
 3967 25c0 930C0500 		mv	s9,a0	# tmp900,
 3968              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3969 25c4 032544FF 		lw	a0,-12(s0)		#, MEM[(int *)_736 + 12B]
 3970 25c8 97000000 		call	__floatsisf		#
 3970      E7800000 
 3971 25d0 93850400 		mv	a1,s1	#, scalef
 3972 25d4 97000000 		call	__mulsf3		#
 3972      E7800000 
 3973              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3974 25dc 97000000 		call	__fixsfsi		#
 3974      E7800000 
 3975              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3976 25e4 8327C100 		lw	a5,12(sp)		# _8, %sfp
 3977 25e8 3305F500 		add	a0,a0,a5	# _8, tmp764, tmp901
 3978              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3979 25ec 130505FD 		addi	a0,a0,-48	#,, tmp764
 3980 25f0 97000000 		call	__floatsisf		#
 3980      E7800000 
 3981 25f8 83254101 		lw	a1,20(sp)		#, %sfp
 3982 25fc 97000000 		call	__mulsf3		#
 3982      E7800000 
 3983 2604 93080500 		mv	a7,a0	# tmp902,
 3984              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3985 2608 93050A00 		mv	a1,s4	#, sin_theta
 3986 260c 13050C00 		mv	a0,s8	#, _273
 3987              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 3988 2610 232E1101 		sw	a7,28(sp)	# tmp767, %sfp
 3989              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3990 2614 97000000 		call	__mulsf3		#
 3990      E7800000 
 3991 261c 232CA100 		sw	a0,24(sp)	# tmp768, %sfp
 3992              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3993 2620 93850A00 		mv	a1,s5	#, cos_theta
 3994 2624 13850D00 		mv	a0,s11	#, _275
 3995 2628 97000000 		call	__mulsf3		#
 3995      E7800000 
 3996              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3997 2630 03238101 		lw	t1,24(sp)		# tmp768, %sfp
 3998              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 3999 2634 93050500 		mv	a1,a0	# tmp904,
 4000              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4001 2638 13050300 		mv	a0,t1	#, tmp768
 4002 263c 97000000 		call	__addsf3		#
 4002      E7800000 
 4003              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4004 2644 93050000 		mv	a1,zero	#,
 4005 2648 97000000 		call	__addsf3		#
 4005      E7800000 
 4006              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4007 2650 97000000 		call	__fixsfsi		#
 4007      E7800000 
 4008              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4009 2658 97000000 		call	__floatsisf		#
 4009      E7800000 
 4010 2660 83250101 		lw	a1,16(sp)		#, %sfp
 4011 2664 97000000 		call	__mulsf3		#
 4011      E7800000 
 4012              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4013 266c 8328C101 		lw	a7,28(sp)		# tmp767, %sfp
 4014              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4015 2670 93050500 		mv	a1,a0	# tmp905,
 4016              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4017 2674 13850800 		mv	a0,a7	#, tmp767
 4018 2678 97000000 		call	__addsf3		#
 4018      E7800000 
 4019              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4020 2680 93850B00 		mv	a1,s7	#, tmp854
 4021 2684 97000000 		call	__addsf3		#
 4021      E7800000 
 4022              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4023 268c 97000000 		call	__fixsfsi		#
 4023      E7800000 
 4024              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4025 2694 130505FD 		addi	a0,a0,-48	#,, tmp906
 4026 2698 97000000 		call	__floatsisf		#
 4026      E7800000 
 4027 26a0 13070500 		mv	a4,a0	# tmp907,
 4028              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4029 26a4 93850A00 		mv	a1,s5	#, cos_theta
 4030 26a8 13050C00 		mv	a0,s8	#, _273
 4031              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4032 26ac 130C0700 		mv	s8,a4	# _113, tmp907
 4033              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4034 26b0 97000000 		call	__mulsf3		#
 4034      E7800000 
 4035 26b8 232CA100 		sw	a0,24(sp)	# tmp780, %sfp
 4036              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4037 26bc 93050A00 		mv	a1,s4	#, sin_theta
 4038 26c0 13850D00 		mv	a0,s11	#, _275
 4039 26c4 97000000 		call	__mulsf3		#
 4039      E7800000 
 4040              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4041 26cc 03278101 		lw	a4,24(sp)		# tmp780, %sfp
 4042              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4043 26d0 93050500 		mv	a1,a0	# tmp909,
 4044              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4045 26d4 13050700 		mv	a0,a4	#, tmp780
 4046 26d8 97000000 		call	__subsf3		#
 4046      E7800000 
 4047              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4048 26e0 93050B00 		mv	a1,s6	#, tmp855
 4049 26e4 97000000 		call	__addsf3		#
 4049      E7800000 
 4050              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4051 26ec 97000000 		call	__fixsfsi		#
 4051      E7800000 
 4052              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4053 26f4 130505FE 		addi	a0,a0,-32	#,, tmp910
 4054 26f8 97000000 		call	__floatsisf		#
 4054      E7800000 
 4055 2700 930D0500 		mv	s11,a0	# tmp911,
 4056              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4057 2704 93850900 		mv	a1,s3	#, sin_theta
 4058 2708 13050C00 		mv	a0,s8	#, _113
 4059 270c 97000000 		call	__mulsf3		#
 4059      E7800000 
 4060 2714 232CA100 		sw	a0,24(sp)	# tmp787, %sfp
 4061              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4062 2718 93050900 		mv	a1,s2	#, cos_theta
 4063 271c 13850D00 		mv	a0,s11	#, _115
 4064 2720 97000000 		call	__mulsf3		#
 4064      E7800000 
 4065              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4066 2728 83268101 		lw	a3,24(sp)		# tmp787, %sfp
 4067              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4068 272c 93050500 		mv	a1,a0	# tmp913,
 4069              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4070 2730 13850600 		mv	a0,a3	#, tmp787
 4071 2734 97000000 		call	__addsf3		#
 4071      E7800000 
 4072              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4073 273c 93050B00 		mv	a1,s6	#, tmp855
 4074 2740 97000000 		call	__addsf3		#
 4074      E7800000 
 4075              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4076 2748 97000000 		call	__fixsfsi		#
 4076      E7800000 
 4077 2750 93060500 		mv	a3,a0	# tmp914,
 4078              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4079 2754 93050900 		mv	a1,s2	#, cos_theta
 4080 2758 13050C00 		mv	a0,s8	#, _113
 4081              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4082 275c 2320D102 		sw	a3,32(sp)	# tmp792, %sfp
 4083              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4084 2760 97000000 		call	__mulsf3		#
 4084      E7800000 
 4085 2768 232CA100 		sw	a0,24(sp)	# tmp793, %sfp
 4086              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4087 276c 93850900 		mv	a1,s3	#, sin_theta
 4088 2770 13850D00 		mv	a0,s11	#, _115
 4089 2774 97000000 		call	__mulsf3		#
 4089      E7800000 
 4090              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4091 277c 83288101 		lw	a7,24(sp)		# tmp793, %sfp
 4092              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4093 2780 93050500 		mv	a1,a0	# tmp916,
 4094              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4095 2784 13850800 		mv	a0,a7	#, tmp793
 4096 2788 97000000 		call	__subsf3		#
 4096      E7800000 
 4097              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4098 2790 93850B00 		mv	a1,s7	#, tmp854
 4099 2794 97000000 		call	__addsf3		#
 4099      E7800000 
 4100              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4101 279c 97000000 		call	__fixsfsi		#
 4101      E7800000 
 4102 27a4 13060500 		mv	a2,a0	# tmp917,
 4103              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4104 27a8 93050D00 		mv	a1,s10	#, _153
 4105 27ac 13850900 		mv	a0,s3	#, sin_theta
 4106              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4107 27b0 232EC100 		sw	a2,28(sp)	# tmp798, %sfp
 4108              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4109 27b4 97000000 		call	__mulsf3		#
 4109      E7800000 
 4110 27bc 232CA100 		sw	a0,24(sp)	# tmp799, %sfp
 4111              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4112 27c0 93850C00 		mv	a1,s9	#, _155
 4113 27c4 13050900 		mv	a0,s2	#, cos_theta
 4114 27c8 97000000 		call	__mulsf3		#
 4114      E7800000 
 4115              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4116 27d0 83288101 		lw	a7,24(sp)		# tmp799, %sfp
 4117              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4118 27d4 93050500 		mv	a1,a0	# tmp919,
 4119              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4120 27d8 13850800 		mv	a0,a7	#, tmp799
 4121 27dc 97000000 		call	__addsf3		#
 4121      E7800000 
 4122              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4123 27e4 93050B00 		mv	a1,s6	#, tmp855
 4124 27e8 97000000 		call	__addsf3		#
 4124      E7800000 
 4125              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4126 27f0 97000000 		call	__fixsfsi		#
 4126      E7800000 
 4127 27f8 93080500 		mv	a7,a0	# tmp920,
 4128              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4129 27fc 93050D00 		mv	a1,s10	#, _153
 4130 2800 13050900 		mv	a0,s2	#, cos_theta
 4131              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 4132 2804 138C0800 		mv	s8,a7	# tmp804, tmp920
 4133              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4134 2808 97000000 		call	__mulsf3		#
 4134      E7800000 
 4135 2810 232CA100 		sw	a0,24(sp)	# tmp805, %sfp
 4136              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4137 2814 93850C00 		mv	a1,s9	#, _155
 4138 2818 13850900 		mv	a0,s3	#, sin_theta
 4139 281c 97000000 		call	__mulsf3		#
 4139      E7800000 
 4140              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4141 2824 83288101 		lw	a7,24(sp)		# tmp805, %sfp
 4142              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4143 2828 93050500 		mv	a1,a0	# tmp922,
 4144              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4145 282c 13850800 		mv	a0,a7	#, tmp805
 4146 2830 97000000 		call	__subsf3		#
 4146      E7800000 
 4147              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4148 2838 93850B00 		mv	a1,s7	#, tmp854
 4149 283c 97000000 		call	__addsf3		#
 4149      E7800000 
 4150              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4151 2844 97000000 		call	__fixsfsi		#
 4151      E7800000 
 4152              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 4153 284c 83260102 		lw	a3,32(sp)		# tmp792, %sfp
 4154 2850 0326C101 		lw	a2,28(sp)		# tmp798, %sfp
 4155 2854 93050C00 		mv	a1,s8	#, tmp804
 4156 2858 97000000 		call	fb_draw_bresenham.constprop.0		#
 4156      E7800000 
 4157              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 4158 2860 03278102 		lw	a4,40(sp)		# _82, %sfp
 4159 2864 83274102 		lw	a5,36(sp)		# i, %sfp
 4160 2868 E3E0E7B4 		bgtu	a4,a5,.L450	#, _82, i,
 4161              	.L400:
 4162              	# main_cube3d_rotate.c:95: }
 4163 286c 8320C108 		lw	ra,140(sp)		#,
 4164 2870 03248108 		lw	s0,136(sp)		#,
 4165 2874 83244108 		lw	s1,132(sp)		#,
 4166 2878 03290108 		lw	s2,128(sp)		#,
 4167 287c 8329C107 		lw	s3,124(sp)		#,
 4168 2880 032A8107 		lw	s4,120(sp)		#,
 4169 2884 832A4107 		lw	s5,116(sp)		#,
 4170 2888 032B0107 		lw	s6,112(sp)		#,
 4171 288c 832BC106 		lw	s7,108(sp)		#,
 4172 2890 032C8106 		lw	s8,104(sp)		#,
 4173 2894 832C4106 		lw	s9,100(sp)		#,
 4174 2898 032D0106 		lw	s10,96(sp)		#,
 4175 289c 832DC105 		lw	s11,92(sp)		#,
 4176 28a0 13010109 		addi	sp,sp,144	#,,
 4177 28a4 67800000 		jr	ra		#
 4178              	.L475:
 4179              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4180 28a8 33052041 		neg	a0,s2	# v1, _655
 4181 28ac 6FF05FAB 		j	.L449		#
 4182              	.L474:
 4183              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4184 28b0 13850900 		mv	a0,s3	# v1, _89
 4185 28b4 6FF05FA7 		j	.L447		#
 4186              	.L473:
 4187              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 4188 28b8 13850B00 		mv	a0,s7	# v1, _192
 4189 28bc 6FF01FA3 		j	.L445		#
 4190              	.L472:
 4191              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 4192 28c0 3305A041 		neg	a0,s10	# v1, _564
 4193 28c4 6FF0DF9E 		j	.L443		#
 4194              	.L471:
 4195              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4196 28c8 33055041 		neg	a0,s5	# v1, _552
 4197 28cc 6FF09F9A 		j	.L441		#
 4198              	.L470:
 4199              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4200 28d0 3305D040 		neg	a0,a3	# v1, _542
 4201 28d4 6FF01F96 		j	.L439		#
 4202              	.L469:
 4203              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4204 28d8 93870F00 		mv	a5,t6	# v1, angle
 4205 28dc 6FF0DF92 		j	.L437		#
 4206              	.L468:
 4207 28e0 93080500 		mv	a7,a0	# v1, angle
 4208 28e4 6FF09F8E 		j	.L435		#
 4209              	.L467:
 4210 28e8 130E0C00 		mv	t3,s8	# v1, angle
 4211 28ec 6FF01F8A 		j	.L433		#
 4212              	.L466:
 4213 28f0 93030800 		mv	t2,a6	# v1, angle
 4214 28f4 6FF09F85 		j	.L431		#
 4215              	.L465:
 4216 28f8 13890D00 		mv	s2,s11	# v1, angle
 4217 28fc 6FF01F81 		j	.L429		#
 4218              	.L464:
 4219 2900 93020B00 		mv	t0,s6	# v1, angle
 4220 2904 6FF08FFC 		j	.L427		#
 4221              	.L463:
 4222 2908 13060700 		mv	a2,a4	# v0, v0
 4223 290c 6FF0CFF8 		j	.L425		#
 4224              	.L462:
 4225 2910 93050700 		mv	a1,a4	# v0, v0
 4226 2914 6FF04FF2 		j	.L421		#
 4227              	.L461:
 4228 2918 93070700 		mv	a5,a4	# v0, v0
 4229 291c 6FF04FE7 		j	.L417		#
 4230              	.L460:
 4231 2920 130E0700 		mv	t3,a4	# v0, v0
 4232 2924 6FF04FE0 		j	.L413		#
 4233              	.L459:
 4234 2928 93070700 		mv	a5,a4	# v0, v0
 4235 292c 6FF0CFD6 		j	.L409		#
 4236              	.L458:
 4237 2930 13090700 		mv	s2,a4	# v0, v0
 4238 2934 6FF0CFCF 		j	.L405		#
 4240              		.globl	__gesf2
 4241              		.globl	__lesf2
 4242              		.section	.text.startup,"ax",@progbits
 4243              		.align	2
 4244              		.globl	main
 4246              	main:
 4247 0000 37070000 		lui	a4,%hi(.LANCHOR2)	# tmp2433,
 4248 0004 130101F4 		addi	sp,sp,-192	#,,
 4249 0008 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2045,
 4250 000c 13070700 		addi	a4,a4,%lo(.LANCHOR2)	# tmp2432, tmp2433,
 4251 0010 232E110A 		sw	ra,188(sp)	#,
 4252 0014 232C810A 		sw	s0,184(sp)	#,
 4253 0018 232A910A 		sw	s1,180(sp)	#,
 4254 001c 2328210B 		sw	s2,176(sp)	#,
 4255 0020 2326310B 		sw	s3,172(sp)	#,
 4256 0024 2324410B 		sw	s4,168(sp)	#,
 4257 0028 2322510B 		sw	s5,164(sp)	#,
 4258 002c 2320610B 		sw	s6,160(sp)	#,
 4259 0030 232E7109 		sw	s7,156(sp)	#,
 4260 0034 232C8109 		sw	s8,152(sp)	#,
 4261 0038 232A9109 		sw	s9,148(sp)	#,
 4262 003c 2328A109 		sw	s10,144(sp)	#,
 4263 0040 2326B109 		sw	s11,140(sp)	#,
 4264 0044 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# ivtmp.561, tmp2045,
 4265 0048 13065702 		addi	a2,a4,37	#, _3458, tmp2432
 4266              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 4267 004c B7060030 		li	a3,805306368		# tmp990,
 4268              	.L477:
 4269              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 4270 0050 03C70700 		lbu	a4,0(a5)	# _27, MEM[(char *)_3462]
 4271              	# gfx_lib.h:177:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 4272 0054 93871700 		addi	a5,a5,1	#, ivtmp.561, ivtmp.561
 4273              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 4274 0058 23A6E600 		sw	a4,12(a3)	# _27, MEM[(volatile uint32_t *)805306380B]
 4275              	# gfx_lib.h:177:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 4276 005c E31AF6FE 		bne	a2,a5,.L477	#, _3458, ivtmp.561,
 4277 0060 B7070000 		lui	a5,%hi(framebuffer)	# tmp991,
 4278 0064 93860700 		addi	a3,a5,%lo(framebuffer)	# tmp2434, tmp2435,
 4279 0068 37370000 		li	a4,12288		# tmp992,
 4280 006c B383E600 		add	t2,a3,a4	# tmp992, _3469, tmp2434
 4281 0070 93870700 		addi	a5,a5,%lo(framebuffer)	# ivtmp.552, tmp991,
 4282              	.L478:
 4283              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 4284 0074 23A00700 		sw	zero,0(a5)	#, MEM <vector(2) short unsigned int> [(uint16_t *)_3471]
 4285 0078 93874700 		addi	a5,a5,4	#, ivtmp.552, ivtmp.552
 4286 007c E39CF3FE 		bne	t2,a5,.L478	#, _3469, ivtmp.552,
 4287              	# main_cube3d_rotate.c:107:   float delta_scale = 0.1;//0.8; /* speedup scale */
 4288 0080 B7070000 		lui	a5,%hi(.LC8)	# tmp985,
 4289 0084 83A70700 		lw	a5,%lo(.LC8)(a5)		# delta_scale,
 4290              	# main_cube3d_rotate.c:103:   int angle = 0;
 4291 0088 232C0104 		sw	zero,88(sp)	#, %sfp
 4292              	# main_cube3d_rotate.c:107:   float delta_scale = 0.1;//0.8; /* speedup scale */
 4293 008c 2328F106 		sw	a5,112(sp)	# delta_scale, %sfp
 4294              	# main_cube3d_rotate.c:106:   float s = 4;
 4295 0090 B7070000 		lui	a5,%hi(.LC9)	# tmp986,
 4296 0094 03A90700 		lw	s2,%lo(.LC9)(a5)		# s,
 4297              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4298 0098 B7070000 		lui	a5,%hi(.LC1)	# tmp2048,
 4299 009c 03A84700 		lw	a6,%lo(.LC1+4)(a5)		#,
 4300 00a0 83A70700 		lw	a5,%lo(.LC1)(a5)		# tmp2098,
 4301 00a4 23220107 		sw	a6,100(sp)	#, %sfp
 4302 00a8 2320F106 		sw	a5,96(sp)	# tmp2098, %sfp
 4303 00ac B7070000 		lui	a5,%hi(.LC2)	# tmp2049,
 4304 00b0 03A84700 		lw	a6,%lo(.LC2+4)(a5)		#,
 4305 00b4 83A70700 		lw	a5,%lo(.LC2)(a5)		# tmp2099,
 4306 00b8 23260107 		sw	a6,108(sp)	#, %sfp
 4307 00bc 2324F106 		sw	a5,104(sp)	# tmp2099, %sfp
 4308 00c0 B7070000 		lui	a5,%hi(.LANCHOR1)	# tmp2044,
 4309 00c4 93870700 		addi	a5,a5,%lo(.LANCHOR1)	# tmp2042, tmp2044,
 4310 00c8 232AF100 		sw	a5,20(sp)	# tmp2042, %sfp
 4311 00cc B7070000 		lui	a5,%hi(.LANCHOR2+40)	# tmp2056,
 4312 00d0 93878702 		addi	a5,a5,%lo(.LANCHOR2+40)	# ivtmp.547, tmp2056,
 4313 00d4 232EF106 		sw	a5,124(sp)	# ivtmp.547, %sfp
 4314 00d8 B7070000 		lui	a5,%hi(.LANCHOR2+136)	# tmp2057,
 4315 00dc 93878708 		addi	a5,a5,%lo(.LANCHOR2+136)	# ivtmp.540, tmp2057,
 4316 00e0 2328F104 		sw	a5,80(sp)	# ivtmp.540, %sfp
 4317              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4318 00e4 B7A7FFFF 		li	a5,-24576		# tmp1026,
 4319 00e8 93871700 		addi	a5,a5,1	#, tmp1025, tmp1026
 4320 00ec 2320F102 		sw	a5,32(sp)	# tmp1025, %sfp
 4321              	.L531:
 4322              	# main_cube3d_rotate.c:110:     render_lines(front, SIZEOF(front), angle, angle, angle, s);
 4323 00f0 03258105 		lw	a0,88(sp)		#, %sfp
 4324              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4325 00f4 B7090080 		li	s3,-2147483648		# tmp1002,
 4326              	# main_cube3d_rotate.c:110:     render_lines(front, SIZEOF(front), angle, angle, angle, s);
 4327 00f8 97000000 		call	__floatsisf		#
 4327      E7800000 
 4328              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4329 0100 B7070000 		lui	a5,%hi(.LC4)	# tmp2443,
 4330 0104 83A50700 		lw	a1,%lo(.LC4)(a5)		#,
 4331              	# main_cube3d_rotate.c:110:     render_lines(front, SIZEOF(front), angle, angle, angle, s);
 4332 0108 13040500 		mv	s0,a0	# tmp2108,
 4333              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4334 010c 13050900 		mv	a0,s2	#, s
 4335 0110 97000000 		call	__mulsf3		#
 4335      E7800000 
 4336              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4337 0118 B7070000 		lui	a5,%hi(.LC5)	# tmp2444,
 4338              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4339 011c 93040500 		mv	s1,a0	# tmp2109,
 4340              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4341 0120 03A50700 		lw	a0,%lo(.LC5)(a5)		#,
 4342 0124 93850400 		mv	a1,s1	#, tmp994
 4343 0128 97000000 		call	__subsf3		#
 4343      E7800000 
 4344              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4345 0130 97000000 		call	__fixsfsi		#
 4345      E7800000 
 4346              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4347 0138 37070000 		lui	a4,%hi(.LC6)	# tmp2445,
 4348 013c 83250700 		lw	a1,%lo(.LC6)(a4)		#,
 4349              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4350 0140 93070500 		mv	a5,a0	# tmp2110,
 4351              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4352 0144 13050900 		mv	a0,s2	#, s
 4353              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4354 0148 2326F100 		sw	a5,12(sp)	# tmp2110, %sfp
 4355              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4356 014c 97000000 		call	__mulsf3		#
 4356      E7800000 
 4357              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4358 0154 B7070000 		lui	a5,%hi(.LC7)	# tmp2446,
 4359              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4360 0158 93050500 		mv	a1,a0	# tmp2111,
 4361              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4362 015c 03A50700 		lw	a0,%lo(.LC7)(a5)		#,
 4363 0160 97000000 		call	__subsf3		#
 4363      E7800000 
 4364              	# main_cube3d_rotate.c:79:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*scalef);
 4365 0168 97000000 		call	__fixsfsi		#
 4365      E7800000 
 4366 0170 93070500 		mv	a5,a0	# tmp2112,
 4367 0174 33C59900 		xor	a0,s3,s1	# tmp994,, tmp1002
 4368 0178 2328F100 		sw	a5,16(sp)	# tmp2112, %sfp
 4369 017c 97000000 		call	__fixsfsi		#
 4369      E7800000 
 4370 0184 130B0500 		mv	s6,a0	# tmp2113,
 4371              	# main_cube3d_rotate.c:84:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 4372 0188 33C58900 		xor	a0,s3,s0	# _1,, tmp1002
 4373 018c 97000000 		call	__fixsfsi		#
 4373      E7800000 
 4374              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4375 0194 97000000 		call	__floatsidf		#
 4375      E7800000 
 4376 019c 03260106 		lw	a2,96(sp)		#, %sfp
 4377 01a0 83264106 		lw	a3,100(sp)		#, %sfp
 4378 01a4 97000000 		call	__muldf3		#
 4378      E7800000 
 4379 01ac 03268106 		lw	a2,104(sp)		#, %sfp
 4380 01b0 8326C106 		lw	a3,108(sp)		#, %sfp
 4381 01b4 97000000 		call	__divdf3		#
 4381      E7800000 
 4382 01bc 97000000 		call	__fixdfsi		#
 4382      E7800000 
 4383              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4384 01c4 93170501 		slli	a5,a0,16	#, angle.39_638, tmp2114
 4385 01c8 93D70701 		srli	a5,a5,16	#, angle.39_638, angle.39_638
 4386 01cc 13870700 		mv	a4,a5	# angle.39_638, angle.39_638
 4387 01d0 232CF106 		sw	a5,120(sp)	# angle.39_638, %sfp
 4388              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4389 01d4 B7870000 		li	a5,32768		# tmp1014,
 4390 01d8 B347F700 		xor	a5,a4,a5	# tmp1014, _639, angle.39_638
 4391 01dc 232EF100 		sw	a5,28(sp)	# _639, %sfp
 4392              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4393 01e0 13170501 		slli	a4,a0,16	#, _608, tmp2114
 4394              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4395 01e4 93970701 		slli	a5,a5,16	#, angle, _639
 4396 01e8 93D70741 		srai	a5,a5,16	#, angle, angle
 4397              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4398 01ec 13570741 		srai	a4,a4,16	#, _608, _608
 4399              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4400 01f0 2324F104 		sw	a5,72(sp)	# angle, %sfp
 4401              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4402 01f4 232EE104 		sw	a4,92(sp)	# _608, %sfp
 4403 01f8 63440700 		blt	a4,zero,.L480	#, _608,,
 4404 01fc 93070700 		mv	a5,a4	# _608, _608
 4405              	.L480:
 4406 0200 139D0701 		slli	s10,a5,16	#, angle, _608
 4407 0204 135D0D41 		srai	s10,s10,16	#, angle, angle
 4408              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 4409 0208 13578D40 		srai	a4,s10,8	#, v0, angle
 4410              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4411 020c 93C7F7FF 		not	a5,a5	# tmp1021, _608
 4412              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4413 0210 93120701 		slli	t0,a4,16	#, v0.41_643, v0
 4414              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4415 0214 93940701 		slli	s1,a5,16	#, v1, tmp1021
 4416 0218 13780702 		andi	a6,a4,32	#, _644, v0
 4417              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4418 021c 93D20201 		srli	t0,t0,16	#, v0.41_643, v0.41_643
 4419              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4420 0220 93D40441 		srai	s1,s1,16	#, v1, v1
 4421 0224 934BF7FF 		not	s7,a4	# v0, v0
 4422 0228 63140800 		bne	a6,zero,.L482	#, _644,,
 4423 022c 930B0700 		mv	s7,a4	# v0, v0
 4424              	.L482:
 4425              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4426 0230 03270102 		lw	a4,32(sp)		# tmp1025, %sfp
 4427 0234 93170D01 		slli	a5,s10,16	#, angle.46_617, angle
 4428 0238 93D70701 		srli	a5,a5,16	#, angle.46_617, angle.46_617
 4429 023c 3385E700 		add	a0,a5,a4	# tmp1025, tmp1024, angle.46_617
 4430              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4431 0240 13150501 		slli	a0,a0,16	#, _619, tmp1024
 4432 0244 37270000 		li	a4,8192		# tmp1029,
 4433 0248 13071700 		addi	a4,a4,1	#, tmp1028, tmp1029
 4434 024c 13550541 		srai	a0,a0,16	#, _619, _619
 4435              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4436 0250 93FBFB01 		andi	s7,s7,31	#, _649, v0
 4437 0254 B387E700 		add	a5,a5,a4	# tmp1028, _619, angle.46_617
 4438 0258 63440500 		blt	a0,zero,.L484	#, _619,,
 4439 025c 93070500 		mv	a5,a0	# _619, _619
 4440              	.L484:
 4441 0260 93980701 		slli	a7,a5,16	#, angle, _619
 4442 0264 93D80841 		srai	a7,a7,16	#, angle, angle
 4443              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 4444 0268 13D78840 		srai	a4,a7,8	#, v0, angle
 4445              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4446 026c 93160701 		slli	a3,a4,16	#, v0.41_674, v0
 4447              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4448 0270 93C7F7FF 		not	a5,a5	# tmp1036, _619
 4449              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4450 0274 93D60601 		srli	a3,a3,16	#, v0.41_674, v0.41_674
 4451              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4452 0278 93990701 		slli	s3,a5,16	#, v1, tmp1036
 4453 027c 937D0702 		andi	s11,a4,32	#, _675, v0
 4454              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4455 0280 2322D102 		sw	a3,36(sp)	# v0.41_674, %sfp
 4456              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4457 0284 93D90941 		srai	s3,s3,16	#, v1, v1
 4458 0288 934AF7FF 		not	s5,a4	# v0, v0
 4459 028c 63940D00 		bne	s11,zero,.L486	#, _675,,
 4460 0290 930A0700 		mv	s5,a4	# v0, v0
 4461              	.L486:
 4462 0294 23281103 		sw	a7,48(sp)	# angle, %sfp
 4463 0298 23260103 		sw	a6,44(sp)	# _644, %sfp
 4464 029c 23245102 		sw	t0,40(sp)	# v0.41_643, %sfp
 4465              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4466 02a0 97000000 		call	sin1		#
 4466      E7800000 
 4467              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4468 02a8 97000000 		call	__floatsidf		#
 4468      E7800000 
 4469 02b0 370C0000 		lui	s8,%hi(.LC3)	# tmp2455,
 4470 02b4 03260C00 		lw	a2,%lo(.LC3)(s8)		#,
 4471 02b8 83264C00 		lw	a3,%lo(.LC3+4)(s8)		#,
 4472              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4473 02bc 93FAFA01 		andi	s5,s5,31	#, _680, v0
 4474              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4475 02c0 97000000 		call	__muldf3		#
 4475      E7800000 
 4476              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4477 02c8 97000000 		call	__truncdfsf2		#
 4477      E7800000 
 4478 02d0 130A0500 		mv	s4,a0	# tmp2115,
 4479              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 4480 02d4 0325C105 		lw	a0,92(sp)		#, %sfp
 4481 02d8 97000000 		call	sin1		#
 4481      E7800000 
 4482 02e0 97000000 		call	__floatsidf		#
 4482      E7800000 
 4483 02e8 03260C00 		lw	a2,%lo(.LC3)(s8)		#,
 4484 02ec 83264C00 		lw	a3,%lo(.LC3+4)(s8)		#,
 4485 02f0 97000000 		call	__muldf3		#
 4485      E7800000 
 4486              	# gfx_lib.h:263:   float sin_theta = SIN_FAST(angle);
 4487 02f8 97000000 		call	__truncdfsf2		#
 4487      E7800000 
 4488 0300 930C0500 		mv	s9,a0	# tmp2116,
 4489              	# main_cube3d_rotate.c:88:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 4490 0304 13050400 		mv	a0,s0	#, _1
 4491 0308 97000000 		call	__fixsfsi		#
 4491      E7800000 
 4492              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4493 0310 97000000 		call	__floatsidf		#
 4493      E7800000 
 4494 0318 03260106 		lw	a2,96(sp)		#, %sfp
 4495 031c 83264106 		lw	a3,100(sp)		#, %sfp
 4496 0320 97000000 		call	__muldf3		#
 4496      E7800000 
 4497 0328 03268106 		lw	a2,104(sp)		#, %sfp
 4498 032c 8326C106 		lw	a3,108(sp)		#, %sfp
 4499 0330 97000000 		call	__divdf3		#
 4499      E7800000 
 4500 0338 97000000 		call	__fixdfsi		#
 4500      E7800000 
 4501 0340 13140501 		slli	s0,a0,16	#, _448, tmp2117
 4502 0344 13540441 		srai	s0,s0,16	#, _448, _448
 4503 0348 13050400 		mv	a0,s0	#, _448
 4504 034c 23268104 		sw	s0,76(sp)	# _448, %sfp
 4505 0350 97000000 		call	sin1		#
 4505      E7800000 
 4506 0358 97000000 		call	__floatsidf		#
 4506      E7800000 
 4507 0360 83264C00 		lw	a3,%lo(.LC3+4)(s8)		#,
 4508 0364 03260C00 		lw	a2,%lo(.LC3)(s8)		#,
 4509 0368 97000000 		call	__muldf3		#
 4509      E7800000 
 4510              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4511 0370 97000000 		call	__truncdfsf2		#
 4511      E7800000 
 4512              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4513 0378 93170401 		slli	a5,s0,16	#, angle.44_453, _448
 4514 037c 93D70701 		srli	a5,a5,16	#, angle.44_453, angle.44_453
 4515 0380 93860700 		mv	a3,a5	# angle.44_453, angle.44_453
 4516 0384 232AF104 		sw	a5,84(sp)	# angle.44_453, %sfp
 4517              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4518 0388 B7870000 		li	a5,32768		# tmp1063,
 4519 038c B3C7F600 		xor	a5,a3,a5	# tmp1063, prephitmp_1170, angle.44_453
 4520 0390 232CF100 		sw	a5,24(sp)	# prephitmp_1170, %sfp
 4521 0394 93970701 		slli	a5,a5,16	#, angle, prephitmp_1170
 4522 0398 93D70741 		srai	a5,a5,16	#, angle, angle
 4523 039c 83228102 		lw	t0,40(sp)		# v0.41_643, %sfp
 4524 03a0 2320F104 		sw	a5,64(sp)	# angle, %sfp
 4525              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4526 03a4 130C0500 		mv	s8,a0	# sin_theta, tmp2118
 4527 03a8 0328C102 		lw	a6,44(sp)		# _644, %sfp
 4528 03ac 93860700 		mv	a3,a5	# _448, angle
 4529 03b0 83280103 		lw	a7,48(sp)		# angle, %sfp
 4530 03b4 63440400 		blt	s0,zero,.L488	#, _448,,
 4531 03b8 93060400 		mv	a3,s0	# _448, _448
 4532              	.L488:
 4533              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4534 03bc 83270102 		lw	a5,32(sp)		# tmp1025, %sfp
 4535 03c0 13970601 		slli	a4,a3,16	#, angle.46_457, _448
 4536 03c4 13570701 		srli	a4,a4,16	#, angle.46_457, angle.46_457
 4537 03c8 B307F700 		add	a5,a4,a5	# tmp1025, tmp1065, angle.46_457
 4538              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4539 03cc 13960701 		slli	a2,a5,16	#, _459, tmp1065
 4540 03d0 13560641 		srai	a2,a2,16	#, _459, _459
 4541 03d4 B7270000 		li	a5,8192		# tmp1070,
 4542 03d8 93960601 		slli	a3,a3,16	#, angle, _448
 4543 03dc 93871700 		addi	a5,a5,1	#, tmp1069, tmp1070
 4544 03e0 232AC106 		sw	a2,116(sp)	# _459, %sfp
 4545 03e4 93D60641 		srai	a3,a3,16	#, angle, angle
 4546 03e8 3307F700 		add	a4,a4,a5	# tmp1069, _459, angle.46_457
 4547 03ec 63440600 		blt	a2,zero,.L490	#, _459,,
 4548 03f0 13070600 		mv	a4,a2	# _459, _459
 4549              	.L490:
 4550 03f4 13130701 		slli	t1,a4,16	#, angle, _459
 4551 03f8 13530341 		srai	t1,t1,16	#, angle, angle
 4552              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 4553 03fc 93578340 		srai	a5,t1,8	#, v0, angle
 4554              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4555 0400 13960701 		slli	a2,a5,16	#, v0.41_767, v0
 4556              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4557 0404 1347F7FF 		not	a4,a4	# tmp1077, _459
 4558              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4559 0408 13560601 		srli	a2,a2,16	#, v0.41_767, v0.41_767
 4560              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4561 040c 931E0701 		slli	t4,a4,16	#, v1, tmp1077
 4562 0410 13F50702 		andi	a0,a5,32	#, _768, v0
 4563              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4564 0414 2324C102 		sw	a2,40(sp)	# v0.41_767, %sfp
 4565              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4566 0418 93DE0E41 		srai	t4,t4,16	#, v1, v1
 4567 041c 13C7F7FF 		not	a4,a5	# v0, v0
 4568 0420 63140500 		bne	a0,zero,.L492	#, _768,,
 4569 0424 13870700 		mv	a4,a5	# v0, v0
 4570              	.L492:
 4571              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 4572 0428 13D68640 		srai	a2,a3,8	#, v0, angle
 4573              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4574 042c 93170601 		slli	a5,a2,16	#, v0.41_798, v0
 4575 0430 93D70701 		srli	a5,a5,16	#, v0.41_798, v0.41_798
 4576 0434 2326F102 		sw	a5,44(sp)	# v0.41_798, %sfp
 4577 0438 93750602 		andi	a1,a2,32	#, _799, v0
 4578              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4579 043c 1377F701 		andi	a4,a4,31	#, _773, v0
 4580              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4581 0440 13CFF6FF 		not	t5,a3	# v1, angle
 4582 0444 9347F6FF 		not	a5,a2	# v0, v0
 4583 0448 63940500 		bne	a1,zero,.L494	#, _799,,
 4584 044c 93070600 		mv	a5,a2	# v0, v0
 4585              	.L494:
 4586              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4587 0450 032E4101 		lw	t3,20(sp)		# tmp2042, %sfp
 4588              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4589 0454 13861B00 		addi	a2,s7,1	#, tmp1094, _649
 4590 0458 13161600 		slli	a2,a2,1	#, tmp1095, tmp1094
 4591              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4592 045c 939B1B00 		slli	s7,s7,1	#, tmp1090, _649
 4593              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4594 0460 3306CE00 		add	a2,t3,a2	# tmp1095, tmp1096, tmp2042
 4595              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4596 0464 B30B7E01 		add	s7,t3,s7	# tmp1090, tmp1091, tmp2042
 4597 0468 039E0B00 		lh	t3,0(s7)		# pretmp_2942, sin90[_649]
 4598              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4599 046c 03160600 		lh	a2,0(a2)		# sin90[_652], sin90[_652]
 4600              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4601 0470 93F7F701 		andi	a5,a5,31	#, _804, v0
 4602              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4603 0474 3306C641 		sub	a2,a2,t3	# tmp1098, sin90[_652], pretmp_2942
 4604              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4605 0478 63140800 		bne	a6,zero,.L496	#, _644,,
 4606 047c 93040D00 		mv	s1,s10	# v1, angle
 4607              	.L496:
 4608 0480 93F4F40F 		andi	s1,s1,0xff	# tmp1101, v1
 4609              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4610 0484 33069602 		mul	a2,a2,s1	# tmp1102, tmp1098, tmp1101
 4611              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4612 0488 832F4101 		lw	t6,20(sp)		# tmp2042, %sfp
 4613              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4614 048c 13881A00 		addi	a6,s5,1	#, tmp1113, _680
 4615 0490 13181800 		slli	a6,a6,1	#, tmp1114, tmp1113
 4616              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4617 0494 939A1A00 		slli	s5,s5,1	#, tmp1109, _680
 4618              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4619 0498 33880F01 		add	a6,t6,a6	# tmp1114, tmp1115, tmp2042
 4620              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4621 049c B38A5F01 		add	s5,t6,s5	# tmp1109, tmp1110, tmp2042
 4622 04a0 839F0A00 		lh	t6,0(s5)		# pretmp_2937, sin90[_680]
 4623              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4624 04a4 03180800 		lh	a6,0(a6)		# sin90[_683], sin90[_683]
 4625              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4626 04a8 13568640 		srai	a2,a2,8	#, tmp1103, tmp1102
 4627              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4628 04ac 3306C601 		add	a2,a2,t3	# pretmp_2942, tmp1106, tmp1103
 4629 04b0 13160601 		slli	a2,a2,16	#, _2824, tmp1106
 4630 04b4 13560601 		srli	a2,a2,16	#, _2824, _2824
 4631              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4632 04b8 3308F841 		sub	a6,a6,t6	# tmp1117, sin90[_683], pretmp_2937
 4633              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4634 04bc 63940D00 		bne	s11,zero,.L498	#, _675,,
 4635 04c0 93890800 		mv	s3,a7	# v1, angle
 4636              	.L498:
 4637 04c4 93F9F90F 		andi	s3,s3,0xff	# tmp1120, v1
 4638              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4639 04c8 33083803 		mul	a6,a6,s3	# tmp1121, tmp1117, tmp1120
 4640              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4641 04cc 032E4101 		lw	t3,20(sp)		# tmp2042, %sfp
 4642              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4643 04d0 93081700 		addi	a7,a4,1	#, tmp1132, _773
 4644 04d4 93981800 		slli	a7,a7,1	#, tmp1133, tmp1132
 4645              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4646 04d8 13171700 		slli	a4,a4,1	#, tmp1128, _773
 4647 04dc 3307EE00 		add	a4,t3,a4	# tmp1128, tmp1129, tmp2042
 4648              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4649 04e0 B3081E01 		add	a7,t3,a7	# tmp1133, tmp1134, tmp2042
 4650              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4651 04e4 03170700 		lh	a4,0(a4)		# pretmp_2988, sin90[_773]
 4652              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4653 04e8 83980800 		lh	a7,0(a7)		# sin90[_776], sin90[_776]
 4654              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4655 04ec 138E0E00 		mv	t3,t4	# v1, v1
 4656              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4657 04f0 93598840 		srai	s3,a6,8	#, tmp1122, tmp1121
 4658              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4659 04f4 B389F901 		add	s3,s3,t6	# pretmp_2937, tmp1125, tmp1122
 4660 04f8 93990901 		slli	s3,s3,16	#, _108, tmp1125
 4661 04fc 93D90901 		srli	s3,s3,16	#, _108, _108
 4662              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4663 0500 B38BE840 		sub	s7,a7,a4	# tmp1136, sin90[_776], pretmp_2988
 4664              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4665 0504 63140500 		bne	a0,zero,.L500	#, _768,,
 4666 0508 130E0300 		mv	t3,t1	# v1, angle
 4667              	.L500:
 4668 050c 137EFE0F 		andi	t3,t3,0xff	# tmp1139, v1
 4669              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4670 0510 B38BCB03 		mul	s7,s7,t3	# tmp1140, tmp1136, tmp1139
 4671              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4672 0514 03284101 		lw	a6,20(sp)		# tmp2042, %sfp
 4673              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4674 0518 13851700 		addi	a0,a5,1	#, tmp1151, _804
 4675 051c 13151500 		slli	a0,a0,1	#, tmp1152, tmp1151
 4676              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4677 0520 93971700 		slli	a5,a5,1	#, tmp1147, _804
 4678 0524 B307F800 		add	a5,a6,a5	# tmp1147, tmp1148, tmp2042
 4679              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4680 0528 3305A800 		add	a0,a6,a0	# tmp1152, tmp1153, tmp2042
 4681              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4682 052c 83970700 		lh	a5,0(a5)		# pretmp_2832, sin90[_804]
 4683              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4684 0530 831A0500 		lh	s5,0(a0)		# sin90[_807], sin90[_807]
 4685              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4686 0534 93DB8B40 		srai	s7,s7,8	#, tmp1141, tmp1140
 4687              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4688 0538 B38BEB00 		add	s7,s7,a4	# pretmp_2988, tmp1144, tmp1141
 4689 053c 939B0B01 		slli	s7,s7,16	#, _2953, tmp1144
 4690 0540 93DB0B01 		srli	s7,s7,16	#, _2953, _2953
 4691              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4692 0544 B38AFA40 		sub	s5,s5,a5	# tmp1155, sin90[_807], pretmp_2832
 4693              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4694 0548 63940500 		bne	a1,zero,.L502	#, _799,,
 4695 054c 138F0600 		mv	t5,a3	# v1, angle
 4696              	.L502:
 4697 0550 137FFF0F 		andi	t5,t5,0xff	# tmp1158, v1
 4698              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4699 0554 B38AEA03 		mul	s5,s5,t5	# tmp1159, tmp1155, tmp1158
 4700              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4701 0558 93F20204 		andi	t0,t0,64	#, tmp1169, v0.41_643
 4702 055c 0324C107 		lw	s0,124(sp)		# ivtmp.547, %sfp
 4703 0560 13050600 		mv	a0,a2	# v1, _2824
 4704              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4705 0564 93DA8A40 		srai	s5,s5,8	#, tmp1160, tmp1159
 4706              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 4707 0568 B38AFA00 		add	s5,s5,a5	# pretmp_2832, tmp1163, tmp1160
 4708 056c 939A0A01 		slli	s5,s5,16	#, _2820, tmp1163
 4709 0570 93DA0A01 		srli	s5,s5,16	#, _2820, _2820
 4710              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4711 0574 63840200 		beq	t0,zero,.L504	#, tmp1169,,
 4712 0578 3305C040 		neg	a0,a2	# v1, _2824
 4713              	.L504:
 4714 057c 13150501 		slli	a0,a0,16	#,, v1
 4715 0580 13550541 		srai	a0,a0,16	#,,
 4716 0584 97000000 		call	__floatsidf		#
 4716      E7800000 
 4717 058c B7070000 		lui	a5,%hi(.LC3)	# tmp2477,
 4718 0590 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4719 0594 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4720 0598 97000000 		call	__muldf3		#
 4720      E7800000 
 4721              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4722 05a0 97000000 		call	__truncdfsf2		#
 4722      E7800000 
 4723              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4724 05a8 83274102 		lw	a5,36(sp)		# v0.41_674, %sfp
 4725              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 4726 05ac 93040500 		mv	s1,a0	# sin_theta, tmp2119
 4727              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4728 05b0 33053041 		neg	a0,s3	# v1, _108
 4729 05b4 93F70704 		andi	a5,a5,64	#, tmp1180, v0.41_674
 4730 05b8 63940700 		bne	a5,zero,.L506	#, tmp1180,,
 4731 05bc 13850900 		mv	a0,s3	# v1, _108
 4732              	.L506:
 4733 05c0 13150501 		slli	a0,a0,16	#,, v1
 4734 05c4 13550541 		srai	a0,a0,16	#,,
 4735 05c8 97000000 		call	__floatsidf		#
 4735      E7800000 
 4736 05d0 B7070000 		lui	a5,%hi(.LC3)	# tmp2479,
 4737 05d4 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4738 05d8 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4739 05dc 97000000 		call	__muldf3		#
 4739      E7800000 
 4740              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4741 05e4 97000000 		call	__truncdfsf2		#
 4741      E7800000 
 4742              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4743 05ec 83278102 		lw	a5,40(sp)		# v0.41_767, %sfp
 4744              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 4745 05f0 93090500 		mv	s3,a0	# cos_theta, tmp2120
 4746              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4747 05f4 13850B00 		mv	a0,s7	# v1, _2953
 4748 05f8 93F70704 		andi	a5,a5,64	#, tmp1191, v0.41_767
 4749 05fc 63840700 		beq	a5,zero,.L508	#, tmp1191,,
 4750 0600 33057041 		neg	a0,s7	# v1, _2953
 4751              	.L508:
 4752 0604 13150501 		slli	a0,a0,16	#,, v1
 4753 0608 13550541 		srai	a0,a0,16	#,,
 4754 060c 97000000 		call	__floatsidf		#
 4754      E7800000 
 4755 0614 B7070000 		lui	a5,%hi(.LC3)	# tmp2481,
 4756 0618 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4757 061c 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4758 0620 97000000 		call	__muldf3		#
 4758      E7800000 
 4759              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4760 0628 97000000 		call	__truncdfsf2		#
 4760      E7800000 
 4761              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4762 0630 8327C102 		lw	a5,44(sp)		# v0.41_798, %sfp
 4763              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 4764 0634 930B0500 		mv	s7,a0	# cos_theta, tmp2121
 4765              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4766 0638 13850A00 		mv	a0,s5	# v1, _2820
 4767 063c 93F70704 		andi	a5,a5,64	#, tmp1202, v0.41_798
 4768 0640 63840700 		beq	a5,zero,.L510	#, tmp1202,,
 4769 0644 33055041 		neg	a0,s5	# v1, _2820
 4770              	.L510:
 4771 0648 13150501 		slli	a0,a0,16	#,, v1
 4772 064c 13550541 		srai	a0,a0,16	#,,
 4773 0650 97000000 		call	__floatsidf		#
 4773      E7800000 
 4774 0658 B7070000 		lui	a5,%hi(.LC3)	# tmp2483,
 4775 065c 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4776 0660 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4777 0664 97000000 		call	__muldf3		#
 4777      E7800000 
 4778              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4779 066c 97000000 		call	__truncdfsf2		#
 4779      E7800000 
 4780              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4781 0674 B7070000 		lui	a5,%hi(.LC5)	# tmp2484,
 4782 0678 83AD0700 		lw	s11,%lo(.LC5)(a5)		# tmp2090,
 4783              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4784 067c B7070000 		lui	a5,%hi(.LC7)	# tmp2485,
 4785 0680 03AD0700 		lw	s10,%lo(.LC7)(a5)		# tmp2091,
 4786              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 4787 0684 23226103 		sw	s6,36(sp)	# _379, %sfp
 4788 0688 2324A102 		sw	a0,40(sp)	# sin_theta, %sfp
 4789 068c 23228105 		sw	s8,68(sp)	# sin_theta, %sfp
 4790 0690 23269103 		sw	s9,44(sp)	# sin_theta, %sfp
 4791              	.L511:
 4792              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4793 0694 03254400 		lw	a0,4(s0)		#, MEM[(int *)_2955 + 4B]
 4794              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 4795 0698 13048401 		addi	s0,s0,24	#, ivtmp.547, ivtmp.547
 4796              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4797 069c 97000000 		call	__floatsisf		#
 4797      E7800000 
 4798 06a4 93050900 		mv	a1,s2	#, s
 4799 06a8 97000000 		call	__mulsf3		#
 4799      E7800000 
 4800              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4801 06b0 97000000 		call	__fixsfsi		#
 4801      E7800000 
 4802              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4803 06b8 032C0101 		lw	s8,16(sp)		# _377, %sfp
 4804 06bc 33058501 		add	a0,a0,s8	# _377, tmp1213, tmp2123
 4805              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4806 06c0 130505FE 		addi	a0,a0,-32	#,, tmp1213
 4807 06c4 97000000 		call	__floatsisf		#
 4807      E7800000 
 4808 06cc 930A0500 		mv	s5,a0	# tmp2124,
 4809              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4810 06d0 032504FF 		lw	a0,-16(s0)		#, MEM[(int *)_2955 + 8B]
 4811 06d4 97000000 		call	__floatsisf		#
 4811      E7800000 
 4812 06dc 93050900 		mv	a1,s2	#, s
 4813 06e0 97000000 		call	__mulsf3		#
 4813      E7800000 
 4814              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4815 06e8 97000000 		call	__fixsfsi		#
 4815      E7800000 
 4816              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4817 06f0 83274102 		lw	a5,36(sp)		# _379, %sfp
 4818 06f4 3305F500 		add	a0,a0,a5	# _379,, tmp2125
 4819 06f8 97000000 		call	__floatsisf		#
 4819      E7800000 
 4820 0700 130B0500 		mv	s6,a0	# tmp2126,
 4821              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4822 0704 032584FF 		lw	a0,-8(s0)		#, MEM[(int *)_2955 + 16B]
 4823 0708 97000000 		call	__floatsisf		#
 4823      E7800000 
 4824 0710 93050900 		mv	a1,s2	#, s
 4825 0714 97000000 		call	__mulsf3		#
 4825      E7800000 
 4826              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4827 071c 97000000 		call	__fixsfsi		#
 4827      E7800000 
 4828              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4829 0724 33058501 		add	a0,a0,s8	# _377, tmp1222, tmp2127
 4830              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4831 0728 130505FE 		addi	a0,a0,-32	#,, tmp1222
 4832 072c 97000000 		call	__floatsisf		#
 4832      E7800000 
 4833 0734 930C0500 		mv	s9,a0	# tmp2128,
 4834              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4835 0738 0325C4FF 		lw	a0,-4(s0)		#, MEM[(int *)_2955 + 20B]
 4836 073c 97000000 		call	__floatsisf		#
 4836      E7800000 
 4837 0744 93050900 		mv	a1,s2	#, s
 4838 0748 97000000 		call	__mulsf3		#
 4838      E7800000 
 4839              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4840 0750 97000000 		call	__fixsfsi		#
 4840      E7800000 
 4841              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4842 0758 83274102 		lw	a5,36(sp)		# _379, %sfp
 4843 075c 3305F500 		add	a0,a0,a5	# _379,, tmp2129
 4844 0760 97000000 		call	__floatsisf		#
 4844      E7800000 
 4845 0768 130C0500 		mv	s8,a0	# tmp2130,
 4846              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4847 076c 032584FE 		lw	a0,-24(s0)		#, MEM[(int *)_2955]
 4848 0770 97000000 		call	__floatsisf		#
 4848      E7800000 
 4849 0778 93050900 		mv	a1,s2	#, s
 4850 077c 97000000 		call	__mulsf3		#
 4850      E7800000 
 4851              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4852 0784 97000000 		call	__fixsfsi		#
 4852      E7800000 
 4853              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4854 078c 8327C100 		lw	a5,12(sp)		# _374, %sfp
 4855 0790 3305F500 		add	a0,a0,a5	# _374, tmp1231, tmp2131
 4856              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4857 0794 130505FD 		addi	a0,a0,-48	#,, tmp1231
 4858 0798 97000000 		call	__floatsisf		#
 4858      E7800000 
 4859 07a0 93050A00 		mv	a1,s4	#, cos_theta
 4860 07a4 97000000 		call	__mulsf3		#
 4860      E7800000 
 4861 07ac 13070500 		mv	a4,a0	# tmp2132,
 4862              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4863 07b0 93850A00 		mv	a1,s5	#, _625
 4864 07b4 13850400 		mv	a0,s1	#, sin_theta
 4865              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4866 07b8 232AE102 		sw	a4,52(sp)	# tmp1234, %sfp
 4867              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4868 07bc 97000000 		call	__mulsf3		#
 4868      E7800000 
 4869              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4870 07c4 93050B00 		mv	a1,s6	#, _627
 4871              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4872 07c8 2328A102 		sw	a0,48(sp)	# tmp1235, %sfp
 4873              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4874 07cc 13850900 		mv	a0,s3	#, cos_theta
 4875 07d0 97000000 		call	__mulsf3		#
 4875      E7800000 
 4876              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4877 07d8 83280103 		lw	a7,48(sp)		# tmp1235, %sfp
 4878              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4879 07dc 93050500 		mv	a1,a0	# tmp2134,
 4880              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4881 07e0 13850800 		mv	a0,a7	#, tmp1235
 4882 07e4 97000000 		call	__addsf3		#
 4882      E7800000 
 4883              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4884 07ec 93050000 		mv	a1,zero	#,
 4885 07f0 97000000 		call	__addsf3		#
 4885      E7800000 
 4886              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4887 07f8 97000000 		call	__fixsfsi		#
 4887      E7800000 
 4888              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4889 0800 97000000 		call	__floatsisf		#
 4889      E7800000 
 4890 0808 8325C102 		lw	a1,44(sp)		#, %sfp
 4891 080c 97000000 		call	__mulsf3		#
 4891      E7800000 
 4892              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4893 0814 03274103 		lw	a4,52(sp)		# tmp1234, %sfp
 4894              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4895 0818 93050500 		mv	a1,a0	# tmp2135,
 4896              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4897 081c 13050700 		mv	a0,a4	#, tmp1234
 4898 0820 97000000 		call	__addsf3		#
 4898      E7800000 
 4899              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4900 0828 93850D00 		mv	a1,s11	#, tmp2090
 4901 082c 97000000 		call	__addsf3		#
 4901      E7800000 
 4902              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4903 0834 97000000 		call	__fixsfsi		#
 4903      E7800000 
 4904              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4905 083c 130505FD 		addi	a0,a0,-48	#,, tmp2136
 4906 0840 97000000 		call	__floatsisf		#
 4906      E7800000 
 4907 0848 93070500 		mv	a5,a0	# tmp2137,
 4908              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4909 084c 93850A00 		mv	a1,s5	#, _625
 4910 0850 13850900 		mv	a0,s3	#, cos_theta
 4911              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4912 0854 938A0700 		mv	s5,a5	# _465, tmp2137
 4913              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4914 0858 97000000 		call	__mulsf3		#
 4914      E7800000 
 4915              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4916 0860 93050B00 		mv	a1,s6	#, _627
 4917              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4918 0864 2328A102 		sw	a0,48(sp)	# tmp1247, %sfp
 4919              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4920 0868 13850400 		mv	a0,s1	#, sin_theta
 4921 086c 97000000 		call	__mulsf3		#
 4921      E7800000 
 4922              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4923 0874 83270103 		lw	a5,48(sp)		# tmp1247, %sfp
 4924              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4925 0878 93050500 		mv	a1,a0	# tmp2139,
 4926              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4927 087c 13850700 		mv	a0,a5	#, tmp1247
 4928 0880 97000000 		call	__subsf3		#
 4928      E7800000 
 4929              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4930 0888 93050D00 		mv	a1,s10	#, tmp2091
 4931 088c 97000000 		call	__addsf3		#
 4931      E7800000 
 4932              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 4933 0894 97000000 		call	__fixsfsi		#
 4933      E7800000 
 4934              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4935 089c 130505FE 		addi	a0,a0,-32	#,, tmp2140
 4936 08a0 97000000 		call	__floatsisf		#
 4936      E7800000 
 4937 08a8 130B0500 		mv	s6,a0	# tmp2141,
 4938              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4939 08ac 032544FF 		lw	a0,-12(s0)		#, MEM[(int *)_2955 + 12B]
 4940 08b0 97000000 		call	__floatsisf		#
 4940      E7800000 
 4941 08b8 93050900 		mv	a1,s2	#, s
 4942 08bc 97000000 		call	__mulsf3		#
 4942      E7800000 
 4943              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4944 08c4 97000000 		call	__fixsfsi		#
 4944      E7800000 
 4945              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4946 08cc 8327C100 		lw	a5,12(sp)		# _374, %sfp
 4947 08d0 3305F500 		add	a0,a0,a5	# _374, tmp1257, tmp2142
 4948              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4949 08d4 130505FD 		addi	a0,a0,-48	#,, tmp1257
 4950 08d8 97000000 		call	__floatsisf		#
 4950      E7800000 
 4951 08e0 93850900 		mv	a1,s3	#, cos_theta
 4952 08e4 97000000 		call	__mulsf3		#
 4952      E7800000 
 4953 08ec 13080500 		mv	a6,a0	# tmp2143,
 4954              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4955 08f0 93850400 		mv	a1,s1	#, sin_theta
 4956 08f4 13850C00 		mv	a0,s9	#, _585
 4957              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4958 08f8 232A0103 		sw	a6,52(sp)	# tmp1260, %sfp
 4959              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4960 08fc 97000000 		call	__mulsf3		#
 4960      E7800000 
 4961              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4962 0904 93050C00 		mv	a1,s8	#, _587
 4963              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4964 0908 2328A102 		sw	a0,48(sp)	# tmp1261, %sfp
 4965              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4966 090c 13050A00 		mv	a0,s4	#, cos_theta
 4967 0910 97000000 		call	__mulsf3		#
 4967      E7800000 
 4968              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4969 0918 83280103 		lw	a7,48(sp)		# tmp1261, %sfp
 4970              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4971 091c 93050500 		mv	a1,a0	# tmp2145,
 4972              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4973 0920 13850800 		mv	a0,a7	#, tmp1261
 4974 0924 97000000 		call	__addsf3		#
 4974      E7800000 
 4975              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4976 092c 93050000 		mv	a1,zero	#,
 4977 0930 97000000 		call	__addsf3		#
 4977      E7800000 
 4978              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 4979 0938 97000000 		call	__fixsfsi		#
 4979      E7800000 
 4980              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4981 0940 97000000 		call	__floatsisf		#
 4981      E7800000 
 4982 0948 8325C102 		lw	a1,44(sp)		#, %sfp
 4983 094c 97000000 		call	__mulsf3		#
 4983      E7800000 
 4984              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4985 0954 03284103 		lw	a6,52(sp)		# tmp1260, %sfp
 4986              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4987 0958 93050500 		mv	a1,a0	# tmp2146,
 4988              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4989 095c 13050800 		mv	a0,a6	#, tmp1260
 4990 0960 97000000 		call	__addsf3		#
 4990      E7800000 
 4991              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4992 0968 93850D00 		mv	a1,s11	#, tmp2090
 4993 096c 97000000 		call	__addsf3		#
 4993      E7800000 
 4994              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 4995 0974 97000000 		call	__fixsfsi		#
 4995      E7800000 
 4996              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 4997 097c 130505FD 		addi	a0,a0,-48	#,, tmp2147
 4998 0980 97000000 		call	__floatsisf		#
 4998      E7800000 
 4999 0988 93070500 		mv	a5,a0	# tmp2148,
 5000              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5001 098c 93850C00 		mv	a1,s9	#, _585
 5002 0990 13050A00 		mv	a0,s4	#, cos_theta
 5003              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5004 0994 938C0700 		mv	s9,a5	# _425, tmp2148
 5005              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5006 0998 97000000 		call	__mulsf3		#
 5006      E7800000 
 5007 09a0 2328A102 		sw	a0,48(sp)	# tmp1273, %sfp
 5008              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5009 09a4 93850400 		mv	a1,s1	#, sin_theta
 5010 09a8 13050C00 		mv	a0,s8	#, _587
 5011 09ac 97000000 		call	__mulsf3		#
 5011      E7800000 
 5012              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5013 09b4 83270103 		lw	a5,48(sp)		# tmp1273, %sfp
 5014              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5015 09b8 93050500 		mv	a1,a0	# tmp2150,
 5016              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5017 09bc 13850700 		mv	a0,a5	#, tmp1273
 5018 09c0 97000000 		call	__subsf3		#
 5018      E7800000 
 5019              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5020 09c8 93050D00 		mv	a1,s10	#, tmp2091
 5021 09cc 97000000 		call	__addsf3		#
 5021      E7800000 
 5022              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5023 09d4 97000000 		call	__fixsfsi		#
 5023      E7800000 
 5024              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5025 09dc 130505FE 		addi	a0,a0,-32	#,, tmp2151
 5026 09e0 97000000 		call	__floatsisf		#
 5026      E7800000 
 5027 09e8 130C0500 		mv	s8,a0	# tmp2152,
 5028              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5029 09ec 03258102 		lw	a0,40(sp)		#, %sfp
 5030 09f0 93850C00 		mv	a1,s9	#, _425
 5031 09f4 97000000 		call	__mulsf3		#
 5031      E7800000 
 5032 09fc 2328A102 		sw	a0,48(sp)	# tmp1280, %sfp
 5033              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5034 0a00 93850B00 		mv	a1,s7	#, cos_theta
 5035 0a04 13050C00 		mv	a0,s8	#, _427
 5036 0a08 97000000 		call	__mulsf3		#
 5036      E7800000 
 5037              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5038 0a10 83260103 		lw	a3,48(sp)		# tmp1280, %sfp
 5039              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5040 0a14 93050500 		mv	a1,a0	# tmp2154,
 5041              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5042 0a18 13850600 		mv	a0,a3	#, tmp1280
 5043 0a1c 97000000 		call	__addsf3		#
 5043      E7800000 
 5044              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5045 0a24 93050D00 		mv	a1,s10	#, tmp2091
 5046 0a28 97000000 		call	__addsf3		#
 5046      E7800000 
 5047              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5048 0a30 97000000 		call	__fixsfsi		#
 5048      E7800000 
 5049 0a38 93060500 		mv	a3,a0	# tmp2155,
 5050              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5051 0a3c 93850B00 		mv	a1,s7	#, cos_theta
 5052 0a40 13850C00 		mv	a0,s9	#, _425
 5053              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5054 0a44 232ED102 		sw	a3,60(sp)	# tmp1285, %sfp
 5055              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5056 0a48 97000000 		call	__mulsf3		#
 5056      E7800000 
 5057 0a50 2328A102 		sw	a0,48(sp)	# tmp1286, %sfp
 5058              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5059 0a54 03258102 		lw	a0,40(sp)		#, %sfp
 5060 0a58 93050C00 		mv	a1,s8	#, _427
 5061 0a5c 97000000 		call	__mulsf3		#
 5061      E7800000 
 5062              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5063 0a64 03280103 		lw	a6,48(sp)		# tmp1286, %sfp
 5064              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5065 0a68 93050500 		mv	a1,a0	# tmp2157,
 5066              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5067 0a6c 13050800 		mv	a0,a6	#, tmp1286
 5068 0a70 97000000 		call	__subsf3		#
 5068      E7800000 
 5069              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5070 0a78 93850D00 		mv	a1,s11	#, tmp2090
 5071 0a7c 97000000 		call	__addsf3		#
 5071      E7800000 
 5072              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5073 0a84 97000000 		call	__fixsfsi		#
 5073      E7800000 
 5074              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5075 0a8c 032C4104 		lw	s8,68(sp)		# sin_theta, %sfp
 5076              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5077 0a90 13060500 		mv	a2,a0	# tmp2158,
 5078              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5079 0a94 93850A00 		mv	a1,s5	#, _465
 5080 0a98 13050C00 		mv	a0,s8	#, sin_theta
 5081              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5082 0a9c 232CC102 		sw	a2,56(sp)	# tmp1291, %sfp
 5083              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5084 0aa0 97000000 		call	__mulsf3		#
 5084      E7800000 
 5085 0aa8 2328A102 		sw	a0,48(sp)	# tmp1292, %sfp
 5086              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5087 0aac 93050B00 		mv	a1,s6	#, _467
 5088 0ab0 13850B00 		mv	a0,s7	#, cos_theta
 5089 0ab4 97000000 		call	__mulsf3		#
 5089      E7800000 
 5090              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5091 0abc 03280103 		lw	a6,48(sp)		# tmp1292, %sfp
 5092              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5093 0ac0 93050500 		mv	a1,a0	# tmp2160,
 5094              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5095 0ac4 13050800 		mv	a0,a6	#, tmp1292
 5096 0ac8 97000000 		call	__addsf3		#
 5096      E7800000 
 5097              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5098 0ad0 93050D00 		mv	a1,s10	#, tmp2091
 5099 0ad4 97000000 		call	__addsf3		#
 5099      E7800000 
 5100              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5101 0adc 97000000 		call	__fixsfsi		#
 5101      E7800000 
 5102 0ae4 13080500 		mv	a6,a0	# tmp2161,
 5103              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5104 0ae8 93850A00 		mv	a1,s5	#, _465
 5105 0aec 13850B00 		mv	a0,s7	#, cos_theta
 5106              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5107 0af0 232A0103 		sw	a6,52(sp)	# tmp1297, %sfp
 5108              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5109 0af4 97000000 		call	__mulsf3		#
 5109      E7800000 
 5110 0afc 2328A102 		sw	a0,48(sp)	# tmp1298, %sfp
 5111              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5112 0b00 93050B00 		mv	a1,s6	#, _467
 5113 0b04 13050C00 		mv	a0,s8	#, sin_theta
 5114 0b08 97000000 		call	__mulsf3		#
 5114      E7800000 
 5115              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5116 0b10 03280103 		lw	a6,48(sp)		# tmp1298, %sfp
 5117              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5118 0b14 93050500 		mv	a1,a0	# tmp2163,
 5119              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5120 0b18 13050800 		mv	a0,a6	#, tmp1298
 5121 0b1c 97000000 		call	__subsf3		#
 5121      E7800000 
 5122              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5123 0b24 93850D00 		mv	a1,s11	#, tmp2090
 5124 0b28 97000000 		call	__addsf3		#
 5124      E7800000 
 5125              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5126 0b30 97000000 		call	__fixsfsi		#
 5126      E7800000 
 5127              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 5128 0b38 03274103 		lw	a4,52(sp)		# tmp1297, %sfp
 5129 0b3c 8326C103 		lw	a3,60(sp)		# tmp1285, %sfp
 5130 0b40 03268103 		lw	a2,56(sp)		# tmp1291, %sfp
 5131 0b44 93050700 		mv	a1,a4	#, tmp1297
 5132 0b48 97000000 		call	fb_draw_bresenham.constprop.0		#
 5132      E7800000 
 5133              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 5134 0b50 83270105 		lw	a5,80(sp)		# ivtmp.540, %sfp
 5135 0b54 E310F4B4 		bne	s0,a5,.L511	#, ivtmp.547, ivtmp.540,
 5136              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5137 0b58 03254107 		lw	a0,116(sp)		#, %sfp
 5138 0b5c 13840700 		mv	s0,a5	# ivtmp.540, ivtmp.540
 5139 0b60 832A8102 		lw	s5,40(sp)		# sin_theta, %sfp
 5140 0b64 97000000 		call	sin1		#
 5140      E7800000 
 5141              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5142 0b6c 97000000 		call	__floatsidf		#
 5142      E7800000 
 5143 0b74 B7070000 		lui	a5,%hi(.LC3)	# tmp2493,
 5144 0b78 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5145 0b7c 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5146              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5147 0b80 032C4104 		lw	s8,68(sp)		# sin_theta, %sfp
 5148 0b84 832CC102 		lw	s9,44(sp)		# sin_theta, %sfp
 5149              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5150 0b88 97000000 		call	__muldf3		#
 5150      E7800000 
 5151              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5152 0b90 97000000 		call	__truncdfsf2		#
 5152      E7800000 
 5153              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5154 0b98 B7070000 		lui	a5,%hi(.LC5)	# tmp2494,
 5155 0b9c 83AD0700 		lw	s11,%lo(.LC5)(a5)		# tmp2082,
 5156              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5157 0ba0 B7070000 		lui	a5,%hi(.LC7)	# tmp2495,
 5158 0ba4 03AD0700 		lw	s10,%lo(.LC7)(a5)		# tmp2083,
 5159              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 5160 0ba8 930B0500 		mv	s7,a0	# cos_theta, tmp2164
 5161 0bac 23225105 		sw	s5,68(sp)	# sin_theta, %sfp
 5162 0bb0 23248103 		sw	s8,40(sp)	# sin_theta, %sfp
 5163 0bb4 23264103 		sw	s4,44(sp)	# cos_theta, %sfp
 5164              	.L512:
 5165              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5166 0bb8 03254400 		lw	a0,4(s0)		#, MEM[(int *)_37 + 4B]
 5167              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 5168 0bbc 13048401 		addi	s0,s0,24	#, ivtmp.540, ivtmp.540
 5169              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5170 0bc0 97000000 		call	__floatsisf		#
 5170      E7800000 
 5171 0bc8 93050900 		mv	a1,s2	#, s
 5172 0bcc 97000000 		call	__mulsf3		#
 5172      E7800000 
 5173              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5174 0bd4 97000000 		call	__fixsfsi		#
 5174      E7800000 
 5175              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5176 0bdc 832A0101 		lw	s5,16(sp)		# _377, %sfp
 5177 0be0 33055501 		add	a0,a0,s5	# _377, tmp1314, tmp2165
 5178              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5179 0be4 130505FE 		addi	a0,a0,-32	#,, tmp1314
 5180 0be8 97000000 		call	__floatsisf		#
 5180      E7800000 
 5181 0bf0 130A0500 		mv	s4,a0	# tmp2166,
 5182              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5183 0bf4 032504FF 		lw	a0,-16(s0)		#, MEM[(int *)_37 + 8B]
 5184 0bf8 97000000 		call	__floatsisf		#
 5184      E7800000 
 5185 0c00 93050900 		mv	a1,s2	#, s
 5186 0c04 97000000 		call	__mulsf3		#
 5186      E7800000 
 5187              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5188 0c0c 97000000 		call	__fixsfsi		#
 5188      E7800000 
 5189              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5190 0c14 83274102 		lw	a5,36(sp)		# _379, %sfp
 5191 0c18 3305F500 		add	a0,a0,a5	# _379,, tmp2167
 5192 0c1c 97000000 		call	__floatsisf		#
 5192      E7800000 
 5193 0c24 130B0500 		mv	s6,a0	# tmp2168,
 5194              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5195 0c28 032584FF 		lw	a0,-8(s0)		#, MEM[(int *)_37 + 16B]
 5196 0c2c 97000000 		call	__floatsisf		#
 5196      E7800000 
 5197 0c34 93050900 		mv	a1,s2	#, s
 5198 0c38 97000000 		call	__mulsf3		#
 5198      E7800000 
 5199              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5200 0c40 97000000 		call	__fixsfsi		#
 5200      E7800000 
 5201              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5202 0c48 33055501 		add	a0,a0,s5	# _377, tmp1323, tmp2169
 5203              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5204 0c4c 130505FE 		addi	a0,a0,-32	#,, tmp1323
 5205 0c50 97000000 		call	__floatsisf		#
 5205      E7800000 
 5206 0c58 130C0500 		mv	s8,a0	# tmp2170,
 5207              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5208 0c5c 0325C4FF 		lw	a0,-4(s0)		#, MEM[(int *)_37 + 20B]
 5209 0c60 97000000 		call	__floatsisf		#
 5209      E7800000 
 5210 0c68 93050900 		mv	a1,s2	#, s
 5211 0c6c 97000000 		call	__mulsf3		#
 5211      E7800000 
 5212              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5213 0c74 97000000 		call	__fixsfsi		#
 5213      E7800000 
 5214              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5215 0c7c 83274102 		lw	a5,36(sp)		# _379, %sfp
 5216 0c80 3305F500 		add	a0,a0,a5	# _379,, tmp2171
 5217 0c84 97000000 		call	__floatsisf		#
 5217      E7800000 
 5218 0c8c 930A0500 		mv	s5,a0	# tmp2172,
 5219              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5220 0c90 032584FE 		lw	a0,-24(s0)		#, MEM[(int *)_37]
 5221 0c94 97000000 		call	__floatsisf		#
 5221      E7800000 
 5222 0c9c 93050900 		mv	a1,s2	#, s
 5223 0ca0 97000000 		call	__mulsf3		#
 5223      E7800000 
 5224              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5225 0ca8 97000000 		call	__fixsfsi		#
 5225      E7800000 
 5226              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5227 0cb0 8327C100 		lw	a5,12(sp)		# _374, %sfp
 5228 0cb4 3305F500 		add	a0,a0,a5	# _374, tmp1332, tmp2173
 5229              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5230 0cb8 130505FD 		addi	a0,a0,-48	#,, tmp1332
 5231 0cbc 97000000 		call	__floatsisf		#
 5231      E7800000 
 5232 0cc4 93850900 		mv	a1,s3	#, cos_theta
 5233 0cc8 97000000 		call	__mulsf3		#
 5233      E7800000 
 5234 0cd0 13070500 		mv	a4,a0	# tmp2174,
 5235              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5236 0cd4 93050A00 		mv	a1,s4	#, _1082
 5237 0cd8 13850400 		mv	a0,s1	#, sin_theta
 5238              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5239 0cdc 232AE102 		sw	a4,52(sp)	# tmp1335, %sfp
 5240              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5241 0ce0 97000000 		call	__mulsf3		#
 5241      E7800000 
 5242 0ce8 2328A102 		sw	a0,48(sp)	# tmp1336, %sfp
 5243              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5244 0cec 0325C102 		lw	a0,44(sp)		#, %sfp
 5245 0cf0 93050B00 		mv	a1,s6	#, _1084
 5246 0cf4 97000000 		call	__mulsf3		#
 5246      E7800000 
 5247              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5248 0cfc 83280103 		lw	a7,48(sp)		# tmp1336, %sfp
 5249              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5250 0d00 93050500 		mv	a1,a0	# tmp2176,
 5251              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5252 0d04 13850800 		mv	a0,a7	#, tmp1336
 5253 0d08 97000000 		call	__addsf3		#
 5253      E7800000 
 5254              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5255 0d10 93050000 		mv	a1,zero	#,
 5256 0d14 97000000 		call	__addsf3		#
 5256      E7800000 
 5257              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5258 0d1c 97000000 		call	__fixsfsi		#
 5258      E7800000 
 5259              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5260 0d24 97000000 		call	__floatsisf		#
 5260      E7800000 
 5261 0d2c 93850400 		mv	a1,s1	#, sin_theta
 5262 0d30 97000000 		call	__mulsf3		#
 5262      E7800000 
 5263              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5264 0d38 03274103 		lw	a4,52(sp)		# tmp1335, %sfp
 5265              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5266 0d3c 93050500 		mv	a1,a0	# tmp2177,
 5267              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5268 0d40 13050700 		mv	a0,a4	#, tmp1335
 5269 0d44 97000000 		call	__addsf3		#
 5269      E7800000 
 5270              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5271 0d4c 93850D00 		mv	a1,s11	#, tmp2082
 5272 0d50 97000000 		call	__addsf3		#
 5272      E7800000 
 5273              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5274 0d58 97000000 		call	__fixsfsi		#
 5274      E7800000 
 5275              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5276 0d60 130505FD 		addi	a0,a0,-48	#,, tmp2178
 5277 0d64 97000000 		call	__floatsisf		#
 5277      E7800000 
 5278 0d6c 93070500 		mv	a5,a0	# tmp2179,
 5279              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5280 0d70 0325C102 		lw	a0,44(sp)		#, %sfp
 5281 0d74 93050A00 		mv	a1,s4	#, _1082
 5282              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5283 0d78 138A0700 		mv	s4,a5	# _922, tmp2179
 5284              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5285 0d7c 97000000 		call	__mulsf3		#
 5285      E7800000 
 5286              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5287 0d84 93050B00 		mv	a1,s6	#, _1084
 5288              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5289 0d88 2328A102 		sw	a0,48(sp)	# tmp1348, %sfp
 5290              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5291 0d8c 13850400 		mv	a0,s1	#, sin_theta
 5292 0d90 97000000 		call	__mulsf3		#
 5292      E7800000 
 5293              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5294 0d98 83270103 		lw	a5,48(sp)		# tmp1348, %sfp
 5295              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5296 0d9c 93050500 		mv	a1,a0	# tmp2181,
 5297              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5298 0da0 13850700 		mv	a0,a5	#, tmp1348
 5299 0da4 97000000 		call	__subsf3		#
 5299      E7800000 
 5300              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5301 0dac 93050D00 		mv	a1,s10	#, tmp2083
 5302 0db0 97000000 		call	__addsf3		#
 5302      E7800000 
 5303              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5304 0db8 97000000 		call	__fixsfsi		#
 5304      E7800000 
 5305              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5306 0dc0 130505FE 		addi	a0,a0,-32	#,, tmp2182
 5307 0dc4 97000000 		call	__floatsisf		#
 5307      E7800000 
 5308 0dcc 130B0500 		mv	s6,a0	# tmp2183,
 5309              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5310 0dd0 032544FF 		lw	a0,-12(s0)		#, MEM[(int *)_37 + 12B]
 5311 0dd4 97000000 		call	__floatsisf		#
 5311      E7800000 
 5312 0ddc 93050900 		mv	a1,s2	#, s
 5313 0de0 97000000 		call	__mulsf3		#
 5313      E7800000 
 5314              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5315 0de8 97000000 		call	__fixsfsi		#
 5315      E7800000 
 5316              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5317 0df0 8327C100 		lw	a5,12(sp)		# _374, %sfp
 5318 0df4 3305F500 		add	a0,a0,a5	# _374, tmp1358, tmp2184
 5319              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5320 0df8 130505FD 		addi	a0,a0,-48	#,, tmp1358
 5321 0dfc 97000000 		call	__floatsisf		#
 5321      E7800000 
 5322 0e04 93850900 		mv	a1,s3	#, cos_theta
 5323 0e08 97000000 		call	__mulsf3		#
 5323      E7800000 
 5324 0e10 13080500 		mv	a6,a0	# tmp2185,
 5325              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5326 0e14 93050C00 		mv	a1,s8	#, _1042
 5327 0e18 13850C00 		mv	a0,s9	#, sin_theta
 5328              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5329 0e1c 232A0103 		sw	a6,52(sp)	# tmp1361, %sfp
 5330              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5331 0e20 97000000 		call	__mulsf3		#
 5331      E7800000 
 5332              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5333 0e28 93850A00 		mv	a1,s5	#, _1044
 5334              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5335 0e2c 2328A102 		sw	a0,48(sp)	# tmp1362, %sfp
 5336              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5337 0e30 13850900 		mv	a0,s3	#, cos_theta
 5338 0e34 97000000 		call	__mulsf3		#
 5338      E7800000 
 5339              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5340 0e3c 83280103 		lw	a7,48(sp)		# tmp1362, %sfp
 5341              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5342 0e40 93050500 		mv	a1,a0	# tmp2187,
 5343              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5344 0e44 13850800 		mv	a0,a7	#, tmp1362
 5345 0e48 97000000 		call	__addsf3		#
 5345      E7800000 
 5346              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5347 0e50 93050000 		mv	a1,zero	#,
 5348 0e54 97000000 		call	__addsf3		#
 5348      E7800000 
 5349              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5350 0e5c 97000000 		call	__fixsfsi		#
 5350      E7800000 
 5351              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5352 0e64 97000000 		call	__floatsisf		#
 5352      E7800000 
 5353 0e6c 93850400 		mv	a1,s1	#, sin_theta
 5354 0e70 97000000 		call	__mulsf3		#
 5354      E7800000 
 5355              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5356 0e78 03284103 		lw	a6,52(sp)		# tmp1361, %sfp
 5357              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5358 0e7c 93050500 		mv	a1,a0	# tmp2188,
 5359              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5360 0e80 13050800 		mv	a0,a6	#, tmp1361
 5361 0e84 97000000 		call	__addsf3		#
 5361      E7800000 
 5362              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5363 0e8c 93850D00 		mv	a1,s11	#, tmp2082
 5364 0e90 97000000 		call	__addsf3		#
 5364      E7800000 
 5365              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5366 0e98 97000000 		call	__fixsfsi		#
 5366      E7800000 
 5367              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5368 0ea0 130505FD 		addi	a0,a0,-48	#,, tmp2189
 5369 0ea4 97000000 		call	__floatsisf		#
 5369      E7800000 
 5370 0eac 93070500 		mv	a5,a0	# tmp2190,
 5371              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5372 0eb0 93050C00 		mv	a1,s8	#, _1042
 5373 0eb4 13850900 		mv	a0,s3	#, cos_theta
 5374              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5375 0eb8 138C0700 		mv	s8,a5	# _882, tmp2190
 5376              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5377 0ebc 97000000 		call	__mulsf3		#
 5377      E7800000 
 5378              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5379 0ec4 93850A00 		mv	a1,s5	#, _1044
 5380              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5381 0ec8 2328A102 		sw	a0,48(sp)	# tmp1374, %sfp
 5382              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5383 0ecc 13850C00 		mv	a0,s9	#, sin_theta
 5384 0ed0 97000000 		call	__mulsf3		#
 5384      E7800000 
 5385              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5386 0ed8 83270103 		lw	a5,48(sp)		# tmp1374, %sfp
 5387              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5388 0edc 93050500 		mv	a1,a0	# tmp2192,
 5389              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5390 0ee0 13850700 		mv	a0,a5	#, tmp1374
 5391 0ee4 97000000 		call	__subsf3		#
 5391      E7800000 
 5392              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5393 0eec 93050D00 		mv	a1,s10	#, tmp2083
 5394 0ef0 97000000 		call	__addsf3		#
 5394      E7800000 
 5395              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5396 0ef8 97000000 		call	__fixsfsi		#
 5396      E7800000 
 5397              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5398 0f00 130505FE 		addi	a0,a0,-32	#,, tmp2193
 5399 0f04 97000000 		call	__floatsisf		#
 5399      E7800000 
 5400 0f0c 930A0500 		mv	s5,a0	# tmp2194,
 5401              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5402 0f10 03258102 		lw	a0,40(sp)		#, %sfp
 5403 0f14 93050C00 		mv	a1,s8	#, _882
 5404 0f18 97000000 		call	__mulsf3		#
 5404      E7800000 
 5405 0f20 2328A102 		sw	a0,48(sp)	# tmp1381, %sfp
 5406              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5407 0f24 93850B00 		mv	a1,s7	#, cos_theta
 5408 0f28 13850A00 		mv	a0,s5	#, _884
 5409 0f2c 97000000 		call	__mulsf3		#
 5409      E7800000 
 5410              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5411 0f34 83260103 		lw	a3,48(sp)		# tmp1381, %sfp
 5412              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5413 0f38 93050500 		mv	a1,a0	# tmp2196,
 5414              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5415 0f3c 13850600 		mv	a0,a3	#, tmp1381
 5416 0f40 97000000 		call	__addsf3		#
 5416      E7800000 
 5417              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5418 0f48 93050D00 		mv	a1,s10	#, tmp2083
 5419 0f4c 97000000 		call	__addsf3		#
 5419      E7800000 
 5420              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5421 0f54 97000000 		call	__fixsfsi		#
 5421      E7800000 
 5422 0f5c 93060500 		mv	a3,a0	# tmp2197,
 5423              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5424 0f60 93850B00 		mv	a1,s7	#, cos_theta
 5425 0f64 13050C00 		mv	a0,s8	#, _882
 5426              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5427 0f68 232ED102 		sw	a3,60(sp)	# tmp1386, %sfp
 5428              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5429 0f6c 97000000 		call	__mulsf3		#
 5429      E7800000 
 5430 0f74 2328A102 		sw	a0,48(sp)	# tmp1387, %sfp
 5431              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5432 0f78 03258102 		lw	a0,40(sp)		#, %sfp
 5433 0f7c 93850A00 		mv	a1,s5	#, _884
 5434 0f80 97000000 		call	__mulsf3		#
 5434      E7800000 
 5435              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5436 0f88 03280103 		lw	a6,48(sp)		# tmp1387, %sfp
 5437              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5438 0f8c 93050500 		mv	a1,a0	# tmp2199,
 5439              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5440 0f90 13050800 		mv	a0,a6	#, tmp1387
 5441 0f94 97000000 		call	__subsf3		#
 5441      E7800000 
 5442              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5443 0f9c 93850D00 		mv	a1,s11	#, tmp2082
 5444 0fa0 97000000 		call	__addsf3		#
 5444      E7800000 
 5445              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5446 0fa8 97000000 		call	__fixsfsi		#
 5446      E7800000 
 5447              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5448 0fb0 832A4104 		lw	s5,68(sp)		# sin_theta, %sfp
 5449              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5450 0fb4 13060500 		mv	a2,a0	# tmp2200,
 5451              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5452 0fb8 93050A00 		mv	a1,s4	#, _922
 5453 0fbc 13850A00 		mv	a0,s5	#, sin_theta
 5454              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5455 0fc0 232CC102 		sw	a2,56(sp)	# tmp1392, %sfp
 5456              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5457 0fc4 97000000 		call	__mulsf3		#
 5457      E7800000 
 5458 0fcc 2328A102 		sw	a0,48(sp)	# tmp1393, %sfp
 5459              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5460 0fd0 93050B00 		mv	a1,s6	#, _924
 5461 0fd4 13850B00 		mv	a0,s7	#, cos_theta
 5462 0fd8 97000000 		call	__mulsf3		#
 5462      E7800000 
 5463              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5464 0fe0 03280103 		lw	a6,48(sp)		# tmp1393, %sfp
 5465              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5466 0fe4 93050500 		mv	a1,a0	# tmp2202,
 5467              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5468 0fe8 13050800 		mv	a0,a6	#, tmp1393
 5469 0fec 97000000 		call	__addsf3		#
 5469      E7800000 
 5470              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5471 0ff4 93050D00 		mv	a1,s10	#, tmp2083
 5472 0ff8 97000000 		call	__addsf3		#
 5472      E7800000 
 5473              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5474 1000 97000000 		call	__fixsfsi		#
 5474      E7800000 
 5475 1008 13080500 		mv	a6,a0	# tmp2203,
 5476              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5477 100c 93050A00 		mv	a1,s4	#, _922
 5478 1010 13850B00 		mv	a0,s7	#, cos_theta
 5479              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 5480 1014 232A0103 		sw	a6,52(sp)	# tmp1398, %sfp
 5481              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5482 1018 97000000 		call	__mulsf3		#
 5482      E7800000 
 5483 1020 2328A102 		sw	a0,48(sp)	# tmp1399, %sfp
 5484              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5485 1024 93050B00 		mv	a1,s6	#, _924
 5486 1028 13850A00 		mv	a0,s5	#, sin_theta
 5487 102c 97000000 		call	__mulsf3		#
 5487      E7800000 
 5488              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5489 1034 03280103 		lw	a6,48(sp)		# tmp1399, %sfp
 5490              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5491 1038 93050500 		mv	a1,a0	# tmp2205,
 5492              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5493 103c 13050800 		mv	a0,a6	#, tmp1399
 5494 1040 97000000 		call	__subsf3		#
 5494      E7800000 
 5495              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5496 1048 93850D00 		mv	a1,s11	#, tmp2082
 5497 104c 97000000 		call	__addsf3		#
 5497      E7800000 
 5498              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 5499 1054 97000000 		call	__fixsfsi		#
 5499      E7800000 
 5500              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 5501 105c 03274103 		lw	a4,52(sp)		# tmp1398, %sfp
 5502 1060 8326C103 		lw	a3,60(sp)		# tmp1386, %sfp
 5503 1064 03268103 		lw	a2,56(sp)		# tmp1392, %sfp
 5504 1068 93050700 		mv	a1,a4	#, tmp1398
 5505 106c 97000000 		call	fb_draw_bresenham.constprop.0		#
 5505      E7800000 
 5506              	# main_cube3d_rotate.c:71:   for (int i = 0; i < s - 1; i = i + 2) {
 5507 1074 B7070000 		lui	a5,%hi(.LANCHOR2+232)	# tmp2503,
 5508 1078 9387870E 		addi	a5,a5,%lo(.LANCHOR2+232)	# tmp2502, tmp2503,
 5509 107c E31EF4B2 		bne	s0,a5,.L512	#, ivtmp.540, tmp2502,
 5510              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5511 1080 37040000 		lui	s0,%hi(.LANCHOR2)	# tmp2505,
 5512 1084 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2504, tmp2505,
 5513 1088 03A5870E 		lw	a0,232(a5)		#, MEM[(struct point *)&left_bottom].x
 5514 108c 032B4102 		lw	s6,36(sp)		# _379, %sfp
 5515 1090 032C8102 		lw	s8,40(sp)		# sin_theta, %sfp
 5516 1094 97000000 		call	__floatsisf		#
 5516      E7800000 
 5517 109c 93050900 		mv	a1,s2	#, s
 5518 10a0 97000000 		call	__mulsf3		#
 5518      E7800000 
 5519              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5520 10a8 97000000 		call	__fixsfsi		#
 5520      E7800000 
 5521              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5522 10b0 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2506, tmp2507,
 5523              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5524 10b4 930D0500 		mv	s11,a0	# tmp2206,
 5525              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5526 10b8 03A5070F 		lw	a0,240(a5)		#, MEM[(struct point *)&left_bottom].z
 5527              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5528 10bc 8324C100 		lw	s1,12(sp)		# _374, %sfp
 5529              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5530 10c0 97000000 		call	__floatsisf		#
 5530      E7800000 
 5531 10c8 93050900 		mv	a1,s2	#, s
 5532 10cc 97000000 		call	__mulsf3		#
 5532      E7800000 
 5533              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5534 10d4 97000000 		call	__fixsfsi		#
 5534      E7800000 
 5535              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5536 10dc 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2509, tmp2510,
 5537              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5538 10e0 93090500 		mv	s3,a0	# tmp2207,
 5539              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5540 10e4 03A5470F 		lw	a0,244(a5)		#, MEM[(struct point *)&left_bottom + 12B].x
 5541              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5542 10e8 B38D9D00 		add	s11,s11,s1	# _374, _268, tmp2206
 5543              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5544 10ec B3896901 		add	s3,s3,s6	# _379, _270, tmp2207
 5545              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5546 10f0 97000000 		call	__floatsisf		#
 5546      E7800000 
 5547 10f8 93050900 		mv	a1,s2	#, s
 5548 10fc 97000000 		call	__mulsf3		#
 5548      E7800000 
 5549              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5550 1104 97000000 		call	__fixsfsi		#
 5550      E7800000 
 5551              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5552 110c 13070400 		addi	a4,s0,%lo(.LANCHOR2)	# tmp2511, tmp2512,
 5553              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5554 1110 93070500 		mv	a5,a0	# tmp2208,
 5555              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5556 1114 0325870F 		lw	a0,248(a4)		#, MEM[(struct point *)&left_bottom + 12B].y
 5557              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5558 1118 B3879700 		add	a5,a5,s1	# _374, _271, tmp2208
 5559 111c 2326F102 		sw	a5,44(sp)	# _271, %sfp
 5560              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5561 1120 97000000 		call	__floatsisf		#
 5561      E7800000 
 5562 1128 93050900 		mv	a1,s2	#, s
 5563 112c 97000000 		call	__mulsf3		#
 5563      E7800000 
 5564              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5565 1134 97000000 		call	__fixsfsi		#
 5565      E7800000 
 5566              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5567 113c 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2515, tmp2516,
 5568              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5569 1140 930A0500 		mv	s5,a0	# tmp2209,
 5570              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5571 1144 03A5C70F 		lw	a0,252(a5)		#, MEM[(struct point *)&left_bottom + 12B].z
 5572              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5573 1148 83240101 		lw	s1,16(sp)		# _377, %sfp
 5574              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5575 114c 97000000 		call	__floatsisf		#
 5575      E7800000 
 5576 1154 93050900 		mv	a1,s2	#, s
 5577 1158 97000000 		call	__mulsf3		#
 5577      E7800000 
 5578              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5579 1160 97000000 		call	__fixsfsi		#
 5579      E7800000 
 5580              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5581 1168 93070400 		addi	a5,s0,%lo(.LANCHOR2)	# tmp2518, tmp2519,
 5582              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5583 116c 130A0500 		mv	s4,a0	# tmp2210,
 5584              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5585 1170 03A5C70E 		lw	a0,236(a5)		#, MEM[(struct point *)&left_bottom].y
 5586              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5587 1174 B38A9A00 		add	s5,s5,s1	# _377, _272, tmp2209
 5588              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5589 1178 330A6A01 		add	s4,s4,s6	# _379, _273, tmp2210
 5590              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5591 117c 97000000 		call	__floatsisf		#
 5591      E7800000 
 5592 1184 93050900 		mv	a1,s2	#, s
 5593 1188 97000000 		call	__mulsf3		#
 5593      E7800000 
 5594              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5595 1190 97000000 		call	__fixsfsi		#
 5595      E7800000 
 5596              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5597 1198 8327C105 		lw	a5,92(sp)		# _608, %sfp
 5598              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5599 119c B30B9500 		add	s7,a0,s1	# _377, tmp1435, tmp2211
 5600              	# gfx_lib.h:244:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5601 11a0 938B0BFE 		addi	s7,s7,-32	#, _1515, tmp1435
 5602              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5603 11a4 63C80700 		blt	a5,zero,.L513	#, _608,,
 5604 11a8 03278107 		lw	a4,120(sp)		# angle.39_638, %sfp
 5605 11ac 2324F104 		sw	a5,72(sp)	# _608, %sfp
 5606 11b0 232EE100 		sw	a4,28(sp)	# angle.39_638, %sfp
 5607              	.L513:
 5608              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 5609 11b4 83258104 		lw	a1,72(sp)		# angle, %sfp
 5610 11b8 8326C101 		lw	a3,28(sp)		# _1538, %sfp
 5611 11bc 93D78540 		srai	a5,a1,8	#, v0, angle
 5612              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5613 11c0 13960701 		slli	a2,a5,16	#, v0.41_1557, v0
 5614              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5615 11c4 13F70702 		andi	a4,a5,32	#, tmp1439, v0
 5616              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5617 11c8 13560601 		srli	a2,a2,16	#, v0.41_1557, v0.41_1557
 5618              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5619 11cc 630A0700 		beq	a4,zero,.L514	#, tmp1439,,
 5620              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5621 11d0 13C7F5FF 		not	a4,a1	# tmp1443, angle
 5622              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5623 11d4 93160701 		slli	a3,a4,16	#, _1538, tmp1443
 5624              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5625 11d8 93C7F7FF 		not	a5,a5	# v0, v0
 5626              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5627 11dc 93D60601 		srli	a3,a3,16	#, _1538, _1538
 5628              	.L514:
 5629              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5630 11e0 83254101 		lw	a1,20(sp)		# tmp2042, %sfp
 5631 11e4 93F7F701 		andi	a5,a5,31	#, _1563, v0
 5632              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5633 11e8 13871700 		addi	a4,a5,1	#, tmp1451, _1563
 5634 11ec 13171700 		slli	a4,a4,1	#, tmp1452, tmp1451
 5635              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5636 11f0 93971700 		slli	a5,a5,1	#, tmp1447, _1563
 5637 11f4 B387F500 		add	a5,a1,a5	# tmp1447, tmp1448, tmp2042
 5638              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5639 11f8 3387E500 		add	a4,a1,a4	# tmp1452, tmp1453, tmp2042
 5640 11fc 03150700 		lh	a0,0(a4)		# sin90[_1566], sin90[_1566]
 5641              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5642 1200 83950700 		lh	a1,0(a5)		# _1564, sin90[_1563]
 5643              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5644 1204 93F6F60F 		andi	a3,a3,0xff	# tmp1457, _1538
 5645              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5646 1208 93770604 		andi	a5,a2,64	#, tmp1465, v0.41_1557
 5647              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5648 120c 3305B540 		sub	a0,a0,a1	# tmp1455, sin90[_1566], _1564
 5649              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5650 1210 3305D502 		mul	a0,a0,a3	# tmp1458, tmp1455, tmp1457
 5651              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5652 1214 13558540 		srai	a0,a0,8	#, tmp1459, tmp1458
 5653              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5654 1218 3305B500 		add	a0,a0,a1	# _1564, tmp1462, tmp1459
 5655 121c 13150501 		slli	a0,a0,16	#, _1578, tmp1462
 5656 1220 13550501 		srli	a0,a0,16	#, _1578, _1578
 5657              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5658 1224 63880700 		beq	a5,zero,.L515	#, tmp1465,,
 5659              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5660 1228 3305A040 		neg	a0,a0	# tmp1467, _1578
 5661 122c 13150501 		slli	a0,a0,16	#, _1578, tmp1467
 5662 1230 13550501 		srli	a0,a0,16	#, _1578, _1578
 5663              	.L515:
 5664              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5665 1234 13150501 		slli	a0,a0,16	#,, _1578
 5666 1238 13550541 		srai	a0,a0,16	#,,
 5667 123c 97000000 		call	__floatsidf		#
 5667      E7800000 
 5668 1244 B7040000 		lui	s1,%hi(.LC3)	# tmp2528,
 5669 1248 03A60400 		lw	a2,%lo(.LC3)(s1)		#,
 5670 124c 83A64400 		lw	a3,%lo(.LC3+4)(s1)		#,
 5671              	# gfx_lib.h:259:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5672 1250 938D0DFD 		addi	s11,s11,-48	#, _1434, _268
 5673              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5674 1254 97000000 		call	__muldf3		#
 5674      E7800000 
 5675              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5676 125c 97000000 		call	__truncdfsf2		#
 5676      E7800000 
 5677              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5678 1264 8327C101 		lw	a5,28(sp)		# _639, %sfp
 5679 1268 83260102 		lw	a3,32(sp)		# tmp1025, %sfp
 5680              	# gfx_lib.h:248:   float sin_theta = SIN_FAST(angle);
 5681 126c 13040500 		mv	s0,a0	# tmp2212,
 5682              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5683 1270 3387D700 		add	a4,a5,a3	# tmp1025, tmp1473, _639
 5684              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5685 1274 13180701 		slli	a6,a4,16	#, angle, tmp1473
 5686 1278 13580841 		srai	a6,a6,16	#, angle, angle
 5687              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5688 127c 13170701 		slli	a4,a4,16	#, _1532, tmp1473
 5689 1280 13570701 		srli	a4,a4,16	#, _1532, _1532
 5690              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5691 1284 13050800 		mv	a0,a6	#, angle
 5692 1288 23240103 		sw	a6,40(sp)	# angle, %sfp
 5693              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5694 128c 2322E102 		sw	a4,36(sp)	# _1532, %sfp
 5695              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5696 1290 97000000 		call	sin1		#
 5696      E7800000 
 5697              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 5698 1298 97000000 		call	__floatsidf		#
 5698      E7800000 
 5699 12a0 03A60400 		lw	a2,%lo(.LC3)(s1)		#,
 5700 12a4 83A64400 		lw	a3,%lo(.LC3+4)(s1)		#,
 5701 12a8 97000000 		call	__muldf3		#
 5701      E7800000 
 5702              	# gfx_lib.h:249:   float cos_theta = COS_FAST(angle);
 5703 12b0 97000000 		call	__truncdfsf2		#
 5703      E7800000 
 5704 12b8 93040500 		mv	s1,a0	# tmp2213,
 5705              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5706 12bc 13850B00 		mv	a0,s7	#, _1515
 5707 12c0 97000000 		call	__floatsisf		#
 5707      E7800000 
 5708 12c8 130D0500 		mv	s10,a0	# tmp2214,
 5709              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5710 12cc 13850900 		mv	a0,s3	#, _270
 5711 12d0 97000000 		call	__floatsisf		#
 5711      E7800000 
 5712 12d8 930B0500 		mv	s7,a0	# tmp2215,
 5713              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5714 12dc 93050D00 		mv	a1,s10	#, _1539
 5715 12e0 13850400 		mv	a0,s1	#, cos_theta
 5716 12e4 97000000 		call	__mulsf3		#
 5716      E7800000 
 5717 12ec 93090500 		mv	s3,a0	# tmp1481, tmp2216
 5718              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5719 12f0 93850B00 		mv	a1,s7	#, _1541
 5720 12f4 13050400 		mv	a0,s0	#, sin_theta
 5721 12f8 97000000 		call	__mulsf3		#
 5721      E7800000 
 5722 1300 93050500 		mv	a1,a0	# tmp2217,
 5723              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5724 1304 13850900 		mv	a0,s3	#, tmp1481
 5725 1308 97000000 		call	__subsf3		#
 5725      E7800000 
 5726              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5727 1310 B7070000 		lui	a5,%hi(.LC7)	# tmp2532,
 5728 1314 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5729 1318 97000000 		call	__addsf3		#
 5729      E7800000 
 5730              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5731 1320 97000000 		call	__fixsfsi		#
 5731      E7800000 
 5732              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5733 1328 93050D00 		mv	a1,s10	#, _1539
 5734              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5735 132c 93090500 		mv	s3,a0	# tmp2218,
 5736              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5737 1330 13050400 		mv	a0,s0	#, sin_theta
 5738 1334 97000000 		call	__mulsf3		#
 5738      E7800000 
 5739 133c 130D0500 		mv	s10,a0	# tmp1486, tmp2219
 5740              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5741 1340 93850B00 		mv	a1,s7	#, _1541
 5742 1344 13850400 		mv	a0,s1	#, cos_theta
 5743 1348 97000000 		call	__mulsf3		#
 5743      E7800000 
 5744 1350 93050500 		mv	a1,a0	# tmp2220,
 5745              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5746 1354 13050D00 		mv	a0,s10	#, tmp1486
 5747 1358 97000000 		call	__addsf3		#
 5747      E7800000 
 5748              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5749 1360 93050000 		mv	a1,zero	#,
 5750 1364 97000000 		call	__addsf3		#
 5750      E7800000 
 5751              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5752 136c 97000000 		call	__fixsfsi		#
 5752      E7800000 
 5753 1374 930B0500 		mv	s7,a0	# tmp2221,
 5754              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5755 1378 13850AFE 		addi	a0,s5,-32	#,, _272
 5756 137c 97000000 		call	__floatsisf		#
 5756      E7800000 
 5757 1384 930A0500 		mv	s5,a0	# tmp2222,
 5758              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5759 1388 13050A00 		mv	a0,s4	#, _273
 5760 138c 97000000 		call	__floatsisf		#
 5760      E7800000 
 5761 1394 130A0500 		mv	s4,a0	# tmp2223,
 5762              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5763 1398 93850400 		mv	a1,s1	#, cos_theta
 5764 139c 13850A00 		mv	a0,s5	#, _1499
 5765 13a0 97000000 		call	__mulsf3		#
 5765      E7800000 
 5766 13a8 130D0500 		mv	s10,a0	# tmp1491, tmp2224
 5767              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5768 13ac 93050A00 		mv	a1,s4	#, _1501
 5769 13b0 13850C00 		mv	a0,s9	#, sin_theta
 5770 13b4 97000000 		call	__mulsf3		#
 5770      E7800000 
 5771 13bc 93050500 		mv	a1,a0	# tmp2225,
 5772              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5773 13c0 13050D00 		mv	a0,s10	#, tmp1491
 5774 13c4 97000000 		call	__subsf3		#
 5774      E7800000 
 5775              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5776 13cc B7070000 		lui	a5,%hi(.LC7)	# tmp2533,
 5777 13d0 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5778 13d4 97000000 		call	__addsf3		#
 5778      E7800000 
 5779              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5780 13dc 97000000 		call	__fixsfsi		#
 5780      E7800000 
 5781              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5782 13e4 93850A00 		mv	a1,s5	#, _1499
 5783              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 5784 13e8 130D0500 		mv	s10,a0	# tmp2226,
 5785              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5786 13ec 13850C00 		mv	a0,s9	#, sin_theta
 5787 13f0 97000000 		call	__mulsf3		#
 5787      E7800000 
 5788 13f8 930A0500 		mv	s5,a0	# tmp1496, tmp2227
 5789              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5790 13fc 93850400 		mv	a1,s1	#, cos_theta
 5791 1400 13050A00 		mv	a0,s4	#, _1501
 5792 1404 97000000 		call	__mulsf3		#
 5792      E7800000 
 5793 140c 93050500 		mv	a1,a0	# tmp2228,
 5794              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5795 1410 13850A00 		mv	a0,s5	#, tmp1496
 5796 1414 97000000 		call	__addsf3		#
 5796      E7800000 
 5797              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5798 141c 93050000 		mv	a1,zero	#,
 5799 1420 97000000 		call	__addsf3		#
 5799      E7800000 
 5800              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5801 1428 97000000 		call	__fixsfsi		#
 5801      E7800000 
 5802              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5803 1430 03288102 		lw	a6,40(sp)		# angle, %sfp
 5804 1434 03274102 		lw	a4,36(sp)		# _1532, %sfp
 5805              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 5806 1438 130A0500 		mv	s4,a0	# _1511, tmp2229
 5807              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5808 143c 63520802 		bge	a6,zero,.L516	#, angle,,
 5809              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5810 1440 0327C101 		lw	a4,28(sp)		# _639, %sfp
 5811 1444 B7270000 		li	a5,8192		# tmp1502,
 5812 1448 93871700 		addi	a5,a5,1	#, tmp1501, tmp1502
 5813 144c B307F700 		add	a5,a4,a5	# tmp1501, tmp1500, _639
 5814 1450 13970701 		slli	a4,a5,16	#, _1532, tmp1500
 5815 1454 13980701 		slli	a6,a5,16	#, angle, tmp1500
 5816 1458 13570701 		srli	a4,a4,16	#, _1532, _1532
 5817 145c 13580841 		srai	a6,a6,16	#, angle, angle
 5818              	.L516:
 5819              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 5820 1460 93578840 		srai	a5,a6,8	#, v0, angle
 5821              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5822 1464 13960701 		slli	a2,a5,16	#, v0.41_1588, v0
 5823              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5824 1468 93F60702 		andi	a3,a5,32	#, tmp1506, v0
 5825              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5826 146c 13560601 		srli	a2,a2,16	#, v0.41_1588, v0.41_1588
 5827              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5828 1470 638E0600 		beq	a3,zero,.L517	#, tmp1506,,
 5829              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5830 1474 93C7F7FF 		not	a5,a5	# tmp1508, v0
 5831              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5832 1478 1348F8FF 		not	a6,a6	# tmp1510, angle
 5833              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5834 147c 93970701 		slli	a5,a5,16	#, v0, tmp1508
 5835              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5836 1480 13170801 		slli	a4,a6,16	#, _1532, tmp1510
 5837              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5838 1484 93D70741 		srai	a5,a5,16	#, v0, v0
 5839              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5840 1488 13570701 		srli	a4,a4,16	#, _1532, _1532
 5841              	.L517:
 5842              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5843 148c 83254101 		lw	a1,20(sp)		# tmp2042, %sfp
 5844 1490 93F7F701 		andi	a5,a5,31	#, _1594, v0
 5845              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5846 1494 93861700 		addi	a3,a5,1	#, tmp1518, _1594
 5847 1498 93961600 		slli	a3,a3,1	#, tmp1519, tmp1518
 5848              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5849 149c 93971700 		slli	a5,a5,1	#, tmp1514, _1594
 5850              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5851 14a0 B386D500 		add	a3,a1,a3	# tmp1519, tmp1520, tmp2042
 5852              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5853 14a4 B387F500 		add	a5,a1,a5	# tmp1514, tmp1515, tmp2042
 5854 14a8 83950700 		lh	a1,0(a5)		# _1595, sin90[_1594]
 5855              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5856 14ac 83970600 		lh	a5,0(a3)		# sin90[_1597], sin90[_1597]
 5857              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5858 14b0 1377F70F 		andi	a4,a4,0xff	# tmp1524, _1532
 5859              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5860 14b4 93760604 		andi	a3,a2,64	#, tmp1532, v0.41_1588
 5861              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5862 14b8 B387B740 		sub	a5,a5,a1	# tmp1522, sin90[_1597], _1595
 5863              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5864 14bc B387E702 		mul	a5,a5,a4	# tmp1525, tmp1522, tmp1524
 5865              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5866 14c0 93D78740 		srai	a5,a5,8	#, tmp1526, tmp1525
 5867              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5868 14c4 B387B700 		add	a5,a5,a1	# _1595, tmp1529, tmp1526
 5869 14c8 93970701 		slli	a5,a5,16	#, _1609, tmp1529
 5870 14cc 93D70701 		srli	a5,a5,16	#, _1609, _1609
 5871              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5872 14d0 63880600 		beq	a3,zero,.L518	#, tmp1532,,
 5873              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5874 14d4 B307F040 		neg	a5,a5	# tmp1534, _1609
 5875 14d8 93970701 		slli	a5,a5,16	#, _1609, tmp1534
 5876 14dc 93D70701 		srli	a5,a5,16	#, _1609, _1609
 5877              	.L518:
 5878              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 5879 14e0 13950701 		slli	a0,a5,16	#,, _1609
 5880 14e4 13550541 		srai	a0,a0,16	#,,
 5881 14e8 97000000 		call	__floatsidf		#
 5881      E7800000 
 5882 14f0 B7070000 		lui	a5,%hi(.LC3)	# tmp2537,
 5883 14f4 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5884 14f8 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5885              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5886 14fc 938909FE 		addi	s3,s3,-32	#, _1357, _1545
 5887              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 5888 1500 97000000 		call	__muldf3		#
 5888      E7800000 
 5889              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 5890 1508 97000000 		call	__truncdfsf2		#
 5890      E7800000 
 5891              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5892 1510 8327C102 		lw	a5,44(sp)		# _271, %sfp
 5893              	# gfx_lib.h:264:   float cos_theta = COS_FAST(angle);
 5894 1514 930A0500 		mv	s5,a0	# tmp2230,
 5895              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5896 1518 138507FD 		addi	a0,a5,-48	#,, _271
 5897 151c 97000000 		call	__floatsisf		#
 5897      E7800000 
 5898 1524 93850400 		mv	a1,s1	#, cos_theta
 5899 1528 97000000 		call	__mulsf3		#
 5899      E7800000 
 5900 1530 93070500 		mv	a5,a0	# tmp2231,
 5901              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5902 1534 13050A00 		mv	a0,s4	#, _1511
 5903              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5904 1538 138A0700 		mv	s4,a5	# tmp1542, tmp2231
 5905              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5906 153c 97000000 		call	__floatsisf		#
 5906      E7800000 
 5907 1544 93050400 		mv	a1,s0	#, sin_theta
 5908 1548 97000000 		call	__mulsf3		#
 5908      E7800000 
 5909 1550 93050500 		mv	a1,a0	# tmp2232,
 5910              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5911 1554 13050A00 		mv	a0,s4	#, tmp1542
 5912 1558 97000000 		call	__addsf3		#
 5912      E7800000 
 5913              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5914 1560 B7070000 		lui	a5,%hi(.LC5)	# tmp2539,
 5915 1564 83A50700 		lw	a1,%lo(.LC5)(a5)		#,
 5916 1568 97000000 		call	__addsf3		#
 5916      E7800000 
 5917              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5918 1570 97000000 		call	__fixsfsi		#
 5918      E7800000 
 5919 1578 130A0500 		mv	s4,a0	# tmp2233,
 5920              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5921 157c 13850D00 		mv	a0,s11	#, _1434
 5922 1580 97000000 		call	__floatsisf		#
 5922      E7800000 
 5923 1588 93850A00 		mv	a1,s5	#, cos_theta
 5924 158c 97000000 		call	__mulsf3		#
 5924      E7800000 
 5925 1594 93070500 		mv	a5,a0	# tmp2234,
 5926              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5927 1598 13850B00 		mv	a0,s7	#, _1551
 5928              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5929 159c 938B0700 		mv	s7,a5	# tmp1549, tmp2234
 5930              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5931 15a0 97000000 		call	__floatsisf		#
 5931      E7800000 
 5932 15a8 93850C00 		mv	a1,s9	#, sin_theta
 5933 15ac 97000000 		call	__mulsf3		#
 5933      E7800000 
 5934 15b4 93050500 		mv	a1,a0	# tmp2235,
 5935              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5936 15b8 13850B00 		mv	a0,s7	#, tmp1549
 5937 15bc 97000000 		call	__addsf3		#
 5937      E7800000 
 5938              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5939 15c4 B7070000 		lui	a5,%hi(.LC5)	# tmp2540,
 5940 15c8 83A50700 		lw	a1,%lo(.LC5)(a5)		#,
 5941 15cc 97000000 		call	__addsf3		#
 5941      E7800000 
 5942              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 5943 15d4 97000000 		call	__fixsfsi		#
 5943      E7800000 
 5944              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5945 15dc 8327C104 		lw	a5,76(sp)		# _448, %sfp
 5946              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5947 15e0 930D05FD 		addi	s11,a0,-48	#, _1354, tmp2236
 5948              	# gfx_lib.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5949 15e4 63C80700 		blt	a5,zero,.L519	#, _448,,
 5950 15e8 03274105 		lw	a4,84(sp)		# angle.44_453, %sfp
 5951 15ec 2320F104 		sw	a5,64(sp)	# _448, %sfp
 5952 15f0 232CE100 		sw	a4,24(sp)	# angle.44_453, %sfp
 5953              	.L519:
 5954              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5955 15f4 03268101 		lw	a2,24(sp)		# prephitmp_1170, %sfp
 5956 15f8 83270102 		lw	a5,32(sp)		# tmp1025, %sfp
 5957 15fc B307F600 		add	a5,a2,a5	# tmp1025, tmp1556, prephitmp_1170
 5958              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5959 1600 13970701 		slli	a4,a5,16	#, _1373, tmp1556
 5960 1604 13570741 		srai	a4,a4,16	#, _1373, _1373
 5961              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5962 1608 13980701 		slli	a6,a5,16	#, prephitmp_1020, tmp1556
 5963 160c 13580801 		srli	a6,a6,16	#, prephitmp_1020, prephitmp_1020
 5964 1610 93060700 		mv	a3,a4	# angle, _1373
 5965              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5966 1614 63500702 		bge	a4,zero,.L520	#, _1373,,
 5967              	# gfx_lib.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5968 1618 B7260000 		li	a3,8192		# tmp1561,
 5969 161c 93861600 		addi	a3,a3,1	#, tmp1560, tmp1561
 5970 1620 B306D600 		add	a3,a2,a3	# tmp1560, tmp1559, prephitmp_1170
 5971 1624 13980601 		slli	a6,a3,16	#, prephitmp_1020, tmp1559
 5972 1628 93960601 		slli	a3,a3,16	#, angle, tmp1559
 5973 162c 13580801 		srli	a6,a6,16	#, prephitmp_1020, prephitmp_1020
 5974 1630 93D60641 		srai	a3,a3,16	#, angle, angle
 5975              	.L520:
 5976              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 5977 1634 93D78640 		srai	a5,a3,8	#, v0, angle
 5978              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5979 1638 93950701 		slli	a1,a5,16	#, v0.41_1650, v0
 5980              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5981 163c 13F60702 		andi	a2,a5,32	#, tmp1565, v0
 5982              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5983 1640 93D50501 		srli	a1,a1,16	#, v0.41_1650, v0.41_1650
 5984              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5985 1644 630A0600 		beq	a2,zero,.L521	#, tmp1565,,
 5986              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5987 1648 93C6F6FF 		not	a3,a3	# tmp1569, angle
 5988              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5989 164c 13980601 		slli	a6,a3,16	#, prephitmp_1020, tmp1569
 5990              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5991 1650 93C7F7FF 		not	a5,a5	# v0, v0
 5992              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5993 1654 13580801 		srli	a6,a6,16	#, prephitmp_1020, prephitmp_1020
 5994              	.L521:
 5995              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5996 1658 03264101 		lw	a2,20(sp)		# tmp2042, %sfp
 5997 165c 93F7F701 		andi	a5,a5,31	#, _1656, v0
 5998              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 5999 1660 93861700 		addi	a3,a5,1	#, tmp1577, _1656
 6000 1664 93961600 		slli	a3,a3,1	#, tmp1578, tmp1577
 6001              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6002 1668 93971700 		slli	a5,a5,1	#, tmp1573, _1656
 6003              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6004 166c B306D600 		add	a3,a2,a3	# tmp1578, tmp1579, tmp2042
 6005              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6006 1670 B307F600 		add	a5,a2,a5	# tmp1573, tmp1574, tmp2042
 6007 1674 03960700 		lh	a2,0(a5)		# _1657, sin90[_1656]
 6008              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6009 1678 03950600 		lh	a0,0(a3)		# sin90[_1659], sin90[_1659]
 6010              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6011 167c 9377F80F 		andi	a5,a6,0xff	# tmp1583, prephitmp_1020
 6012              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6013 1680 93F60504 		andi	a3,a1,64	#, tmp1591, v0.41_1650
 6014              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6015 1684 3305C540 		sub	a0,a0,a2	# tmp1581, sin90[_1659], _1657
 6016              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6017 1688 3305F502 		mul	a0,a0,a5	# tmp1584, tmp1581, tmp1583
 6018              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6019 168c 13558540 		srai	a0,a0,8	#, tmp1585, tmp1584
 6020              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6021 1690 3305C500 		add	a0,a0,a2	# _1657, tmp1588, tmp1585
 6022 1694 13150501 		slli	a0,a0,16	#, _1671, tmp1588
 6023 1698 13550501 		srli	a0,a0,16	#, _1671, _1671
 6024              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6025 169c 63880600 		beq	a3,zero,.L522	#, tmp1591,,
 6026              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6027 16a0 3305A040 		neg	a0,a0	# tmp1593, _1671
 6028 16a4 13150501 		slli	a0,a0,16	#, _1671, tmp1593
 6029 16a8 13550501 		srli	a0,a0,16	#, _1671, _1671
 6030              	.L522:
 6031              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6032 16ac 13150501 		slli	a0,a0,16	#,, _1671
 6033 16b0 13550541 		srai	a0,a0,16	#,,
 6034 16b4 2322E102 		sw	a4,36(sp)	# _1373, %sfp
 6035 16b8 97000000 		call	__floatsidf		#
 6035      E7800000 
 6036 16c0 B7070000 		lui	a5,%hi(.LC3)	# tmp2549,
 6037 16c4 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 6038 16c8 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 6039              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 6040 16cc 130A0AFD 		addi	s4,s4,-48	#, _1314, _1425
 6041              	# gfx_lib.h:274:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 6042 16d0 130D0DFE 		addi	s10,s10,-32	#, _1317, _1505
 6043              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6044 16d4 97000000 		call	__muldf3		#
 6044      E7800000 
 6045              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6046 16dc 97000000 		call	__truncdfsf2		#
 6046      E7800000 
 6047 16e4 930B0500 		mv	s7,a0	# tmp2237,
 6048              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6049 16e8 13850D00 		mv	a0,s11	#, _1354
 6050 16ec 97000000 		call	__floatsisf		#
 6050      E7800000 
 6051 16f4 930D0500 		mv	s11,a0	# tmp2238,
 6052              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6053 16f8 13850900 		mv	a0,s3	#, _1357
 6054 16fc 97000000 		call	__floatsisf		#
 6054      E7800000 
 6055 1704 93090500 		mv	s3,a0	# tmp2239,
 6056              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6057 1708 93850D00 		mv	a1,s11	#, _1379
 6058 170c 13850B00 		mv	a0,s7	#, cos_theta
 6059 1710 97000000 		call	__mulsf3		#
 6059      E7800000 
 6060 1718 232EA100 		sw	a0,28(sp)	# tmp1599, %sfp
 6061              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6062 171c 93850900 		mv	a1,s3	#, _1381
 6063 1720 13050C00 		mv	a0,s8	#, sin_theta
 6064 1724 97000000 		call	__mulsf3		#
 6064      E7800000 
 6065              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6066 172c 8327C101 		lw	a5,28(sp)		# tmp1599, %sfp
 6067              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6068 1730 93050500 		mv	a1,a0	# tmp2241,
 6069              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6070 1734 13850700 		mv	a0,a5	#, tmp1599
 6071 1738 97000000 		call	__subsf3		#
 6071      E7800000 
 6072              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6073 1740 B7070000 		lui	a5,%hi(.LC5)	# tmp2550,
 6074 1744 83A50700 		lw	a1,%lo(.LC5)(a5)		#,
 6075 1748 97000000 		call	__addsf3		#
 6075      E7800000 
 6076              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6077 1750 97000000 		call	__fixsfsi		#
 6077      E7800000 
 6078 1758 93070500 		mv	a5,a0	# tmp2242,
 6079              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6080 175c 93850D00 		mv	a1,s11	#, _1379
 6081 1760 13050C00 		mv	a0,s8	#, sin_theta
 6082              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6083 1764 232EF100 		sw	a5,28(sp)	# tmp2242, %sfp
 6084              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6085 1768 97000000 		call	__mulsf3		#
 6085      E7800000 
 6086 1770 930D0500 		mv	s11,a0	# tmp1604, tmp2243
 6087              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6088 1774 93850900 		mv	a1,s3	#, _1381
 6089 1778 13850B00 		mv	a0,s7	#, cos_theta
 6090 177c 97000000 		call	__mulsf3		#
 6090      E7800000 
 6091 1784 93050500 		mv	a1,a0	# tmp2244,
 6092              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6093 1788 13850D00 		mv	a0,s11	#, tmp1604
 6094 178c 97000000 		call	__addsf3		#
 6094      E7800000 
 6095              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6096 1794 B7070000 		lui	a5,%hi(.LC7)	# tmp2551,
 6097 1798 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6098 179c 97000000 		call	__addsf3		#
 6098      E7800000 
 6099              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6100 17a4 97000000 		call	__fixsfsi		#
 6100      E7800000 
 6101              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 6102 17ac 83250104 		lw	a1,64(sp)		# angle, %sfp
 6103              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6104 17b0 03274102 		lw	a4,36(sp)		# _1373, %sfp
 6105              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6106 17b4 13080500 		mv	a6,a0	# _1391, tmp2245
 6107              	# gfx_lib.h:88:   v0 = (angle >> INTERP_BITS);
 6108 17b8 93D78540 		srai	a5,a1,8	#, v0, angle
 6109              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6110 17bc 13960701 		slli	a2,a5,16	#, v0.41_1681, v0
 6111              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6112 17c0 93F60702 		andi	a3,a5,32	#, tmp1612, v0
 6113              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6114 17c4 13560601 		srli	a2,a2,16	#, v0.41_1681, v0.41_1681
 6115              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6116 17c8 638C0600 		beq	a3,zero,.L523	#, tmp1612,,
 6117              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6118 17cc 93C6F5FF 		not	a3,a1	# tmp1616, angle
 6119              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6120 17d0 93960601 		slli	a3,a3,16	#, prephitmp_1170, tmp1616
 6121 17d4 93D60601 		srli	a3,a3,16	#, prephitmp_1170, prephitmp_1170
 6122              	# gfx_lib.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6123 17d8 93C7F7FF 		not	a5,a5	# v0, v0
 6124              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6125 17dc 232CD100 		sw	a3,24(sp)	# prephitmp_1170, %sfp
 6126              	.L523:
 6127              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6128 17e0 83254101 		lw	a1,20(sp)		# tmp2042, %sfp
 6129 17e4 93F7F701 		andi	a5,a5,31	#, _1687, v0
 6130              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6131 17e8 93861700 		addi	a3,a5,1	#, tmp1624, _1687
 6132 17ec 93961600 		slli	a3,a3,1	#, tmp1625, tmp1624
 6133              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6134 17f0 93971700 		slli	a5,a5,1	#, tmp1620, _1687
 6135              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6136 17f4 B386D500 		add	a3,a1,a3	# tmp1625, tmp1626, tmp2042
 6137              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6138 17f8 B387F500 		add	a5,a1,a5	# tmp1620, tmp1621, tmp2042
 6139 17fc 83950700 		lh	a1,0(a5)		# _1688, sin90[_1687]
 6140              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6141 1800 83970600 		lh	a5,0(a3)		# sin90[_1690], sin90[_1690]
 6142              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6143 1804 83468101 		lbu	a3,24(sp)	# tmp1630, %sfp
 6144              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6145 1808 13760604 		andi	a2,a2,64	#, tmp1638, v0.41_1681
 6146              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6147 180c B387B740 		sub	a5,a5,a1	# tmp1628, sin90[_1690], _1688
 6148              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6149 1810 B387D702 		mul	a5,a5,a3	# tmp1631, tmp1628, tmp1630
 6150              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6151 1814 93D78740 		srai	a5,a5,8	#, tmp1632, tmp1631
 6152              	# gfx_lib.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MAS
 6153 1818 B387B700 		add	a5,a5,a1	# _1688, tmp1635, tmp1632
 6154 181c 93970701 		slli	a5,a5,16	#, _1702, tmp1635
 6155 1820 93D70701 		srli	a5,a5,16	#, _1702, _1702
 6156              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6157 1824 63080600 		beq	a2,zero,.L524	#, tmp1638,,
 6158              	# gfx_lib.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6159 1828 B307F040 		neg	a5,a5	# tmp1640, _1702
 6160 182c 93970701 		slli	a5,a5,16	#, _1702, tmp1640
 6161 1830 93D70701 		srli	a5,a5,16	#, _1702, _1702
 6162              	.L524:
 6163              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 6164 1834 13950701 		slli	a0,a5,16	#,, _1702
 6165 1838 13550541 		srai	a0,a0,16	#,,
 6166 183c 23240103 		sw	a6,40(sp)	# _1391, %sfp
 6167 1840 B70D0000 		lui	s11,%hi(.LC3)	# tmp2557,
 6168 1844 232CE100 		sw	a4,24(sp)	# _1373, %sfp
 6169 1848 97000000 		call	__floatsidf		#
 6169      E7800000 
 6170 1850 03A60D00 		lw	a2,%lo(.LC3)(s11)		#,
 6171 1854 83A64D00 		lw	a3,%lo(.LC3+4)(s11)		#,
 6172 1858 97000000 		call	__muldf3		#
 6172      E7800000 
 6173              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 6174 1860 97000000 		call	__truncdfsf2		#
 6174      E7800000 
 6175              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6176 1868 03278101 		lw	a4,24(sp)		# _1373, %sfp
 6177              	# gfx_lib.h:278:   float sin_theta = SIN_FAST(angle);
 6178 186c 93090500 		mv	s3,a0	# tmp2246,
 6179              	# gfx_lib.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6180 1870 13050700 		mv	a0,a4	#, _1373
 6181 1874 97000000 		call	sin1		#
 6181      E7800000 
 6182              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6183 187c 97000000 		call	__floatsidf		#
 6183      E7800000 
 6184 1884 03A60D00 		lw	a2,%lo(.LC3)(s11)		#,
 6185 1888 83A64D00 		lw	a3,%lo(.LC3+4)(s11)		#,
 6186 188c 97000000 		call	__muldf3		#
 6186      E7800000 
 6187              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6188 1894 97000000 		call	__truncdfsf2		#
 6188      E7800000 
 6189 189c 93070500 		mv	a5,a0	# tmp2247,
 6190              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6191 18a0 13050A00 		mv	a0,s4	#, _1314
 6192              	# gfx_lib.h:279:   float cos_theta = COS_FAST(angle);
 6193 18a4 138A0700 		mv	s4,a5	# tmp1650, tmp2247
 6194              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6195 18a8 97000000 		call	__floatsisf		#
 6195      E7800000 
 6196 18b0 930D0500 		mv	s11,a0	# tmp2248,
 6197              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6198 18b4 13050D00 		mv	a0,s10	#, _1317
 6199 18b8 97000000 		call	__floatsisf		#
 6199      E7800000 
 6200 18c0 130D0500 		mv	s10,a0	# tmp2249,
 6201              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6202 18c4 93850D00 		mv	a1,s11	#, _1339
 6203 18c8 13850900 		mv	a0,s3	#, tmp1645
 6204 18cc 97000000 		call	__mulsf3		#
 6204      E7800000 
 6205              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6206 18d4 93050D00 		mv	a1,s10	#, _1341
 6207              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6208 18d8 232CA100 		sw	a0,24(sp)	# tmp1651, %sfp
 6209              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6210 18dc 13050A00 		mv	a0,s4	#, tmp1650
 6211 18e0 97000000 		call	__mulsf3		#
 6211      E7800000 
 6212              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6213 18e8 03278101 		lw	a4,24(sp)		# tmp1651, %sfp
 6214              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6215 18ec 93050500 		mv	a1,a0	# tmp2251,
 6216              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6217 18f0 13050700 		mv	a0,a4	#, tmp1651
 6218 18f4 97000000 		call	__addsf3		#
 6218      E7800000 
 6219              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6220 18fc B7070000 		lui	a5,%hi(.LC7)	# tmp2559,
 6221 1900 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6222 1904 97000000 		call	__addsf3		#
 6222      E7800000 
 6223              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6224 190c 97000000 		call	__fixsfsi		#
 6224      E7800000 
 6225 1914 93060500 		mv	a3,a0	# tmp2252,
 6226              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6227 1918 93850D00 		mv	a1,s11	#, _1339
 6228 191c 13050A00 		mv	a0,s4	#, tmp1650
 6229              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6230 1920 2322D102 		sw	a3,36(sp)	# tmp1656, %sfp
 6231              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6232 1924 97000000 		call	__mulsf3		#
 6232      E7800000 
 6233              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6234 192c 93050D00 		mv	a1,s10	#, _1341
 6235              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6236 1930 232CA100 		sw	a0,24(sp)	# tmp1657, %sfp
 6237              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6238 1934 13850900 		mv	a0,s3	#, tmp1645
 6239 1938 97000000 		call	__mulsf3		#
 6239      E7800000 
 6240              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6241 1940 83278101 		lw	a5,24(sp)		# tmp1657, %sfp
 6242              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6243 1944 93050500 		mv	a1,a0	# tmp2254,
 6244              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6245 1948 370D0000 		lui	s10,%hi(.LANCHOR2)	# tmp2562,
 6246              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6247 194c 13850700 		mv	a0,a5	#, tmp1657
 6248 1950 97000000 		call	__subsf3		#
 6248      E7800000 
 6249              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6250 1958 B7060000 		lui	a3,%hi(.LC5)	# tmp2560,
 6251 195c 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6252 1960 97000000 		call	__addsf3		#
 6252      E7800000 
 6253              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6254 1968 97000000 		call	__fixsfsi		#
 6254      E7800000 
 6255              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 6256 1970 03288102 		lw	a6,40(sp)		# _1391, %sfp
 6257 1974 83264102 		lw	a3,36(sp)		# tmp1656, %sfp
 6258              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6259 1978 13060500 		mv	a2,a0	# tmp2255,
 6260              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 6261 197c 0325C101 		lw	a0,28(sp)		#, %sfp
 6262 1980 93050800 		mv	a1,a6	#, _1391
 6263 1984 97000000 		call	fb_draw_bresenham.constprop.0		#
 6263      E7800000 
 6264              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6265 198c 13060D00 		addi	a2,s10,%lo(.LANCHOR2)	# tmp2561, tmp2562,
 6266 1990 03254610 		lw	a0,260(a2)		#, MEM[(struct point *)&left_top].y
 6267 1994 97000000 		call	__floatsisf		#
 6267      E7800000 
 6268 199c 93050900 		mv	a1,s2	#, s
 6269 19a0 97000000 		call	__mulsf3		#
 6269      E7800000 
 6270              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6271 19a8 97000000 		call	__fixsfsi		#
 6271      E7800000 
 6272              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6273 19b0 03260101 		lw	a2,16(sp)		# _377, %sfp
 6274 19b4 3305C500 		add	a0,a0,a2	# _377, tmp1668, tmp2256
 6275              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6276 19b8 130505FE 		addi	a0,a0,-32	#,, tmp1668
 6277 19bc 97000000 		call	__floatsisf		#
 6277      E7800000 
 6278              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6279 19c4 93050D00 		addi	a1,s10,%lo(.LANCHOR2)	# tmp2564, tmp2565,
 6280              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6281 19c8 13060500 		mv	a2,a0	# tmp2257,
 6282              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6283 19cc 03A58510 		lw	a0,264(a1)		#, MEM[(struct point *)&left_top].z
 6284              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6285 19d0 232CC100 		sw	a2,24(sp)	# _1934, %sfp
 6286              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6287 19d4 97000000 		call	__floatsisf		#
 6287      E7800000 
 6288 19dc 93050900 		mv	a1,s2	#, s
 6289 19e0 97000000 		call	__mulsf3		#
 6289      E7800000 
 6290              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6291 19e8 97000000 		call	__fixsfsi		#
 6291      E7800000 
 6292              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6293 19f0 33056501 		add	a0,a0,s6	# _379,, tmp2258
 6294 19f4 97000000 		call	__floatsisf		#
 6294      E7800000 
 6295              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6296 19fc 93050D00 		addi	a1,s10,%lo(.LANCHOR2)	# tmp2566, tmp2567,
 6297              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6298 1a00 930D0500 		mv	s11,a0	# tmp2259,
 6299              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6300 1a04 03A50511 		lw	a0,272(a1)		#, MEM[(struct point *)&left_top + 12B].y
 6301 1a08 97000000 		call	__floatsisf		#
 6301      E7800000 
 6302 1a10 93050900 		mv	a1,s2	#, s
 6303 1a14 97000000 		call	__mulsf3		#
 6303      E7800000 
 6304              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6305 1a1c 97000000 		call	__fixsfsi		#
 6305      E7800000 
 6306              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6307 1a24 03260101 		lw	a2,16(sp)		# _377, %sfp
 6308 1a28 3305C500 		add	a0,a0,a2	# _377, tmp1681, tmp2260
 6309              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6310 1a2c 130505FE 		addi	a0,a0,-32	#,, tmp1681
 6311 1a30 97000000 		call	__floatsisf		#
 6311      E7800000 
 6312              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6313 1a38 93050D00 		addi	a1,s10,%lo(.LANCHOR2)	# tmp2569, tmp2570,
 6314              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6315 1a3c 13070500 		mv	a4,a0	# tmp2261,
 6316              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6317 1a40 03A54511 		lw	a0,276(a1)		#, MEM[(struct point *)&left_top + 12B].z
 6318              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6319 1a44 2326E102 		sw	a4,44(sp)	# _1894, %sfp
 6320              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6321 1a48 97000000 		call	__floatsisf		#
 6321      E7800000 
 6322 1a50 93050900 		mv	a1,s2	#, s
 6323 1a54 97000000 		call	__mulsf3		#
 6323      E7800000 
 6324              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6325 1a5c 97000000 		call	__fixsfsi		#
 6325      E7800000 
 6326              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6327 1a64 33056501 		add	a0,a0,s6	# _379,, tmp2262
 6328 1a68 97000000 		call	__floatsisf		#
 6328      E7800000 
 6329              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6330 1a70 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2572,
 6331 1a74 93850700 		addi	a1,a5,%lo(.LANCHOR2)	# tmp2571, tmp2572,
 6332              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6333 1a78 130D0500 		mv	s10,a0	# tmp2263,
 6334              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6335 1a7c 03A50510 		lw	a0,256(a1)		#, MEM[(struct point *)&left_top].x
 6336 1a80 97000000 		call	__floatsisf		#
 6336      E7800000 
 6337 1a88 93050900 		mv	a1,s2	#, s
 6338 1a8c 97000000 		call	__mulsf3		#
 6338      E7800000 
 6339              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6340 1a94 97000000 		call	__fixsfsi		#
 6340      E7800000 
 6341              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6342 1a9c 8325C100 		lw	a1,12(sp)		# _374, %sfp
 6343 1aa0 3305B500 		add	a0,a0,a1	# _374, tmp1694, tmp2264
 6344              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6345 1aa4 130505FD 		addi	a0,a0,-48	#,, tmp1694
 6346 1aa8 97000000 		call	__floatsisf		#
 6346      E7800000 
 6347 1ab0 93850400 		mv	a1,s1	#, cos_theta
 6348 1ab4 97000000 		call	__mulsf3		#
 6348      E7800000 
 6349              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6350 1abc 03268101 		lw	a2,24(sp)		# _1934, %sfp
 6351              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6352 1ac0 93070500 		mv	a5,a0	# tmp2265,
 6353              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6354 1ac4 13050400 		mv	a0,s0	#, sin_theta
 6355 1ac8 93050600 		mv	a1,a2	#, _1934
 6356 1acc 2322C102 		sw	a2,36(sp)	# _1934, %sfp
 6357              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6358 1ad0 232EF100 		sw	a5,28(sp)	# tmp1697, %sfp
 6359              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6360 1ad4 97000000 		call	__mulsf3		#
 6360      E7800000 
 6361              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6362 1adc 93850D00 		mv	a1,s11	#, _1936
 6363              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6364 1ae0 232CA100 		sw	a0,24(sp)	# tmp1698, %sfp
 6365              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6366 1ae4 13850400 		mv	a0,s1	#, cos_theta
 6367 1ae8 97000000 		call	__mulsf3		#
 6367      E7800000 
 6368              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6369 1af0 83268101 		lw	a3,24(sp)		# tmp1698, %sfp
 6370              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6371 1af4 93050500 		mv	a1,a0	# tmp2267,
 6372              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6373 1af8 13850600 		mv	a0,a3	#, tmp1698
 6374 1afc 97000000 		call	__addsf3		#
 6374      E7800000 
 6375              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6376 1b04 93050000 		mv	a1,zero	#,
 6377 1b08 97000000 		call	__addsf3		#
 6377      E7800000 
 6378              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6379 1b10 97000000 		call	__fixsfsi		#
 6379      E7800000 
 6380              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6381 1b18 97000000 		call	__floatsisf		#
 6381      E7800000 
 6382 1b20 93050400 		mv	a1,s0	#, sin_theta
 6383 1b24 97000000 		call	__mulsf3		#
 6383      E7800000 
 6384              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6385 1b2c 8327C101 		lw	a5,28(sp)		# tmp1697, %sfp
 6386              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6387 1b30 93050500 		mv	a1,a0	# tmp2268,
 6388              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6389 1b34 13850700 		mv	a0,a5	#, tmp1697
 6390 1b38 97000000 		call	__addsf3		#
 6390      E7800000 
 6391              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6392 1b40 B7060000 		lui	a3,%hi(.LC5)	# tmp2574,
 6393 1b44 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6394 1b48 97000000 		call	__addsf3		#
 6394      E7800000 
 6395              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6396 1b50 97000000 		call	__fixsfsi		#
 6396      E7800000 
 6397              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6398 1b58 130505FD 		addi	a0,a0,-48	#,, tmp2269
 6399 1b5c 97000000 		call	__floatsisf		#
 6399      E7800000 
 6400              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6401 1b64 03264102 		lw	a2,36(sp)		# _1934, %sfp
 6402              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6403 1b68 93070500 		mv	a5,a0	# tmp2270,
 6404              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6405 1b6c 13850400 		mv	a0,s1	#, cos_theta
 6406 1b70 93050600 		mv	a1,a2	#, _1934
 6407              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6408 1b74 2324F102 		sw	a5,40(sp)	# _1774, %sfp
 6409              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6410 1b78 97000000 		call	__mulsf3		#
 6410      E7800000 
 6411              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6412 1b80 93850D00 		mv	a1,s11	#, _1936
 6413              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6414 1b84 232CA100 		sw	a0,24(sp)	# tmp1710, %sfp
 6415              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6416 1b88 13050400 		mv	a0,s0	#, sin_theta
 6417 1b8c 97000000 		call	__mulsf3		#
 6417      E7800000 
 6418              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6419 1b94 83268101 		lw	a3,24(sp)		# tmp1710, %sfp
 6420              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6421 1b98 93050500 		mv	a1,a0	# tmp2272,
 6422              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6423 1b9c 13850600 		mv	a0,a3	#, tmp1710
 6424 1ba0 97000000 		call	__subsf3		#
 6424      E7800000 
 6425              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6426 1ba8 37070000 		lui	a4,%hi(.LC7)	# tmp2575,
 6427 1bac 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6428 1bb0 97000000 		call	__addsf3		#
 6428      E7800000 
 6429              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6430 1bb8 97000000 		call	__fixsfsi		#
 6430      E7800000 
 6431              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6432 1bc0 130505FE 		addi	a0,a0,-32	#,, tmp2273
 6433 1bc4 97000000 		call	__floatsisf		#
 6433      E7800000 
 6434              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6435 1bcc B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2577,
 6436              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6437 1bd0 930D0500 		mv	s11,a0	# tmp2274,
 6438              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6439 1bd4 13850700 		addi	a0,a5,%lo(.LANCHOR2)	# tmp2576, tmp2577,
 6440 1bd8 0325C510 		lw	a0,268(a0)		#, MEM[(struct point *)&left_top + 12B].x
 6441 1bdc 97000000 		call	__floatsisf		#
 6441      E7800000 
 6442 1be4 93050900 		mv	a1,s2	#, s
 6443 1be8 97000000 		call	__mulsf3		#
 6443      E7800000 
 6444              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6445 1bf0 97000000 		call	__fixsfsi		#
 6445      E7800000 
 6446              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6447 1bf8 8325C100 		lw	a1,12(sp)		# _374, %sfp
 6448 1bfc 3305B500 		add	a0,a0,a1	# _374, tmp1722, tmp2275
 6449              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6450 1c00 130505FD 		addi	a0,a0,-48	#,, tmp1722
 6451 1c04 97000000 		call	__floatsisf		#
 6451      E7800000 
 6452 1c0c 93850400 		mv	a1,s1	#, cos_theta
 6453 1c10 97000000 		call	__mulsf3		#
 6453      E7800000 
 6454              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6455 1c18 0327C102 		lw	a4,44(sp)		# _1894, %sfp
 6456              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6457 1c1c 93060500 		mv	a3,a0	# tmp2276,
 6458              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6459 1c20 13050400 		mv	a0,s0	#, sin_theta
 6460 1c24 93050700 		mv	a1,a4	#, _1894
 6461 1c28 2322E102 		sw	a4,36(sp)	# _1894, %sfp
 6462              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6463 1c2c 232ED100 		sw	a3,28(sp)	# tmp1725, %sfp
 6464              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6465 1c30 97000000 		call	__mulsf3		#
 6465      E7800000 
 6466              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6467 1c38 93050D00 		mv	a1,s10	#, _1896
 6468              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6469 1c3c 232CA100 		sw	a0,24(sp)	# tmp1726, %sfp
 6470              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6471 1c40 13850A00 		mv	a0,s5	#, cos_theta
 6472 1c44 97000000 		call	__mulsf3		#
 6472      E7800000 
 6473              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6474 1c4c 03268101 		lw	a2,24(sp)		# tmp1726, %sfp
 6475              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6476 1c50 93050500 		mv	a1,a0	# tmp2278,
 6477              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6478 1c54 13050600 		mv	a0,a2	#, tmp1726
 6479 1c58 97000000 		call	__addsf3		#
 6479      E7800000 
 6480              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6481 1c60 93050000 		mv	a1,zero	#,
 6482 1c64 97000000 		call	__addsf3		#
 6482      E7800000 
 6483              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6484 1c6c 97000000 		call	__fixsfsi		#
 6484      E7800000 
 6485              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6486 1c74 97000000 		call	__floatsisf		#
 6486      E7800000 
 6487 1c7c 93050400 		mv	a1,s0	#, sin_theta
 6488 1c80 97000000 		call	__mulsf3		#
 6488      E7800000 
 6489              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6490 1c88 8326C101 		lw	a3,28(sp)		# tmp1725, %sfp
 6491              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6492 1c8c 93050500 		mv	a1,a0	# tmp2279,
 6493              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6494 1c90 13850600 		mv	a0,a3	#, tmp1725
 6495 1c94 97000000 		call	__addsf3		#
 6495      E7800000 
 6496              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6497 1c9c B7060000 		lui	a3,%hi(.LC5)	# tmp2579,
 6498 1ca0 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6499 1ca4 97000000 		call	__addsf3		#
 6499      E7800000 
 6500              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6501 1cac 97000000 		call	__fixsfsi		#
 6501      E7800000 
 6502              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6503 1cb4 130505FD 		addi	a0,a0,-48	#,, tmp2280
 6504 1cb8 97000000 		call	__floatsisf		#
 6504      E7800000 
 6505              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6506 1cc0 03274102 		lw	a4,36(sp)		# _1894, %sfp
 6507              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6508 1cc4 13060500 		mv	a2,a0	# tmp2281,
 6509              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6510 1cc8 13850A00 		mv	a0,s5	#, cos_theta
 6511 1ccc 93050700 		mv	a1,a4	#, _1894
 6512              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6513 1cd0 232EC100 		sw	a2,28(sp)	# _1734, %sfp
 6514              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6515 1cd4 97000000 		call	__mulsf3		#
 6515      E7800000 
 6516              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6517 1cdc 93050D00 		mv	a1,s10	#, _1896
 6518              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6519 1ce0 232CA100 		sw	a0,24(sp)	# tmp1738, %sfp
 6520              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6521 1ce4 13050400 		mv	a0,s0	#, sin_theta
 6522 1ce8 97000000 		call	__mulsf3		#
 6522      E7800000 
 6523              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6524 1cf0 03278101 		lw	a4,24(sp)		# tmp1738, %sfp
 6525              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6526 1cf4 93050500 		mv	a1,a0	# tmp2283,
 6527              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6528 1cf8 13050700 		mv	a0,a4	#, tmp1738
 6529 1cfc 97000000 		call	__subsf3		#
 6529      E7800000 
 6530              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6531 1d04 37070000 		lui	a4,%hi(.LC7)	# tmp2580,
 6532 1d08 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6533 1d0c 97000000 		call	__addsf3		#
 6533      E7800000 
 6534              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6535 1d14 97000000 		call	__fixsfsi		#
 6535      E7800000 
 6536              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6537 1d1c 130505FE 		addi	a0,a0,-32	#,, tmp2284
 6538 1d20 97000000 		call	__floatsisf		#
 6538      E7800000 
 6539              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6540 1d28 0326C101 		lw	a2,28(sp)		# _1734, %sfp
 6541              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6542 1d2c 130D0500 		mv	s10,a0	# tmp2285,
 6543              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6544 1d30 13850900 		mv	a0,s3	#, tmp1645
 6545 1d34 93050600 		mv	a1,a2	#, _1734
 6546 1d38 97000000 		call	__mulsf3		#
 6546      E7800000 
 6547              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6548 1d40 93050D00 		mv	a1,s10	#, _1736
 6549              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6550 1d44 232CA100 		sw	a0,24(sp)	# tmp1745, %sfp
 6551              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6552 1d48 13850B00 		mv	a0,s7	#, cos_theta
 6553 1d4c 97000000 		call	__mulsf3		#
 6553      E7800000 
 6554              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6555 1d54 03278101 		lw	a4,24(sp)		# tmp1745, %sfp
 6556              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6557 1d58 93050500 		mv	a1,a0	# tmp2287,
 6558              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6559 1d5c 13050700 		mv	a0,a4	#, tmp1745
 6560 1d60 97000000 		call	__addsf3		#
 6560      E7800000 
 6561              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6562 1d68 37070000 		lui	a4,%hi(.LC7)	# tmp2581,
 6563 1d6c 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6564 1d70 97000000 		call	__addsf3		#
 6564      E7800000 
 6565              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6566 1d78 97000000 		call	__fixsfsi		#
 6566      E7800000 
 6567              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6568 1d80 0326C101 		lw	a2,28(sp)		# _1734, %sfp
 6569              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6570 1d84 93060500 		mv	a3,a0	# tmp2288,
 6571              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6572 1d88 13850B00 		mv	a0,s7	#, cos_theta
 6573 1d8c 93050600 		mv	a1,a2	#, _1734
 6574              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6575 1d90 2322D102 		sw	a3,36(sp)	# tmp1750, %sfp
 6576              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6577 1d94 97000000 		call	__mulsf3		#
 6577      E7800000 
 6578              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6579 1d9c 93050D00 		mv	a1,s10	#, _1736
 6580              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6581 1da0 232CA100 		sw	a0,24(sp)	# tmp1751, %sfp
 6582              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6583 1da4 13850900 		mv	a0,s3	#, tmp1645
 6584 1da8 97000000 		call	__mulsf3		#
 6584      E7800000 
 6585              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6586 1db0 03278101 		lw	a4,24(sp)		# tmp1751, %sfp
 6587              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6588 1db4 93050500 		mv	a1,a0	# tmp2290,
 6589              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6590 1db8 13050700 		mv	a0,a4	#, tmp1751
 6591 1dbc 97000000 		call	__subsf3		#
 6591      E7800000 
 6592              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6593 1dc4 B7060000 		lui	a3,%hi(.LC5)	# tmp2582,
 6594 1dc8 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6595 1dcc 97000000 		call	__addsf3		#
 6595      E7800000 
 6596              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6597 1dd4 97000000 		call	__fixsfsi		#
 6597      E7800000 
 6598              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6599 1ddc 83278102 		lw	a5,40(sp)		# _1774, %sfp
 6600              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6601 1de0 13060500 		mv	a2,a0	# tmp2291,
 6602              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6603 1de4 13850900 		mv	a0,s3	#, tmp1645
 6604 1de8 93850700 		mv	a1,a5	#, _1774
 6605              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6606 1dec 232CC100 		sw	a2,24(sp)	# tmp1756, %sfp
 6607              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6608 1df0 232EF100 		sw	a5,28(sp)	# _1774, %sfp
 6609 1df4 97000000 		call	__mulsf3		#
 6609      E7800000 
 6610 1dfc 130D0500 		mv	s10,a0	# tmp1757, tmp2292
 6611              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6612 1e00 93850D00 		mv	a1,s11	#, _1776
 6613 1e04 13850B00 		mv	a0,s7	#, cos_theta
 6614 1e08 97000000 		call	__mulsf3		#
 6614      E7800000 
 6615 1e10 93050500 		mv	a1,a0	# tmp2293,
 6616              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6617 1e14 13050D00 		mv	a0,s10	#, tmp1757
 6618 1e18 97000000 		call	__addsf3		#
 6618      E7800000 
 6619              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6620 1e20 37070000 		lui	a4,%hi(.LC7)	# tmp2583,
 6621 1e24 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6622 1e28 97000000 		call	__addsf3		#
 6622      E7800000 
 6623              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6624 1e30 97000000 		call	__fixsfsi		#
 6624      E7800000 
 6625              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6626 1e38 8327C101 		lw	a5,28(sp)		# _1774, %sfp
 6627              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6628 1e3c 13070500 		mv	a4,a0	# tmp2294,
 6629              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6630 1e40 13850B00 		mv	a0,s7	#, cos_theta
 6631 1e44 93850700 		mv	a1,a5	#, _1774
 6632              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6633 1e48 930B0700 		mv	s7,a4	# tmp1762, tmp2294
 6634              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6635 1e4c 97000000 		call	__mulsf3		#
 6635      E7800000 
 6636 1e54 130D0500 		mv	s10,a0	# tmp1763, tmp2295
 6637              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6638 1e58 93850D00 		mv	a1,s11	#, _1776
 6639 1e5c 13850900 		mv	a0,s3	#, tmp1645
 6640 1e60 97000000 		call	__mulsf3		#
 6640      E7800000 
 6641 1e68 93050500 		mv	a1,a0	# tmp2296,
 6642              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6643 1e6c 13050D00 		mv	a0,s10	#, tmp1763
 6644 1e70 97000000 		call	__subsf3		#
 6644      E7800000 
 6645              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6646 1e78 B7060000 		lui	a3,%hi(.LC5)	# tmp2584,
 6647 1e7c 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6648 1e80 97000000 		call	__addsf3		#
 6648      E7800000 
 6649              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6650 1e88 97000000 		call	__fixsfsi		#
 6650      E7800000 
 6651              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 6652 1e90 03268101 		lw	a2,24(sp)		# tmp1756, %sfp
 6653 1e94 83264102 		lw	a3,36(sp)		# tmp1750, %sfp
 6654 1e98 93850B00 		mv	a1,s7	#, tmp1762
 6655              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6656 1e9c B70B0000 		lui	s7,%hi(.LANCHOR2)	# tmp2586,
 6657              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 6658 1ea0 97000000 		call	fb_draw_bresenham.constprop.0		#
 6658      E7800000 
 6659              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6660 1ea8 93870B00 		addi	a5,s7,%lo(.LANCHOR2)	# tmp2585, tmp2586,
 6661 1eac 03A5C711 		lw	a0,284(a5)		#, MEM[(struct point *)&right_bottom].y
 6662 1eb0 97000000 		call	__floatsisf		#
 6662      E7800000 
 6663 1eb8 93050900 		mv	a1,s2	#, s
 6664 1ebc 97000000 		call	__mulsf3		#
 6664      E7800000 
 6665              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6666 1ec4 97000000 		call	__fixsfsi		#
 6666      E7800000 
 6667              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6668 1ecc 032D0101 		lw	s10,16(sp)		# _377, %sfp
 6669 1ed0 3305A501 		add	a0,a0,s10	# _377, tmp1774, tmp2297
 6670              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6671 1ed4 130505FE 		addi	a0,a0,-32	#,, tmp1774
 6672 1ed8 97000000 		call	__floatsisf		#
 6672      E7800000 
 6673              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6674 1ee0 93870B00 		addi	a5,s7,%lo(.LANCHOR2)	# tmp2588, tmp2589,
 6675              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6676 1ee4 93060500 		mv	a3,a0	# tmp2298,
 6677              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6678 1ee8 03A50712 		lw	a0,288(a5)		#, MEM[(struct point *)&right_bottom].z
 6679              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6680 1eec 232ED100 		sw	a3,28(sp)	# _2453, %sfp
 6681              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6682 1ef0 97000000 		call	__floatsisf		#
 6682      E7800000 
 6683 1ef8 93050900 		mv	a1,s2	#, s
 6684 1efc 97000000 		call	__mulsf3		#
 6684      E7800000 
 6685              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6686 1f04 97000000 		call	__fixsfsi		#
 6686      E7800000 
 6687              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6688 1f0c 33056501 		add	a0,a0,s6	# _379,, tmp2299
 6689 1f10 97000000 		call	__floatsisf		#
 6689      E7800000 
 6690              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6691 1f18 13860B00 		addi	a2,s7,%lo(.LANCHOR2)	# tmp2590, tmp2591,
 6692              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6693 1f1c 93070500 		mv	a5,a0	# tmp2300,
 6694              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6695 1f20 03258612 		lw	a0,296(a2)		#, MEM[(struct point *)&right_bottom + 12B].y
 6696              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6697 1f24 232CF100 		sw	a5,24(sp)	# _2455, %sfp
 6698              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6699 1f28 97000000 		call	__floatsisf		#
 6699      E7800000 
 6700 1f30 93050900 		mv	a1,s2	#, s
 6701 1f34 97000000 		call	__mulsf3		#
 6701      E7800000 
 6702              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6703 1f3c 97000000 		call	__fixsfsi		#
 6703      E7800000 
 6704              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6705 1f44 3305A501 		add	a0,a0,s10	# _377, tmp1787, tmp2301
 6706              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6707 1f48 130505FE 		addi	a0,a0,-32	#,, tmp1787
 6708 1f4c 97000000 		call	__floatsisf		#
 6708      E7800000 
 6709              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6710 1f54 93870B00 		addi	a5,s7,%lo(.LANCHOR2)	# tmp2593, tmp2594,
 6711              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6712 1f58 930D0500 		mv	s11,a0	# tmp2302,
 6713              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6714 1f5c 03A5C712 		lw	a0,300(a5)		#, MEM[(struct point *)&right_bottom + 12B].z
 6715 1f60 138D0B00 		mv	s10,s7	# tmp2594, tmp2594
 6716 1f64 97000000 		call	__floatsisf		#
 6716      E7800000 
 6717 1f6c 93050900 		mv	a1,s2	#, s
 6718 1f70 97000000 		call	__mulsf3		#
 6718      E7800000 
 6719              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6720 1f78 97000000 		call	__fixsfsi		#
 6720      E7800000 
 6721              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6722 1f80 33056501 		add	a0,a0,s6	# _379,, tmp2303
 6723 1f84 97000000 		call	__floatsisf		#
 6723      E7800000 
 6724              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6725 1f8c 13060D00 		addi	a2,s10,%lo(.LANCHOR2)	# tmp2595, tmp2596,
 6726              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6727 1f90 930B0500 		mv	s7,a0	# tmp2304,
 6728              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6729 1f94 03258611 		lw	a0,280(a2)		#, MEM[(struct point *)&right_bottom].x
 6730 1f98 97000000 		call	__floatsisf		#
 6730      E7800000 
 6731 1fa0 93050900 		mv	a1,s2	#, s
 6732 1fa4 97000000 		call	__mulsf3		#
 6732      E7800000 
 6733              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6734 1fac 97000000 		call	__fixsfsi		#
 6734      E7800000 
 6735              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6736 1fb4 8325C100 		lw	a1,12(sp)		# _374, %sfp
 6737 1fb8 3305B500 		add	a0,a0,a1	# _374, tmp1800, tmp2305
 6738              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6739 1fbc 130505FD 		addi	a0,a0,-48	#,, tmp1800
 6740 1fc0 97000000 		call	__floatsisf		#
 6740      E7800000 
 6741 1fc8 93850400 		mv	a1,s1	#, cos_theta
 6742 1fcc 97000000 		call	__mulsf3		#
 6742      E7800000 
 6743              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6744 1fd4 8326C101 		lw	a3,28(sp)		# _2453, %sfp
 6745              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6746 1fd8 130D0500 		mv	s10,a0	# tmp2306,
 6747              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6748 1fdc 13050400 		mv	a0,s0	#, sin_theta
 6749 1fe0 93850600 		mv	a1,a3	#, _2453
 6750 1fe4 2322D102 		sw	a3,36(sp)	# _2453, %sfp
 6751 1fe8 97000000 		call	__mulsf3		#
 6751      E7800000 
 6752              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6753 1ff0 83278101 		lw	a5,24(sp)		# _2455, %sfp
 6754              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6755 1ff4 232EA100 		sw	a0,28(sp)	# tmp1804, %sfp
 6756              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6757 1ff8 13850A00 		mv	a0,s5	#, cos_theta
 6758 1ffc 93850700 		mv	a1,a5	#, _2455
 6759 2000 97000000 		call	__mulsf3		#
 6759      E7800000 
 6760              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6761 2008 0327C101 		lw	a4,28(sp)		# tmp1804, %sfp
 6762              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6763 200c 93050500 		mv	a1,a0	# tmp2308,
 6764              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6765 2010 13050700 		mv	a0,a4	#, tmp1804
 6766 2014 97000000 		call	__addsf3		#
 6766      E7800000 
 6767              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6768 201c 93050000 		mv	a1,zero	#,
 6769 2020 97000000 		call	__addsf3		#
 6769      E7800000 
 6770              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6771 2028 97000000 		call	__fixsfsi		#
 6771      E7800000 
 6772              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6773 2030 97000000 		call	__floatsisf		#
 6773      E7800000 
 6774 2038 93850C00 		mv	a1,s9	#, sin_theta
 6775 203c 97000000 		call	__mulsf3		#
 6775      E7800000 
 6776 2044 93050500 		mv	a1,a0	# tmp2309,
 6777              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6778 2048 13050D00 		mv	a0,s10	#, tmp1803
 6779 204c 97000000 		call	__addsf3		#
 6779      E7800000 
 6780              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6781 2054 B7060000 		lui	a3,%hi(.LC5)	# tmp2598,
 6782 2058 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6783 205c 97000000 		call	__addsf3		#
 6783      E7800000 
 6784              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6785 2064 97000000 		call	__fixsfsi		#
 6785      E7800000 
 6786              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6787 206c 130505FD 		addi	a0,a0,-48	#,, tmp2310
 6788 2070 97000000 		call	__floatsisf		#
 6788      E7800000 
 6789              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6790 2078 83264102 		lw	a3,36(sp)		# _2453, %sfp
 6791              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6792 207c 130D0500 		mv	s10,a0	# tmp2311,
 6793              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6794 2080 13850A00 		mv	a0,s5	#, cos_theta
 6795 2084 93850600 		mv	a1,a3	#, _2453
 6796 2088 97000000 		call	__mulsf3		#
 6796      E7800000 
 6797              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6798 2090 83278101 		lw	a5,24(sp)		# _2455, %sfp
 6799              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6800 2094 930C0500 		mv	s9,a0	# tmp1816, tmp2312
 6801              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6802 2098 13050400 		mv	a0,s0	#, sin_theta
 6803 209c 93850700 		mv	a1,a5	#, _2455
 6804 20a0 97000000 		call	__mulsf3		#
 6804      E7800000 
 6805 20a8 93050500 		mv	a1,a0	# tmp2313,
 6806              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6807 20ac 13850C00 		mv	a0,s9	#, tmp1816
 6808 20b0 97000000 		call	__subsf3		#
 6808      E7800000 
 6809              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6810 20b8 37070000 		lui	a4,%hi(.LC7)	# tmp2599,
 6811 20bc 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6812 20c0 97000000 		call	__addsf3		#
 6812      E7800000 
 6813              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6814 20c8 97000000 		call	__fixsfsi		#
 6814      E7800000 
 6815              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6816 20d0 130505FE 		addi	a0,a0,-32	#,, tmp2314
 6817 20d4 97000000 		call	__floatsisf		#
 6817      E7800000 
 6818              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6819 20dc B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2601,
 6820 20e0 13860700 		addi	a2,a5,%lo(.LANCHOR2)	# tmp2600, tmp2601,
 6821              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6822 20e4 930C0500 		mv	s9,a0	# tmp2315,
 6823              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6824 20e8 03254612 		lw	a0,292(a2)		#, MEM[(struct point *)&right_bottom + 12B].x
 6825 20ec 97000000 		call	__floatsisf		#
 6825      E7800000 
 6826 20f4 93050900 		mv	a1,s2	#, s
 6827 20f8 97000000 		call	__mulsf3		#
 6827      E7800000 
 6828              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6829 2100 97000000 		call	__fixsfsi		#
 6829      E7800000 
 6830              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 6831 2108 8325C100 		lw	a1,12(sp)		# _374, %sfp
 6832 210c 3305B500 		add	a0,a0,a1	# _374, tmp1828, tmp2316
 6833              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6834 2110 130505FD 		addi	a0,a0,-48	#,, tmp1828
 6835 2114 97000000 		call	__floatsisf		#
 6835      E7800000 
 6836 211c 93850A00 		mv	a1,s5	#, cos_theta
 6837 2120 97000000 		call	__mulsf3		#
 6837      E7800000 
 6838 2128 93070500 		mv	a5,a0	# tmp2317,
 6839              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6840 212c 93850D00 		mv	a1,s11	#, _2413
 6841 2130 13050400 		mv	a0,s0	#, sin_theta
 6842              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6843 2134 232EF100 		sw	a5,28(sp)	# tmp1831, %sfp
 6844              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6845 2138 97000000 		call	__mulsf3		#
 6845      E7800000 
 6846              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6847 2140 93850B00 		mv	a1,s7	#, _2415
 6848              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6849 2144 232CA100 		sw	a0,24(sp)	# tmp1832, %sfp
 6850              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6851 2148 13850400 		mv	a0,s1	#, cos_theta
 6852 214c 97000000 		call	__mulsf3		#
 6852      E7800000 
 6853              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6854 2154 03278101 		lw	a4,24(sp)		# tmp1832, %sfp
 6855              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6856 2158 93050500 		mv	a1,a0	# tmp2319,
 6857              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6858 215c 13050700 		mv	a0,a4	#, tmp1832
 6859 2160 97000000 		call	__addsf3		#
 6859      E7800000 
 6860              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6861 2168 93050000 		mv	a1,zero	#,
 6862 216c 97000000 		call	__addsf3		#
 6862      E7800000 
 6863              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 6864 2174 97000000 		call	__fixsfsi		#
 6864      E7800000 
 6865              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6866 217c 97000000 		call	__floatsisf		#
 6866      E7800000 
 6867 2184 93050400 		mv	a1,s0	#, sin_theta
 6868 2188 97000000 		call	__mulsf3		#
 6868      E7800000 
 6869              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6870 2190 8327C101 		lw	a5,28(sp)		# tmp1831, %sfp
 6871              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6872 2194 93050500 		mv	a1,a0	# tmp2320,
 6873              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6874 2198 13850700 		mv	a0,a5	#, tmp1831
 6875 219c 97000000 		call	__addsf3		#
 6875      E7800000 
 6876              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6877 21a4 B7060000 		lui	a3,%hi(.LC5)	# tmp2603,
 6878 21a8 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6879 21ac 97000000 		call	__addsf3		#
 6879      E7800000 
 6880              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 6881 21b4 97000000 		call	__fixsfsi		#
 6881      E7800000 
 6882              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6883 21bc 130505FD 		addi	a0,a0,-48	#,, tmp2321
 6884 21c0 97000000 		call	__floatsisf		#
 6884      E7800000 
 6885 21c8 93070500 		mv	a5,a0	# tmp2322,
 6886              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6887 21cc 93850D00 		mv	a1,s11	#, _2413
 6888 21d0 13850400 		mv	a0,s1	#, cos_theta
 6889              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6890 21d4 232CF100 		sw	a5,24(sp)	# _2253, %sfp
 6891              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6892 21d8 97000000 		call	__mulsf3		#
 6892      E7800000 
 6893 21e0 930D0500 		mv	s11,a0	# tmp1844, tmp2323
 6894              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6895 21e4 93850B00 		mv	a1,s7	#, _2415
 6896 21e8 13050400 		mv	a0,s0	#, sin_theta
 6897 21ec 97000000 		call	__mulsf3		#
 6897      E7800000 
 6898 21f4 93050500 		mv	a1,a0	# tmp2324,
 6899              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6900 21f8 13850D00 		mv	a0,s11	#, tmp1844
 6901 21fc 97000000 		call	__subsf3		#
 6901      E7800000 
 6902              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6903 2204 37070000 		lui	a4,%hi(.LC7)	# tmp2604,
 6904 2208 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6905 220c 97000000 		call	__addsf3		#
 6905      E7800000 
 6906              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 6907 2214 97000000 		call	__fixsfsi		#
 6907      E7800000 
 6908              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6909 221c 130505FE 		addi	a0,a0,-32	#,, tmp2325
 6910 2220 97000000 		call	__floatsisf		#
 6910      E7800000 
 6911              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6912 2228 83278101 		lw	a5,24(sp)		# _2253, %sfp
 6913              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6914 222c 930B0500 		mv	s7,a0	# tmp2326,
 6915              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6916 2230 13850900 		mv	a0,s3	#, tmp1645
 6917 2234 93850700 		mv	a1,a5	#, _2253
 6918 2238 97000000 		call	__mulsf3		#
 6918      E7800000 
 6919 2240 930D0500 		mv	s11,a0	# tmp1851, tmp2327
 6920              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6921 2244 93850B00 		mv	a1,s7	#, _2255
 6922 2248 13050A00 		mv	a0,s4	#, tmp1650
 6923 224c 97000000 		call	__mulsf3		#
 6923      E7800000 
 6924 2254 93050500 		mv	a1,a0	# tmp2328,
 6925              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6926 2258 13850D00 		mv	a0,s11	#, tmp1851
 6927 225c 97000000 		call	__addsf3		#
 6927      E7800000 
 6928              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6929 2264 37070000 		lui	a4,%hi(.LC7)	# tmp2605,
 6930 2268 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6931 226c 97000000 		call	__addsf3		#
 6931      E7800000 
 6932              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6933 2274 97000000 		call	__fixsfsi		#
 6933      E7800000 
 6934              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6935 227c 83278101 		lw	a5,24(sp)		# _2253, %sfp
 6936              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6937 2280 93060500 		mv	a3,a0	# tmp2329,
 6938              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6939 2284 13050A00 		mv	a0,s4	#, tmp1650
 6940 2288 93850700 		mv	a1,a5	#, _2253
 6941              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6942 228c 232CD100 		sw	a3,24(sp)	# tmp1856, %sfp
 6943              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6944 2290 97000000 		call	__mulsf3		#
 6944      E7800000 
 6945 2298 930D0500 		mv	s11,a0	# tmp1857, tmp2330
 6946              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6947 229c 93850B00 		mv	a1,s7	#, _2255
 6948 22a0 13850900 		mv	a0,s3	#, tmp1645
 6949 22a4 97000000 		call	__mulsf3		#
 6949      E7800000 
 6950 22ac 93050500 		mv	a1,a0	# tmp2331,
 6951              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6952 22b0 13850D00 		mv	a0,s11	#, tmp1857
 6953 22b4 97000000 		call	__subsf3		#
 6953      E7800000 
 6954              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6955 22bc B7060000 		lui	a3,%hi(.LC5)	# tmp2606,
 6956 22c0 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6957 22c4 97000000 		call	__addsf3		#
 6957      E7800000 
 6958              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6959 22cc 97000000 		call	__fixsfsi		#
 6959      E7800000 
 6960 22d4 930D0500 		mv	s11,a0	# tmp2332,
 6961              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6962 22d8 93050D00 		mv	a1,s10	#, _2293
 6963 22dc 13050C00 		mv	a0,s8	#, sin_theta
 6964 22e0 97000000 		call	__mulsf3		#
 6964      E7800000 
 6965 22e8 930B0500 		mv	s7,a0	# tmp1863, tmp2333
 6966              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6967 22ec 93850C00 		mv	a1,s9	#, _2295
 6968 22f0 13050A00 		mv	a0,s4	#, tmp1650
 6969 22f4 97000000 		call	__mulsf3		#
 6969      E7800000 
 6970 22fc 93050500 		mv	a1,a0	# tmp2334,
 6971              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6972 2300 13850B00 		mv	a0,s7	#, tmp1863
 6973 2304 97000000 		call	__addsf3		#
 6973      E7800000 
 6974              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6975 230c 37070000 		lui	a4,%hi(.LC7)	# tmp2607,
 6976 2310 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6977 2314 97000000 		call	__addsf3		#
 6977      E7800000 
 6978              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 6979 231c 97000000 		call	__fixsfsi		#
 6979      E7800000 
 6980 2324 930B0500 		mv	s7,a0	# tmp2335,
 6981              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6982 2328 93050D00 		mv	a1,s10	#, _2293
 6983 232c 13050A00 		mv	a0,s4	#, tmp1650
 6984 2330 97000000 		call	__mulsf3		#
 6984      E7800000 
 6985 2338 130D0500 		mv	s10,a0	# tmp1869, tmp2336
 6986              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6987 233c 93850C00 		mv	a1,s9	#, _2295
 6988 2340 13050C00 		mv	a0,s8	#, sin_theta
 6989 2344 97000000 		call	__mulsf3		#
 6989      E7800000 
 6990 234c 93050500 		mv	a1,a0	# tmp2337,
 6991              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6992 2350 13050D00 		mv	a0,s10	#, tmp1869
 6993 2354 97000000 		call	__subsf3		#
 6993      E7800000 
 6994              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6995 235c B7060000 		lui	a3,%hi(.LC5)	# tmp2608,
 6996 2360 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 6997 2364 97000000 		call	__addsf3		#
 6997      E7800000 
 6998              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 6999 236c 97000000 		call	__fixsfsi		#
 6999      E7800000 
 7000              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 7001 2374 83268101 		lw	a3,24(sp)		# tmp1856, %sfp
 7002 2378 13860D00 		mv	a2,s11	#, tmp1862
 7003 237c 93850B00 		mv	a1,s7	#, tmp1868
 7004 2380 97000000 		call	fb_draw_bresenham.constprop.0		#
 7004      E7800000 
 7005              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7006 2388 B70B0000 		lui	s7,%hi(.LANCHOR2)	# tmp2610,
 7007 238c 93870B00 		addi	a5,s7,%lo(.LANCHOR2)	# tmp2609, tmp2610,
 7008 2390 03A54713 		lw	a0,308(a5)		#, MEM[(struct point *)&right_top].y
 7009 2394 97000000 		call	__floatsisf		#
 7009      E7800000 
 7010 239c 93050900 		mv	a1,s2	#, s
 7011 23a0 97000000 		call	__mulsf3		#
 7011      E7800000 
 7012              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7013 23a8 97000000 		call	__fixsfsi		#
 7013      E7800000 
 7014              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7015 23b0 032C0101 		lw	s8,16(sp)		# _377, %sfp
 7016 23b4 33058501 		add	a0,a0,s8	# _377, tmp1880, tmp2338
 7017              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7018 23b8 130505FE 		addi	a0,a0,-32	#,, tmp1880
 7019 23bc 97000000 		call	__floatsisf		#
 7019      E7800000 
 7020              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7021 23c4 93870B00 		addi	a5,s7,%lo(.LANCHOR2)	# tmp2612, tmp2613,
 7022              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7023 23c8 930D0500 		mv	s11,a0	# tmp2339,
 7024              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7025 23cc 03A58713 		lw	a0,312(a5)		#, MEM[(struct point *)&right_top].z
 7026 23d0 97000000 		call	__floatsisf		#
 7026      E7800000 
 7027 23d8 93050900 		mv	a1,s2	#, s
 7028 23dc 97000000 		call	__mulsf3		#
 7028      E7800000 
 7029              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7030 23e4 97000000 		call	__fixsfsi		#
 7030      E7800000 
 7031              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7032 23ec 33056501 		add	a0,a0,s6	# _379,, tmp2340
 7033 23f0 97000000 		call	__floatsisf		#
 7033      E7800000 
 7034              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7035 23f8 93870B00 		addi	a5,s7,%lo(.LANCHOR2)	# tmp2614, tmp2615,
 7036              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7037 23fc 130D0500 		mv	s10,a0	# tmp2341,
 7038              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7039 2400 03A50714 		lw	a0,320(a5)		#, MEM[(struct point *)&right_top + 12B].y
 7040 2404 97000000 		call	__floatsisf		#
 7040      E7800000 
 7041 240c 93050900 		mv	a1,s2	#, s
 7042 2410 97000000 		call	__mulsf3		#
 7042      E7800000 
 7043              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7044 2418 97000000 		call	__fixsfsi		#
 7044      E7800000 
 7045              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7046 2420 33058501 		add	a0,a0,s8	# _377, tmp1893, tmp2342
 7047              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7048 2424 130505FE 		addi	a0,a0,-32	#,, tmp1893
 7049 2428 97000000 		call	__floatsisf		#
 7049      E7800000 
 7050              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7051 2430 93870B00 		addi	a5,s7,%lo(.LANCHOR2)	# tmp2617, tmp2618,
 7052              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7053 2434 930C0500 		mv	s9,a0	# tmp2343,
 7054              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7055 2438 03A54714 		lw	a0,324(a5)		#, MEM[(struct point *)&right_top + 12B].z
 7056 243c 97000000 		call	__floatsisf		#
 7056      E7800000 
 7057 2444 93050900 		mv	a1,s2	#, s
 7058 2448 97000000 		call	__mulsf3		#
 7058      E7800000 
 7059              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7060 2450 97000000 		call	__fixsfsi		#
 7060      E7800000 
 7061              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7062 2458 33056501 		add	a0,a0,s6	# _379,, tmp2344
 7063 245c 97000000 		call	__floatsisf		#
 7063      E7800000 
 7064              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7065 2464 13860B00 		addi	a2,s7,%lo(.LANCHOR2)	# tmp2619, tmp2620,
 7066              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7067 2468 130C0500 		mv	s8,a0	# tmp2345,
 7068              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7069 246c 03250613 		lw	a0,304(a2)		#, MEM[(struct point *)&right_top].x
 7070 2470 97000000 		call	__floatsisf		#
 7070      E7800000 
 7071 2478 93050900 		mv	a1,s2	#, s
 7072 247c 97000000 		call	__mulsf3		#
 7072      E7800000 
 7073              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7074 2484 97000000 		call	__fixsfsi		#
 7074      E7800000 
 7075              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7076 248c 8325C100 		lw	a1,12(sp)		# _374, %sfp
 7077 2490 3305B500 		add	a0,a0,a1	# _374, tmp1906, tmp2346
 7078              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7079 2494 130505FD 		addi	a0,a0,-48	#,, tmp1906
 7080 2498 97000000 		call	__floatsisf		#
 7080      E7800000 
 7081 24a0 93850400 		mv	a1,s1	#, cos_theta
 7082 24a4 97000000 		call	__mulsf3		#
 7082      E7800000 
 7083 24ac 130B0500 		mv	s6,a0	# tmp2347,
 7084              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7085 24b0 93850D00 		mv	a1,s11	#, _2879
 7086 24b4 13050400 		mv	a0,s0	#, sin_theta
 7087 24b8 97000000 		call	__mulsf3		#
 7087      E7800000 
 7088 24c0 930B0500 		mv	s7,a0	# tmp1910, tmp2348
 7089              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7090 24c4 93050D00 		mv	a1,s10	#, _2881
 7091 24c8 13850400 		mv	a0,s1	#, cos_theta
 7092 24cc 97000000 		call	__mulsf3		#
 7092      E7800000 
 7093 24d4 93050500 		mv	a1,a0	# tmp2349,
 7094              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7095 24d8 13850B00 		mv	a0,s7	#, tmp1910
 7096 24dc 97000000 		call	__addsf3		#
 7096      E7800000 
 7097              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7098 24e4 93050000 		mv	a1,zero	#,
 7099 24e8 97000000 		call	__addsf3		#
 7099      E7800000 
 7100              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7101 24f0 97000000 		call	__fixsfsi		#
 7101      E7800000 
 7102              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7103 24f8 97000000 		call	__floatsisf		#
 7103      E7800000 
 7104 2500 93050400 		mv	a1,s0	#, sin_theta
 7105 2504 97000000 		call	__mulsf3		#
 7105      E7800000 
 7106 250c 93050500 		mv	a1,a0	# tmp2350,
 7107              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7108 2510 13050B00 		mv	a0,s6	#, tmp1909
 7109 2514 97000000 		call	__addsf3		#
 7109      E7800000 
 7110              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7111 251c B7060000 		lui	a3,%hi(.LC5)	# tmp2622,
 7112 2520 83A50600 		lw	a1,%lo(.LC5)(a3)		#,
 7113 2524 97000000 		call	__addsf3		#
 7113      E7800000 
 7114              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7115 252c 97000000 		call	__fixsfsi		#
 7115      E7800000 
 7116              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7117 2534 130505FD 		addi	a0,a0,-48	#,, tmp2351
 7118 2538 97000000 		call	__floatsisf		#
 7118      E7800000 
 7119 2540 930B0500 		mv	s7,a0	# tmp2352,
 7120              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7121 2544 93850D00 		mv	a1,s11	#, _2879
 7122 2548 13850400 		mv	a0,s1	#, cos_theta
 7123 254c 97000000 		call	__mulsf3		#
 7123      E7800000 
 7124 2554 93040500 		mv	s1,a0	# tmp1922, tmp2353
 7125              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7126 2558 93050D00 		mv	a1,s10	#, _2881
 7127 255c 13050400 		mv	a0,s0	#, sin_theta
 7128 2560 97000000 		call	__mulsf3		#
 7128      E7800000 
 7129 2568 93050500 		mv	a1,a0	# tmp2354,
 7130              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7131 256c 13850400 		mv	a0,s1	#, tmp1922
 7132 2570 97000000 		call	__subsf3		#
 7132      E7800000 
 7133              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7134 2578 B70D0000 		lui	s11,%hi(.LC7)	# tmp2623,
 7135 257c 83A50D00 		lw	a1,%lo(.LC7)(s11)		#,
 7136 2580 97000000 		call	__addsf3		#
 7136      E7800000 
 7137              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7138 2588 97000000 		call	__fixsfsi		#
 7138      E7800000 
 7139              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7140 2590 130505FE 		addi	a0,a0,-32	#,, tmp2355
 7141 2594 97000000 		call	__floatsisf		#
 7141      E7800000 
 7142              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7143 259c B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2625,
 7144 25a0 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# tmp2624, tmp2625,
 7145              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7146 25a4 130B0500 		mv	s6,a0	# tmp2356,
 7147              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7148 25a8 03A5C713 		lw	a0,316(a5)		#, MEM[(struct point *)&right_top + 12B].x
 7149 25ac 97000000 		call	__floatsisf		#
 7149      E7800000 
 7150 25b4 93050900 		mv	a1,s2	#, s
 7151 25b8 97000000 		call	__mulsf3		#
 7151      E7800000 
 7152              	# gfx_lib.h:233:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 7153 25c0 97000000 		call	__fixsfsi		#
 7153      E7800000 
 7154              	# gfx_lib.h:238:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 7155 25c8 8325C100 		lw	a1,12(sp)		# _374, %sfp
 7156 25cc 3305B500 		add	a0,a0,a1	# _374, tmp1934, tmp2357
 7157              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7158 25d0 130505FD 		addi	a0,a0,-48	#,, tmp1934
 7159 25d4 97000000 		call	__floatsisf		#
 7159      E7800000 
 7160 25dc 93850A00 		mv	a1,s5	#, cos_theta
 7161 25e0 97000000 		call	__mulsf3		#
 7161      E7800000 
 7162 25e8 93040500 		mv	s1,a0	# tmp2358,
 7163              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7164 25ec 93850C00 		mv	a1,s9	#, _2839
 7165 25f0 13050400 		mv	a0,s0	#, sin_theta
 7166 25f4 97000000 		call	__mulsf3		#
 7166      E7800000 
 7167 25fc 130D0500 		mv	s10,a0	# tmp1938, tmp2359
 7168              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7169 2600 93050C00 		mv	a1,s8	#, _2841
 7170 2604 13850A00 		mv	a0,s5	#, cos_theta
 7171 2608 97000000 		call	__mulsf3		#
 7171      E7800000 
 7172 2610 93050500 		mv	a1,a0	# tmp2360,
 7173              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7174 2614 13050D00 		mv	a0,s10	#, tmp1938
 7175 2618 97000000 		call	__addsf3		#
 7175      E7800000 
 7176              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7177 2620 93050000 		mv	a1,zero	#,
 7178 2624 97000000 		call	__addsf3		#
 7178      E7800000 
 7179              	# gfx_lib.h:253:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos_thet
 7180 262c 97000000 		call	__fixsfsi		#
 7180      E7800000 
 7181              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7182 2634 97000000 		call	__floatsisf		#
 7182      E7800000 
 7183 263c 93050400 		mv	a1,s0	#, sin_theta
 7184 2640 97000000 		call	__mulsf3		#
 7184      E7800000 
 7185 2648 93050500 		mv	a1,a0	# tmp2361,
 7186              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7187 264c 13850400 		mv	a0,s1	#, tmp1937
 7188 2650 97000000 		call	__addsf3		#
 7188      E7800000 
 7189              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7190 2658 370D0000 		lui	s10,%hi(.LC5)	# tmp2627,
 7191 265c 83250D00 		lw	a1,%lo(.LC5)(s10)		#,
 7192 2660 97000000 		call	__addsf3		#
 7192      E7800000 
 7193              	# gfx_lib.h:266:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin_thet
 7194 2668 97000000 		call	__fixsfsi		#
 7194      E7800000 
 7195              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7196 2670 130505FD 		addi	a0,a0,-48	#,, tmp2362
 7197 2674 97000000 		call	__floatsisf		#
 7197      E7800000 
 7198 267c 93040500 		mv	s1,a0	# tmp2363,
 7199              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7200 2680 93850C00 		mv	a1,s9	#, _2839
 7201 2684 13850A00 		mv	a0,s5	#, cos_theta
 7202 2688 97000000 		call	__mulsf3		#
 7202      E7800000 
 7203 2690 930A0500 		mv	s5,a0	# tmp1950, tmp2364
 7204              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7205 2694 93050C00 		mv	a1,s8	#, _2841
 7206 2698 13050400 		mv	a0,s0	#, sin_theta
 7207 269c 97000000 		call	__mulsf3		#
 7207      E7800000 
 7208 26a4 93050500 		mv	a1,a0	# tmp2365,
 7209              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7210 26a8 13850A00 		mv	a0,s5	#, tmp1950
 7211 26ac 97000000 		call	__subsf3		#
 7211      E7800000 
 7212              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7213 26b4 83A50D00 		lw	a1,%lo(.LC7)(s11)		#,
 7214 26b8 97000000 		call	__addsf3		#
 7214      E7800000 
 7215              	# gfx_lib.h:252:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin_thet
 7216 26c0 97000000 		call	__fixsfsi		#
 7216      E7800000 
 7217              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7218 26c8 130505FE 		addi	a0,a0,-32	#,, tmp2366
 7219 26cc 97000000 		call	__floatsisf		#
 7219      E7800000 
 7220 26d4 13040500 		mv	s0,a0	# tmp2367,
 7221              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7222 26d8 93850400 		mv	a1,s1	#, _2679
 7223 26dc 13850900 		mv	a0,s3	#, tmp1645
 7224 26e0 97000000 		call	__mulsf3		#
 7224      E7800000 
 7225 26e8 930A0500 		mv	s5,a0	# tmp1957, tmp2368
 7226              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7227 26ec 93050400 		mv	a1,s0	#, _2681
 7228 26f0 13050A00 		mv	a0,s4	#, tmp1650
 7229 26f4 97000000 		call	__mulsf3		#
 7229      E7800000 
 7230 26fc 93050500 		mv	a1,a0	# tmp2369,
 7231              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7232 2700 13850A00 		mv	a0,s5	#, tmp1957
 7233 2704 97000000 		call	__addsf3		#
 7233      E7800000 
 7234              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7235 270c 83A50D00 		lw	a1,%lo(.LC7)(s11)		#,
 7236 2710 97000000 		call	__addsf3		#
 7236      E7800000 
 7237              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7238 2718 97000000 		call	__fixsfsi		#
 7238      E7800000 
 7239              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7240 2720 93850400 		mv	a1,s1	#, _2679
 7241              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7242 2724 930A0500 		mv	s5,a0	# tmp2370,
 7243              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7244 2728 13050A00 		mv	a0,s4	#, tmp1650
 7245 272c 97000000 		call	__mulsf3		#
 7245      E7800000 
 7246 2734 93040500 		mv	s1,a0	# tmp1963, tmp2371
 7247              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7248 2738 93050400 		mv	a1,s0	#, _2681
 7249 273c 13850900 		mv	a0,s3	#, tmp1645
 7250 2740 97000000 		call	__mulsf3		#
 7250      E7800000 
 7251 2748 93050500 		mv	a1,a0	# tmp2372,
 7252              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7253 274c 13850400 		mv	a0,s1	#, tmp1963
 7254 2750 97000000 		call	__subsf3		#
 7254      E7800000 
 7255              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7256 2758 83250D00 		lw	a1,%lo(.LC5)(s10)		#,
 7257 275c 97000000 		call	__addsf3		#
 7257      E7800000 
 7258              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7259 2764 97000000 		call	__fixsfsi		#
 7259      E7800000 
 7260 276c 93040500 		mv	s1,a0	# tmp2373,
 7261              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7262 2770 93850B00 		mv	a1,s7	#, _2719
 7263 2774 13850900 		mv	a0,s3	#, tmp1645
 7264 2778 97000000 		call	__mulsf3		#
 7264      E7800000 
 7265 2780 13040500 		mv	s0,a0	# tmp1969, tmp2374
 7266              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7267 2784 93050B00 		mv	a1,s6	#, _2721
 7268 2788 13050A00 		mv	a0,s4	#, tmp1650
 7269 278c 97000000 		call	__mulsf3		#
 7269      E7800000 
 7270 2794 93050500 		mv	a1,a0	# tmp2375,
 7271              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7272 2798 13050400 		mv	a0,s0	#, tmp1969
 7273 279c 97000000 		call	__addsf3		#
 7273      E7800000 
 7274              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7275 27a4 83A50D00 		lw	a1,%lo(.LC7)(s11)		#,
 7276 27a8 97000000 		call	__addsf3		#
 7276      E7800000 
 7277              	# gfx_lib.h:282:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos_thet
 7278 27b0 97000000 		call	__fixsfsi		#
 7278      E7800000 
 7279 27b8 13040500 		mv	s0,a0	# tmp2376,
 7280              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7281 27bc 93850B00 		mv	a1,s7	#, _2719
 7282 27c0 13050A00 		mv	a0,s4	#, tmp1650
 7283 27c4 97000000 		call	__mulsf3		#
 7283      E7800000 
 7284 27cc 130A0500 		mv	s4,a0	# tmp1975, tmp2377
 7285              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7286 27d0 93050B00 		mv	a1,s6	#, _2721
 7287 27d4 13850900 		mv	a0,s3	#, tmp1645
 7288 27d8 97000000 		call	__mulsf3		#
 7288      E7800000 
 7289 27e0 93050500 		mv	a1,a0	# tmp2378,
 7290              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7291 27e4 13050A00 		mv	a0,s4	#, tmp1975
 7292 27e8 97000000 		call	__subsf3		#
 7292      E7800000 
 7293              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7294 27f0 83250D00 		lw	a1,%lo(.LC5)(s10)		#,
 7295 27f4 97000000 		call	__addsf3		#
 7295      E7800000 
 7296              	# gfx_lib.h:281:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin_thet
 7297 27fc 97000000 		call	__fixsfsi		#
 7297      E7800000 
 7298              	# main_cube3d_rotate.c:92:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, RGB256(0x07, 
 7299 2804 93860A00 		mv	a3,s5	#, tmp1962
 7300 2808 13860400 		mv	a2,s1	#, tmp1968
 7301 280c 93050400 		mv	a1,s0	#, tmp1974
 7302 2810 97000000 		call	fb_draw_bresenham.constprop.0		#
 7302      E7800000 
 7303              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7304 2818 B7070030 		li	a5,805306368		# tmp1982,
 7305 281c 93065001 		li	a3,21		# tmp1983,
 7306 2820 23A6D700 		sw	a3,12(a5)	# tmp1983, MEM[(volatile uint32_t *)805306380B]
 7307 2824 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7308 2828 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7309 282c 13075007 		li	a4,117		# tmp1990,
 7310 2830 23A6E700 		sw	a4,12(a5)	# tmp1990, MEM[(volatile uint32_t *)805306380B]
 7311 2834 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7312 2838 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7313 283c 23A6D700 		sw	a3,12(a5)	# tmp1983, MEM[(volatile uint32_t *)805306380B]
 7314 2840 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7315 2844 9306F005 		li	a3,95		# tmp2002,
 7316 2848 23A6D700 		sw	a3,12(a5)	# tmp2002, MEM[(volatile uint32_t *)805306380B]
 7317 284c 23A6E700 		sw	a4,12(a5)	# tmp1990, MEM[(volatile uint32_t *)805306380B]
 7318 2850 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 7319 2854 1307F003 		li	a4,63		# tmp2010,
 7320 2858 23A6E700 		sw	a4,12(a5)	# tmp2010, MEM[(volatile uint32_t *)805306380B]
 7321 285c B7070000 		lui	a5,%hi(framebuffer)	# tmp2634,
 7322 2860 37370000 		lui	a4,%hi(framebuffer+12288)	# tmp2838,
 7323 2864 93870700 		addi	a5,a5,%lo(framebuffer)	# tmp2633, tmp2634,
 7324 2868 B7060030 		li	a3,805306368		# tmp2015,
 7325 286c 93030700 		addi	t2,a4,%lo(framebuffer+12288)	# tmp2837, tmp2838,
 7326              	.L525:
 7327              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7328 2870 03C70700 		lbu	a4,0(a5)	# MEM[(uint16_t *)_30], MEM[(uint16_t *)_30]
 7329              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 7330 2874 93872700 		addi	a5,a5,2	#, ivtmp.533, ivtmp.533
 7331              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7332 2878 13670710 		ori	a4,a4,256	#, _60, MEM[(uint16_t *)_30]
 7333              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7334 287c 23A6E600 		sw	a4,12(a3)	# _60, MEM[(volatile uint32_t *)805306380B]
 7335              	# gfx_lib.h:129:   for (int i = 0; i < (VRES*HRES); i++) {
 7336 2880 E39877FE 		bne	a5,t2,.L525	#, ivtmp.533, _3469,
 7337              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7338 2884 93075001 		li	a5,21		# tmp2018,
 7339 2888 23A6F600 		sw	a5,12(a3)	# tmp2018, MEM[(volatile uint32_t *)805306380B]
 7340 288c 23A60600 		sw	zero,12(a3)	#, MEM[(volatile uint32_t *)805306380B]
 7341 2890 9307F005 		li	a5,95		# tmp2023,
 7342 2894 23A6F600 		sw	a5,12(a3)	# tmp2023, MEM[(volatile uint32_t *)805306380B]
 7343 2898 93075007 		li	a5,117		# tmp2026,
 7344 289c 23A6F600 		sw	a5,12(a3)	# tmp2026, MEM[(volatile uint32_t *)805306380B]
 7345              	# main_cube3d_rotate.c:122:     if (s >= 10) delta_scale = -delta_scale;
 7346 28a0 B7070000 		lui	a5,%hi(.LC10)	# tmp2635,
 7347 28a4 83A50700 		lw	a1,%lo(.LC10)(a5)		#,
 7348              	# gfx_lib.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 7349 28a8 23A60600 		sw	zero,12(a3)	#, MEM[(volatile uint32_t *)805306380B]
 7350 28ac 9307F003 		li	a5,63		# tmp2031,
 7351 28b0 23A6F600 		sw	a5,12(a3)	# tmp2031, MEM[(volatile uint32_t *)805306380B]
 7352              	# main_cube3d_rotate.c:122:     if (s >= 10) delta_scale = -delta_scale;
 7353 28b4 13050900 		mv	a0,s2	#, s
 7354 28b8 97000000 		call	__gesf2		#
 7354      E7800000 
 7355              	# main_cube3d_rotate.c:119:     angle += delta_angle;
 7356 28c0 83278105 		lw	a5,88(sp)		# angle, %sfp
 7357 28c4 9387C7FF 		addi	a5,a5,-4	#, angle, angle
 7358 28c8 232CF104 		sw	a5,88(sp)	# angle, %sfp
 7359              	# main_cube3d_rotate.c:122:     if (s >= 10) delta_scale = -delta_scale;
 7360 28cc 634A0500 		blt	a0,zero,.L526	#, tmp2379,,
 7361              	# main_cube3d_rotate.c:122:     if (s >= 10) delta_scale = -delta_scale;
 7362 28d0 03270107 		lw	a4,112(sp)		# tmp2639, %sfp
 7363 28d4 B7070080 		li	a5,-2147483648		# tmp2036,
 7364 28d8 B3C7E700 		xor	a5,a5,a4	# tmp2639, tmp2638, tmp2036
 7365 28dc 2328F106 		sw	a5,112(sp)	# tmp2638, %sfp
 7366              	.L526:
 7367              	# main_cube3d_rotate.c:123:     if (s <= 0) delta_scale = -delta_scale;
 7368 28e0 93050000 		mv	a1,zero	#,
 7369 28e4 13050900 		mv	a0,s2	#, s
 7370 28e8 97000000 		call	__lesf2		#
 7370      E7800000 
 7371 28f0 634AA000 		bgt	a0,zero,.L528	#, tmp2380,,
 7372              	# main_cube3d_rotate.c:123:     if (s <= 0) delta_scale = -delta_scale;
 7373 28f4 03270107 		lw	a4,112(sp)		# tmp2641, %sfp
 7374 28f8 B7070080 		li	a5,-2147483648		# tmp2039,
 7375 28fc B3C7E700 		xor	a5,a5,a4	# tmp2641, tmp2640, tmp2039
 7376 2900 2328F106 		sw	a5,112(sp)	# tmp2640, %sfp
 7377              	.L528:
 7378              	# main_cube3d_rotate.c:124:     s += delta_scale;
 7379 2904 83250107 		lw	a1,112(sp)		#, %sfp
 7380 2908 13050900 		mv	a0,s2	#, s
 7381 290c 97000000 		call	__addsf3		#
 7381      E7800000 
 7382 2914 B7070000 		lui	a5,%hi(framebuffer)	# tmp2643,
 7383 2918 37370000 		lui	a4,%hi(framebuffer+12288)	# tmp2832,
 7384 291c 13090500 		mv	s2,a0	# s, tmp2381
 7385 2920 93870700 		addi	a5,a5,%lo(framebuffer)	# tmp2642, tmp2643,
 7386 2924 93030700 		addi	t2,a4,%lo(framebuffer+12288)	# tmp2831, tmp2832,
 7387              	.L530:
 7388              	# gfx_lib.h:213:     framebuffer[i] = rgb;
 7389 2928 23A00700 		sw	zero,0(a5)	#, MEM <vector(2) short unsigned int> [(uint16_t *)_22]
 7390 292c 93874700 		addi	a5,a5,4	#, ivtmp.524, ivtmp.524
 7391 2930 E39C77FE 		bne	a5,t2,.L530	#, ivtmp.524, _3469,
 7392 2934 6FD0CFFB 		j	.L531		#
 7394              		.globl	roof
 7395              		.globl	right_bottom
 7396              		.globl	right_top
 7397              		.globl	left_bottom
 7398              		.globl	left_top
 7399              		.globl	back
 7400              		.globl	front
 7401              		.globl	oled_8bit_init_seq
 7402              		.globl	framebuffer
 7403              		.globl	heap_memory_used
 7404              		.globl	heap_memory
 7405              		.section	.srodata.cst8,"aM",@progbits,8
 7406              		.align	3
 7407              	.LC1:
 7408 0000 00000000 		.word	0
 7409 0004 0000E040 		.word	1088421888
 7410              		.align	3
 7411              	.LC2:
 7412 0008 00000000 		.word	0
 7413 000c 00807640 		.word	1081507840
 7414              		.align	3
 7415              	.LC3:
 7416 0010 80004000 		.word	4194432
 7417 0014 2000003F 		.word	1056964640
 7418              		.section	.srodata.cst4,"aM",@progbits,4
 7419              		.align	2
 7420              	.LC4:
 7421 0000 0000A040 		.word	1084227584
 7422              		.align	2
 7423              	.LC5:
 7424 0004 00004042 		.word	1111490560
 7425              		.align	2
 7426              	.LC6:
 7427 0008 00007041 		.word	1097859072
 7428              		.align	2
 7429              	.LC7:
 7430 000c 00000042 		.word	1107296256
 7431              		.align	2
 7432              	.LC8:
 7433 0010 CDCCCC3D 		.word	1036831949
 7434              		.align	2
 7435              	.LC9:
 7436 0014 00008040 		.word	1082130432
 7437              		.align	2
 7438              	.LC10:
 7439 0018 00002041 		.word	1092616192
 7440              		.section	.rodata
 7441              		.align	2
 7442              		.set	.LANCHOR1,. + 0
 7445              	sin90:
 7446 0000 0000     		.half	0
 7447 0002 4706     		.half	1607
 7448 0004 8B0C     		.half	3211
 7449 0006 C712     		.half	4807
 7450 0008 F818     		.half	6392
 7451 000a 191F     		.half	7961
 7452 000c 2725     		.half	9511
 7453 000e 1E2B     		.half	11038
 7454 0010 FB30     		.half	12539
 7455 0012 B936     		.half	14009
 7456 0014 563C     		.half	15446
 7457 0016 CD41     		.half	16845
 7458 0018 1C47     		.half	18204
 7459 001a 3F4C     		.half	19519
 7460 001c 3351     		.half	20787
 7461 001e F455     		.half	22004
 7462 0020 815A     		.half	23169
 7463 0022 D65E     		.half	24278
 7464 0024 F162     		.half	25329
 7465 0026 CE66     		.half	26318
 7466 0028 6C6A     		.half	27244
 7467 002a C96D     		.half	28105
 7468 002c E170     		.half	28897
 7469 002e B573     		.half	29621
 7470 0030 4076     		.half	30272
 7471 0032 8378     		.half	30851
 7472 0034 7C7A     		.half	31356
 7473 0036 297C     		.half	31785
 7474 0038 897D     		.half	32137
 7475 003a 9C7E     		.half	32412
 7476 003c 617F     		.half	32609
 7477 003e D77F     		.half	32727
 7478 0040 FF7F     		.half	32767
 7479              		.data
 7480              		.align	2
 7481              		.set	.LANCHOR2,. + 0
 7484              	oled_8bit_init_seq:
 7485 0000 AEA032A1 		.string	"\256\2402\241"
 7485      00
 7486 0005 A200     		.string	"\242"
 7487 0007 A4A83FAD 		.ascii	"\244\250?\255\216\260\013\2611\263\360\212d\213x\214d\273:\276"
 7487      8EB00BB1 
 7487      31B3F08A 
 7487      648B788C 
 7487      64BB3ABE 
 7488 001b 3E870681 		.ascii	">\207\006\201\221\202P\203}\257"
 7488      91825083 
 7488      7DAF
 7489 0025 000000   		.zero	3
 7492              	front:
 7493              	# x:
 7494 0028 00000000 		.word	0
 7495              	# y:
 7496 002c 0A000000 		.word	10
 7497              	# z:
 7498 0030 00000000 		.word	0
 7499              	# x:
 7500 0034 0A000000 		.word	10
 7501              	# y:
 7502 0038 0A000000 		.word	10
 7503              	# z:
 7504 003c 00000000 		.word	0
 7505              	# x:
 7506 0040 0A000000 		.word	10
 7507              	# y:
 7508 0044 0A000000 		.word	10
 7509              	# z:
 7510 0048 00000000 		.word	0
 7511              	# x:
 7512 004c 0A000000 		.word	10
 7513              	# y:
 7514 0050 14000000 		.word	20
 7515              	# z:
 7516 0054 00000000 		.word	0
 7517              	# x:
 7518 0058 0A000000 		.word	10
 7519              	# y:
 7520 005c 14000000 		.word	20
 7521              	# z:
 7522 0060 00000000 		.word	0
 7523              	# x:
 7524 0064 00000000 		.word	0
 7525              	# y:
 7526 0068 14000000 		.word	20
 7527              	# z:
 7528 006c 00000000 		.word	0
 7529              	# x:
 7530 0070 00000000 		.word	0
 7531              	# y:
 7532 0074 14000000 		.word	20
 7533              	# z:
 7534 0078 00000000 		.word	0
 7535              	# x:
 7536 007c 00000000 		.word	0
 7537              	# y:
 7538 0080 0A000000 		.word	10
 7539              	# z:
 7540 0084 00000000 		.word	0
 7543              	back:
 7544              	# x:
 7545 0088 00000000 		.word	0
 7546              	# y:
 7547 008c 0A000000 		.word	10
 7548              	# z:
 7549 0090 0A000000 		.word	10
 7550              	# x:
 7551 0094 0A000000 		.word	10
 7552              	# y:
 7553 0098 0A000000 		.word	10
 7554              	# z:
 7555 009c 0A000000 		.word	10
 7556              	# x:
 7557 00a0 0A000000 		.word	10
 7558              	# y:
 7559 00a4 0A000000 		.word	10
 7560              	# z:
 7561 00a8 0A000000 		.word	10
 7562              	# x:
 7563 00ac 0A000000 		.word	10
 7564              	# y:
 7565 00b0 14000000 		.word	20
 7566              	# z:
 7567 00b4 0A000000 		.word	10
 7568              	# x:
 7569 00b8 0A000000 		.word	10
 7570              	# y:
 7571 00bc 14000000 		.word	20
 7572              	# z:
 7573 00c0 0A000000 		.word	10
 7574              	# x:
 7575 00c4 00000000 		.word	0
 7576              	# y:
 7577 00c8 14000000 		.word	20
 7578              	# z:
 7579 00cc 0A000000 		.word	10
 7580              	# x:
 7581 00d0 00000000 		.word	0
 7582              	# y:
 7583 00d4 14000000 		.word	20
 7584              	# z:
 7585 00d8 0A000000 		.word	10
 7586              	# x:
 7587 00dc 00000000 		.word	0
 7588              	# y:
 7589 00e0 0A000000 		.word	10
 7590              	# z:
 7591 00e4 0A000000 		.word	10
 7594              	left_bottom:
 7595              	# x:
 7596 00e8 00000000 		.word	0
 7597              	# y:
 7598 00ec 14000000 		.word	20
 7599              	# z:
 7600 00f0 00000000 		.word	0
 7601              	# x:
 7602 00f4 00000000 		.word	0
 7603              	# y:
 7604 00f8 14000000 		.word	20
 7605              	# z:
 7606 00fc 0A000000 		.word	10
 7609              	left_top:
 7610              	# x:
 7611 0100 00000000 		.word	0
 7612              	# y:
 7613 0104 0A000000 		.word	10
 7614              	# z:
 7615 0108 00000000 		.word	0
 7616              	# x:
 7617 010c 00000000 		.word	0
 7618              	# y:
 7619 0110 0A000000 		.word	10
 7620              	# z:
 7621 0114 0A000000 		.word	10
 7624              	right_bottom:
 7625              	# x:
 7626 0118 0A000000 		.word	10
 7627              	# y:
 7628 011c 14000000 		.word	20
 7629              	# z:
 7630 0120 00000000 		.word	0
 7631              	# x:
 7632 0124 0A000000 		.word	10
 7633              	# y:
 7634 0128 14000000 		.word	20
 7635              	# z:
 7636 012c 0A000000 		.word	10
 7639              	right_top:
 7640              	# x:
 7641 0130 0A000000 		.word	10
 7642              	# y:
 7643 0134 0A000000 		.word	10
 7644              	# z:
 7645 0138 00000000 		.word	0
 7646              	# x:
 7647 013c 0A000000 		.word	10
 7648              	# y:
 7649 0140 0A000000 		.word	10
 7650              	# z:
 7651 0144 0A000000 		.word	10
 7654              	roof:
 7655              	# x:
 7656 0148 05000000 		.word	5
 7657              	# y:
 7658 014c 05000000 		.word	5
 7659              	# z:
 7660 0150 00000000 		.word	0
 7661              	# x:
 7662 0154 05000000 		.word	5
 7663              	# y:
 7664 0158 05000000 		.word	5
 7665              	# z:
 7666 015c 0A000000 		.word	10
 7667              		.bss
 7668              		.align	2
 7669              		.set	.LANCHOR0,. + 0
 7672              	heap_memory:
 7673 0000 00000000 		.zero	1024
 7673      00000000 
 7673      00000000 
 7673      00000000 
 7673      00000000 
 7676              	framebuffer:
 7677 0400 00000000 		.zero	12288
 7677      00000000 
 7677      00000000 
 7677      00000000 
 7677      00000000 
 7678              		.section	.sbss,"aw",@nobits
 7679              		.align	2
 7682              	heap_memory_used:
 7683 0000 00000000 		.zero	4
 7684              		.ident	"GCC: (GNU) 11.1.0"
