   1              		.file	"main_cube3d_rotate_hdmi.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              	# GNU C17 (GCC) version 11.1.0 (riscv32-unknown-elf)
   7              	#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   8              	# warning: GMP header version 6.2.0 differs from library version 6.3.0.
   9              	# warning: MPFR header version 4.0.2 differs from library version 4.2.1.
  10              	# warning: MPC header version 1.1.0 differs from library version 1.3.1.
  11              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  12              	# options passed: -march=rv32im -mabi=ilp32 -mtune=rocket -march=rv32im -O3 -fno-pic -fno-stack-pro
  13              		.text
  14              		.align	2
  16              	fb_draw_bresenham.constprop.0:
  17 0000 130101FE 		addi	sp,sp,-32	#,,
  18 0004 232A9100 		sw	s1,20(sp)	#,
  19 0008 93040500 		mv	s1,a0	# x0, tmp119
  20              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  21 000c 3305A640 		sub	a0,a2,a0	#, x1, x0
  22              	# gfx_lib_hdmi.h:209: void fb_draw_bresenham(uint32_t *fb, int x0, int y0, int x1, int y1, short co
  23 0010 232E1100 		sw	ra,28(sp)	#,
  24 0014 232C8100 		sw	s0,24(sp)	#,
  25 0018 23282101 		sw	s2,16(sp)	#,
  26 001c 13840500 		mv	s0,a1	# y0, tmp120
  27 0020 23263101 		sw	s3,12(sp)	#,
  28 0024 23244101 		sw	s4,8(sp)	#,
  29 0028 93090600 		mv	s3,a2	# x1, tmp121
  30 002c 23225101 		sw	s5,4(sp)	#,
  31              	# gfx_lib_hdmi.h:209: void fb_draw_bresenham(uint32_t *fb, int x0, int y0, int x1, int y1, short co
  32 0030 938A0600 		mv	s5,a3	# y1, tmp122
  33              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  34 0034 97000000 		call	abs		#
  34      E7800000 
  35 003c 13090500 		mv	s2,a0	# tmp123,
  36              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  37 0040 33858A40 		sub	a0,s5,s0	#, y1, y0
  38 0044 97000000 		call	abs		#
  38      E7800000 
  39              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  40 004c 33AA3401 		sgt	s4,s3,s1	# tmp107, x1, x0
  41              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  42 0050 332E5401 		sgt	t3,s5,s0	# tmp111, y1, y0
  43              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  44 0054 131A1A00 		slli	s4,s4,1	#, iftmp.50_16, tmp107
  45              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  46 0058 131E1E00 		slli	t3,t3,1	#, iftmp.51_20, tmp111
  47              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
  48 005c 37060000 		lui	a2,%hi(framebuffer)	# tmp116,
  49              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
  50 0060 130AFAFF 		addi	s4,s4,-1	#, iftmp.50_16, iftmp.50_16
  51              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  52 0064 B308A040 		neg	a7,a0	# dy, _8
  53              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
  54 0068 130EFEFF 		addi	t3,t3,-1	#, iftmp.51_20, iftmp.51_20
  55 006c 3307A940 		sub	a4,s2,a0	# err, dx, _8
  56              	# gfx_lib_hdmi.h:202:   if  ( x > (HRES-1) ) return;
  57 0070 1308F004 		li	a6,79		# tmp94,
  58              	# gfx_lib_hdmi.h:203:   if  ( y > (VRES-1) ) return;
  59 0074 1303B003 		li	t1,59		# tmp115,
  60              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
  61 0078 13060600 		addi	a2,a2,%lo(framebuffer)	# tmp117, tmp116,
  62 007c 9306F0FF 		li	a3,-1		# tmp118,
  63              	.L4:
  64              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
  65 0080 93172400 		slli	a5,s0,2	#, tmp97, y0
  66 0084 B3878700 		add	a5,a5,s0	# y0, tmp98, tmp97
  67 0088 93974700 		slli	a5,a5,4	#, tmp99, tmp98
  68 008c B3879700 		add	a5,a5,s1	# x0, tmp100, tmp99
  69              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
  70 0090 93972700 		slli	a5,a5,2	#, tmp101, tmp100
  71              	# gfx_lib_hdmi.h:220:     e2 = 2*err;
  72 0094 93151700 		slli	a1,a4,1	#, e2, err
  73              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
  74 0098 B387C700 		add	a5,a5,a2	# tmp117, tmp102, tmp101
  75              	# gfx_lib_hdmi.h:202:   if  ( x > (HRES-1) ) return;
  76 009c 63669800 		bgtu	s1,a6,.L5	#, x0, tmp94,
  77              	# gfx_lib_hdmi.h:203:   if  ( y > (VRES-1) ) return;
  78 00a0 63648300 		bgtu	s0,t1,.L5	#, y0, tmp115,
  79              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
  80 00a4 23A0D700 		sw	a3,0(a5)	# tmp118, *_36
  81              	.L5:
  82              	# gfx_lib_hdmi.h:218:     if (x0 == x1 && y0 == y1) break;
  83 00a8 63809902 		beq	s3,s1,.L14	#, x1, x0,
  84              	.L6:
  85              	# gfx_lib_hdmi.h:221:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
  86 00ac 63C61501 		bgt	a7,a1,.L8	#, dy, e2,
  87 00b0 3307A740 		sub	a4,a4,a0	# err, err, _8
  88              	# gfx_lib_hdmi.h:221:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
  89 00b4 B3844401 		add	s1,s1,s4	# iftmp.50_16, x0, x0
  90              	.L8:
  91              	# gfx_lib_hdmi.h:222:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  92 00b8 E344B9FC 		blt	s2,a1,.L4	#, dx, e2,
  93              	# gfx_lib_hdmi.h:222:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  94 00bc 33072701 		add	a4,a4,s2	# dx, err, err
  95              	# gfx_lib_hdmi.h:222:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
  96 00c0 3304C401 		add	s0,s0,t3	# iftmp.51_20, y0, y0
  97 00c4 6FF0DFFB 		j	.L4		#
  98              	.L14:
  99              	# gfx_lib_hdmi.h:218:     if (x0 == x1 && y0 == y1) break;
 100 00c8 E3928AFE 		bne	s5,s0,.L6	#, y1, y0,
 101              	# gfx_lib_hdmi.h:224: }
 102 00cc 8320C101 		lw	ra,28(sp)		#,
 103 00d0 03248101 		lw	s0,24(sp)		#,
 104 00d4 83244101 		lw	s1,20(sp)		#,
 105 00d8 03290101 		lw	s2,16(sp)		#,
 106 00dc 8329C100 		lw	s3,12(sp)		#,
 107 00e0 032A8100 		lw	s4,8(sp)		#,
 108 00e4 832A4100 		lw	s5,4(sp)		#,
 109 00e8 13010102 		addi	sp,sp,32	#,,
 110 00ec 67800000 		jr	ra		#
 112              		.align	2
 113              		.globl	dma_action
 115              	dma_action:
 116              	# kianv_stdlib.h:51:   *( (volatile uint32_t*) DMA_SRC  ) = src;
 117 00f0 B7070030 		li	a5,805306368		# tmp77,
 118 00f4 23A6A702 		sw	a0,44(a5)	# src, MEM[(volatile uint32_t *)805306412B]
 119              	# kianv_stdlib.h:52:   *( (volatile uint32_t*) DMA_DST  ) = dst;
 120 00f8 23A8B702 		sw	a1,48(a5)	# dst, MEM[(volatile uint32_t *)805306416B]
 121              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 122 00fc 23AAC702 		sw	a2,52(a5)	# len, MEM[(volatile uint32_t *)805306420B]
 123              	# kianv_stdlib.h:54:   *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
 124 0100 23ACD702 		sw	a3,56(a5)	# ctrl, MEM[(volatile uint32_t *)805306424B]
 125              	# kianv_stdlib.h:55: }
 126 0104 67800000 		ret	
 128              		.align	2
 129              		.globl	_sendCmd
 131              	_sendCmd:
 132              	# kianv_stdlib.h:62:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 133 0108 B7070030 		li	a5,805306368		# tmp75,
 134 010c 23A6A700 		sw	a0,12(a5)	# c, MEM[(volatile uint32_t *)805306380B]
 135              	# kianv_stdlib.h:64: }
 136 0110 67800000 		ret	
 138              		.align	2
 139              		.globl	_sendData
 141              	_sendData:
 142              	# kianv_stdlib.h:71:     *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
 143 0114 13650510 		ori	a0,a0,256	#, _3, tmp78
 144              	# kianv_stdlib.h:71:     *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
 145 0118 B7070030 		li	a5,805306368		# tmp77,
 146 011c 23A6A700 		sw	a0,12(a5)	# _3, MEM[(volatile uint32_t *)805306380B]
 147              	# kianv_stdlib.h:73: }
 148 0120 67800000 		ret	
 150              		.align	2
 151              		.globl	init_oled1331
 153              	init_oled1331:
 154              	# kianv_stdlib.h:62:     *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
 155 0124 B7070030 		li	a5,805306368		# tmp73,
 156 0128 1307E00A 		li	a4,174		# tmp74,
 157 012c 23A6E700 		sw	a4,12(a5)	# tmp74, MEM[(volatile uint32_t *)805306380B]
 158 0130 13071008 		li	a4,129		# tmp77,
 159 0134 23A6E700 		sw	a4,12(a5)	# tmp77, MEM[(volatile uint32_t *)805306380B]
 160 0138 13071009 		li	a4,145		# tmp80,
 161 013c 23A6E700 		sw	a4,12(a5)	# tmp80, MEM[(volatile uint32_t *)805306380B]
 162 0140 13072008 		li	a4,130		# tmp83,
 163 0144 23A6E700 		sw	a4,12(a5)	# tmp83, MEM[(volatile uint32_t *)805306380B]
 164 0148 13070008 		li	a4,128		# tmp86,
 165 014c 23A6E700 		sw	a4,12(a5)	# tmp86, MEM[(volatile uint32_t *)805306380B]
 166 0150 13073008 		li	a4,131		# tmp89,
 167 0154 23A6E700 		sw	a4,12(a5)	# tmp89, MEM[(volatile uint32_t *)805306380B]
 168 0158 1307D007 		li	a4,125		# tmp92,
 169 015c 23A6E700 		sw	a4,12(a5)	# tmp92, MEM[(volatile uint32_t *)805306380B]
 170 0160 13077008 		li	a4,135		# tmp95,
 171 0164 23A6E700 		sw	a4,12(a5)	# tmp95, MEM[(volatile uint32_t *)805306380B]
 172 0168 13076000 		li	a4,6		# tmp98,
 173 016c 23A6E700 		sw	a4,12(a5)	# tmp98, MEM[(volatile uint32_t *)805306380B]
 174 0170 1307A008 		li	a4,138		# tmp101,
 175 0174 23A6E700 		sw	a4,12(a5)	# tmp101, MEM[(volatile uint32_t *)805306380B]
 176 0178 13074006 		li	a4,100		# tmp104,
 177 017c 23A6E700 		sw	a4,12(a5)	# tmp104, MEM[(volatile uint32_t *)805306380B]
 178 0180 9306B008 		li	a3,139		# tmp107,
 179 0184 23A6D700 		sw	a3,12(a5)	# tmp107, MEM[(volatile uint32_t *)805306380B]
 180 0188 93068007 		li	a3,120		# tmp110,
 181 018c 23A6D700 		sw	a3,12(a5)	# tmp110, MEM[(volatile uint32_t *)805306380B]
 182 0190 9306C008 		li	a3,140		# tmp113,
 183 0194 23A6D700 		sw	a3,12(a5)	# tmp113, MEM[(volatile uint32_t *)805306380B]
 184 0198 23A6E700 		sw	a4,12(a5)	# tmp104, MEM[(volatile uint32_t *)805306380B]
 185 019c 1307000A 		li	a4,160		# tmp119,
 186 01a0 23A6E700 		sw	a4,12(a5)	# tmp119, MEM[(volatile uint32_t *)805306380B]
 187 01a4 13072007 		li	a4,114		# tmp122,
 188 01a8 23A6E700 		sw	a4,12(a5)	# tmp122, MEM[(volatile uint32_t *)805306380B]
 189 01ac 1307100A 		li	a4,161		# tmp125,
 190 01b0 23A6E700 		sw	a4,12(a5)	# tmp125, MEM[(volatile uint32_t *)805306380B]
 191 01b4 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 192 01b8 1307200A 		li	a4,162		# tmp130,
 193 01bc 23A6E700 		sw	a4,12(a5)	# tmp130, MEM[(volatile uint32_t *)805306380B]
 194 01c0 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 195 01c4 1307400A 		li	a4,164		# tmp135,
 196 01c8 23A6E700 		sw	a4,12(a5)	# tmp135, MEM[(volatile uint32_t *)805306380B]
 197 01cc 1307800A 		li	a4,168		# tmp138,
 198 01d0 23A6E700 		sw	a4,12(a5)	# tmp138, MEM[(volatile uint32_t *)805306380B]
 199 01d4 1307F003 		li	a4,63		# tmp141,
 200 01d8 23A6E700 		sw	a4,12(a5)	# tmp141, MEM[(volatile uint32_t *)805306380B]
 201 01dc 1307D00A 		li	a4,173		# tmp144,
 202 01e0 23A6E700 		sw	a4,12(a5)	# tmp144, MEM[(volatile uint32_t *)805306380B]
 203 01e4 1307E008 		li	a4,142		# tmp147,
 204 01e8 23A6E700 		sw	a4,12(a5)	# tmp147, MEM[(volatile uint32_t *)805306380B]
 205 01ec 1307000B 		li	a4,176		# tmp150,
 206 01f0 23A6E700 		sw	a4,12(a5)	# tmp150, MEM[(volatile uint32_t *)805306380B]
 207 01f4 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 208 01f8 1307100B 		li	a4,177		# tmp155,
 209 01fc 23A6E700 		sw	a4,12(a5)	# tmp155, MEM[(volatile uint32_t *)805306380B]
 210 0200 13071003 		li	a4,49		# tmp158,
 211 0204 23A6E700 		sw	a4,12(a5)	# tmp158, MEM[(volatile uint32_t *)805306380B]
 212 0208 1307300B 		li	a4,179		# tmp161,
 213 020c 23A6E700 		sw	a4,12(a5)	# tmp161, MEM[(volatile uint32_t *)805306380B]
 214 0210 1307000F 		li	a4,240		# tmp164,
 215 0214 23A6E700 		sw	a4,12(a5)	# tmp164, MEM[(volatile uint32_t *)805306380B]
 216 0218 1307B00B 		li	a4,187		# tmp167,
 217 021c 23A6E700 		sw	a4,12(a5)	# tmp167, MEM[(volatile uint32_t *)805306380B]
 218 0220 1307A003 		li	a4,58		# tmp170,
 219 0224 23A6E700 		sw	a4,12(a5)	# tmp170, MEM[(volatile uint32_t *)805306380B]
 220 0228 1307E00B 		li	a4,190		# tmp173,
 221 022c 23A6E700 		sw	a4,12(a5)	# tmp173, MEM[(volatile uint32_t *)805306380B]
 222 0230 1307E003 		li	a4,62		# tmp176,
 223 0234 23A6E700 		sw	a4,12(a5)	# tmp176, MEM[(volatile uint32_t *)805306380B]
 224 0238 1307E002 		li	a4,46		# tmp179,
 225 023c 23A6E700 		sw	a4,12(a5)	# tmp179, MEM[(volatile uint32_t *)805306380B]
 226 0240 1307F00A 		li	a4,175		# tmp182,
 227 0244 23A6E700 		sw	a4,12(a5)	# tmp182, MEM[(volatile uint32_t *)805306380B]
 228              	# kianv_stdlib.h:120: }
 229 0248 67800000 		ret	
 231              		.align	2
 232              		.globl	set_reg
 234              	set_reg:
 235              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 236 024c 03270500 		lw	a4,0(a0)		# _1,* p
 237              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 238 0250 93071000 		li	a5,1		# tmp85,
 239 0254 B397B700 		sll	a5,a5,a1	# tmp88, _12, tmp85
 240              	# kianv_stdlib.h:124:     if (bit) {
 241 0258 63080600 		beq	a2,zero,.L20	#, tmp89,,
 242              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 243 025c B3E7E700 		or	a5,a5,a4	# _1, _5, _12
 244 0260 2320F500 		sw	a5,0(a0)	# _5,* p
 245 0264 67800000 		ret	
 246              	.L20:
 247              	# kianv_stdlib.h:127:       *p &= ~( 0x01 << (gpio & 0x1f));
 248 0268 93C7F7FF 		not	a5,a5	# tmp86, _12
 249              	# kianv_stdlib.h:127:       *p &= ~( 0x01 << (gpio & 0x1f));
 250 026c B3F7E700 		and	a5,a5,a4	# _13, _18, tmp86
 251 0270 2320F500 		sw	a5,0(a0)	# _18,* p
 252              	# kianv_stdlib.h:129: }
 253 0274 67800000 		ret	
 255              		.align	2
 256              		.globl	gpio_set_value
 258              	gpio_set_value:
 259              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 260 0278 37070030 		li	a4,805306368		# tmp86,
 261 027c 8326C701 		lw	a3,28(a4)		# _7,
 262              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 263 0280 93071000 		li	a5,1		# tmp84,
 264 0284 B397A700 		sll	a5,a5,a0	# tmp94, _6, tmp84
 265              	# kianv_stdlib.h:124:     if (bit) {
 266 0288 63880500 		beq	a1,zero,.L23	#, tmp95,,
 267              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 268 028c B3E7D700 		or	a5,a5,a3	# _7, _11, _6
 269 0290 232EF700 		sw	a5,28(a4)	# _11,
 270              	# kianv_stdlib.h:133: }
 271 0294 67800000 		ret	
 272              	.L23:
 273              	# kianv_stdlib.h:127:       *p &= ~( 0x01 << (gpio & 0x1f));
 274 0298 93C7F7FF 		not	a5,a5	# tmp91, _6
 275              	# kianv_stdlib.h:127:       *p &= ~( 0x01 << (gpio & 0x1f));
 276 029c B3F7D700 		and	a5,a5,a3	# _12, _17, tmp91
 277 02a0 232EF700 		sw	a5,28(a4)	# _17,
 278              	# kianv_stdlib.h:133: }
 279 02a4 67800000 		ret	
 281              		.align	2
 282              		.globl	gpio_get_input_value
 284              	gpio_get_input_value:
 285              	# kianv_stdlib.h:136:   uint32_t read = IO_IN(GPIO_INPUT);
 286 02a8 B7070030 		li	a5,805306368		# tmp77,
 287 02ac 83A70702 		lw	a5,32(a5)		# read, MEM[(volatile uint32_t *)805306400B]
 288              	# kianv_stdlib.h:139:   return ((read >> gpio) & 0x01);
 289 02b0 33D5A700 		srl	a0,a5,a0	# tmp80, tmp79, read
 290              	# kianv_stdlib.h:140: }
 291 02b4 13751500 		andi	a0,a0,1	#,, tmp79
 292 02b8 67800000 		ret	
 294              		.align	2
 295              		.globl	gpio_set_direction
 297              	gpio_set_direction:
 298              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 299 02bc 37070030 		li	a4,805306368		# tmp86,
 300 02c0 83264701 		lw	a3,20(a4)		# _4,
 301              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 302 02c4 93071000 		li	a5,1		# tmp84,
 303 02c8 B397A700 		sll	a5,a5,a0	# tmp94, _19, tmp84
 304              	# kianv_stdlib.h:124:     if (bit) {
 305 02cc 63880500 		beq	a1,zero,.L27	#, tmp95,,
 306              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 307 02d0 B3E7D700 		or	a5,a5,a3	# _4, _8, _19
 308 02d4 232AF700 		sw	a5,20(a4)	# _8,
 309 02d8 67800000 		ret	
 310              	.L27:
 311              	# kianv_stdlib.h:127:       *p &= ~( 0x01 << (gpio & 0x1f));
 312 02dc 93C7F7FF 		not	a5,a5	# tmp91, _19
 313              	# kianv_stdlib.h:127:       *p &= ~( 0x01 << (gpio & 0x1f));
 314 02e0 B3F7D700 		and	a5,a5,a3	# _12, _17, tmp91
 315 02e4 232AF700 		sw	a5,20(a4)	# _17,
 316              	# kianv_stdlib.h:144: }
 317 02e8 67800000 		ret	
 319              		.align	2
 320              		.globl	get_cycles
 322              	get_cycles:
 323 02ec 130101FF 		addi	sp,sp,-16	#,,
 324              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 325              	 #APP
 326              	# 150 "kianv_stdlib.h" 1
   1              	#include <stdint.h>
   2              	#include <math.h>
   3              	#include "SSD1331.h"
   4              	
   5              	/* kian hardware register */
   6              	#define IO_BASE 0x30000000
   7              	#define UART_TX             (volatile uint32_t *) (IO_BASE + 0x0000)
   8              	#define UART_READY          (volatile uint32_t *) (IO_BASE + 0x0000)
   9              	#define VIDEOENABLE         (volatile uint32_t *) (IO_BASE + 0x0008)
  10              	#define VIDEO               (volatile uint32_t *) (IO_BASE + 0x0008)
  11              	#define VIDEO_RAW           (volatile uint32_t *) (IO_BASE + 0x000C)
  12              	#define CPU_FREQ            (volatile uint32_t *) (IO_BASE + 0x0010)
  13              	// gpio hack stuff
  14              	#define GPIO_DIR            ( volatile uint32_t  *) (IO_BASE + 0x0014)
  15              	#define GPIO_PULLUP         ( volatile uint32_t  *) (IO_BASE + 0x0018) // not implemented
  16              	#define GPIO_OUTPUT         ( volatile uint32_t  *) (IO_BASE + 0x001C)
  17              	#define GPIO_INPUT          ( volatile uint32_t  *) (IO_BASE + 0x0020)
  18              	#define IO_OUT(reg, value) *((volatile uint32_t  *) (reg)) = (value)
  19              	#define IO_IN(reg)         *((volatile uint32_t  *) reg)
  20              	// dma stuff
  21              	#define DMA_SRC             ( volatile uint32_t  *) (IO_BASE + 0x002C)
  22              	#define DMA_DST             ( volatile uint32_t  *) (IO_BASE + 0x0030)
  23              	#define DMA_LEN             ( volatile uint32_t  *) (IO_BASE + 0x0034)
  24              	#define DMA_CTRL            ( volatile uint32_t  *) (IO_BASE + 0x0038)
  25              	#define DMA_MEMCPY          (1 << 0)
  26              	#define DMA_MEMSET          (1 << 1)
  27              	
  28              	#define GPIO_INPUT_PIN  0
  29              	#define GPIO_OUTPUT_PIN 1
  30              	//#define RV32_FASTCODE __attribute((section(".fastcode")))
  31              	#define RV32_FASTCODE
  32              	
  33              	//__attribute((section(".fastcode")))
  34              	
  35              	#define RED   "\x1B[31m"
  36              	#define GRN   "\x1B[32m"
  37              	#define YEL   "\x1B[33m"
  38              	#define BLU   "\x1B[34m"
  39              	#define MAG   "\x1B[35m"
  40              	#define CYN   "\x1B[36m"
  41              	#define WHT   "\x1B[37m"
  42              	#define RESET "\x1B[0m"
  43              	
  44              	#define CLS       "\x1B[2J"
  45              	#define BOLD      "\x1B[1m"
  46              	#define BLINK     "\x1B[5m"
  47              	#define BLINK_OFF "\x1B[25m"
  48              	
  49              	// dma stuff
  50              	void dma_action(uint32_t src, uint32_t dst, uint32_t len, uint32_t ctrl) {
  51              	  *( (volatile uint32_t*) DMA_SRC  ) = src;
  52              	  *( (volatile uint32_t*) DMA_DST  ) = dst;
  53              	  *( (volatile uint32_t*) DMA_LEN  ) = len;
  54              	  *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
  55              	}
  56              	
  57              	void _sendCmd(uint8_t c)
  58              	{
  59              	    //digitalWrite(_dc,LOW);
  60              	    //digitalWrite(_cs,LOW);
  61              	    // SPI.transfer(c);
  62              	    *((volatile uint32_t *) VIDEO_RAW) = ((0x00) << 8) | c;
  63              	    //digitalWrite(_cs,HIGH);
  64              	}
  65              	
  66              	void _sendData(uint8_t c)
  67              	{
  68              	    //digitalWrite(_dc,LOW);
  69              	    //digitalWrite(_cs,LOW);
  70              	    // SPI.transfer(c);
  71              	    *((volatile uint32_t *) VIDEO_RAW) = ((0x01) << 8) | c;
  72              	    //digitalWrite(_cs,HIGH);
  73              	}
  74              	
  75              	void init_oled1331(void)
  76              	{
  77              	    //pinMode(_dc, OUTPUT);
  78              	    //pinMode(_cs, OUTPUT);
  79              	
  80              	    //SPI.begin();
  81              	
  82              	    _sendCmd(CMD_DISPLAY_OFF);	//Display Off
  83              	    _sendCmd(CMD_SET_CONTRAST_A);	//Set contrast for color A
  84              	    _sendCmd(0x91);		//145
  85              	    _sendCmd(CMD_SET_CONTRAST_B);	//Set contrast for color B
  86              	    _sendCmd(0x80);		//80
  87              	    _sendCmd(CMD_SET_CONTRAST_C);	//Set contrast for color C
  88              	    _sendCmd(0x7D);		//125
  89              	    _sendCmd(CMD_MASTER_CURRENT_CONTROL);	//master current control
  90              	    _sendCmd(0x06);		//6
  91              	    _sendCmd(CMD_SET_PRECHARGE_SPEED_A);	//Set Second Pre-change Speed For ColorA
  92              	    _sendCmd(0x64);		//100
  93              	    _sendCmd(CMD_SET_PRECHARGE_SPEED_B);	//Set Second Pre-change Speed For ColorB
  94              	    _sendCmd(0x78);		//120
  95              	    _sendCmd(CMD_SET_PRECHARGE_SPEED_C);	//Set Second Pre-change Speed For ColorC
  96              	    _sendCmd(0x64);		//100
  97              	    _sendCmd(CMD_SET_REMAP);	//set remap & data format
  98              	    _sendCmd(0x72);		//0x72
  99              	    _sendCmd(CMD_SET_DISPLAY_START_LINE);	//Set display Start Line
 100              	    _sendCmd(0x0);
 101              	    _sendCmd(CMD_SET_DISPLAY_OFFSET);	//Set display offset
 102              	    _sendCmd(0x0);
 103              	    _sendCmd(CMD_NORMAL_DISPLAY);	//Set display mode
 104              	    _sendCmd(CMD_SET_MULTIPLEX_RATIO);	//Set multiplex ratio
 105              	    _sendCmd(0x3F);
 106              	    _sendCmd(CMD_SET_MASTER_CONFIGURE);	//Set master configuration
 107              	    _sendCmd(0x8E);
 108              	    _sendCmd(CMD_POWER_SAVE_MODE);	//Set Power Save Mode
 109              	    _sendCmd(0x00);		//0x00
 110              	    _sendCmd(CMD_PHASE_PERIOD_ADJUSTMENT);	//phase 1 and 2 period adjustment
 111              	    _sendCmd(0x31);		//0x31
 112              	    _sendCmd(CMD_DISPLAY_CLOCK_DIV);	//display clock divider/oscillator frequency
 113              	    _sendCmd(0xF0);
 114              	    _sendCmd(CMD_SET_PRECHARGE_VOLTAGE);	//Set Pre-Change Level
 115              	    _sendCmd(0x3A);
 116              	    _sendCmd(CMD_SET_V_VOLTAGE);	//Set vcomH
 117              	    _sendCmd(0x3E);
 118              	    _sendCmd(CMD_DEACTIVE_SCROLLING);	//disable scrolling
 119              	    _sendCmd(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);	//set display on
 120              	}
 121              	
 122              	
 123              	void set_reg(volatile uint32_t *p, int gpio, int bit) {
 124              	    if (bit) {
 125              	      *p |=  (0x01 << (gpio & 0x1f));
 126              	    } else {
 127              	      *p &= ~( 0x01 << (gpio & 0x1f));
 128              	    }
 129              	}
 130              	
 131              	void gpio_set_value(int gpio, int bit) {
 132              	    set_reg(GPIO_OUTPUT, gpio, bit);
 133              	}
 134              	
 135              	uint32_t gpio_get_input_value(int gpio) {
 136              	  uint32_t read = IO_IN(GPIO_INPUT);
 137              	
 138              	  //  return ((read & (1<<gpio)) >> gpio);
 139              	  return ((read >> gpio) & 0x01);
 140              	}
 141              	
 142              	void gpio_set_direction(int gpio, int bit) {
 143              	    set_reg(GPIO_DIR, gpio, bit);
 144              	}
 145              	
 146              	uint64_t get_cycles() {
 147              	  volatile uint32_t tmph0;
 148              	  volatile uint32_t tmpl0;
 149              	
 150 02f0 F32700C8 	  asm volatile ("rdcycleh %0" : "=r"(tmph0));
 151              	  asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 327              		rdcycleh a5	# tmp78
 328              	# 0 "" 2
 329              	 #NO_APP
 330 02f4 2324F100 		sw	a5,8(sp)	# tmp78, tmph0
 331              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 332              	 #APP
 333              	# 151 "kianv_stdlib.h" 1
 152              	
 334              		rdcycle  a5	# tmp79
 335              	# 0 "" 2
 336              	 #NO_APP
 337 02fc 2326F100 		sw	a5,12(sp)	# tmp79, tmpl0
 338              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 339 0300 83258100 		lw	a1,8(sp)		# tmph0.0_1, tmph0
 340              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 341 0304 0325C100 		lw	a0,12(sp)		# tmpl0.1_4, tmpl0
 342              	# kianv_stdlib.h:155: }
 343 0308 13010101 		addi	sp,sp,16	#,,
 344 030c 67800000 		jr	ra		#
 346              		.align	2
 347              		.globl	wait_cycles
 349              	wait_cycles:
 350 0310 130101FF 		addi	sp,sp,-16	#,,
 351              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 352              	 #APP
 353              	# 150 "kianv_stdlib.h" 1
 354              		rdcycleh a5	# tmp86
 355              	# 0 "" 2
 356              	 #NO_APP
 357 0318 2320F100 		sw	a5,0(sp)	# tmp86, tmph0
 358              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 359              	 #APP
 360              	# 151 "kianv_stdlib.h" 1
 361              		rdcycle  a5	# tmp87
 362              	# 0 "" 2
 363              	 #NO_APP
 364 0320 2322F100 		sw	a5,4(sp)	# tmp87, tmpl0
 365              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 366 0324 83270100 		lw	a5,0(sp)		# tmph0.0_5, tmph0
 367              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 368 0328 03264100 		lw	a2,4(sp)		# tmpl0.1_8, tmpl0
 369              	# kianv_stdlib.h:162:   uint64_t lim = get_cycles() + wait;
 370 032c B387B700 		add	a5,a5,a1	# wait, tmp126, tmph0.0_5
 371 0330 3306C500 		add	a2,a0,a2	# tmpl0.1_8, tmp129, wait
 372 0334 3335A600 		sltu	a0,a2,a0	# wait, tmp98, tmp129
 373 0338 3307F500 		add	a4,a0,a5	# tmp126, tmp100, tmp98
 374              	.L34:
 375              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 376              	 #APP
 377              	# 150 "kianv_stdlib.h" 1
 378              		rdcycleh a5	# tmp101
 379              	# 0 "" 2
 380              	 #NO_APP
 381 0340 2324F100 		sw	a5,8(sp)	# tmp101, tmph0
 382              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 383              	 #APP
 384              	# 151 "kianv_stdlib.h" 1
 385              		rdcycle  a5	# tmp102
 386              	# 0 "" 2
 387              	 #NO_APP
 388 0348 2326F100 		sw	a5,12(sp)	# tmp102, tmpl0
 389              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 390 034c 83278100 		lw	a5,8(sp)		# tmph0.0_11, tmph0
 391              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 392 0350 8326C100 		lw	a3,12(sp)		# tmpl0.1_14, tmpl0
 393              	# kianv_stdlib.h:163:   while (get_cycles() < lim)
 394 0354 E3E4E7FE 		bgtu	a4,a5,.L34	#, tmp100, tmph0.0_11,
 395 0358 6314F700 		bne	a4,a5,.L31	#, tmp100, tmph0.0_11,
 396 035c E3E0C6FE 		bgtu	a2,a3,.L34	#, tmp129, tmpl0.1_14,
 397              	.L31:
 398              	# kianv_stdlib.h:165: }
 399 0360 13010101 		addi	sp,sp,16	#,,
 400 0364 67800000 		jr	ra		#
 402              		.align	2
 403              		.globl	usleep
 405              	usleep:
 406              	# kianv_stdlib.h:168:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 407 0368 63080506 		beq	a0,zero,.L45	#, us,,
 408              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 409 036c B7070030 		li	a5,805306368		# tmp91,
 410              	# kianv_stdlib.h:167: void usleep(uint32_t us) {
 411 0370 130101FF 		addi	sp,sp,-16	#,,
 412              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 413 0374 83A70701 		lw	a5,16(a5)		# _20, MEM[(volatile uint32_t *)805306384B]
 414              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 415              	 #APP
 416              	# 150 "kianv_stdlib.h" 1
 417              		rdcycleh a4	# tmp92
 418              	# 0 "" 2
 419              	 #NO_APP
 420 037c 2324E100 		sw	a4,8(sp)	# tmp92, tmph0
 421              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 422              	 #APP
 423              	# 151 "kianv_stdlib.h" 1
 424              		rdcycle  a3	# tmp93
 425              	# 0 "" 2
 426              	# kianv_stdlib.h:168:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 427              	 #NO_APP
 428 0384 37470F00 		li	a4,999424		# tmp97,
 429 0388 13070724 		addi	a4,a4,576	#, tmp96, tmp97
 430 038c B3D7E702 		divu	a5,a5,a4	# tmp96, tmp95, _20
 431              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 432 0390 2326D100 		sw	a3,12(sp)	# tmp93, tmpl0
 433              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 434 0394 03278100 		lw	a4,8(sp)		# tmph0.0_7, tmph0
 435              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 436 0398 0326C100 		lw	a2,12(sp)		# tmpl0.1_10, tmpl0
 437              	# kianv_stdlib.h:168:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 438 039c B387A702 		mul	a5,a5,a0	# tmp98, tmp95, us
 439              	# kianv_stdlib.h:162:   uint64_t lim = get_cycles() + wait;
 440 03a0 3386C700 		add	a2,a5,a2	# tmpl0.1_10, tmp141, tmp98
 441 03a4 B337F600 		sltu	a5,a2,a5	# tmp98, tmp110, tmp141
 442 03a8 B387E700 		add	a5,a5,a4	# tmph0.0_7, tmp112, tmp110
 443              	.L42:
 444              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 445              	 #APP
 446              	# 150 "kianv_stdlib.h" 1
 447              		rdcycleh a4	# tmp113
 448              	# 0 "" 2
 449              	 #NO_APP
 450 03b0 2320E100 		sw	a4,0(sp)	# tmp113, tmph0
 451              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 452              	 #APP
 453              	# 151 "kianv_stdlib.h" 1
 454              		rdcycle  a4	# tmp114
 455              	# 0 "" 2
 456              	 #NO_APP
 457 03b8 2322E100 		sw	a4,4(sp)	# tmp114, tmpl0
 458              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 459 03bc 03270100 		lw	a4,0(sp)		# tmph0.0_14, tmph0
 460              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 461 03c0 83264100 		lw	a3,4(sp)		# tmpl0.1_17, tmpl0
 462              	# kianv_stdlib.h:163:   while (get_cycles() < lim)
 463 03c4 E364F7FE 		bgtu	a5,a4,.L42	#, tmp112, tmph0.0_14,
 464 03c8 6394E700 		bne	a5,a4,.L36	#, tmp112, tmph0.0_14,
 465 03cc E3E0C6FE 		bgtu	a2,a3,.L42	#, tmp141, tmpl0.1_17,
 466              	.L36:
 467              	# kianv_stdlib.h:169: }
 468 03d0 13010101 		addi	sp,sp,16	#,,
 469 03d4 67800000 		jr	ra		#
 470              	.L45:
 471 03d8 67800000 		ret	
 473              		.align	2
 474              		.globl	msleep
 476              	msleep:
 477              	# kianv_stdlib.h:172:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 478 03dc 63060506 		beq	a0,zero,.L57	#, ms,,
 479              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 480 03e0 B7070030 		li	a5,805306368		# tmp91,
 481              	# kianv_stdlib.h:171: void msleep(uint32_t ms) {
 482 03e4 130101FF 		addi	sp,sp,-16	#,,
 483              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 484 03e8 83A70701 		lw	a5,16(a5)		# _20, MEM[(volatile uint32_t *)805306384B]
 485              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 486              	 #APP
 487              	# 150 "kianv_stdlib.h" 1
 488              		rdcycleh a4	# tmp92
 489              	# 0 "" 2
 490              	 #NO_APP
 491 03f0 2324E100 		sw	a4,8(sp)	# tmp92, tmph0
 492              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 493              	 #APP
 494              	# 151 "kianv_stdlib.h" 1
 495              		rdcycle  a4	# tmp93
 496              	# 0 "" 2
 497              	# kianv_stdlib.h:172:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 498              	 #NO_APP
 499 03f8 9306803E 		li	a3,1000		# tmp95,
 500 03fc B3D7D702 		divu	a5,a5,a3	# tmp95, tmp96, _20
 501              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 502 0400 2326E100 		sw	a4,12(sp)	# tmp93, tmpl0
 503              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 504 0404 03278100 		lw	a4,8(sp)		# tmph0.0_7, tmph0
 505              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 506 0408 0326C100 		lw	a2,12(sp)		# tmpl0.1_10, tmpl0
 507              	# kianv_stdlib.h:172:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 508 040c B387A702 		mul	a5,a5,a0	# tmp97, tmp96, ms
 509              	# kianv_stdlib.h:162:   uint64_t lim = get_cycles() + wait;
 510 0410 3386C700 		add	a2,a5,a2	# tmpl0.1_10, tmp140, tmp97
 511 0414 B337F600 		sltu	a5,a2,a5	# tmp97, tmp109, tmp140
 512 0418 B387E700 		add	a5,a5,a4	# tmph0.0_7, tmp111, tmp109
 513              	.L54:
 514              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 515              	 #APP
 516              	# 150 "kianv_stdlib.h" 1
 517              		rdcycleh a4	# tmp112
 518              	# 0 "" 2
 519              	 #NO_APP
 520 0420 2320E100 		sw	a4,0(sp)	# tmp112, tmph0
 521              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 522              	 #APP
 523              	# 151 "kianv_stdlib.h" 1
 524              		rdcycle  a4	# tmp113
 525              	# 0 "" 2
 526              	 #NO_APP
 527 0428 2322E100 		sw	a4,4(sp)	# tmp113, tmpl0
 528              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 529 042c 03270100 		lw	a4,0(sp)		# tmph0.0_14, tmph0
 530              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 531 0430 83264100 		lw	a3,4(sp)		# tmpl0.1_17, tmpl0
 532              	# kianv_stdlib.h:163:   while (get_cycles() < lim)
 533 0434 E364F7FE 		bgtu	a5,a4,.L54	#, tmp111, tmph0.0_14,
 534 0438 6394E700 		bne	a5,a4,.L48	#, tmp111, tmph0.0_14,
 535 043c E3E0C6FE 		bgtu	a2,a3,.L54	#, tmp140, tmpl0.1_17,
 536              	.L48:
 537              	# kianv_stdlib.h:173: }
 538 0440 13010101 		addi	sp,sp,16	#,,
 539 0444 67800000 		jr	ra		#
 540              	.L57:
 541 0448 67800000 		ret	
 543              		.align	2
 544              		.globl	sleep
 546              	sleep:
 547              	# kianv_stdlib.h:176:   if (sec) wait_cycles(sec * get_cpu_freq());
 548 044c 63020506 		beq	a0,zero,.L69	#, sec,,
 549              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 550 0450 B7070030 		li	a5,805306368		# tmp90,
 551              	# kianv_stdlib.h:175: void sleep(uint32_t sec) {
 552 0454 130101FF 		addi	sp,sp,-16	#,,
 553              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 554 0458 03A70701 		lw	a4,16(a5)		# _19, MEM[(volatile uint32_t *)805306384B]
 555              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 556              	 #APP
 557              	# 150 "kianv_stdlib.h" 1
 558              		rdcycleh a5	# tmp91
 559              	# 0 "" 2
 560              	 #NO_APP
 561 0460 2324F100 		sw	a5,8(sp)	# tmp91, tmph0
 562              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 563              	 #APP
 564              	# 151 "kianv_stdlib.h" 1
 565              		rdcycle  a5	# tmp92
 566              	# 0 "" 2
 567              	# kianv_stdlib.h:176:   if (sec) wait_cycles(sec * get_cpu_freq());
 568              	 #NO_APP
 569 0468 3305E502 		mul	a0,a0,a4	# tmp101, sec, _19
 570              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 571 046c 2326F100 		sw	a5,12(sp)	# tmp92, tmpl0
 572              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 573 0470 83278100 		lw	a5,8(sp)		# tmph0.0_6, tmph0
 574              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 575 0474 0327C100 		lw	a4,12(sp)		# tmpl0.1_9, tmpl0
 576              	# kianv_stdlib.h:162:   uint64_t lim = get_cycles() + wait;
 577 0478 3305A700 		add	a0,a4,a0	# tmp101, tmp136, tmpl0.1_9
 578 047c 3337E500 		sltu	a4,a0,a4	# tmpl0.1_9, tmp105, tmp136
 579 0480 3307F700 		add	a4,a4,a5	# tmph0.0_6, tmp107, tmp105
 580              	.L66:
 581              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 582              	 #APP
 583              	# 150 "kianv_stdlib.h" 1
 584              		rdcycleh a5	# tmp108
 585              	# 0 "" 2
 586              	 #NO_APP
 587 0488 2320F100 		sw	a5,0(sp)	# tmp108, tmph0
 588              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 589              	 #APP
 590              	# 151 "kianv_stdlib.h" 1
 591              		rdcycle  a5	# tmp109
 592              	# 0 "" 2
 593              	 #NO_APP
 594 0490 2322F100 		sw	a5,4(sp)	# tmp109, tmpl0
 595              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 596 0494 83270100 		lw	a5,0(sp)		# tmph0.0_13, tmph0
 597              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 598 0498 83264100 		lw	a3,4(sp)		# tmpl0.1_16, tmpl0
 599              	# kianv_stdlib.h:163:   while (get_cycles() < lim)
 600 049c E3E4E7FE 		bgtu	a4,a5,.L66	#, tmp107, tmph0.0_13,
 601 04a0 6314F700 		bne	a4,a5,.L60	#, tmp107, tmph0.0_13,
 602 04a4 E3E0A6FE 		bgtu	a0,a3,.L66	#, tmp136, tmpl0.1_16,
 603              	.L60:
 604              	# kianv_stdlib.h:177: }
 605 04a8 13010101 		addi	sp,sp,16	#,,
 606 04ac 67800000 		jr	ra		#
 607              	.L69:
 608 04b0 67800000 		ret	
 610              		.globl	__udivdi3
 611              		.align	2
 612              		.globl	nanoseconds
 614              	nanoseconds:
 615 04b4 130101FE 		addi	sp,sp,-32	#,,
 616 04b8 232E1100 		sw	ra,28(sp)	#,
 617              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 618              	 #APP
 619              	# 150 "kianv_stdlib.h" 1
 620              		rdcycleh a5	# tmp82
 621              	# 0 "" 2
 622              	 #NO_APP
 623 04c0 2324F100 		sw	a5,8(sp)	# tmp82, tmph0
 624              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 625              	 #APP
 626              	# 151 "kianv_stdlib.h" 1
 627              		rdcycle  a5	# tmp83
 628              	# 0 "" 2
 629              	 #NO_APP
 630 04c8 2326F100 		sw	a5,12(sp)	# tmp83, tmpl0
 631              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 632 04cc B7070030 		li	a5,805306368		# tmp85,
 633              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 634 04d0 83258100 		lw	a1,8(sp)		# tmph0.0_6, tmph0
 635              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 636 04d4 0325C100 		lw	a0,12(sp)		# tmpl0.1_9, tmpl0
 637              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 638 04d8 03A60701 		lw	a2,16(a5)		# _5, MEM[(volatile uint32_t *)805306384B]
 639              	# kianv_stdlib.h:180:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 640 04dc B7470F00 		li	a5,999424		# tmp98,
 641 04e0 93870724 		addi	a5,a5,576	#, tmp97, tmp98
 642              	# kianv_stdlib.h:180:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 643 04e4 3356F602 		divu	a2,a2,a5	# tmp97,, _5
 644 04e8 93060000 		li	a3,0		#,
 645 04ec 97000000 		call	__udivdi3		#
 645      E7800000 
 646              	# kianv_stdlib.h:181: }
 647 04f4 8320C101 		lw	ra,28(sp)		#,
 648 04f8 13010102 		addi	sp,sp,32	#,,
 649 04fc 67800000 		jr	ra		#
 651              		.align	2
 652              		.globl	milliseconds
 654              	milliseconds:
 655 0500 130101FE 		addi	sp,sp,-32	#,,
 656 0504 232E1100 		sw	ra,28(sp)	#,
 657              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 658              	 #APP
 659              	# 150 "kianv_stdlib.h" 1
 660              		rdcycleh a5	# tmp82
 661              	# 0 "" 2
 662              	 #NO_APP
 663 050c 2324F100 		sw	a5,8(sp)	# tmp82, tmph0
 664              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 665              	 #APP
 666              	# 151 "kianv_stdlib.h" 1
 667              		rdcycle  a5	# tmp83
 668              	# 0 "" 2
 669              	 #NO_APP
 670 0514 2326F100 		sw	a5,12(sp)	# tmp83, tmpl0
 671              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 672 0518 B7070030 		li	a5,805306368		# tmp85,
 673              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 674 051c 83258100 		lw	a1,8(sp)		# tmph0.0_6, tmph0
 675              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 676 0520 0325C100 		lw	a0,12(sp)		# tmpl0.1_9, tmpl0
 677              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 678 0524 03A60701 		lw	a2,16(a5)		# _5, MEM[(volatile uint32_t *)805306384B]
 679              	# kianv_stdlib.h:184:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 680 0528 9307803E 		li	a5,1000		# tmp96,
 681 052c 93060000 		li	a3,0		#,
 682 0530 3356F602 		divu	a2,a2,a5	# tmp96,, _5
 683 0534 97000000 		call	__udivdi3		#
 683      E7800000 
 684              	# kianv_stdlib.h:185: }
 685 053c 8320C101 		lw	ra,28(sp)		#,
 686 0540 13010102 		addi	sp,sp,32	#,,
 687 0544 67800000 		jr	ra		#
 689              		.align	2
 690              		.globl	seconds
 692              	seconds:
 693 0548 130101FE 		addi	sp,sp,-32	#,,
 694 054c 232E1100 		sw	ra,28(sp)	#,
 695              	# kianv_stdlib.h:150:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 696              	 #APP
 697              	# 150 "kianv_stdlib.h" 1
 698              		rdcycleh a5	# tmp81
 699              	# 0 "" 2
 700              	 #NO_APP
 701 0554 2324F100 		sw	a5,8(sp)	# tmp81, tmph0
 702              	# kianv_stdlib.h:151:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 703              	 #APP
 704              	# 151 "kianv_stdlib.h" 1
 705              		rdcycle  a5	# tmp82
 706              	# 0 "" 2
 707              	 #NO_APP
 708 055c 2326F100 		sw	a5,12(sp)	# tmp82, tmpl0
 709              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 710 0560 B7070030 		li	a5,805306368		# tmp84,
 711              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 712 0564 83258100 		lw	a1,8(sp)		# tmph0.0_5, tmph0
 713              	# kianv_stdlib.h:153:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 714 0568 0325C100 		lw	a0,12(sp)		# tmpl0.1_8, tmpl0
 715              	# kianv_stdlib.h:158:   return *((volatile uint32_t*) CPU_FREQ);
 716 056c 03A60701 		lw	a2,16(a5)		# _4, MEM[(volatile uint32_t *)805306384B]
 717              	# kianv_stdlib.h:188:   return get_cycles() / (uint64_t) (get_cpu_freq());
 718 0570 93060000 		li	a3,0		#,
 719 0574 97000000 		call	__udivdi3		#
 719      E7800000 
 720              	# kianv_stdlib.h:189: }
 721 057c 8320C101 		lw	ra,28(sp)		#,
 722 0580 13010102 		addi	sp,sp,32	#,,
 723 0584 67800000 		jr	ra		#
 725              		.align	2
 726              		.globl	putchar
 728              	putchar:
 729              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 730 0588 37070030 		li	a4,805306368		# tmp75,
 731              	.L79:
 732              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 733 058c 83270700 		lw	a5,0(a4)		# _1, MEM[(volatile uint32_t *)805306368B]
 734              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 735 0590 E38E07FE 		beq	a5,zero,.L79	#, _1,,
 736              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 737 0594 2320A700 		sw	a0,0(a4)	# c, MEM[(volatile uint32_t *)805306368B]
 738              	# kianv_stdlib.h:195:    if (c == 13) {
 739 0598 9307D000 		li	a5,13		# tmp77,
 740 059c 6304F500 		beq	a0,a5,.L83	#, c, tmp77,
 741              	# kianv_stdlib.h:198: }
 742 05a0 67800000 		ret	
 743              	.L83:
 744              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 745 05a4 9307A000 		li	a5,10		# tmp79,
 746 05a8 2320F700 		sw	a5,0(a4)	# tmp79, MEM[(volatile uint32_t *)805306368B]
 747              	# kianv_stdlib.h:198: }
 748 05ac 67800000 		ret	
 750              		.align	2
 751              		.globl	print_chr
 753              	print_chr:
 754 05b0 37070030 		li	a4,805306368		# tmp75,
 755              	.L85:
 756 05b4 83270700 		lw	a5,0(a4)		# _4, MEM[(volatile uint32_t *)805306368B]
 757 05b8 E38E07FE 		beq	a5,zero,.L85	#, _4,,
 758 05bc 2320A700 		sw	a0,0(a4)	# ch, MEM[(volatile uint32_t *)805306368B]
 759 05c0 9307D000 		li	a5,13		# tmp77,
 760 05c4 6304F500 		beq	a0,a5,.L89	#, ch, tmp77,
 761 05c8 67800000 		ret	
 762              	.L89:
 763 05cc 9307A000 		li	a5,10		# tmp79,
 764 05d0 2320F700 		sw	a5,0(a4)	# tmp79, MEM[(volatile uint32_t *)805306368B]
 765 05d4 67800000 		ret	
 767              		.align	2
 768              		.globl	print_char
 770              	print_char:
 771 05d8 37070030 		li	a4,805306368		# tmp75,
 772              	.L91:
 773 05dc 83270700 		lw	a5,0(a4)		# _4, MEM[(volatile uint32_t *)805306368B]
 774 05e0 E38E07FE 		beq	a5,zero,.L91	#, _4,,
 775 05e4 2320A700 		sw	a0,0(a4)	# ch, MEM[(volatile uint32_t *)805306368B]
 776 05e8 9307D000 		li	a5,13		# tmp77,
 777 05ec 6304F500 		beq	a0,a5,.L95	#, ch, tmp77,
 778 05f0 67800000 		ret	
 779              	.L95:
 780 05f4 9307A000 		li	a5,10		# tmp79,
 781 05f8 2320F700 		sw	a5,0(a4)	# tmp79, MEM[(volatile uint32_t *)805306368B]
 782 05fc 67800000 		ret	
 784              		.align	2
 785              		.globl	print_str
 787              	print_str:
 788              	# kianv_stdlib.h:209:   while (*p != 0) {
 789 0600 83460500 		lbu	a3,0(a0)	# _3, *p_6(D)
 790              	# kianv_stdlib.h:209:   while (*p != 0) {
 791 0604 638A0602 		beq	a3,zero,.L96	#, _3,,
 792              	# kianv_stdlib.h:210:     while (!*((volatile uint32_t*) UART_READY))
 793 0608 B7070030 		li	a5,805306368		# tmp77,
 794              	# kianv_stdlib.h:195:    if (c == 13) {
 795 060c 1306D000 		li	a2,13		# tmp80,
 796              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 797 0610 9305A000 		li	a1,10		# tmp83,
 798              	.L98:
 799              	# kianv_stdlib.h:210:     while (!*((volatile uint32_t*) UART_READY))
 800 0614 03A70700 		lw	a4,0(a5)		# _1, MEM[(volatile uint32_t *)805306368B]
 801              	# kianv_stdlib.h:210:     while (!*((volatile uint32_t*) UART_READY))
 802 0618 E30E07FE 		beq	a4,zero,.L98	#, _1,,
 803              	# kianv_stdlib.h:212:     putchar(*(p++));
 804 061c 13051500 		addi	a0,a0,1	#, p, p
 805              	.L99:
 806              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 807 0620 03A70700 		lw	a4,0(a5)		# _9, MEM[(volatile uint32_t *)805306368B]
 808              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 809 0624 E30E07FE 		beq	a4,zero,.L99	#, _9,,
 810              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 811 0628 23A0D700 		sw	a3,0(a5)	# _3, MEM[(volatile uint32_t *)805306368B]
 812              	# kianv_stdlib.h:195:    if (c == 13) {
 813 062c 6388C600 		beq	a3,a2,.L113	#, _3, tmp80,
 814              	# kianv_stdlib.h:209:   while (*p != 0) {
 815 0630 83460500 		lbu	a3,0(a0)	# _3, MEM[(char *)p_8]
 816              	# kianv_stdlib.h:209:   while (*p != 0) {
 817 0634 E39006FE 		bne	a3,zero,.L98	#, _3,,
 818              	.L96:
 819              	# kianv_stdlib.h:214: }
 820 0638 67800000 		ret	
 821              	.L113:
 822              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 823 063c 23A0B700 		sw	a1,0(a5)	# tmp83, MEM[(volatile uint32_t *)805306368B]
 824              	# kianv_stdlib.h:209:   while (*p != 0) {
 825 0640 83460500 		lbu	a3,0(a0)	# _3, MEM[(char *)p_8]
 826              	# kianv_stdlib.h:209:   while (*p != 0) {
 827 0644 E39806FC 		bne	a3,zero,.L98	#, _3,,
 828 0648 67800000 		ret	
 830              		.align	2
 831              		.globl	print_str_ln
 833              	print_str_ln:
 834              	# kianv_stdlib.h:209:   while (*p != 0) {
 835 064c 83460500 		lbu	a3,0(a0)	# _9, *p_2(D)
 836              	# kianv_stdlib.h:209:   while (*p != 0) {
 837 0650 638A0602 		beq	a3,zero,.L115	#, _9,,
 838              	# kianv_stdlib.h:210:     while (!*((volatile uint32_t*) UART_READY))
 839 0654 B7070030 		li	a5,805306368		# tmp78,
 840              	# kianv_stdlib.h:195:    if (c == 13) {
 841 0658 1306D000 		li	a2,13		# tmp81,
 842              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 843 065c 9305A000 		li	a1,10		# tmp89,
 844              	.L116:
 845              	# kianv_stdlib.h:210:     while (!*((volatile uint32_t*) UART_READY))
 846 0660 03A70700 		lw	a4,0(a5)		# _5, MEM[(volatile uint32_t *)805306368B]
 847              	# kianv_stdlib.h:210:     while (!*((volatile uint32_t*) UART_READY))
 848 0664 E30E07FE 		beq	a4,zero,.L116	#, _5,,
 849              	# kianv_stdlib.h:212:     putchar(*(p++));
 850 0668 13051500 		addi	a0,a0,1	#, p, p
 851              	.L117:
 852              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 853 066c 03A70700 		lw	a4,0(a5)		# _8, MEM[(volatile uint32_t *)805306368B]
 854              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 855 0670 E30E07FE 		beq	a4,zero,.L117	#, _8,,
 856              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 857 0674 23A0D700 		sw	a3,0(a5)	# _9, MEM[(volatile uint32_t *)805306368B]
 858              	# kianv_stdlib.h:195:    if (c == 13) {
 859 0678 6386C602 		beq	a3,a2,.L134	#, _9, tmp81,
 860              	# kianv_stdlib.h:209:   while (*p != 0) {
 861 067c 83460500 		lbu	a3,0(a0)	# _9, MEM[(char *)p_7]
 862              	# kianv_stdlib.h:209:   while (*p != 0) {
 863 0680 E39006FE 		bne	a3,zero,.L116	#, _9,,
 864              	.L115:
 865              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 866 0684 37070030 		li	a4,805306368		# tmp84,
 867              	.L121:
 868 0688 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 869              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 870 068c E38E07FE 		beq	a5,zero,.L121	#, _3,,
 871              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 872 0690 9307D000 		li	a5,13		# tmp86,
 873 0694 2320F700 		sw	a5,0(a4)	# tmp86, MEM[(volatile uint32_t *)805306368B]
 874              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 875 0698 9307A000 		li	a5,10		# tmp88,
 876 069c 2320F700 		sw	a5,0(a4)	# tmp88, MEM[(volatile uint32_t *)805306368B]
 877              	# kianv_stdlib.h:219: }
 878 06a0 67800000 		ret	
 879              	.L134:
 880              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 881 06a4 23A0B700 		sw	a1,0(a5)	# tmp89, MEM[(volatile uint32_t *)805306368B]
 882              	# kianv_stdlib.h:209:   while (*p != 0) {
 883 06a8 83460500 		lbu	a3,0(a0)	# _9, MEM[(char *)p_7]
 884              	# kianv_stdlib.h:209:   while (*p != 0) {
 885 06ac E39A06FA 		bne	a3,zero,.L116	#, _9,,
 886 06b0 6FF05FFD 		j	.L115		#
 888              		.align	2
 889              		.globl	print_dec
 891              	print_dec:
 892 06b4 130101FF 		addi	sp,sp,-16	#,,
 893              	# kianv_stdlib.h:223:   char *p = buffer;
 894 06b8 13064100 		addi	a2,sp,4	#, tmp92,
 895 06bc 13070600 		mv	a4,a2	# p, tmp92
 896              	# kianv_stdlib.h:225:     *(p++) = val % 10;
 897 06c0 9307A000 		li	a5,10		# tmp93,
 898              	.L136:
 899              	# kianv_stdlib.h:224:   while (val || p == buffer) {
 900 06c4 63140500 		bne	a0,zero,.L137	#, val,,
 901              	# kianv_stdlib.h:224:   while (val || p == buffer) {
 902 06c8 631CC700 		bne	a4,a2,.L144	#, p, tmp92,
 903              	.L137:
 904              	# kianv_stdlib.h:225:     *(p++) = val % 10;
 905 06cc B376F502 		remu	a3,a0,a5	# tmp93, tmp83, val
 906              	# kianv_stdlib.h:225:     *(p++) = val % 10;
 907 06d0 13071700 		addi	a4,a4,1	#, p, p
 908              	# kianv_stdlib.h:226:     val = val / 10;
 909 06d4 3355F502 		divu	a0,a0,a5	# tmp93, val, val
 910              	# kianv_stdlib.h:225:     *(p++) = val % 10;
 911 06d8 A30FD7FE 		sb	a3,-1(a4)	# tmp83, MEM[(char *)p_18 + 4294967295B]
 912 06dc 6FF09FFE 		j	.L136		#
 913              	.L144:
 914              	# kianv_stdlib.h:230:     while (!*((volatile uint32_t*) UART_READY))
 915 06e0 B7060030 		li	a3,805306368		# tmp88,
 916              	.L138:
 917              	# kianv_stdlib.h:230:     while (!*((volatile uint32_t*) UART_READY))
 918 06e4 83A70600 		lw	a5,0(a3)		# _3, MEM[(volatile uint32_t *)805306368B]
 919              	# kianv_stdlib.h:230:     while (!*((volatile uint32_t*) UART_READY))
 920 06e8 E38E07FE 		beq	a5,zero,.L138	#, _3,,
 921              	# kianv_stdlib.h:232:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 922 06ec 8347F7FF 		lbu	a5,-1(a4)	# MEM[(char *)p_16], MEM[(char *)p_16]
 923              	# kianv_stdlib.h:232:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 924 06f0 1307F7FF 		addi	a4,a4,-1	#, p, p
 925              	# kianv_stdlib.h:232:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 926 06f4 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 927              	# kianv_stdlib.h:232:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 928 06f8 23A0F600 		sw	a5,0(a3)	# _7, MEM[(volatile uint32_t *)805306368B]
 929              	# kianv_stdlib.h:229:   while (p != buffer) {
 930 06fc E314C7FE 		bne	a4,a2,.L138	#, p, tmp92,
 931              	# kianv_stdlib.h:234: }
 932 0700 13010101 		addi	sp,sp,16	#,,
 933 0704 67800000 		jr	ra		#
 935              		.align	2
 936              		.globl	print_dec64
 938              	print_dec64:
 939 0708 130101FE 		addi	sp,sp,-32	#,,
 940              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 941 070c B7DECCCC 		li	t4,-858992640		# tmp258,
 942              	# kianv_stdlib.h:238:   char *p = buffer;
 943 0710 130EC100 		addi	t3,sp,12	#, tmp254,
 944              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 945 0714 37030010 		li	t1,268435456		# tmp255,
 946 0718 9388DECC 		addi	a7,t4,-819	#, tmp259, tmp258
 947              	# kianv_stdlib.h:236: void print_dec64(uint64_t val) {
 948 071c 13070500 		mv	a4,a0	# val, tmp261
 949 0720 13880500 		mv	a6,a1	# val, tmp262
 950              	# kianv_stdlib.h:238:   char *p = buffer;
 951 0724 13060E00 		mv	a2,t3	# p, tmp254
 952              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 953 0728 1303F3FF 		addi	t1,t1,-1	#, tmp256, tmp255
 954 072c 130F5000 		li	t5,5		# tmp257,
 955 0730 938ECECC 		addi	t4,t4,-820	#, tmp260, tmp258
 956              	# kianv_stdlib.h:239:   while (val || p == buffer) {
 957 0734 6F008005 		j	.L146		#
 958              	.L147:
 959              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 960 0738 B3F7E703 		remu	a5,a5,t5	# tmp257, tmp97, tmp94
 961              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 962 073c 13061600 		addi	a2,a2,1	#, p, p
 963              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 964 0740 B307F740 		sub	a5,a4,a5	# tmp214, val, tmp97
 965 0744 B335F700 		sgtu	a1,a5,a4	# tmp101, tmp214, val
 966 0748 B305B840 		sub	a1,a6,a1	# tmp103, val, tmp101
 967 074c 3385D703 		mul	a0,a5,t4	# tmp107, tmp214, tmp260
 968 0750 B3851503 		mul	a1,a1,a7	# tmp104, tmp103, tmp259
 969 0754 B3B61703 		mulhu	a3,a5,a7	# tmp217, tmp214, tmp259
 970 0758 B385A500 		add	a1,a1,a0	# tmp107, tmp110, tmp104
 971 075c B3871703 		mul	a5,a5,a7	# tmp114, tmp214, tmp259
 972 0760 B385D500 		add	a1,a1,a3	# tmp217, tmp115, tmp110
 973 0764 9396F501 		slli	a3,a1,31	#, tmp133, tmp115
 974              	# kianv_stdlib.h:241:     val = val / 10;
 975 0768 13D81500 		srli	a6,a1,1	#, val, tmp115
 976              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 977 076c 93D71700 		srli	a5,a5,1	#, tmp224, tmp114
 978 0770 B3E7F600 		or	a5,a3,a5	# tmp224, tmp224, tmp133
 979 0774 13952700 		slli	a0,a5,2	#, tmp228, tmp224
 980 0778 3305F500 		add	a0,a0,a5	# tmp224, tmp230, tmp228
 981 077c 13151500 		slli	a0,a0,1	#, tmp232, tmp230
 982 0780 3305A740 		sub	a0,a4,a0	# tmp234, val, tmp232
 983              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 984 0784 A30FA6FE 		sb	a0,-1(a2)	# tmp234, MEM[(char *)p_18 + 4294967295B]
 985              	# kianv_stdlib.h:241:     val = val / 10;
 986 0788 13870700 		mv	a4,a5	# val, tmp224
 987              	.L146:
 988              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 989 078c 93174800 		slli	a5,a6,4	#, tmp88, val
 990 0790 9356C701 		srli	a3,a4,28	#, tmp208, val
 991 0794 B3E6D700 		or	a3,a5,a3	# tmp208, tmp208, tmp88
 992 0798 B3F66600 		and	a3,a3,t1	# tmp256, tmp89, tmp208
 993 079c B3776700 		and	a5,a4,t1	# tmp256, tmp84, val
 994 07a0 B387D700 		add	a5,a5,a3	# tmp89, tmp92, tmp84
 995 07a4 93558801 		srli	a1,a6,24	#, tmp210, val
 996              	# kianv_stdlib.h:239:   while (val || p == buffer) {
 997 07a8 B3660701 		or	a3,a4,a6	# val, val, val
 998              	# kianv_stdlib.h:240:     *(p++) = val % 10;
 999 07ac B387B700 		add	a5,a5,a1	# tmp210, tmp94, tmp92
 1000              	# kianv_stdlib.h:239:   while (val || p == buffer) {
 1001 07b0 E39406F8 		bne	a3,zero,.L147	#, val,,
 1002              	# kianv_stdlib.h:239:   while (val || p == buffer) {
 1003 07b4 E302C6F9 		beq	a2,t3,.L147	#, p, tmp254,
 1004              	# kianv_stdlib.h:245:     while (!*((volatile uint32_t*) UART_READY))
 1005 07b8 37070030 		li	a4,805306368		# tmp202,
 1006              	.L148:
 1007              	# kianv_stdlib.h:245:     while (!*((volatile uint32_t*) UART_READY))
 1008 07bc 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 1009              	# kianv_stdlib.h:245:     while (!*((volatile uint32_t*) UART_READY))
 1010 07c0 E38E07FE 		beq	a5,zero,.L148	#, _3,,
 1011              	# kianv_stdlib.h:247:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 1012 07c4 8347F6FF 		lbu	a5,-1(a2)	# MEM[(char *)p_16], MEM[(char *)p_16]
 1013              	# kianv_stdlib.h:247:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 1014 07c8 1306F6FF 		addi	a2,a2,-1	#, p, p
 1015              	# kianv_stdlib.h:247:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 1016 07cc 93870703 		addi	a5,a5,48	#, _7, MEM[(char *)p_16]
 1017              	# kianv_stdlib.h:247:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 1018 07d0 2320F700 		sw	a5,0(a4)	# _7, MEM[(volatile uint32_t *)805306368B]
 1019              	# kianv_stdlib.h:244:   while (p != buffer) {
 1020 07d4 E314C6FF 		bne	a2,t3,.L148	#, p, tmp254,
 1021              	# kianv_stdlib.h:249: }
 1022 07d8 13010102 		addi	sp,sp,32	#,,
 1023 07dc 67800000 		jr	ra		#
 1025              		.section	.rodata.str1.4,"aMS",@progbits,1
 1026              		.align	2
 1027              	.LC0:
 1028 0000 30313233 		.string	"0123456789ABCDEF"
 1028      34353637 
 1028      38394142 
 1028      43444546 
 1028      00
 1029              		.text
 1030              		.align	2
 1031              		.globl	print_hex
 1033              	print_hex:
 1034              	# kianv_stdlib.h:252:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 1035 07e0 9386F5FF 		addi	a3,a1,-1	#, tmp85, tmp98
 1036              	# kianv_stdlib.h:252:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 1037 07e4 93962600 		slli	a3,a3,2	#, i, tmp85
 1038              	# kianv_stdlib.h:252:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 1039 07e8 63CC0602 		blt	a3,zero,.L154	#, i,,
 1040 07ec 37060000 		lui	a2,%hi(.LC0)	# tmp95,
 1041 07f0 9305C0FF 		li	a1,-4		# _8,
 1042 07f4 13060600 		addi	a2,a2,%lo(.LC0)	# tmp94, tmp95,
 1043              	# kianv_stdlib.h:253:     while (!*((volatile uint32_t*) UART_READY))
 1044 07f8 37070030 		li	a4,805306368		# tmp87,
 1045              	.L156:
 1046              	# kianv_stdlib.h:253:     while (!*((volatile uint32_t*) UART_READY))
 1047 07fc 83270700 		lw	a5,0(a4)		# _2, MEM[(volatile uint32_t *)805306368B]
 1048              	# kianv_stdlib.h:253:     while (!*((volatile uint32_t*) UART_READY))
 1049 0800 E38E07FE 		beq	a5,zero,.L156	#, _2,,
 1050              	# kianv_stdlib.h:255:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 1051 0804 B357D500 		srl	a5,a0,a3	# i, tmp90, val
 1052              	# kianv_stdlib.h:255:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 1053 0808 93F7F700 		andi	a5,a5,15	#, tmp91, tmp90
 1054              	# kianv_stdlib.h:255:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 1055 080c B307F600 		add	a5,a2,a5	# tmp91, tmp92, tmp94
 1056 0810 83C70700 		lbu	a5,0(a5)	# _6, "0123456789ABCDEF"[_4]
 1057              	# kianv_stdlib.h:252:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 1058 0814 9386C6FF 		addi	a3,a3,-4	#, i, i
 1059              	# kianv_stdlib.h:255:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16];
 1060 0818 2320F700 		sw	a5,0(a4)	# _6, MEM[(volatile uint32_t *)805306368B]
 1061              	# kianv_stdlib.h:252:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 1062 081c E390D5FE 		bne	a1,a3,.L156	#, _8, i,
 1063              	.L154:
 1064              	# kianv_stdlib.h:257: }
 1065 0820 67800000 		ret	
 1067              		.align	2
 1068              		.globl	setpixel
 1070              	setpixel:
 1071              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1072 0824 B7070100 		li	a5,65536		# tmp88,
 1073 0828 9387F7FF 		addi	a5,a5,-1	#, tmp87, tmp88
 1074 082c 93958500 		slli	a1,a1,8	#, tmp85, tmp94
 1075 0830 B3F5F500 		and	a1,a1,a5	# tmp87, tmp86, tmp85
 1076              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1077 0834 93960601 		slli	a3,a3,16	#, tmp89, tmp96
 1078              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1079 0838 B3E5D500 		or	a1,a1,a3	# tmp89, tmp90, tmp86
 1080              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1081 083c 1376F60F 		andi	a2,a2,0xff	# tmp91, tmp95
 1082              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1083 0840 B3E5C500 		or	a1,a1,a2	# tmp91, _9, tmp90
 1084              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1085 0844 B7070030 		li	a5,805306368		# tmp93,
 1086 0848 23A4B700 		sw	a1,8(a5)	# _9, MEM[(volatile uint32_t *)805306376B]
 1087              	# kianv_stdlib.h:272: }
 1088 084c 67800000 		ret	
 1090              		.align	2
 1091              		.globl	draw_bresenham
 1093              	draw_bresenham:
 1094 0850 130101FE 		addi	sp,sp,-32	#,,
 1095              	# kianv_stdlib.h:277:   int dx =  abs(x1 - x0);
 1096 0854 3385B640 		sub	a0,a3,a1	#, x1, x0
 1097              	# kianv_stdlib.h:275: {
 1098 0858 232E1100 		sw	ra,28(sp)	#,
 1099 085c 232C8100 		sw	s0,24(sp)	#,
 1100 0860 232A9100 		sw	s1,20(sp)	#,
 1101 0864 13840500 		mv	s0,a1	# x0, tmp114
 1102 0868 93040600 		mv	s1,a2	# y0, tmp115
 1103 086c 23282101 		sw	s2,16(sp)	#,
 1104 0870 23263101 		sw	s3,12(sp)	#,
 1105 0874 23244101 		sw	s4,8(sp)	#,
 1106 0878 93890700 		mv	s3,a5	# color, tmp118
 1107 087c 138A0600 		mv	s4,a3	# x1, tmp116
 1108 0880 23225101 		sw	s5,4(sp)	#,
 1109 0884 23206101 		sw	s6,0(sp)	#,
 1110              	# kianv_stdlib.h:275: {
 1111 0888 130B0700 		mv	s6,a4	# y1, tmp117
 1112              	# kianv_stdlib.h:277:   int dx =  abs(x1 - x0);
 1113 088c 97000000 		call	abs		#
 1113      E7800000 
 1114 0894 13090500 		mv	s2,a0	# tmp119,
 1115              	# kianv_stdlib.h:279:   int dy = -abs(y1 - y0);
 1116 0898 33059B40 		sub	a0,s6,s1	#, y1, y0
 1117 089c 97000000 		call	abs		#
 1117      E7800000 
 1118              	# kianv_stdlib.h:278:   int sx = x0 < x1 ? 1 : -1;
 1119 08a4 B32A4401 		sgt	s5,s4,s0	# tmp109, x1, x0
 1120              	# kianv_stdlib.h:280:   int sy = y0 < y1 ? 1 : -1;
 1121 08a8 33AF6401 		sgt	t5,s6,s1	# tmp112, y1, y0
 1122              	# kianv_stdlib.h:278:   int sx = x0 < x1 ? 1 : -1;
 1123 08ac 939A1A00 		slli	s5,s5,1	#, iftmp.6_9, tmp109
 1124              	# kianv_stdlib.h:280:   int sy = y0 < y1 ? 1 : -1;
 1125 08b0 131F1F00 		slli	t5,t5,1	#, iftmp.7_10, tmp112
 1126              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1127 08b4 B7060100 		li	a3,65536		# tmp103,
 1128              	# kianv_stdlib.h:278:   int sx = x0 < x1 ? 1 : -1;
 1129 08b8 938AFAFF 		addi	s5,s5,-1	#, iftmp.6_9, iftmp.6_9
 1130              	# kianv_stdlib.h:279:   int dy = -abs(y1 - y0);
 1131 08bc B30EA040 		neg	t4,a0	# dy, _3
 1132              	# kianv_stdlib.h:280:   int sy = y0 < y1 ? 1 : -1;
 1133 08c0 130FFFFF 		addi	t5,t5,-1	#, iftmp.7_10, iftmp.7_10
 1134 08c4 3308A940 		sub	a6,s2,a0	# err, dx, _3
 1135              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1136 08c8 13930901 		slli	t1,s3,16	#, _33, color
 1137 08cc 93F8F40F 		andi	a7,s1,255	#, tmp106, y0
 1138 08d0 93158400 		slli	a1,s0,8	#, tmp107, x0
 1139              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1140 08d4 9386F6FF 		addi	a3,a3,-1	#, tmp102, tmp103
 1141              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1142 08d8 370E0030 		li	t3,805306368		# tmp105,
 1143              	.L165:
 1144              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1145 08dc B3E76800 		or	a5,a7,t1	# _33, tmp99, tmp106
 1146              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1147 08e0 33F6D500 		and	a2,a1,a3	# tmp102, tmp101, tmp107
 1148              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1149 08e4 B3E7C700 		or	a5,a5,a2	# tmp101, _40, tmp99
 1150              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1151 08e8 2324FE00 		sw	a5,8(t3)	# _40, MEM[(volatile uint32_t *)805306376B]
 1152              	# kianv_stdlib.h:286:     e2 = 2*err;
 1153 08ec 93171800 		slli	a5,a6,1	#, e2, err
 1154              	# kianv_stdlib.h:285:     if (x0 == x1 && y0 == y1) break;
 1155 08f0 630E4403 		beq	s0,s4,.L173	#, x0, x1,
 1156              	.L166:
 1157              	# kianv_stdlib.h:287:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 1158 08f4 63C8D701 		bgt	t4,a5,.L168	#, dy, e2,
 1159              	# kianv_stdlib.h:287:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 1160 08f8 33045401 		add	s0,s0,s5	# iftmp.6_9, x0, x0
 1161 08fc 3308A840 		sub	a6,a6,a0	# err, err, _3
 1162 0900 93158400 		slli	a1,s0,8	#, tmp107, x0
 1163              	.L168:
 1164              	# kianv_stdlib.h:288:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 1165 0904 E34CF9FC 		blt	s2,a5,.L165	#, dx, e2,
 1166              	# kianv_stdlib.h:288:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 1167 0908 B384E401 		add	s1,s1,t5	# iftmp.7_10, y0, y0
 1168 090c 93F8F40F 		andi	a7,s1,255	#, tmp106, y0
 1169              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1170 0910 B3E76800 		or	a5,a7,t1	# _33, tmp99, tmp106
 1171              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1172 0914 33F6D500 		and	a2,a1,a3	# tmp102, tmp101, tmp107
 1173              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1174 0918 B3E7C700 		or	a5,a5,a2	# tmp101, _40, tmp99
 1175              	# kianv_stdlib.h:288:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 1176 091c 33082801 		add	a6,a6,s2	# dx, err, err
 1177              	# kianv_stdlib.h:271: *((volatile uint32_t*) VIDEO) = (((uint32_t) color & 0xffff) << 16Ul) | ((x &
 1178 0920 2324FE00 		sw	a5,8(t3)	# _40, MEM[(volatile uint32_t *)805306376B]
 1179              	# kianv_stdlib.h:286:     e2 = 2*err;
 1180 0924 93171800 		slli	a5,a6,1	#, e2, err
 1181              	# kianv_stdlib.h:285:     if (x0 == x1 && y0 == y1) break;
 1182 0928 E31644FD 		bne	s0,s4,.L166	#, x0, x1,
 1183              	.L173:
 1184              	# kianv_stdlib.h:285:     if (x0 == x1 && y0 == y1) break;
 1185 092c E39464FD 		bne	s1,s6,.L166	#, y0, y1,
 1186              	# kianv_stdlib.h:290: }
 1187 0930 8320C101 		lw	ra,28(sp)		#,
 1188 0934 03248101 		lw	s0,24(sp)		#,
 1189 0938 83244101 		lw	s1,20(sp)		#,
 1190 093c 03290101 		lw	s2,16(sp)		#,
 1191 0940 8329C100 		lw	s3,12(sp)		#,
 1192 0944 032A8100 		lw	s4,8(sp)		#,
 1193 0948 832A4100 		lw	s5,4(sp)		#,
 1194 094c 032B0100 		lw	s6,0(sp)		#,
 1195 0950 13010102 		addi	sp,sp,32	#,,
 1196 0954 67800000 		jr	ra		#
 1198              		.align	2
 1199              		.globl	time
 1201              	time:
 1202              	# stdlib.c:33: 	asm volatile ("rdcycle %0" : "=r"(cycles));
 1203              	 #APP
 1204              	# 33 "stdlib.c" 1
   1              	// This is free and unencumbered software released into the public domain.
   2              	//
   3              	// Anyone is free to copy, modify, publish, use, compile, sell, or
   4              	// distribute this software, either in source code form or as a compiled
   5              	// binary, for any purpose, commercial or non-commercial, and by any
   6              	// means.
   7              	
   8              	#ifndef KV_STDLIB_H
   9              	#define KV_STDLIB_H
  10              	
  11              	#include <stdarg.h>
  12              	#include <stdint.h>
  13              	#include "kianv_stdlib.h"
  14              	extern long time();
  15              	extern long insn();
  16              	
  17              	#if defined(NOT_USE_MYSTDLIB)
  18              	#else
  19              	extern char *malloc();
  20              	extern int printf(const char *format, ...);
  21              	
  22              	extern void *memcpy(void *dest, const void *src, long n);
  23              	extern char *strcpy(char *dest, const char *src);
  24              	extern int strcmp(const char *s1, const char *s2);
  25              	
  26              	char heap_memory[1024];
  27              	int heap_memory_used = 0;
  28              	#endif
  29              	
  30              	long time()
  31              	{
  32              		int cycles;
  33 0958 732500C0 		asm volatile ("rdcycle %0" : "=r"(cycles));
  34              		// printf("[time() -> %d]", cycles);
 1205              		rdcycle a0	# cycles
 1206              	# 0 "" 2
 1207              	# stdlib.c:36: }
 1208              	 #NO_APP
 1209 095c 67800000 		ret	
 1211              		.align	2
 1212              		.globl	insn
 1214              	insn:
 1215              	# stdlib.c:41: 	asm volatile ("rdinstret %0" : "=r"(insns));
 1216              	 #APP
 1217              	# 41 "stdlib.c" 1
  35              		return cycles;
  36              	}
  37              	
  38              	long insn()
  39              	{
  40              		int insns;
  41 0960 732520C0 		asm volatile ("rdinstret %0" : "=r"(insns));
  42              		// printf("[insn() -> %d]", insns);
 1218              		rdinstret a0	# insns
 1219              	# 0 "" 2
 1220              	# stdlib.c:44: }
 1221              	 #NO_APP
 1222 0964 67800000 		ret	
 1224              		.align	2
 1225              		.globl	printf
 1227              	printf:
 1228 0968 130101FA 		addi	sp,sp,-96	#,,
 1229 096c 232E8102 		sw	s0,60(sp)	#,
 1230              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1231 0970 03430500 		lbu	t1,0(a0)	# _14, *format_22(D)
 1232              	# stdlib.c:90: {
 1233 0974 232AF104 		sw	a5,84(sp)	#,
 1234              	# stdlib.c:94: 	va_start(ap, format);
 1235 0978 93074104 		addi	a5,sp,68	#, tmp119,
 1236              	# stdlib.c:90: {
 1237 097c 2322B104 		sw	a1,68(sp)	#,
 1238 0980 2324C104 		sw	a2,72(sp)	#,
 1239 0984 2326D104 		sw	a3,76(sp)	#,
 1240 0988 2328E104 		sw	a4,80(sp)	#,
 1241 098c 232C0105 		sw	a6,88(sp)	#,
 1242 0990 232E1105 		sw	a7,92(sp)	#,
 1243              	# stdlib.c:94: 	va_start(ap, format);
 1244 0994 2326F100 		sw	a5,12(sp)	# tmp119, MEM[(void * *)&ap]
 1245              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1246 0998 630A0304 		beq	t1,zero,.L177	#, _14,,
 1247              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1248 099c 93060000 		li	a3,0		# i,
 1249              	# stdlib.c:97: 		if (format[i] == '%') {
 1250 09a0 93035002 		li	t2,37		# tmp120,
 1251              	# stdlib.c:99: 				if (format[i] == 'c') {
 1252 09a4 93083006 		li	a7,99		# tmp205,
 1253              	# stdlib.c:103: 				if (format[i] == 's') {
 1254 09a8 130E3007 		li	t3,115		# tmp206,
 1255              	# stdlib.c:107: 				if (format[i] == 'd') {
 1256 09ac 930E4006 		li	t4,100		# tmp207,
 1257              	# stdlib.c:111: 				if (format[i] == 'u') {
 1258 09b0 130F5007 		li	t5,117		# tmp208,
 1259              	# stdlib.c:78: 	char *p = buffer;
 1260 09b4 930F0101 		addi	t6,sp,16	#, tmp213,
 1261              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1262 09b8 9305A000 		li	a1,10		# tmp214,
 1263              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1264 09bc B7070030 		li	a5,805306368		# tmp215,
 1265              	# kianv_stdlib.h:195:    if (c == 13) {
 1266 09c0 9302D000 		li	t0,13		# tmp216,
 1267              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 1268 09c4 1304D002 		li	s0,45		# tmp218,
 1269              	.L202:
 1270              	# stdlib.c:97: 		if (format[i] == '%') {
 1271 09c8 63027304 		beq	t1,t2,.L178	#, _14, tmp120,
 1272              	.L179:
 1273              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1274 09cc 03A70700 		lw	a4,0(a5)		# _42, MEM[(volatile uint32_t *)805306368B]
 1275              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1276 09d0 E30E07FE 		beq	a4,zero,.L179	#, _42,,
 1277              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 1278 09d4 23A06700 		sw	t1,0(a5)	# _14, MEM[(volatile uint32_t *)805306368B]
 1279              	# kianv_stdlib.h:195:    if (c == 13) {
 1280 09d8 63085306 		beq	t1,t0,.L231	#, _14, tmp216,
 1281              	.L182:
 1282              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1283 09dc 93861600 		addi	a3,a3,1	#, i, i
 1284              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1285 09e0 3307D500 		add	a4,a0,a3	# i, tmp193, format
 1286 09e4 03430700 		lbu	t1,0(a4)	# _14, *_13
 1287              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1288 09e8 E31003FE 		bne	t1,zero,.L202	#, _14,,
 1289              	.L177:
 1290              	# stdlib.c:121: }
 1291 09ec 0324C103 		lw	s0,60(sp)		#,
 1292 09f0 13050000 		li	a0,0		#,
 1293 09f4 13010106 		addi	sp,sp,96	#,,
 1294 09f8 67800000 		jr	ra		#
 1295              	.L201:
 1296              	# stdlib.c:99: 				if (format[i] == 'c') {
 1297 09fc 63021703 		beq	a4,a7,.L232	#, _10, tmp205,
 1298              	# stdlib.c:103: 				if (format[i] == 's') {
 1299 0a00 6308C705 		beq	a4,t3,.L233	#, _10, tmp206,
 1300              	# stdlib.c:107: 				if (format[i] == 'd') {
 1301 0a04 6304D709 		beq	a4,t4,.L234	#, _10, tmp207,
 1302              	# stdlib.c:111: 				if (format[i] == 'u') {
 1303 0a08 6300E711 		beq	a4,t5,.L235	#, _10, tmp208,
 1304              	.L178:
 1305              	# stdlib.c:98: 			while (format[++i]) {
 1306 0a0c 93861600 		addi	a3,a3,1	#, i, i
 1307              	# stdlib.c:98: 			while (format[++i]) {
 1308 0a10 3307D500 		add	a4,a0,a3	# i, tmp187, format
 1309 0a14 03470700 		lbu	a4,0(a4)	# _10, MEM[(const char *)_131]
 1310              	# stdlib.c:98: 			while (format[++i]) {
 1311 0a18 E31207FE 		bne	a4,zero,.L201	#, _10,,
 1312 0a1c 6FF01FFC 		j	.L182		#
 1313              	.L232:
 1314              	# stdlib.c:100: 					printf_c(va_arg(ap,int));
 1315 0a20 0327C100 		lw	a4,12(sp)		# D.2697, ap
 1316 0a24 03260700 		lw	a2,0(a4)		# _4, MEM[(int *)_121]
 1317 0a28 13074700 		addi	a4,a4,4	#, D.2698, D.2697
 1318 0a2c 2326E100 		sw	a4,12(sp)	# D.2698, ap
 1319              	# stdlib.c:49:     print_chr(c);
 1320 0a30 1378F60F 		andi	a6,a2,0xff	# _33, _4
 1321              	.L181:
 1322              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1323 0a34 03A70700 		lw	a4,0(a5)		# _34, MEM[(volatile uint32_t *)805306368B]
 1324              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1325 0a38 E30E07FE 		beq	a4,zero,.L181	#, _34,,
 1326              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 1327 0a3c 1376F60F 		andi	a2,a2,255	#, _36, _4
 1328 0a40 23A0C700 		sw	a2,0(a5)	# _36, MEM[(volatile uint32_t *)805306368B]
 1329              	# kianv_stdlib.h:195:    if (c == 13) {
 1330 0a44 E31C58F8 		bne	a6,t0,.L182	#, _33, tmp216,
 1331              	.L231:
 1332              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 1333 0a48 23A0B700 		sw	a1,0(a5)	# tmp214,
 1334 0a4c 6FF01FF9 		j	.L182		#
 1335              	.L233:
 1336              	# stdlib.c:104: 					printf_s(va_arg(ap,char*));
 1337 0a50 0327C100 		lw	a4,12(sp)		# D.2699, ap
 1338 0a54 03280700 		lw	a6,0(a4)		# p, MEM[(char * *)_87]
 1339 0a58 13074700 		addi	a4,a4,4	#, D.2700, D.2699
 1340 0a5c 2326E100 		sw	a4,12(sp)	# D.2700, ap
 1341              	.L230:
 1342              	# stdlib.c:54: 	while (*p)
 1343 0a60 03460800 		lbu	a2,0(a6)	# _40,* p
 1344 0a64 E30C06F6 		beq	a2,zero,.L182	#, _40,,
 1345              	.L187:
 1346              	# stdlib.c:56:     print_chr(*(p++));
 1347 0a68 13081800 		addi	a6,a6,1	#, p, p
 1348              	.L184:
 1349              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1350 0a6c 03A70700 		lw	a4,0(a5)		# _39, MEM[(volatile uint32_t *)805306368B]
 1351              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1352 0a70 E30E07FE 		beq	a4,zero,.L184	#, _39,,
 1353              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 1354 0a74 23A0C700 		sw	a2,0(a5)	# _40, MEM[(volatile uint32_t *)805306368B]
 1355              	# kianv_stdlib.h:195:    if (c == 13) {
 1356 0a78 E31456FE 		bne	a2,t0,.L230	#, _40, tmp216,
 1357              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 1358 0a7c 23A0B700 		sw	a1,0(a5)	# tmp214, MEM[(volatile uint32_t *)805306368B]
 1359              	# stdlib.c:54: 	while (*p)
 1360 0a80 03460800 		lbu	a2,0(a6)	# _40,* p
 1361 0a84 E31206FE 		bne	a2,zero,.L187	#, _40,,
 1362 0a88 6FF05FF5 		j	.L182		#
 1363              	.L234:
 1364              	# stdlib.c:108: 					printf_d(va_arg(ap,int));
 1365 0a8c 0326C100 		lw	a2,12(sp)		# D.2701, ap
 1366 0a90 03270600 		lw	a4,0(a2)		# val, MEM[(int *)_122]
 1367 0a94 13064600 		addi	a2,a2,4	#, D.2702, D.2701
 1368 0a98 2326C100 		sw	a2,12(sp)	# D.2702, ap
 1369              	# stdlib.c:63: 	if (val < 0) {
 1370 0a9c 63440702 		blt	a4,zero,.L190	#, val,,
 1371              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1372 0aa0 13860F00 		mv	a2,t6	# p, tmp213
 1373              	.L191:
 1374              	# stdlib.c:67: 	while (val || p == buffer) {
 1375 0aa4 63140700 		bne	a4,zero,.L192	#, val,,
 1376 0aa8 6310F605 		bne	a2,t6,.L195	#, p, tmp213,
 1377              	.L192:
 1378              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1379 0aac 3368B702 		rem	a6,a4,a1	# tmp214, tmp145, val
 1380              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1381 0ab0 13061600 		addi	a2,a2,1	#, p, p
 1382              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1383 0ab4 13080803 		addi	a6,a6,48	#, tmp147, tmp145
 1384              	# stdlib.c:69: 		val = val / 10;
 1385 0ab8 3347B702 		div	a4,a4,a1	# tmp214, val, val
 1386              	# stdlib.c:68: 		*(p++) = '0' + val % 10;
 1387 0abc A30F06FF 		sb	a6,-1(a2)	# tmp147, MEM[(char *)p_59 + 4294967295B]
 1388 0ac0 6FF05FFE 		j	.L191		#
 1389              	.L190:
 1390              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1391 0ac4 03A60700 		lw	a2,0(a5)		# _53, MEM[(volatile uint32_t *)805306368B]
 1392              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1393 0ac8 E30E06FE 		beq	a2,zero,.L190	#, _53,,
 1394              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 1395 0acc 23A08700 		sw	s0,0(a5)	# tmp218, MEM[(volatile uint32_t *)805306368B]
 1396              	# stdlib.c:65: 		val = -val;
 1397 0ad0 3307E040 		neg	a4,a4	# val, val
 1398              	# stdlib.c:96: 	for (i = 0; format[i]; i++)
 1399 0ad4 13860F00 		mv	a2,t6	# p, tmp213
 1400 0ad8 6FF0DFFC 		j	.L191		#
 1401              	.L237:
 1402              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 1403 0adc 23A00701 		sw	a6,0(a5)	# _64, MEM[(volatile uint32_t *)805306368B]
 1404              	# kianv_stdlib.h:195:    if (c == 13) {
 1405 0ae0 630E5800 		beq	a6,t0,.L236	#, _64, tmp216,
 1406              	# stdlib.c:71: 	while (p != buffer)
 1407 0ae4 E30CF6EF 		beq	a2,t6,.L182	#, p, tmp213,
 1408              	.L195:
 1409              	# stdlib.c:72: 		printf_c(*(--p));
 1410 0ae8 0348F6FF 		lbu	a6,-1(a2)	# _64, MEM[(char *)p_63]
 1411              	# stdlib.c:72: 		printf_c(*(--p));
 1412 0aec 1306F6FF 		addi	a2,a2,-1	#, p, p
 1413              	.L193:
 1414              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1415 0af0 03A70700 		lw	a4,0(a5)		# _65, MEM[(volatile uint32_t *)805306368B]
 1416              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1417 0af4 E30E07FE 		beq	a4,zero,.L193	#, _65,,
 1418 0af8 6FF05FFE 		j	.L237		#
 1419              	.L236:
 1420              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 1421 0afc 23A0B700 		sw	a1,0(a5)	# tmp214, MEM[(volatile uint32_t *)805306368B]
 1422              	# stdlib.c:71: 	while (p != buffer)
 1423 0b00 E314F6FF 		bne	a2,t6,.L195	#, p, tmp213,
 1424 0b04 6FF09FED 		j	.L182		#
 1425              	.L235:
 1426              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 1427 0b08 0328C100 		lw	a6,12(sp)		# D.2703, ap
 1428              	# stdlib.c:78: 	char *p = buffer;
 1429 0b0c 13860F00 		mv	a2,t6	# p, tmp213
 1430              	# stdlib.c:80:   val = val >= 0 ? val : -val;
 1431 0b10 03270800 		lw	a4,0(a6)		# MEM[(int *)_125], MEM[(int *)_125]
 1432              	# stdlib.c:112: 					printf_u(va_arg(ap,int));
 1433 0b14 13084800 		addi	a6,a6,4	#, D.2704, D.2703
 1434 0b18 23260101 		sw	a6,12(sp)	# D.2704, ap
 1435              	# stdlib.c:80:   val = val >= 0 ? val : -val;
 1436 0b1c 1358F741 		srai	a6,a4,31	#, tmp163, MEM[(int *)_125]
 1437 0b20 3347E800 		xor	a4,a6,a4	# MEM[(int *)_125], val, tmp163
 1438 0b24 33070741 		sub	a4,a4,a6	# val, val, tmp163
 1439              	.L196:
 1440              	# stdlib.c:81: 	while (val || p == buffer) {
 1441 0b28 63140700 		bne	a4,zero,.L197	#, val,,
 1442 0b2c 6314F603 		bne	a2,t6,.L200	#, p, tmp213,
 1443              	.L197:
 1444              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1445 0b30 3368B702 		rem	a6,a4,a1	# tmp214, tmp171, val
 1446              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1447 0b34 13061600 		addi	a2,a2,1	#, p, p
 1448              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1449 0b38 13080803 		addi	a6,a6,48	#, tmp173, tmp171
 1450              	# stdlib.c:83: 		val = val / 10;
 1451 0b3c 3347B702 		div	a4,a4,a1	# tmp214, val, val
 1452              	# stdlib.c:82: 		*(p++) = '0' + val % 10;
 1453 0b40 A30F06FF 		sb	a6,-1(a2)	# tmp173, MEM[(char *)p_75 + 4294967295B]
 1454 0b44 6FF05FFE 		j	.L196		#
 1455              	.L239:
 1456              	# kianv_stdlib.h:194:   *((volatile uint32_t*) UART_TX) = c;
 1457 0b48 23A00701 		sw	a6,0(a5)	# _80, MEM[(volatile uint32_t *)805306368B]
 1458              	# kianv_stdlib.h:195:    if (c == 13) {
 1459 0b4c 630E5800 		beq	a6,t0,.L238	#, _80, tmp216,
 1460              	# stdlib.c:85: 	while (p != buffer)
 1461 0b50 E306F6E9 		beq	a2,t6,.L182	#, p, tmp213,
 1462              	.L200:
 1463              	# stdlib.c:86: 		printf_c(*(--p));
 1464 0b54 0348F6FF 		lbu	a6,-1(a2)	# _80, MEM[(char *)p_79]
 1465              	# stdlib.c:86: 		printf_c(*(--p));
 1466 0b58 1306F6FF 		addi	a2,a2,-1	#, p, p
 1467              	.L198:
 1468              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1469 0b5c 03A70700 		lw	a4,0(a5)		# _81, MEM[(volatile uint32_t *)805306368B]
 1470              	# kianv_stdlib.h:192:   while (!*((volatile uint32_t*) UART_READY))
 1471 0b60 E30E07FE 		beq	a4,zero,.L198	#, _81,,
 1472 0b64 6FF05FFE 		j	.L239		#
 1473              	.L238:
 1474              	# kianv_stdlib.h:196:     *((volatile uint32_t*) UART_TX) = 10;
 1475 0b68 23A0B700 		sw	a1,0(a5)	# tmp214, MEM[(volatile uint32_t *)805306368B]
 1476              	# stdlib.c:85: 	while (p != buffer)
 1477 0b6c E314F6FF 		bne	a2,t6,.L200	#, p, tmp213,
 1478 0b70 6FF0DFE6 		j	.L182		#
 1480              		.align	2
 1481              		.globl	malloc
 1483              	malloc:
 1484              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1485 0b74 B7060000 		lui	a3,%hi(heap_memory_used)	# tmp77,
 1486 0b78 03A70600 		lw	a4,%lo(heap_memory_used)(a3)		# heap_memory_used.19_1, heap_memory_used
 1487              	# stdlib.c:128: 	heap_memory_used += size;
 1488 0b7c B307A700 		add	a5,a4,a0	# tmp83, _3, heap_memory_used.19_1
 1489              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1490 0b80 37050000 		lui	a0,%hi(.LANCHOR0)	# tmp79,
 1491              	# stdlib.c:128: 	heap_memory_used += size;
 1492 0b84 23A0F600 		sw	a5,%lo(heap_memory_used)(a3)	# _3, heap_memory_used
 1493              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1494 0b88 13050500 		addi	a0,a0,%lo(.LANCHOR0)	# tmp78, tmp79,
 1495              	# stdlib.c:129: 	if (heap_memory_used > 1024)
 1496 0b8c 93060040 		li	a3,1024		# tmp81,
 1497              	# stdlib.c:126: 	char *p = heap_memory + heap_memory_used;
 1498 0b90 3305E500 		add	a0,a0,a4	# heap_memory_used.19_1, <retval>, tmp78
 1499              	# stdlib.c:129: 	if (heap_memory_used > 1024)
 1500 0b94 63D4F600 		ble	a5,a3,.L240	#, _3, tmp81,
 1501              	# stdlib.c:130: 		asm volatile ("ebreak");
 1502              	 #APP
 1503              	# 130 "stdlib.c" 1
  43              		return insns;
  44              	}
  45              	
  46              	static void printf_c(int c)
  47              	{
  48              		//*((volatile int*)0x10000000) = c;
  49              	    print_chr(c);
  50              	}
  51              	
  52              	static void printf_s(char *p)
  53              	{
  54              		while (*p)
  55              			//*((volatile int*)0x10000000) = *(p++);
  56              	    print_chr(*(p++));
  57              	}
  58              	
  59              	static void printf_d(int val)
  60              	{
  61              		char buffer[32];
  62              		char *p = buffer;
  63              		if (val < 0) {
  64              			printf_c('-');
  65              			val = -val;
  66              		}
  67              		while (val || p == buffer) {
  68              			*(p++) = '0' + val % 10;
  69              			val = val / 10;
  70              		}
  71              		while (p != buffer)
  72              			printf_c(*(--p));
  73              	}
  74              	
  75              	static void printf_u(int val)
  76              	{
  77              		char buffer[32];
  78              		char *p = buffer;
  79              	
  80              	  val = val >= 0 ? val : -val;
  81              		while (val || p == buffer) {
  82              			*(p++) = '0' + val % 10;
  83              			val = val / 10;
  84              		}
  85              		while (p != buffer)
  86              			printf_c(*(--p));
  87              	}
  88              	
  89              	int printf(const char *format, ...)
  90              	{
  91              		int i;
  92              		va_list ap;
  93              	
  94              		va_start(ap, format);
  95              	
  96              		for (i = 0; format[i]; i++)
  97              			if (format[i] == '%') {
  98              				while (format[++i]) {
  99              					if (format[i] == 'c') {
 100              						printf_c(va_arg(ap,int));
 101              						break;
 102              					}
 103              					if (format[i] == 's') {
 104              						printf_s(va_arg(ap,char*));
 105              						break;
 106              					}
 107              					if (format[i] == 'd') {
 108              						printf_d(va_arg(ap,int));
 109              						break;
 110              					}
 111              					if (format[i] == 'u') {
 112              						printf_u(va_arg(ap,int));
 113              						break;
 114              					}
 115              				}
 116              			} else
 117              				printf_c(format[i]);
 118              	
 119              		va_end(ap);
 120              	  return 0;
 121              	}
 122              	
 123              	#if !defined(NOT_USE_MYSTDLIB)
 124              	char *malloc(int size)
 125              	{
 126              		char *p = heap_memory + heap_memory_used;
 127              		// printf("[malloc(%d) -> %d (%d..%d)]", size, (int)p, heap_memory_used, heap_memory_used + size);
 128              		heap_memory_used += size;
 129              		if (heap_memory_used > 1024)
 130 0b98 73001000 			asm volatile ("ebreak");
 131              		return p;
 1504              		ebreak
 1505              	# 0 "" 2
 1506              	 #NO_APP
 1507              	.L240:
 1508              	# stdlib.c:132: }
 1509 0b9c 67800000 		ret	
 1511              		.align	2
 1512              		.globl	memcpy
 1514              	memcpy:
 1515              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1516 0ba0 9308F6FF 		addi	a7,a2,-1	#, n, n
 1517              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1518 0ba4 6306060A 		beq	a2,zero,.L243	#, n,,
 1519 0ba8 13871500 		addi	a4,a1,1	#, bb, bb
 1520 0bac B307E540 		sub	a5,a0,a4	# tmp111, aa, bb
 1521 0bb0 93B73700 		sltiu	a5,a5,3	#, tmp114, tmp111
 1522 0bb4 93B67800 		sltiu	a3,a7,7	#, tmp117, n
 1523 0bb8 93C71700 		xori	a5,a5,1	#, tmp113, tmp114
 1524 0bbc 93C61600 		xori	a3,a3,1	#, tmp116, tmp117
 1525 0bc0 B3F7D700 		and	a5,a5,a3	# tmp116, tmp120, tmp113
 1526 0bc4 63880706 		beq	a5,zero,.L244	#, tmp120,,
 1527 0bc8 B367B500 		or	a5,a0,a1	# bb, tmp121, aa
 1528 0bcc 93F73700 		andi	a5,a5,3	#, tmp122, tmp121
 1529 0bd0 63920706 		bne	a5,zero,.L244	#, tmp122,,
 1530 0bd4 1378C6FF 		andi	a6,a2,-4	#, tmp127, n
 1531 0bd8 93870500 		mv	a5,a1	# ivtmp.334, bb
 1532 0bdc 13070500 		mv	a4,a0	# ivtmp.337, aa
 1533 0be0 3308B800 		add	a6,a6,a1	# bb, _77, tmp127
 1534              	.L245:
 1535              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1536 0be4 83A60700 		lw	a3,0(a5)		# vect__1.320, MEM <const vector(4) char> [(const char *)_43]
 1537 0be8 93874700 		addi	a5,a5,4	#, ivtmp.334, ivtmp.334
 1538 0bec 13074700 		addi	a4,a4,4	#, ivtmp.337, ivtmp.337
 1539              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1540 0bf0 232ED7FE 		sw	a3,-4(a4)	# vect__1.320, MEM <vector(4) char> [(char *)_45]
 1541 0bf4 E39807FF 		bne	a5,a6,.L245	#, ivtmp.334, _77,
 1542 0bf8 9377C6FF 		andi	a5,a2,-4	#, niters_vector_mult_vf.314, n
 1543 0bfc 3307F500 		add	a4,a0,a5	# niters_vector_mult_vf.314, tmp.315, aa
 1544 0c00 B385F500 		add	a1,a1,a5	# niters_vector_mult_vf.314, tmp.316, bb
 1545 0c04 B388F840 		sub	a7,a7,a5	# tmp.317, n, niters_vector_mult_vf.314
 1546 0c08 6304F604 		beq	a2,a5,.L243	#, n, niters_vector_mult_vf.314,
 1547              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1548 0c0c 83C70500 		lbu	a5,0(a1)	# _10, *tmp.316_55
 1549              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1550 0c10 2300F700 		sb	a5,0(a4)	# _10, *tmp.315_54
 1551              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1552 0c14 638E0802 		beq	a7,zero,.L243	#, tmp.317,,
 1553              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1554 0c18 83C61500 		lbu	a3,1(a1)	# _72, MEM[(const char *)tmp.316_55 + 1B]
 1555              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1556 0c1c 93071000 		li	a5,1		# tmp128,
 1557              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1558 0c20 A300D700 		sb	a3,1(a4)	# _72, MEM[(char *)tmp.315_54 + 1B]
 1559              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1560 0c24 6386F802 		beq	a7,a5,.L243	#, tmp.317, tmp128,
 1561              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1562 0c28 83C72500 		lbu	a5,2(a1)	# _48, MEM[(const char *)tmp.316_55 + 2B]
 1563              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1564 0c2c 2301F700 		sb	a5,2(a4)	# _48, MEM[(char *)tmp.315_54 + 2B]
 1565 0c30 67800000 		ret	
 1566              	.L244:
 1567 0c34 3306C500 		add	a2,a0,a2	# n, _23, aa
 1568              	# stdlib.c:138: 	char *a = (char *) aa;
 1569 0c38 93070500 		mv	a5,a0	# a, aa
 1570              	.L247:
 1571              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1572 0c3c 8346F7FF 		lbu	a3,-1(a4)	# _37, MEM[(const char *)b_35 + 4294967295B]
 1573              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1574 0c40 93871700 		addi	a5,a5,1	#, a, a
 1575 0c44 13071700 		addi	a4,a4,1	#, bb, bb
 1576              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1577 0c48 A38FD7FE 		sb	a3,-1(a5)	# _37, MEM[(char *)a_36 + 4294967295B]
 1578              	# stdlib.c:140: 	while (n--) *(a++) = *(b++);
 1579 0c4c E318F6FE 		bne	a2,a5,.L247	#, _23, a,
 1580              	.L243:
 1581              	# stdlib.c:142: }
 1582 0c50 67800000 		ret	
 1584              		.align	2
 1585              		.globl	strcpy
 1587              	strcpy:
 1588              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1589 0c54 93070500 		mv	a5,a0	# dst, dst
 1590 0c58 6F008001 		j	.L264		#
 1591              	.L266:
 1592              	# stdlib.c:150: 		char c = *(src++);
 1593 0c5c 03C70500 		lbu	a4,0(a1)	# c, MEM[(const char *)src_40 + 4294967295B]
 1594              	# stdlib.c:151: 		*(dst++) = c;
 1595 0c60 93871700 		addi	a5,a5,1	#, dst, dst
 1596              	# stdlib.c:150: 		char c = *(src++);
 1597 0c64 93851500 		addi	a1,a1,1	#, src, src
 1598              	# stdlib.c:151: 		*(dst++) = c;
 1599 0c68 A38FE7FE 		sb	a4,-1(a5)	# c, MEM[(char *)dst_42 + 4294967295B]
 1600              	# stdlib.c:152: 		if (!c) return r;
 1601 0c6c 63040708 		beq	a4,zero,.L268	#, c,,
 1602              	.L264:
 1603              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1604 0c70 33E7B700 		or	a4,a5,a1	# src, tmp101, dst
 1605              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1606 0c74 13773700 		andi	a4,a4,3	#, tmp102, tmp101
 1607              	# stdlib.c:148: 	while ((((uint32_t)dst | (uint32_t)src) & 3) != 0)
 1608 0c78 E31207FE 		bne	a4,zero,.L266	#, tmp102,,
 1609              	# stdlib.c:157: 		uint32_t v = *(uint32_t*)src;
 1610 0c7c 83A60500 		lw	a3,0(a1)		# v, MEM[(uint32_t *)src_20]
 1611              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1612 0c80 B708FFFE 		li	a7,-16842752		# tmp105,
 1613 0c84 9388F8EF 		addi	a7,a7,-257	#, tmp104, tmp105
 1614 0c88 33871601 		add	a4,a3,a7	# tmp104, tmp103, v
 1615              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1616 0c8c 13C6F6FF 		not	a2,a3	# tmp106, v
 1617              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1618 0c90 37888080 		li	a6,-2139062272		# tmp110,
 1619              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1620 0c94 3377C700 		and	a4,a4,a2	# tmp106, tmp107, tmp103
 1621              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1622 0c98 13080808 		addi	a6,a6,128	#, tmp109, tmp110
 1623 0c9c 33770701 		and	a4,a4,a6	# tmp109, tmp108, tmp107
 1624              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1625 0ca0 63140702 		bne	a4,zero,.L269	#, tmp108,,
 1626              	.L267:
 1627              	# stdlib.c:180: 		*(uint32_t*)dst = v;
 1628 0ca4 23A0D700 		sw	a3,0(a5)	# v, MEM[(uint32_t *)dst_51]
 1629              	# stdlib.c:157: 		uint32_t v = *(uint32_t*)src;
 1630 0ca8 83A64500 		lw	a3,4(a1)		# v, MEM[(uint32_t *)src_31]
 1631              	# stdlib.c:182: 		dst += 4;
 1632 0cac 93874700 		addi	a5,a5,4	#, dst, dst
 1633              	# stdlib.c:181: 		src += 4;
 1634 0cb0 93854500 		addi	a1,a1,4	#, src, src
 1635              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1636 0cb4 33871601 		add	a4,a3,a7	# tmp104, tmp115, v
 1637              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1638 0cb8 13C6F6FF 		not	a2,a3	# tmp118, v
 1639              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1640 0cbc 3377C700 		and	a4,a4,a2	# tmp118, tmp119, tmp115
 1641              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1642 0cc0 33770701 		and	a4,a4,a6	# tmp109, tmp120, tmp119
 1643              	# stdlib.c:159: 		if (__builtin_expect((((v) - 0x01010101UL) & ~(v) & 0x80808080UL), 0))
 1644 0cc4 E30007FE 		beq	a4,zero,.L267	#, tmp120,,
 1645              	.L269:
 1646              	# stdlib.c:161: 			dst[0] = v & 0xff;
 1647 0cc8 2380D700 		sb	a3,0(a5)	# v, *dst_50
 1648              	# stdlib.c:162: 			if ((v & 0xff) == 0)
 1649 0ccc 13F7F60F 		andi	a4,a3,255	#, tmp111, v
 1650              	# stdlib.c:162: 			if ((v & 0xff) == 0)
 1651 0cd0 63020702 		beq	a4,zero,.L268	#, tmp111,,
 1652              	# stdlib.c:164: 			v = v >> 8;
 1653 0cd4 13D78600 		srli	a4,a3,8	#, v, v
 1654              	# stdlib.c:166: 			dst[1] = v & 0xff;
 1655 0cd8 A380E700 		sb	a4,1(a5)	# v, MEM[(char *)dst_50 + 1B]
 1656              	# stdlib.c:167: 			if ((v & 0xff) == 0)
 1657 0cdc 1377F70F 		andi	a4,a4,255	#, tmp112, v
 1658              	# stdlib.c:167: 			if ((v & 0xff) == 0)
 1659 0ce0 630A0700 		beq	a4,zero,.L268	#, tmp112,,
 1660              	# stdlib.c:169: 			v = v >> 8;
 1661 0ce4 13D70601 		srli	a4,a3,16	#, v, v
 1662              	# stdlib.c:171: 			dst[2] = v & 0xff;
 1663 0ce8 2381E700 		sb	a4,2(a5)	# v, MEM[(char *)dst_50 + 2B]
 1664              	# stdlib.c:172: 			if ((v & 0xff) == 0)
 1665 0cec 1377F70F 		andi	a4,a4,255	#, tmp113, v
 1666              	# stdlib.c:172: 			if ((v & 0xff) == 0)
 1667 0cf0 63140700 		bne	a4,zero,.L284	#, tmp113,,
 1668              	.L268:
 1669              	# stdlib.c:184: }
 1670 0cf4 67800000 		ret	
 1671              	.L284:
 1672              	# stdlib.c:174: 			v = v >> 8;
 1673 0cf8 93D68601 		srli	a3,a3,24	#, v, v
 1674              	# stdlib.c:176: 			dst[3] = v & 0xff;
 1675 0cfc A381D700 		sb	a3,3(a5)	# v, MEM[(char *)dst_50 + 3B]
 1676              	# stdlib.c:177: 			return r;
 1677 0d00 67800000 		ret	
 1679              		.align	2
 1680              		.globl	strcmp
 1682              	strcmp:
 1683              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1684 0d04 6F00C001 		j	.L286		#
 1685              	.L290:
 1686              	# stdlib.c:190: 		char c1 = *(s1++);
 1687 0d08 83470500 		lbu	a5,0(a0)	# c1, MEM[(const char *)s1_48 + 4294967295B]
 1688              	# stdlib.c:191: 		char c2 = *(s2++);
 1689 0d0c 03C70500 		lbu	a4,0(a1)	# c2, MEM[(const char *)s2_50 + 4294967295B]
 1690              	# stdlib.c:190: 		char c1 = *(s1++);
 1691 0d10 13051500 		addi	a0,a0,1	#, s1, s1
 1692              	# stdlib.c:191: 		char c2 = *(s2++);
 1693 0d14 93851500 		addi	a1,a1,1	#, s2, s2
 1694              	# stdlib.c:193: 		if (c1 != c2)
 1695 0d18 6392E706 		bne	a5,a4,.L315	#, c1, c2,
 1696              	# stdlib.c:195: 		else if (!c1)
 1697 0d1c 638C0704 		beq	a5,zero,.L305	#, c1,,
 1698              	.L286:
 1699              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1700 0d20 B367B500 		or	a5,a0,a1	# s2, tmp101, s1
 1701              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1702 0d24 93F73700 		andi	a5,a5,3	#, tmp102, tmp101
 1703              	# stdlib.c:188: 	while ((((uint32_t)s1 | (uint32_t)s2) & 3) != 0)
 1704 0d28 E39007FE 		bne	a5,zero,.L290	#, tmp102,,
 1705              	# stdlib.c:201: 		uint32_t v1 = *(uint32_t*)s1;
 1706 0d2c 83270500 		lw	a5,0(a0)		# v1, MEM[(uint32_t *)s1_14]
 1707              	# stdlib.c:202: 		uint32_t v2 = *(uint32_t*)s2;
 1708 0d30 03A70500 		lw	a4,0(a1)		# v2, MEM[(uint32_t *)s2_16]
 1709              	# stdlib.c:204: 		if (__builtin_expect(v1 != v2, 0))
 1710 0d34 639CE704 		bne	a5,a4,.L295	#, v1, v2,
 1711              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1712 0d38 3706FFFE 		li	a2,-16842752		# tmp111,
 1713              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1714 0d3c B7868080 		li	a3,-2139062272		# tmp116,
 1715              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1716 0d40 1306F6EF 		addi	a2,a2,-257	#, tmp110, tmp111
 1717              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1718 0d44 93860608 		addi	a3,a3,128	#, tmp115, tmp116
 1719 0d48 6F000001 		j	.L291		#
 1720              	.L316:
 1721              	# stdlib.c:201: 		uint32_t v1 = *(uint32_t*)s1;
 1722 0d4c 83270500 		lw	a5,0(a0)		# v1, MEM[(uint32_t *)s1_29]
 1723              	# stdlib.c:202: 		uint32_t v2 = *(uint32_t*)s2;
 1724 0d50 03A70500 		lw	a4,0(a1)		# v2, MEM[(uint32_t *)s2_30]
 1725              	# stdlib.c:204: 		if (__builtin_expect(v1 != v2, 0))
 1726 0d54 639CE702 		bne	a5,a4,.L295	#, v1, v2,
 1727              	.L291:
 1728              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1729 0d58 3387C700 		add	a4,a5,a2	# tmp110, tmp109, v1
 1730              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1731 0d5c 93C7F7FF 		not	a5,a5	# tmp112, v1
 1732              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1733 0d60 B377F700 		and	a5,a4,a5	# tmp112, tmp113, tmp109
 1734              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1735 0d64 B3F7D700 		and	a5,a5,a3	# tmp115, tmp114, tmp113
 1736              	# stdlib.c:231: 		s1 += 4;
 1737 0d68 13054500 		addi	a0,a0,4	#, s1, s1
 1738              	# stdlib.c:232: 		s2 += 4;
 1739 0d6c 93854500 		addi	a1,a1,4	#, s2, s2
 1740              	# stdlib.c:228: 		if (__builtin_expect((((v1) - 0x01010101UL) & ~(v1) & 0x80808080UL), 0))
 1741 0d70 E38E07FC 		beq	a5,zero,.L316	#, tmp114,,
 1742              	.L305:
 1743              	# stdlib.c:196: 			return 0;
 1744 0d74 13050000 		li	a0,0		# <retval>,
 1745              	.L285:
 1746              	# stdlib.c:234: }
 1747 0d78 67800000 		ret	
 1748              	.L315:
 1749              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1750 0d7c 33B5E700 		sltu	a0,a5,a4	# c2, tmp119, c1
 1751 0d80 3305A040 		neg	a0,a0	# tmp120, tmp119
 1752 0d84 13651500 		ori	a0,a0,1	#, <retval>, tmp120
 1753 0d88 67800000 		ret	
 1754              	.L295:
 1755              	# stdlib.c:208: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1756 0d8c 93F6F70F 		andi	a3,a5,0xff	# c1, v1
 1757              	# stdlib.c:208: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1758 0d90 1376F70F 		andi	a2,a4,0xff	# c2, v2
 1759              	# stdlib.c:209: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1760 0d94 639AC604 		bne	a3,a2,.L313	#, c1, c2,
 1761              	# stdlib.c:196: 			return 0;
 1762 0d98 13050000 		li	a0,0		# <retval>,
 1763              	# stdlib.c:210: 			if (!c1) return 0;
 1764 0d9c E38E06FC 		beq	a3,zero,.L285	#, c1,,
 1765              	# stdlib.c:211: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1766 0da0 93D68700 		srli	a3,a5,8	#, v1, v1
 1767              	# stdlib.c:211: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1768 0da4 13568700 		srli	a2,a4,8	#, v2, v2
 1769              	# stdlib.c:213: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1770 0da8 93F6F60F 		andi	a3,a3,0xff	# c1, v1
 1771              	# stdlib.c:213: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1772 0dac 1376F60F 		andi	a2,a2,0xff	# c2, v2
 1773              	# stdlib.c:214: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1774 0db0 639CC602 		bne	a3,a2,.L313	#, c1, c2,
 1775              	# stdlib.c:215: 			if (!c1) return 0;
 1776 0db4 E38206FC 		beq	a3,zero,.L285	#, c1,,
 1777              	# stdlib.c:216: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1778 0db8 93D60701 		srli	a3,a5,16	#, v1, v1
 1779              	# stdlib.c:216: 			v1 = v1 >> 8, v2 = v2 >> 8;
 1780 0dbc 13560701 		srli	a2,a4,16	#, v2, v2
 1781              	# stdlib.c:218: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1782 0dc0 93F6F60F 		andi	a3,a3,0xff	# c1, v1
 1783              	# stdlib.c:218: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1784 0dc4 1376F60F 		andi	a2,a2,0xff	# c2, v2
 1785              	# stdlib.c:219: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1786 0dc8 6390C602 		bne	a3,a2,.L313	#, c1, c2,
 1787              	# stdlib.c:220: 			if (!c1) return 0;
 1788 0dcc E38606FA 		beq	a3,zero,.L285	#, c1,,
 1789              	# stdlib.c:223: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1790 0dd0 93D78701 		srli	a5,a5,24	#, c1, v1
 1791              	# stdlib.c:223: 			c1 = v1 & 0xff, c2 = v2 & 0xff;
 1792 0dd4 13578701 		srli	a4,a4,24	#, c2, v2
 1793              	# stdlib.c:224: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1794 0dd8 E380E7FA 		beq	a5,a4,.L285	#, c1, c2,
 1795              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1796 0ddc 13051000 		li	a0,1		# <retval>,
 1797              	# stdlib.c:224: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1798 0de0 E3FCE7F8 		bgeu	a5,a4,.L285	#, c1, c2,
 1799 0de4 6F00C000 		j	.L311		#
 1800              	.L313:
 1801              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1802 0de8 13051000 		li	a0,1		# <retval>,
 1803              	# stdlib.c:219: 			if (c1 != c2) return c1 < c2 ? -1 : +1;
 1804 0dec E3F6C6F8 		bgeu	a3,a2,.L285	#, c1, c2,
 1805              	.L311:
 1806              	# stdlib.c:194: 			return c1 < c2 ? -1 : +1;
 1807 0df0 1305F0FF 		li	a0,-1		# <retval>,
 1808 0df4 67800000 		ret	
 1810              		.align	2
 1811              		.globl	sin1
 1813              	sin1:
 1814              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1815 0df8 635A0500 		bge	a0,zero,.L318	#, angle,,
 1816              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1817 0dfc B787FFFF 		li	a5,-32768		# tmp96,
 1818 0e00 3305F500 		add	a0,a0,a5	# tmp96, tmp98, angle
 1819 0e04 13150501 		slli	a0,a0,16	#, angle, tmp98
 1820 0e08 13550541 		srai	a0,a0,16	#, angle, angle
 1821              	.L318:
 1822              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 1823 0e0c 93578540 		srai	a5,a0,8	#, v0, angle
 1824              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1825 0e10 93960701 		slli	a3,a5,16	#, v0.41_4, v0
 1826              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1827 0e14 13F70702 		andi	a4,a5,32	#, tmp102, v0
 1828              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1829 0e18 93D60601 		srli	a3,a3,16	#, v0.41_4, v0.41_4
 1830              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1831 0e1c 630A0700 		beq	a4,zero,.L319	#, tmp102,,
 1832              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1833 0e20 93C7F7FF 		not	a5,a5	# tmp104, v0
 1834 0e24 93970701 		slli	a5,a5,16	#, v0, tmp104
 1835 0e28 93D70741 		srai	a5,a5,16	#, v0, v0
 1836              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1837 0e2c 1345F5FF 		not	a0,a0	# angle, angle
 1838              	.L319:
 1839              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1840 0e30 93F7F701 		andi	a5,a5,31	#, _6, v0
 1841              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1842 0e34 13861700 		addi	a2,a5,1	#, tmp114, _6
 1843              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1844 0e38 37070000 		lui	a4,%hi(.LANCHOR1)	# tmp109,
 1845 0e3c 13070700 		addi	a4,a4,%lo(.LANCHOR1)	# tmp108, tmp109,
 1846              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1847 0e40 13161600 		slli	a2,a2,1	#, tmp115, tmp114
 1848              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1849 0e44 93971700 		slli	a5,a5,1	#, tmp110, _6
 1850 0e48 B307F700 		add	a5,a4,a5	# tmp110, tmp111, tmp108
 1851              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1852 0e4c 3307C700 		add	a4,a4,a2	# tmp115, tmp116, tmp108
 1853              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1854 0e50 03960700 		lh	a2,0(a5)		# _7, sin90[_6]
 1855              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1856 0e54 83170700 		lh	a5,0(a4)		# sin90[_9], sin90[_9]
 1857              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1858 0e58 1377F50F 		andi	a4,a0,0xff	# tmp121, angle
 1859              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1860 0e5c 93F60604 		andi	a3,a3,64	#, tmp129, v0.41_4
 1861              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1862 0e60 3385C740 		sub	a0,a5,a2	# tmp118, sin90[_9], _7
 1863              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1864 0e64 3305E502 		mul	a0,a0,a4	# tmp122, tmp118, tmp121
 1865              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1866 0e68 13558540 		srai	a0,a0,8	#, tmp123, tmp122
 1867              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1868 0e6c 3305C500 		add	a0,a0,a2	# _7, tmp126, tmp123
 1869 0e70 13150501 		slli	a0,a0,16	#, _5, tmp126
 1870 0e74 13550501 		srli	a0,a0,16	#, _5, _5
 1871              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1872 0e78 63880600 		beq	a3,zero,.L320	#, tmp129,,
 1873              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1874 0e7c 3305A040 		neg	a0,a0	# tmp131, _5
 1875 0e80 13150501 		slli	a0,a0,16	#, _5, tmp131
 1876 0e84 13550501 		srli	a0,a0,16	#, _5, _5
 1877              	.L320:
 1878              	# gfx_lib_hdmi.h:94: }
 1879 0e88 13150501 		slli	a0,a0,16	#,, _5
 1880 0e8c 13550541 		srai	a0,a0,16	#,,
 1881 0e90 67800000 		ret	
 1883              		.align	2
 1884              		.globl	cos1
 1886              	cos1:
 1887              	# gfx_lib_hdmi.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1888 0e94 13160501 		slli	a2,a0,16	#, prephitmp_78, angle
 1889 0e98 13560601 		srli	a2,a2,16	#, prephitmp_78, prephitmp_78
 1890              	# gfx_lib_hdmi.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1891 0e9c 63560500 		bge	a0,zero,.L328	#, angle,,
 1892              	# gfx_lib_hdmi.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1893 0ea0 B7870000 		li	a5,32768		# tmp98,
 1894 0ea4 3346F600 		xor	a2,a2,a5	# tmp98, prephitmp_78, prephitmp_78
 1895              	.L328:
 1896              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1897 0ea8 B7A7FFFF 		li	a5,-24576		# tmp101,
 1898 0eac 93871700 		addi	a5,a5,1	#, tmp100, tmp101
 1899 0eb0 B307F600 		add	a5,a2,a5	# tmp100, tmp99, prephitmp_78
 1900              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1901 0eb4 93960701 		slli	a3,a5,16	#, angle, tmp99
 1902              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1903 0eb8 13970701 		slli	a4,a5,16	#, _4, tmp99
 1904              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1905 0ebc 93D60641 		srai	a3,a3,16	#, angle, angle
 1906              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 1907 0ec0 13570701 		srli	a4,a4,16	#, _4, _4
 1908              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1909 0ec4 63D00602 		bge	a3,zero,.L329	#, angle,,
 1910              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 1911 0ec8 B7270000 		li	a5,8192		# tmp104,
 1912 0ecc 93871700 		addi	a5,a5,1	#, tmp103, tmp104
 1913 0ed0 3306F600 		add	a2,a2,a5	# tmp103, tmp102, prephitmp_78
 1914 0ed4 13170601 		slli	a4,a2,16	#, _4, tmp102
 1915 0ed8 93160601 		slli	a3,a2,16	#, angle, tmp102
 1916 0edc 13570701 		srli	a4,a4,16	#, _4, _4
 1917 0ee0 93D60641 		srai	a3,a3,16	#, angle, angle
 1918              	.L329:
 1919              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 1920 0ee4 93D78640 		srai	a5,a3,8	#, v0, angle
 1921              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1922 0ee8 13960701 		slli	a2,a5,16	#, v0.41_16, v0
 1923              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1924 0eec 93F50702 		andi	a1,a5,32	#, tmp108, v0
 1925              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1926 0ef0 13560601 		srli	a2,a2,16	#, v0.41_16, v0.41_16
 1927              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1928 0ef4 638A0500 		beq	a1,zero,.L330	#, tmp108,,
 1929              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1930 0ef8 93C6F6FF 		not	a3,a3	# tmp112, angle
 1931              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1932 0efc 13970601 		slli	a4,a3,16	#, _4, tmp112
 1933              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 1934 0f00 93C7F7FF 		not	a5,a5	# v0, v0
 1935              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1936 0f04 13570701 		srli	a4,a4,16	#, _4, _4
 1937              	.L330:
 1938              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1939 0f08 93F7F701 		andi	a5,a5,31	#, _22, v0
 1940              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1941 0f0c 93851700 		addi	a1,a5,1	#, tmp120, _22
 1942              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1943 0f10 B7060000 		lui	a3,%hi(.LANCHOR1)	# tmp115,
 1944 0f14 93860600 		addi	a3,a3,%lo(.LANCHOR1)	# tmp114, tmp115,
 1945              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1946 0f18 93951500 		slli	a1,a1,1	#, tmp121, tmp120
 1947              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1948 0f1c 93971700 		slli	a5,a5,1	#, tmp116, _22
 1949 0f20 B387F600 		add	a5,a3,a5	# tmp116, tmp117, tmp114
 1950              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1951 0f24 B386B600 		add	a3,a3,a1	# tmp121, tmp122, tmp114
 1952 0f28 03950600 		lh	a0,0(a3)		# sin90[_25], sin90[_25]
 1953              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1954 0f2c 83950700 		lh	a1,0(a5)		# _23, sin90[_22]
 1955              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1956 0f30 9377F70F 		andi	a5,a4,0xff	# tmp126, _4
 1957              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1958 0f34 13770604 		andi	a4,a2,64	#, tmp134, v0.41_16
 1959              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1960 0f38 3305B540 		sub	a0,a0,a1	# tmp124, sin90[_25], _23
 1961              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1962 0f3c 3305F502 		mul	a0,a0,a5	# tmp127, tmp124, tmp126
 1963              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1964 0f40 13558540 		srai	a0,a0,8	#, tmp128, tmp127
 1965              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 1966 0f44 3305B500 		add	a0,a0,a1	# _23, tmp131, tmp128
 1967 0f48 13150501 		slli	a0,a0,16	#, _37, tmp131
 1968 0f4c 13550501 		srli	a0,a0,16	#, _37, _37
 1969              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1970 0f50 63080700 		beq	a4,zero,.L331	#, tmp134,,
 1971              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 1972 0f54 3305A040 		neg	a0,a0	# tmp136, _37
 1973 0f58 13150501 		slli	a0,a0,16	#, _37, tmp136
 1974 0f5c 13550501 		srli	a0,a0,16	#, _37, _37
 1975              	.L331:
 1976              	# gfx_lib_hdmi.h:110: }
 1977 0f60 13150501 		slli	a0,a0,16	#,, _37
 1978 0f64 13550541 		srai	a0,a0,16	#,,
 1979 0f68 67800000 		ret	
 1981              		.align	2
 1982              		.globl	oled_spi_tx
 1984              	oled_spi_tx:
 1985              	# gfx_lib_hdmi.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1986 0f6c 93958500 		slli	a1,a1,8	#, tmp80, tmp85
 1987 0f70 93F50510 		andi	a1,a1,256	#, tmp81, tmp80
 1988              	# gfx_lib_hdmi.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1989 0f74 B3E5A500 		or	a1,a1,a0	# tmp84, _6, tmp81
 1990              	# gfx_lib_hdmi.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 1991 0f78 B7070030 		li	a5,805306368		# tmp83,
 1992 0f7c 23A6B700 		sw	a1,12(a5)	# _6, MEM[(volatile uint32_t *)805306380B]
 1993              	# gfx_lib_hdmi.h:115: }
 1994 0f80 67800000 		ret	
 1996              		.align	2
 1997              		.globl	oled_max_window
 1999              	oled_max_window:
 2000              	# gfx_lib_hdmi.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 2001 0f84 B7070030 		li	a5,805306368		# tmp73,
 2002 0f88 13075001 		li	a4,21		# tmp74,
 2003 0f8c 23A6E700 		sw	a4,12(a5)	# tmp74, MEM[(volatile uint32_t *)805306380B]
 2004 0f90 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 2005 0f94 1307F005 		li	a4,95		# tmp79,
 2006 0f98 23A6E700 		sw	a4,12(a5)	# tmp79, MEM[(volatile uint32_t *)805306380B]
 2007 0f9c 13075007 		li	a4,117		# tmp82,
 2008 0fa0 23A6E700 		sw	a4,12(a5)	# tmp82, MEM[(volatile uint32_t *)805306380B]
 2009 0fa4 23A60700 		sw	zero,12(a5)	#, MEM[(volatile uint32_t *)805306380B]
 2010 0fa8 1307F003 		li	a4,63		# tmp87,
 2011 0fac 23A6E700 		sw	a4,12(a5)	# tmp87, MEM[(volatile uint32_t *)805306380B]
 2012              	# gfx_lib_hdmi.h:120: }
 2013 0fb0 67800000 		ret	
 2015              		.align	2
 2016              		.globl	oled_show_fb_8or16
 2018              	oled_show_fb_8or16:
 2019              	# kianv_stdlib.h:51:   *( (volatile uint32_t*) DMA_SRC  ) = src;
 2020 0fb4 B7070030 		li	a5,805306368		# tmp78,
 2021 0fb8 23A6A702 		sw	a0,44(a5)	# framebuffer, MEM[(volatile uint32_t *)805306412B]
 2022              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 2023 0fbc 37170000 		li	a4,4096		# tmp84,
 2024              	# kianv_stdlib.h:52:   *( (volatile uint32_t*) DMA_DST  ) = dst;
 2025 0fc0 23A8B702 		sw	a1,48(a5)	# target_fb, MEM[(volatile uint32_t *)805306416B]
 2026              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 2027 0fc4 1307072C 		addi	a4,a4,704	#, tmp83, tmp84
 2028 0fc8 23AAE702 		sw	a4,52(a5)	# tmp83, MEM[(volatile uint32_t *)805306420B]
 2029              	# kianv_stdlib.h:54:   *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
 2030 0fcc 13071000 		li	a4,1		# tmp87,
 2031 0fd0 23ACE702 		sw	a4,56(a5)	# tmp87, MEM[(volatile uint32_t *)805306424B]
 2032              	# gfx_lib_hdmi.h:132: }
 2033 0fd4 67800000 		ret	
 2035              		.align	2
 2036              		.globl	init_oled8bit_colors
 2038              	init_oled8bit_colors:
 2039 0fd8 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp78,
 2040 0fdc 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# ivtmp.396, tmp78,
 2041 0fe0 13865702 		addi	a2,a5,37	#, _15, ivtmp.396
 2042              	# gfx_lib_hdmi.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 2043 0fe4 B7060030 		li	a3,805306368		# tmp80,
 2044              	.L342:
 2045              	# gfx_lib_hdmi.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 2046 0fe8 03C70700 		lbu	a4,0(a5)	# _7, MEM[(char *)_13]
 2047              	# gfx_lib_hdmi.h:192:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 2048 0fec 93871700 		addi	a5,a5,1	#, ivtmp.396, ivtmp.396
 2049              	# gfx_lib_hdmi.h:114:   *((volatile uint32_t *) VIDEO_RAW) = ((data_cmd & 0x01) << 8) | tx;
 2050 0ff0 23A6E600 		sw	a4,12(a3)	# _7, MEM[(volatile uint32_t *)805306380B]
 2051              	# gfx_lib_hdmi.h:192:   for (int i = 0; i < sizeof(oled_8bit_init_seq)/
 2052 0ff4 E39AC7FE 		bne	a5,a2,.L342	#, ivtmp.396, _15,
 2053              	# gfx_lib_hdmi.h:198: }
 2054 0ff8 67800000 		ret	
 2056              		.align	2
 2057              		.globl	fb_setpixel
 2059              	fb_setpixel:
 2060              	# gfx_lib_hdmi.h:202:   if  ( x > (HRES-1) ) return;
 2061 0ffc 9307F004 		li	a5,79		# tmp84,
 2062 1000 63E4B702 		bgtu	a1,a5,.L344	#, x, tmp84,
 2063              	# gfx_lib_hdmi.h:203:   if  ( y > (VRES-1) ) return;
 2064 1004 9307B003 		li	a5,59		# tmp85,
 2065 1008 63E0C702 		bgtu	a2,a5,.L344	#, y, tmp85,
 2066              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
 2067 100c 93172600 		slli	a5,a2,2	#, tmp87, y
 2068 1010 B387C700 		add	a5,a5,a2	# y, tmp88, tmp87
 2069 1014 93974700 		slli	a5,a5,4	#, tmp89, tmp88
 2070 1018 B387B700 		add	a5,a5,a1	# x, tmp90, tmp89
 2071              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
 2072 101c 93972700 		slli	a5,a5,2	#, tmp91, tmp90
 2073 1020 3305F500 		add	a0,a0,a5	# tmp91, tmp92, fb
 2074 1024 2320D500 		sw	a3,0(a0)	# color, *_12
 2075              	.L344:
 2076              	# gfx_lib_hdmi.h:207: }
 2077 1028 67800000 		ret	
 2079              		.align	2
 2080              		.globl	fb_draw_bresenham
 2082              	fb_draw_bresenham:
 2083 102c 130101FD 		addi	sp,sp,-48	#,,
 2084 1030 232C4101 		sw	s4,24(sp)	#,
 2085 1034 130A0500 		mv	s4,a0	# tmp116, fb
 2086              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2087 1038 3385B640 		sub	a0,a3,a1	#, x1, x0
 2088              	# gfx_lib_hdmi.h:210: {
 2089 103c 23261102 		sw	ra,44(sp)	#,
 2090 1040 23248102 		sw	s0,40(sp)	#,
 2091 1044 23229102 		sw	s1,36(sp)	#,
 2092 1048 13040600 		mv	s0,a2	# y0, tmp118
 2093 104c 93840500 		mv	s1,a1	# x0, tmp117
 2094 1050 23202103 		sw	s2,32(sp)	#,
 2095 1054 232E3101 		sw	s3,28(sp)	#,
 2096 1058 232A5101 		sw	s5,20(sp)	#,
 2097 105c 93890600 		mv	s3,a3	# x1, tmp119
 2098 1060 23286101 		sw	s6,16(sp)	#,
 2099 1064 23267101 		sw	s7,12(sp)	#,
 2100              	# gfx_lib_hdmi.h:210: {
 2101 1068 130B0700 		mv	s6,a4	# y1, tmp120
 2102 106c 938B0700 		mv	s7,a5	# color, tmp121
 2103              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2104 1070 97000000 		call	abs		#
 2104      E7800000 
 2105 1078 13090500 		mv	s2,a0	# tmp122,
 2106              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2107 107c 33058B40 		sub	a0,s6,s0	#, y1, y0
 2108 1080 97000000 		call	abs		#
 2108      E7800000 
 2109              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2110 1088 B3AA3401 		sgt	s5,s3,s1	# tmp107, x1, x0
 2111              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2112 108c 332E6401 		sgt	t3,s6,s0	# tmp111, y1, y0
 2113              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2114 1090 939A1A00 		slli	s5,s5,1	#, iftmp.50_9, tmp107
 2115              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2116 1094 131E1E00 		slli	t3,t3,1	#, iftmp.51_10, tmp111
 2117              	# gfx_lib_hdmi.h:212:   int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 2118 1098 938AFAFF 		addi	s5,s5,-1	#, iftmp.50_9, iftmp.50_9
 2119              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2120 109c B308A040 		neg	a7,a0	# dy, _3
 2121              	# gfx_lib_hdmi.h:213:   int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 2122 10a0 130EFEFF 		addi	t3,t3,-1	#, iftmp.51_10, iftmp.51_10
 2123 10a4 3306A940 		sub	a2,s2,a0	# err, dx, _3
 2124              	# gfx_lib_hdmi.h:202:   if  ( x > (HRES-1) ) return;
 2125 10a8 9306F004 		li	a3,79		# tmp97,
 2126              	# gfx_lib_hdmi.h:203:   if  ( y > (VRES-1) ) return;
 2127 10ac 1303B003 		li	t1,59		# tmp115,
 2128              	.L349:
 2129              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
 2130 10b0 13182400 		slli	a6,s0,2	#, tmp100, y0
 2131 10b4 33088800 		add	a6,a6,s0	# y0, tmp101, tmp100
 2132 10b8 13184800 		slli	a6,a6,4	#, tmp102, tmp101
 2133 10bc 33089800 		add	a6,a6,s1	# x0, tmp103, tmp102
 2134              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
 2135 10c0 13182800 		slli	a6,a6,2	#, tmp104, tmp103
 2136              	# gfx_lib_hdmi.h:220:     e2 = 2*err;
 2137 10c4 93151600 		slli	a1,a2,1	#, e2, err
 2138              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
 2139 10c8 33080A01 		add	a6,s4,a6	# tmp104, tmp105, fb
 2140              	# gfx_lib_hdmi.h:202:   if  ( x > (HRES-1) ) return;
 2141 10cc 63E69600 		bgtu	s1,a3,.L350	#, x0, tmp97,
 2142              	# gfx_lib_hdmi.h:203:   if  ( y > (VRES-1) ) return;
 2143 10d0 63648300 		bgtu	s0,t1,.L350	#, y0, tmp115,
 2144              	# gfx_lib_hdmi.h:206:   fb[x + y*HRES] = color;
 2145 10d4 23207801 		sw	s7,0(a6)	# color, *_38
 2146              	.L350:
 2147              	# gfx_lib_hdmi.h:218:     if (x0 == x1 && y0 == y1) break;
 2148 10d8 63803403 		beq	s1,s3,.L358	#, x0, x1,
 2149              	.L351:
 2150              	# gfx_lib_hdmi.h:221:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 2151 10dc 63C61501 		bgt	a7,a1,.L353	#, dy, e2,
 2152 10e0 3306A640 		sub	a2,a2,a0	# err, err, _3
 2153              	# gfx_lib_hdmi.h:221:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 2154 10e4 B3845401 		add	s1,s1,s5	# iftmp.50_9, x0, x0
 2155              	.L353:
 2156              	# gfx_lib_hdmi.h:222:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2157 10e8 E344B9FC 		blt	s2,a1,.L349	#, dx, e2,
 2158              	# gfx_lib_hdmi.h:222:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2159 10ec 33062601 		add	a2,a2,s2	# dx, err, err
 2160              	# gfx_lib_hdmi.h:222:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 2161 10f0 3304C401 		add	s0,s0,t3	# iftmp.51_10, y0, y0
 2162 10f4 6FF0DFFB 		j	.L349		#
 2163              	.L358:
 2164              	# gfx_lib_hdmi.h:218:     if (x0 == x1 && y0 == y1) break;
 2165 10f8 E31264FF 		bne	s0,s6,.L351	#, y0, y1,
 2166              	# gfx_lib_hdmi.h:224: }
 2167 10fc 8320C102 		lw	ra,44(sp)		#,
 2168 1100 03248102 		lw	s0,40(sp)		#,
 2169 1104 83244102 		lw	s1,36(sp)		#,
 2170 1108 03290102 		lw	s2,32(sp)		#,
 2171 110c 8329C101 		lw	s3,28(sp)		#,
 2172 1110 032A8101 		lw	s4,24(sp)		#,
 2173 1114 832A4101 		lw	s5,20(sp)		#,
 2174 1118 032B0101 		lw	s6,16(sp)		#,
 2175 111c 832BC100 		lw	s7,12(sp)		#,
 2176 1120 13010103 		addi	sp,sp,48	#,,
 2177 1124 67800000 		jr	ra		#
 2179              		.align	2
 2180              		.globl	fill_oled
 2182              	fill_oled:
 2183              	# kianv_stdlib.h:51:   *( (volatile uint32_t*) DMA_SRC  ) = src;
 2184 1128 B7070030 		li	a5,805306368		# tmp77,
 2185 112c 23A6A702 		sw	a0,44(a5)	# framebuffer, MEM[(volatile uint32_t *)805306412B]
 2186              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 2187 1130 37170000 		li	a4,4096		# tmp83,
 2188              	# kianv_stdlib.h:52:   *( (volatile uint32_t*) DMA_DST  ) = dst;
 2189 1134 23A8B702 		sw	a1,48(a5)	# rgb, MEM[(volatile uint32_t *)805306416B]
 2190              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 2191 1138 1307072C 		addi	a4,a4,704	#, tmp82, tmp83
 2192 113c 23AAE702 		sw	a4,52(a5)	# tmp82, MEM[(volatile uint32_t *)805306420B]
 2193              	# kianv_stdlib.h:54:   *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
 2194 1140 13072000 		li	a4,2		# tmp86,
 2195 1144 23ACE702 		sw	a4,56(a5)	# tmp86, MEM[(volatile uint32_t *)805306424B]
 2196              	# gfx_lib_hdmi.h:233: }
 2197 1148 67800000 		ret	
 2199              		.align	2
 2200              		.globl	mirror_x_axis
 2202              	mirror_x_axis:
 2203              	# gfx_lib_hdmi.h:236:   point transformed = {p->x, 1.0 * p->y};
 2204 114c 03A74500 		lw	a4,4(a1)		# vect__1.412, MEM[(int *)p_4(D) + 4B]
 2205              	# gfx_lib_hdmi.h:237:   return transformed;
 2206 1150 83A60500 		lw	a3,0(a1)		# MEM[(int *)p_4(D)], MEM[(int *)p_4(D)]
 2207 1154 23240500 		sw	zero,8(a0)	#, <retval>.z
 2208 1158 2322E500 		sw	a4,4(a0)	# vect__1.412, MEM[(int *)&<retval> + 4B]
 2209 115c 2320D500 		sw	a3,0(a0)	# MEM[(int *)p_4(D)], MEM[(int *)&<retval>]
 2210              	# gfx_lib_hdmi.h:238: }
 2211 1160 67800000 		ret	
 2213              		.globl	__floatsidf
 2214              		.globl	__fixdfsi
 2215              		.align	2
 2216              		.globl	mirror_y_axis
 2218              	mirror_y_axis:
 2219 1164 130101FF 		addi	sp,sp,-16	#,,
 2220 1168 23248100 		sw	s0,8(sp)	#,
 2221 116c 13040500 		mv	s0,a0	# tmp88, .result_ptr
 2222              	# gfx_lib_hdmi.h:241:   point transformed = {-1.0 * p->x, p->y};
 2223 1170 03A50500 		lw	a0,0(a1)		#, p_7(D)->x
 2224              	# gfx_lib_hdmi.h:240: point mirror_y_axis(point *p) {
 2225 1174 23261100 		sw	ra,12(sp)	#,
 2226 1178 23229100 		sw	s1,4(sp)	#,
 2227              	# gfx_lib_hdmi.h:241:   point transformed = {-1.0 * p->x, p->y};
 2228 117c 83A44500 		lw	s1,4(a1)		# _5, p_7(D)->y
 2229              	# gfx_lib_hdmi.h:241:   point transformed = {-1.0 * p->x, p->y};
 2230 1180 97000000 		call	__floatsidf		#
 2230      E7800000 
 2231              	# gfx_lib_hdmi.h:241:   point transformed = {-1.0 * p->x, p->y};
 2232 1188 B7070080 		li	a5,-2147483648		# tmp81,
 2233 118c 13070500 		mv	a4,a0	# tmp93, tmp90
 2234 1190 B3C7B700 		xor	a5,a5,a1	# tmp91, tmp94, tmp81
 2235 1194 13050700 		mv	a0,a4	# tmp95, tmp93
 2236 1198 93850700 		mv	a1,a5	#, tmp94
 2237 119c 97000000 		call	__fixdfsi		#
 2237      E7800000 
 2238 11a4 2320A400 		sw	a0,0(s0)	# tmp92, <retval>.x
 2239              	# gfx_lib_hdmi.h:242:   return transformed;
 2240 11a8 23229400 		sw	s1,4(s0)	# _5, <retval>.y
 2241              	# gfx_lib_hdmi.h:243: }
 2242 11ac 8320C100 		lw	ra,12(sp)		#,
 2243              	# gfx_lib_hdmi.h:242:   return transformed;
 2244 11b0 23240400 		sw	zero,8(s0)	#, <retval>.z
 2245              	# gfx_lib_hdmi.h:243: }
 2246 11b4 13050400 		mv	a0,s0	#, .result_ptr
 2247 11b8 03248100 		lw	s0,8(sp)		#,
 2248 11bc 83244100 		lw	s1,4(sp)		#,
 2249 11c0 13010101 		addi	sp,sp,16	#,,
 2250 11c4 67800000 		jr	ra		#
 2252              		.align	2
 2253              		.globl	mirror_z_axis
 2255              	mirror_z_axis:
 2256 11c8 130101FF 		addi	sp,sp,-16	#,,
 2257 11cc 23248100 		sw	s0,8(sp)	#,
 2258 11d0 13040500 		mv	s0,a0	# tmp89, .result_ptr
 2259              	# gfx_lib_hdmi.h:246:   point transformed = {p->x, p->y, -1.0 * p->z};
 2260 11d4 03A58500 		lw	a0,8(a1)		#, p_8(D)->z
 2261              	# gfx_lib_hdmi.h:245: point mirror_z_axis(point *p) {
 2262 11d8 23261100 		sw	ra,12(sp)	#,
 2263 11dc 23229100 		sw	s1,4(sp)	#,
 2264 11e0 23202101 		sw	s2,0(sp)	#,
 2265              	# gfx_lib_hdmi.h:245: point mirror_z_axis(point *p) {
 2266 11e4 93840500 		mv	s1,a1	# p, tmp90
 2267              	# gfx_lib_hdmi.h:246:   point transformed = {p->x, p->y, -1.0 * p->z};
 2268 11e8 03A94500 		lw	s2,4(a1)		# vect__1.424, MEM[(int *)p_8(D) + 4B]
 2269              	# gfx_lib_hdmi.h:246:   point transformed = {p->x, p->y, -1.0 * p->z};
 2270 11ec 97000000 		call	__floatsidf		#
 2270      E7800000 
 2271              	# gfx_lib_hdmi.h:246:   point transformed = {p->x, p->y, -1.0 * p->z};
 2272 11f4 B7070080 		li	a5,-2147483648		# tmp82,
 2273 11f8 B3C7B700 		xor	a5,a5,a1	# tmp92, tmp95, tmp82
 2274 11fc 13070500 		mv	a4,a0	# tmp94, tmp91
 2275 1200 93850700 		mv	a1,a5	#, tmp95
 2276 1204 13050700 		mv	a0,a4	# tmp96, tmp94
 2277 1208 97000000 		call	__fixdfsi		#
 2277      E7800000 
 2278              	# gfx_lib_hdmi.h:247:   return transformed;
 2279 1210 83A70400 		lw	a5,0(s1)		# MEM[(int *)p_8(D)], MEM[(int *)p_8(D)]
 2280 1214 23222401 		sw	s2,4(s0)	# vect__1.424, MEM[(int *)&<retval> + 4B]
 2281 1218 2324A400 		sw	a0,8(s0)	# tmp93, <retval>.z
 2282              	# gfx_lib_hdmi.h:248: }
 2283 121c 8320C100 		lw	ra,12(sp)		#,
 2284              	# gfx_lib_hdmi.h:247:   return transformed;
 2285 1220 2320F400 		sw	a5,0(s0)	# MEM[(int *)p_8(D)], MEM[(int *)&<retval>]
 2286              	# gfx_lib_hdmi.h:248: }
 2287 1224 13050400 		mv	a0,s0	#, .result_ptr
 2288 1228 03248100 		lw	s0,8(sp)		#,
 2289 122c 83244100 		lw	s1,4(sp)		#,
 2290 1230 03290100 		lw	s2,0(sp)		#,
 2291 1234 13010101 		addi	sp,sp,16	#,,
 2292 1238 67800000 		jr	ra		#
 2294              		.globl	__floatsisf
 2295              		.globl	__mulsf3
 2296              		.globl	__fixsfsi
 2297              		.align	2
 2298              		.globl	scale
 2300              	scale:
 2301 123c 130101FE 		addi	sp,sp,-32	#,,
 2302 1240 232C8100 		sw	s0,24(sp)	#,
 2303 1244 13040500 		mv	s0,a0	# tmp96, .result_ptr
 2304              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2305 1248 03A54500 		lw	a0,4(a1)		#, p_14(D)->y
 2306              	# gfx_lib_hdmi.h:250: point scale(point *p, float sx, float sy, float sz) {
 2307 124c 232E1100 		sw	ra,28(sp)	#,
 2308 1250 232A9100 		sw	s1,20(sp)	#,
 2309 1254 23282101 		sw	s2,16(sp)	#,
 2310 1258 23263101 		sw	s3,12(sp)	#,
 2311 125c 13890600 		mv	s2,a3	# sy, tmp99
 2312 1260 93090600 		mv	s3,a2	# sx, tmp98
 2313 1264 23244101 		sw	s4,8(sp)	#,
 2314              	# gfx_lib_hdmi.h:250: point scale(point *p, float sx, float sy, float sz) {
 2315 1268 93840500 		mv	s1,a1	# p, tmp97
 2316 126c 130A0700 		mv	s4,a4	# sz, tmp100
 2317              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2318 1270 97000000 		call	__floatsisf		#
 2318      E7800000 
 2319 1278 93050900 		mv	a1,s2	#, sy
 2320 127c 97000000 		call	__mulsf3		#
 2320      E7800000 
 2321              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2322 1284 97000000 		call	__fixsfsi		#
 2322      E7800000 
 2323 128c 13090500 		mv	s2,a0	# tmp101,
 2324              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2325 1290 03A58400 		lw	a0,8(s1)		#, p_14(D)->z
 2326 1294 97000000 		call	__floatsisf		#
 2326      E7800000 
 2327 129c 93050A00 		mv	a1,s4	#, sz
 2328 12a0 97000000 		call	__mulsf3		#
 2328      E7800000 
 2329              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2330 12a8 97000000 		call	__fixsfsi		#
 2330      E7800000 
 2331 12b0 93070500 		mv	a5,a0	# tmp102,
 2332              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2333 12b4 03A50400 		lw	a0,0(s1)		#, p_14(D)->x
 2334              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2335 12b8 93840700 		mv	s1,a5	# _12, tmp102
 2336              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2337 12bc 97000000 		call	__floatsisf		#
 2337      E7800000 
 2338 12c4 93850900 		mv	a1,s3	#, sx
 2339 12c8 97000000 		call	__mulsf3		#
 2339      E7800000 
 2340              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 2341 12d0 97000000 		call	__fixsfsi		#
 2341      E7800000 
 2342 12d8 2320A400 		sw	a0,0(s0)	# tmp103, <retval>.x
 2343              	# gfx_lib_hdmi.h:252:   return transformed;
 2344 12dc 23222401 		sw	s2,4(s0)	# _8, <retval>.y
 2345 12e0 23249400 		sw	s1,8(s0)	# _12, <retval>.z
 2346              	# gfx_lib_hdmi.h:253: }
 2347 12e4 8320C101 		lw	ra,28(sp)		#,
 2348 12e8 13050400 		mv	a0,s0	#, .result_ptr
 2349 12ec 03248101 		lw	s0,24(sp)		#,
 2350 12f0 83244101 		lw	s1,20(sp)		#,
 2351 12f4 03290101 		lw	s2,16(sp)		#,
 2352 12f8 8329C100 		lw	s3,12(sp)		#,
 2353 12fc 032A8100 		lw	s4,8(sp)		#,
 2354 1300 13010102 		addi	sp,sp,32	#,,
 2355 1304 67800000 		jr	ra		#
 2357              		.align	2
 2358              		.globl	translate
 2360              	translate:
 2361              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2362 1308 83A84500 		lw	a7,4(a1)		# p_8(D)->y, p_8(D)->y
 2363              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2364 130c 03A88500 		lw	a6,8(a1)		# p_8(D)->z, p_8(D)->z
 2365              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2366 1310 83A50500 		lw	a1,0(a1)		# p_8(D)->x, p_8(D)->x
 2367              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2368 1314 B3861601 		add	a3,a3,a7	# p_8(D)->y, _4, tmp90
 2369              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2370 1318 33070701 		add	a4,a4,a6	# p_8(D)->z, _6, tmp91
 2371              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 2372 131c B385C500 		add	a1,a1,a2	# tmp89, tmp85, p_8(D)->x
 2373              	# gfx_lib_hdmi.h:257:   return transformed;
 2374 1320 2320B500 		sw	a1,0(a0)	# tmp85, <retval>.x
 2375 1324 2322D500 		sw	a3,4(a0)	# _4, <retval>.y
 2376 1328 2324E500 		sw	a4,8(a0)	# _6, <retval>.z
 2377              	# gfx_lib_hdmi.h:258: }
 2378 132c 67800000 		ret	
 2380              		.globl	__muldf3
 2381              		.globl	__divdf3
 2382              		.globl	__truncdfsf2
 2383              		.globl	__subsf3
 2384              		.globl	__addsf3
 2385              		.align	2
 2386              		.globl	rotateX_pivot
 2388              	rotateX_pivot:
 2389 1330 130101FD 		addi	sp,sp,-48	#,,
 2390 1334 23248102 		sw	s0,40(sp)	#,
 2391 1338 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2392              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 2393 133c 13850600 		mv	a0,a3	#, tmp262
 2394              	# gfx_lib_hdmi.h:261: point rotateX_pivot(point *p, point *pivot, int angle) {
 2395 1340 23261102 		sw	ra,44(sp)	#,
 2396 1344 23229102 		sw	s1,36(sp)	#,
 2397 1348 23202103 		sw	s2,32(sp)	#,
 2398              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2399 134c 83A48500 		lw	s1,8(a1)		# p_32(D)->z, p_32(D)->z
 2400              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2401 1350 03A94500 		lw	s2,4(a1)		# p_32(D)->y, p_32(D)->y
 2402              	# gfx_lib_hdmi.h:261: point rotateX_pivot(point *p, point *pivot, int angle) {
 2403 1354 232E3101 		sw	s3,28(sp)	#,
 2404 1358 232C4101 		sw	s4,24(sp)	#,
 2405              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2406 135c 83298600 		lw	s3,8(a2)		# _6, pivot_33(D)->z
 2407              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2408 1360 032A4600 		lw	s4,4(a2)		# _3, pivot_33(D)->y
 2409              	# gfx_lib_hdmi.h:261: point rotateX_pivot(point *p, point *pivot, int angle) {
 2410 1364 23286101 		sw	s6,16(sp)	#,
 2411 1368 23248101 		sw	s8,8(sp)	#,
 2412              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2413 136c 03AB0500 		lw	s6,0(a1)		# _1, p_32(D)->x
 2414              	# gfx_lib_hdmi.h:261: point rotateX_pivot(point *p, point *pivot, int angle) {
 2415 1370 232A5101 		sw	s5,20(sp)	#,
 2416 1374 23267101 		sw	s7,12(sp)	#,
 2417 1378 23229101 		sw	s9,4(sp)	#,
 2418              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 2419 137c 97000000 		call	__floatsidf		#
 2419      E7800000 
 2420 1384 B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 2421 1388 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 2422 138c 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 2423              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2424 1390 33094941 		sub	s2,s2,s4	# _4, p_32(D)->y, _3
 2425              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2426 1394 B3843441 		sub	s1,s1,s3	# _7, p_32(D)->z, _6
 2427              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 2428 1398 97000000 		call	__muldf3		#
 2428      E7800000 
 2429 13a0 B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 2430 13a4 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 2431 13a8 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 2432 13ac 97000000 		call	__divdf3		#
 2432      E7800000 
 2433 13b4 97000000 		call	__fixdfsi		#
 2433      E7800000 
 2434 13bc 13170501 		slli	a4,a0,16	#, angle, tmp263
 2435              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2436 13c0 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 2437              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 2438 13c4 13570741 		srai	a4,a4,16	#, angle, angle
 2439              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2440 13c8 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 2441              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2442 13cc 635A0700 		bge	a4,zero,.L369	#, angle,,
 2443              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2444 13d0 B7870000 		li	a5,32768		# tmp163,
 2445 13d4 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 2446 13d8 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 2447 13dc 13570741 		srai	a4,a4,16	#, angle, angle
 2448              	.L369:
 2449              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 2450 13e0 93578740 		srai	a5,a4,8	#, v0, angle
 2451              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2452 13e4 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 2453              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2454 13e8 93F50702 		andi	a1,a5,32	#, tmp167, v0
 2455              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2456 13ec 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 2457 13f0 93060C00 		mv	a3,s8	# _235, prephitmp_203
 2458              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2459 13f4 638A0500 		beq	a1,zero,.L370	#, tmp167,,
 2460              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2461 13f8 1347F7FF 		not	a4,a4	# tmp171, angle
 2462              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2463 13fc 93160701 		slli	a3,a4,16	#, _235, tmp171
 2464              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2465 1400 93C7F7FF 		not	a5,a5	# v0, v0
 2466              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2467 1404 93D60601 		srli	a3,a3,16	#, _235, _235
 2468              	.L370:
 2469              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2470 1408 93F7F701 		andi	a5,a5,31	#, _59, v0
 2471              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2472 140c 13871700 		addi	a4,a5,1	#, tmp179, _59
 2473              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2474 1410 B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 2475 1414 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 2476 1418 93971700 		slli	a5,a5,1	#, tmp175, _59
 2477              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2478 141c 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 2479              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2480 1420 B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 2481              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2482 1424 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 2483              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2484 1428 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 2485              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2486 142c 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 2487              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2488 1430 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 2489              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2490 1434 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 2491              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2492 1438 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 2493              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2494 143c 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 2495              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2496 1440 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 2497              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2498 1444 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 2499 1448 13150501 		slli	a0,a0,16	#, _74, tmp190
 2500 144c 13550501 		srli	a0,a0,16	#, _74, _74
 2501              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2502 1450 63880700 		beq	a5,zero,.L371	#, tmp193,,
 2503              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2504 1454 3305A040 		neg	a0,a0	# tmp195, _74
 2505 1458 13150501 		slli	a0,a0,16	#, _74, tmp195
 2506 145c 13550501 		srli	a0,a0,16	#, _74, _74
 2507              	.L371:
 2508              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 2509 1460 13150501 		slli	a0,a0,16	#,, _74
 2510 1464 13550541 		srai	a0,a0,16	#,,
 2511 1468 97000000 		call	__floatsidf		#
 2511      E7800000 
 2512 1470 B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 2513 1474 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2514 1478 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2515 147c 97000000 		call	__muldf3		#
 2515      E7800000 
 2516              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 2517 1484 97000000 		call	__truncdfsf2		#
 2517      E7800000 
 2518              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2519 148c B7A7FFFF 		li	a5,-24576		# tmp203,
 2520 1490 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 2521 1494 B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 2522              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2523 1498 93960701 		slli	a3,a5,16	#, angle, tmp201
 2524              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2525 149c 13970701 		slli	a4,a5,16	#, _42, tmp201
 2526              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2527 14a0 93D60641 		srai	a3,a3,16	#, angle, angle
 2528              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 2529 14a4 930C0500 		mv	s9,a0	# sin_theta, tmp264
 2530              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2531 14a8 13570701 		srli	a4,a4,16	#, _42, _42
 2532              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2533 14ac 63D00602 		bge	a3,zero,.L372	#, angle,,
 2534              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2535 14b0 B7270000 		li	a5,8192		# tmp206,
 2536 14b4 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 2537 14b8 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 2538 14bc 13170C01 		slli	a4,s8,16	#, _42, tmp204
 2539 14c0 93160C01 		slli	a3,s8,16	#, angle, tmp204
 2540 14c4 13570701 		srli	a4,a4,16	#, _42, _42
 2541 14c8 93D60641 		srai	a3,a3,16	#, angle, angle
 2542              	.L372:
 2543              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 2544 14cc 93D78640 		srai	a5,a3,8	#, v0, angle
 2545              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2546 14d0 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 2547              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2548 14d4 93F50702 		andi	a1,a5,32	#, tmp210, v0
 2549              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2550 14d8 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 2551              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2552 14dc 638A0500 		beq	a1,zero,.L373	#, tmp210,,
 2553              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2554 14e0 93C6F6FF 		not	a3,a3	# tmp214, angle
 2555              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2556 14e4 13970601 		slli	a4,a3,16	#, _42, tmp214
 2557              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2558 14e8 93C7F7FF 		not	a5,a5	# v0, v0
 2559              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2560 14ec 13570701 		srli	a4,a4,16	#, _42, _42
 2561              	.L373:
 2562              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2563 14f0 93F7F701 		andi	a5,a5,31	#, _90, v0
 2564              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2565 14f4 93861700 		addi	a3,a5,1	#, tmp222, _90
 2566 14f8 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 2567              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2568 14fc 93971700 		slli	a5,a5,1	#, tmp218, _90
 2569 1500 B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 2570              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2571 1504 B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 2572              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2573 1508 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 2574              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2575 150c 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 2576              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2577 1510 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 2578              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2579 1514 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 2580              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2581 1518 B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 2582              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2583 151c B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 2584              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2585 1520 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 2586              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2587 1524 B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 2588 1528 93970701 		slli	a5,a5,16	#, _105, tmp233
 2589 152c 93D70701 		srli	a5,a5,16	#, _105, _105
 2590              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2591 1530 63880600 		beq	a3,zero,.L374	#, tmp236,,
 2592              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2593 1534 B307F040 		neg	a5,a5	# tmp238, _105
 2594 1538 93970701 		slli	a5,a5,16	#, _105, tmp238
 2595 153c 93D70701 		srli	a5,a5,16	#, _105, _105
 2596              	.L374:
 2597              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 2598 1540 13950701 		slli	a0,a5,16	#,, _105
 2599 1544 13550541 		srai	a0,a0,16	#,,
 2600 1548 97000000 		call	__floatsidf		#
 2600      E7800000 
 2601 1550 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2602 1554 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2603 1558 97000000 		call	__muldf3		#
 2603      E7800000 
 2604              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 2605 1560 97000000 		call	__truncdfsf2		#
 2605      E7800000 
 2606 1568 93070500 		mv	a5,a0	# tmp265,
 2607              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2608 156c 13050900 		mv	a0,s2	#, _4
 2609              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 2610 1570 13890700 		mv	s2,a5	# tmp243, tmp265
 2611              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2612 1574 97000000 		call	__floatsisf		#
 2612      E7800000 
 2613 157c 930A0500 		mv	s5,a0	# tmp266,
 2614              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2615 1580 13850400 		mv	a0,s1	#, _7
 2616 1584 97000000 		call	__floatsisf		#
 2616      E7800000 
 2617 158c 93040500 		mv	s1,a0	# tmp267,
 2618              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2619 1590 93050900 		mv	a1,s2	#, tmp243
 2620              	# gfx_lib_hdmi.h:273:   return transformed;
 2621 1594 23206401 		sw	s6,0(s0)	# _1, <retval>.x
 2622              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2623 1598 13850A00 		mv	a0,s5	#, _18
 2624 159c 97000000 		call	__mulsf3		#
 2624      E7800000 
 2625 15a4 130B0500 		mv	s6,a0	# tmp244, tmp268
 2626              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2627 15a8 93850C00 		mv	a1,s9	#, sin_theta
 2628 15ac 13850400 		mv	a0,s1	#, _20
 2629 15b0 97000000 		call	__mulsf3		#
 2629      E7800000 
 2630 15b8 93050500 		mv	a1,a0	# tmp269,
 2631              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2632 15bc 13050B00 		mv	a0,s6	#, tmp244
 2633 15c0 97000000 		call	__subsf3		#
 2633      E7800000 
 2634 15c8 130B0500 		mv	s6,a0	# tmp246, tmp270
 2635              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2636 15cc 13050A00 		mv	a0,s4	#, _3
 2637 15d0 97000000 		call	__floatsisf		#
 2637      E7800000 
 2638 15d8 93050500 		mv	a1,a0	# tmp271,
 2639 15dc 13050B00 		mv	a0,s6	#, tmp246
 2640 15e0 97000000 		call	__addsf3		#
 2640      E7800000 
 2641              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2642 15e8 97000000 		call	__fixsfsi		#
 2642      E7800000 
 2643              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 2644 15f0 93850C00 		mv	a1,s9	#, sin_theta
 2645              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 2646 15f4 2322A400 		sw	a0,4(s0)	# tmp272, <retval>.y
 2647              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 2648 15f8 13850A00 		mv	a0,s5	#, _18
 2649 15fc 97000000 		call	__mulsf3		#
 2649      E7800000 
 2650 1604 130A0500 		mv	s4,a0	# tmp250, tmp273
 2651              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 2652 1608 93050900 		mv	a1,s2	#, tmp243
 2653 160c 13850400 		mv	a0,s1	#, _20
 2654 1610 97000000 		call	__mulsf3		#
 2654      E7800000 
 2655 1618 93050500 		mv	a1,a0	# tmp274,
 2656              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 2657 161c 13050A00 		mv	a0,s4	#, tmp250
 2658 1620 97000000 		call	__addsf3		#
 2658      E7800000 
 2659 1628 93040500 		mv	s1,a0	# tmp252, tmp275
 2660              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 2661 162c 13850900 		mv	a0,s3	#, _6
 2662 1630 97000000 		call	__floatsisf		#
 2662      E7800000 
 2663 1638 93050500 		mv	a1,a0	# tmp276,
 2664 163c 13850400 		mv	a0,s1	#, tmp252
 2665 1640 97000000 		call	__addsf3		#
 2665      E7800000 
 2666              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 2667 1648 97000000 		call	__fixsfsi		#
 2667      E7800000 
 2668 1650 2324A400 		sw	a0,8(s0)	# tmp277, <retval>.z
 2669              	# gfx_lib_hdmi.h:274: }
 2670 1654 8320C102 		lw	ra,44(sp)		#,
 2671 1658 13050400 		mv	a0,s0	#, .result_ptr
 2672 165c 03248102 		lw	s0,40(sp)		#,
 2673 1660 83244102 		lw	s1,36(sp)		#,
 2674 1664 03290102 		lw	s2,32(sp)		#,
 2675 1668 8329C101 		lw	s3,28(sp)		#,
 2676 166c 032A8101 		lw	s4,24(sp)		#,
 2677 1670 832A4101 		lw	s5,20(sp)		#,
 2678 1674 032B0101 		lw	s6,16(sp)		#,
 2679 1678 832BC100 		lw	s7,12(sp)		#,
 2680 167c 032C8100 		lw	s8,8(sp)		#,
 2681 1680 832C4100 		lw	s9,4(sp)		#,
 2682 1684 13010103 		addi	sp,sp,48	#,,
 2683 1688 67800000 		jr	ra		#
 2685              		.align	2
 2686              		.globl	rotateY_pivot
 2688              	rotateY_pivot:
 2689 168c 130101FD 		addi	sp,sp,-48	#,,
 2690 1690 23248102 		sw	s0,40(sp)	#,
 2691 1694 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2692              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 2693 1698 13850600 		mv	a0,a3	#, tmp262
 2694              	# gfx_lib_hdmi.h:276: point rotateY_pivot(point *p, point *pivot, int angle) {
 2695 169c 23261102 		sw	ra,44(sp)	#,
 2696 16a0 23229102 		sw	s1,36(sp)	#,
 2697 16a4 23202103 		sw	s2,32(sp)	#,
 2698              	# gfx_lib_hdmi.h:277:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2699 16a8 83A48500 		lw	s1,8(a1)		# p_32(D)->z, p_32(D)->z
 2700              	# gfx_lib_hdmi.h:277:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2701 16ac 03A90500 		lw	s2,0(a1)		# p_32(D)->x, p_32(D)->x
 2702              	# gfx_lib_hdmi.h:276: point rotateY_pivot(point *p, point *pivot, int angle) {
 2703 16b0 232E3101 		sw	s3,28(sp)	#,
 2704 16b4 232C4101 		sw	s4,24(sp)	#,
 2705              	# gfx_lib_hdmi.h:277:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2706 16b8 83298600 		lw	s3,8(a2)		# _6, pivot_33(D)->z
 2707              	# gfx_lib_hdmi.h:277:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2708 16bc 032A0600 		lw	s4,0(a2)		# _2, pivot_33(D)->x
 2709              	# gfx_lib_hdmi.h:276: point rotateY_pivot(point *p, point *pivot, int angle) {
 2710 16c0 23286101 		sw	s6,16(sp)	#,
 2711 16c4 23248101 		sw	s8,8(sp)	#,
 2712              	# gfx_lib_hdmi.h:277:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2713 16c8 03AB4500 		lw	s6,4(a1)		# _4, p_32(D)->y
 2714              	# gfx_lib_hdmi.h:276: point rotateY_pivot(point *p, point *pivot, int angle) {
 2715 16cc 232A5101 		sw	s5,20(sp)	#,
 2716 16d0 23267101 		sw	s7,12(sp)	#,
 2717 16d4 23229101 		sw	s9,4(sp)	#,
 2718              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 2719 16d8 97000000 		call	__floatsidf		#
 2719      E7800000 
 2720 16e0 B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 2721 16e4 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 2722 16e8 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 2723              	# gfx_lib_hdmi.h:277:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2724 16ec 33094941 		sub	s2,s2,s4	# _3, p_32(D)->x, _2
 2725              	# gfx_lib_hdmi.h:277:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2726 16f0 B3843441 		sub	s1,s1,s3	# _7, p_32(D)->z, _6
 2727              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 2728 16f4 97000000 		call	__muldf3		#
 2728      E7800000 
 2729 16fc B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 2730 1700 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 2731 1704 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 2732 1708 97000000 		call	__divdf3		#
 2732      E7800000 
 2733 1710 97000000 		call	__fixdfsi		#
 2733      E7800000 
 2734 1718 13170501 		slli	a4,a0,16	#, angle, tmp263
 2735              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2736 171c 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 2737              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 2738 1720 13570741 		srai	a4,a4,16	#, angle, angle
 2739              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2740 1724 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 2741              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2742 1728 635A0700 		bge	a4,zero,.L388	#, angle,,
 2743              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2744 172c B7870000 		li	a5,32768		# tmp163,
 2745 1730 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 2746 1734 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 2747 1738 13570741 		srai	a4,a4,16	#, angle, angle
 2748              	.L388:
 2749              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 2750 173c 93578740 		srai	a5,a4,8	#, v0, angle
 2751              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2752 1740 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 2753              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2754 1744 93F50702 		andi	a1,a5,32	#, tmp167, v0
 2755              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2756 1748 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 2757 174c 93060C00 		mv	a3,s8	# _235, prephitmp_203
 2758              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2759 1750 638A0500 		beq	a1,zero,.L389	#, tmp167,,
 2760              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2761 1754 1347F7FF 		not	a4,a4	# tmp171, angle
 2762              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2763 1758 93160701 		slli	a3,a4,16	#, _235, tmp171
 2764              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2765 175c 93C7F7FF 		not	a5,a5	# v0, v0
 2766              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2767 1760 93D60601 		srli	a3,a3,16	#, _235, _235
 2768              	.L389:
 2769              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2770 1764 93F7F701 		andi	a5,a5,31	#, _59, v0
 2771              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2772 1768 13871700 		addi	a4,a5,1	#, tmp179, _59
 2773              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2774 176c B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 2775 1770 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 2776 1774 93971700 		slli	a5,a5,1	#, tmp175, _59
 2777              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2778 1778 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 2779              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2780 177c B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 2781              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2782 1780 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 2783              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2784 1784 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 2785              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2786 1788 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 2787              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2788 178c 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 2789              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2790 1790 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 2791              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2792 1794 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 2793              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2794 1798 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 2795              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2796 179c 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 2797              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2798 17a0 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 2799 17a4 13150501 		slli	a0,a0,16	#, _74, tmp190
 2800 17a8 13550501 		srli	a0,a0,16	#, _74, _74
 2801              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2802 17ac 63880700 		beq	a5,zero,.L390	#, tmp193,,
 2803              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2804 17b0 3305A040 		neg	a0,a0	# tmp195, _74
 2805 17b4 13150501 		slli	a0,a0,16	#, _74, tmp195
 2806 17b8 13550501 		srli	a0,a0,16	#, _74, _74
 2807              	.L390:
 2808              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 2809 17bc 13150501 		slli	a0,a0,16	#,, _74
 2810 17c0 13550541 		srai	a0,a0,16	#,,
 2811 17c4 97000000 		call	__floatsidf		#
 2811      E7800000 
 2812 17cc B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 2813 17d0 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2814 17d4 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2815 17d8 97000000 		call	__muldf3		#
 2815      E7800000 
 2816              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 2817 17e0 97000000 		call	__truncdfsf2		#
 2817      E7800000 
 2818              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2819 17e8 B7A7FFFF 		li	a5,-24576		# tmp203,
 2820 17ec 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 2821 17f0 B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 2822              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2823 17f4 93960701 		slli	a3,a5,16	#, angle, tmp201
 2824              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2825 17f8 13970701 		slli	a4,a5,16	#, _42, tmp201
 2826              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2827 17fc 93D60641 		srai	a3,a3,16	#, angle, angle
 2828              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 2829 1800 930C0500 		mv	s9,a0	# sin_theta, tmp264
 2830              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 2831 1804 13570701 		srli	a4,a4,16	#, _42, _42
 2832              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2833 1808 63D00602 		bge	a3,zero,.L391	#, angle,,
 2834              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 2835 180c B7270000 		li	a5,8192		# tmp206,
 2836 1810 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 2837 1814 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 2838 1818 13170C01 		slli	a4,s8,16	#, _42, tmp204
 2839 181c 93160C01 		slli	a3,s8,16	#, angle, tmp204
 2840 1820 13570701 		srli	a4,a4,16	#, _42, _42
 2841 1824 93D60641 		srai	a3,a3,16	#, angle, angle
 2842              	.L391:
 2843              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 2844 1828 93D78640 		srai	a5,a3,8	#, v0, angle
 2845              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2846 182c 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 2847              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2848 1830 93F50702 		andi	a1,a5,32	#, tmp210, v0
 2849              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2850 1834 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 2851              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2852 1838 638A0500 		beq	a1,zero,.L392	#, tmp210,,
 2853              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2854 183c 93C6F6FF 		not	a3,a3	# tmp214, angle
 2855              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2856 1840 13970601 		slli	a4,a3,16	#, _42, tmp214
 2857              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 2858 1844 93C7F7FF 		not	a5,a5	# v0, v0
 2859              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2860 1848 13570701 		srli	a4,a4,16	#, _42, _42
 2861              	.L392:
 2862              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2863 184c 93F7F701 		andi	a5,a5,31	#, _90, v0
 2864              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2865 1850 93861700 		addi	a3,a5,1	#, tmp222, _90
 2866 1854 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 2867              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2868 1858 93971700 		slli	a5,a5,1	#, tmp218, _90
 2869 185c B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 2870              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2871 1860 B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 2872              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2873 1864 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 2874              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2875 1868 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 2876              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2877 186c 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 2878              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2879 1870 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 2880              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2881 1874 B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 2882              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2883 1878 B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 2884              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2885 187c 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 2886              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 2887 1880 B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 2888 1884 93970701 		slli	a5,a5,16	#, _105, tmp233
 2889 1888 93D70701 		srli	a5,a5,16	#, _105, _105
 2890              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2891 188c 63880600 		beq	a3,zero,.L393	#, tmp236,,
 2892              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 2893 1890 B307F040 		neg	a5,a5	# tmp238, _105
 2894 1894 93970701 		slli	a5,a5,16	#, _105, tmp238
 2895 1898 93D70701 		srli	a5,a5,16	#, _105, _105
 2896              	.L393:
 2897              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 2898 189c 13950701 		slli	a0,a5,16	#,, _105
 2899 18a0 13550541 		srai	a0,a0,16	#,,
 2900 18a4 97000000 		call	__floatsidf		#
 2900      E7800000 
 2901 18ac 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 2902 18b0 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 2903 18b4 97000000 		call	__muldf3		#
 2903      E7800000 
 2904              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 2905 18bc 97000000 		call	__truncdfsf2		#
 2905      E7800000 
 2906 18c4 930A0500 		mv	s5,a0	# tmp265,
 2907              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2908 18c8 13050900 		mv	a0,s2	#, _3
 2909 18cc 97000000 		call	__floatsisf		#
 2909      E7800000 
 2910 18d4 93070500 		mv	a5,a0	# tmp266,
 2911              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2912 18d8 13850400 		mv	a0,s1	#, _7
 2913              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2914 18dc 93840700 		mv	s1,a5	# _18, tmp266
 2915              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2916 18e0 97000000 		call	__floatsisf		#
 2916      E7800000 
 2917 18e8 13090500 		mv	s2,a0	# tmp267,
 2918              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2919 18ec 93850A00 		mv	a1,s5	#, tmp243
 2920 18f0 13850400 		mv	a0,s1	#, _18
 2921 18f4 97000000 		call	__mulsf3		#
 2921      E7800000 
 2922 18fc 930B0500 		mv	s7,a0	# tmp244, tmp268
 2923              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2924 1900 93850C00 		mv	a1,s9	#, sin_theta
 2925 1904 13050900 		mv	a0,s2	#, _20
 2926 1908 97000000 		call	__mulsf3		#
 2926      E7800000 
 2927 1910 93050500 		mv	a1,a0	# tmp269,
 2928              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2929 1914 13850B00 		mv	a0,s7	#, tmp244
 2930 1918 97000000 		call	__addsf3		#
 2930      E7800000 
 2931 1920 930B0500 		mv	s7,a0	# tmp246, tmp270
 2932              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2933 1924 13050A00 		mv	a0,s4	#, _2
 2934 1928 97000000 		call	__floatsisf		#
 2934      E7800000 
 2935 1930 93050500 		mv	a1,a0	# tmp271,
 2936 1934 13850B00 		mv	a0,s7	#, tmp246
 2937 1938 97000000 		call	__addsf3		#
 2937      E7800000 
 2938              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2939 1940 97000000 		call	__fixsfsi		#
 2939      E7800000 
 2940              	# gfx_lib_hdmi.h:286:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin
 2941 1948 93850A00 		mv	a1,s5	#, tmp243
 2942              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 2943 194c 2320A400 		sw	a0,0(s0)	# tmp272, <retval>.x
 2944              	# gfx_lib_hdmi.h:288:   return transformed;
 2945 1950 23226401 		sw	s6,4(s0)	# _4, <retval>.y
 2946              	# gfx_lib_hdmi.h:286:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin
 2947 1954 13050900 		mv	a0,s2	#, _20
 2948 1958 97000000 		call	__mulsf3		#
 2948      E7800000 
 2949 1960 13090500 		mv	s2,a0	# tmp250, tmp273
 2950              	# gfx_lib_hdmi.h:286:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin
 2951 1964 93850C00 		mv	a1,s9	#, sin_theta
 2952 1968 13850400 		mv	a0,s1	#, _18
 2953 196c 97000000 		call	__mulsf3		#
 2953      E7800000 
 2954 1974 93050500 		mv	a1,a0	# tmp274,
 2955              	# gfx_lib_hdmi.h:286:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin
 2956 1978 13050900 		mv	a0,s2	#, tmp250
 2957 197c 97000000 		call	__subsf3		#
 2957      E7800000 
 2958 1984 93040500 		mv	s1,a0	# tmp252, tmp275
 2959              	# gfx_lib_hdmi.h:286:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin
 2960 1988 13850900 		mv	a0,s3	#, _6
 2961 198c 97000000 		call	__floatsisf		#
 2961      E7800000 
 2962 1994 93050500 		mv	a1,a0	# tmp276,
 2963 1998 13850400 		mv	a0,s1	#, tmp252
 2964 199c 97000000 		call	__addsf3		#
 2964      E7800000 
 2965              	# gfx_lib_hdmi.h:286:   transformed.z = pivot->z + (shifted_point.z*cos_theta - shifted_point.x*sin
 2966 19a4 97000000 		call	__fixsfsi		#
 2966      E7800000 
 2967 19ac 2324A400 		sw	a0,8(s0)	# tmp277, <retval>.z
 2968              	# gfx_lib_hdmi.h:289: }
 2969 19b0 8320C102 		lw	ra,44(sp)		#,
 2970 19b4 13050400 		mv	a0,s0	#, .result_ptr
 2971 19b8 03248102 		lw	s0,40(sp)		#,
 2972 19bc 83244102 		lw	s1,36(sp)		#,
 2973 19c0 03290102 		lw	s2,32(sp)		#,
 2974 19c4 8329C101 		lw	s3,28(sp)		#,
 2975 19c8 032A8101 		lw	s4,24(sp)		#,
 2976 19cc 832A4101 		lw	s5,20(sp)		#,
 2977 19d0 032B0101 		lw	s6,16(sp)		#,
 2978 19d4 832BC100 		lw	s7,12(sp)		#,
 2979 19d8 032C8100 		lw	s8,8(sp)		#,
 2980 19dc 832C4100 		lw	s9,4(sp)		#,
 2981 19e0 13010103 		addi	sp,sp,48	#,,
 2982 19e4 67800000 		jr	ra		#
 2984              		.align	2
 2985              		.globl	rotateZ_pivot
 2987              	rotateZ_pivot:
 2988 19e8 130101FD 		addi	sp,sp,-48	#,,
 2989 19ec 23248102 		sw	s0,40(sp)	#,
 2990 19f0 13040500 		mv	s0,a0	# tmp259, .result_ptr
 2991              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 2992 19f4 13850600 		mv	a0,a3	#, tmp262
 2993              	# gfx_lib_hdmi.h:291: point rotateZ_pivot(point *p, point *pivot, int angle) {
 2994 19f8 23261102 		sw	ra,44(sp)	#,
 2995 19fc 23229102 		sw	s1,36(sp)	#,
 2996 1a00 23202103 		sw	s2,32(sp)	#,
 2997              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 2998 1a04 83A44500 		lw	s1,4(a1)		# p_32(D)->y, p_32(D)->y
 2999              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 3000 1a08 03A90500 		lw	s2,0(a1)		# p_32(D)->x, p_32(D)->x
 3001              	# gfx_lib_hdmi.h:291: point rotateZ_pivot(point *p, point *pivot, int angle) {
 3002 1a0c 232E3101 		sw	s3,28(sp)	#,
 3003 1a10 232C4101 		sw	s4,24(sp)	#,
 3004              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 3005 1a14 83294600 		lw	s3,4(a2)		# _5, pivot_33(D)->y
 3006              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 3007 1a18 032A0600 		lw	s4,0(a2)		# _2, pivot_33(D)->x
 3008              	# gfx_lib_hdmi.h:291: point rotateZ_pivot(point *p, point *pivot, int angle) {
 3009 1a1c 23286101 		sw	s6,16(sp)	#,
 3010 1a20 23248101 		sw	s8,8(sp)	#,
 3011              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 3012 1a24 03AB8500 		lw	s6,8(a1)		# _7, p_32(D)->z
 3013              	# gfx_lib_hdmi.h:291: point rotateZ_pivot(point *p, point *pivot, int angle) {
 3014 1a28 232A5101 		sw	s5,20(sp)	#,
 3015 1a2c 23267101 		sw	s7,12(sp)	#,
 3016 1a30 23229101 		sw	s9,4(sp)	#,
 3017              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3018 1a34 97000000 		call	__floatsidf		#
 3018      E7800000 
 3019 1a3c B7070000 		lui	a5,%hi(.LC1)	# tmp156,
 3020 1a40 03A60700 		lw	a2,%lo(.LC1)(a5)		#,
 3021 1a44 83A64700 		lw	a3,%lo(.LC1+4)(a5)		#,
 3022              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 3023 1a48 33094941 		sub	s2,s2,s4	# _3, p_32(D)->x, _2
 3024              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 3025 1a4c B3843441 		sub	s1,s1,s3	# _6, p_32(D)->y, _5
 3026              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3027 1a50 97000000 		call	__muldf3		#
 3027      E7800000 
 3028 1a58 B7070000 		lui	a5,%hi(.LC2)	# tmp158,
 3029 1a5c 03A60700 		lw	a2,%lo(.LC2)(a5)		#,
 3030 1a60 83A64700 		lw	a3,%lo(.LC2+4)(a5)		#,
 3031 1a64 97000000 		call	__divdf3		#
 3031      E7800000 
 3032 1a6c 97000000 		call	__fixdfsi		#
 3032      E7800000 
 3033 1a74 13170501 		slli	a4,a0,16	#, angle, tmp263
 3034              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3035 1a78 131C0501 		slli	s8,a0,16	#, prephitmp_203, tmp263
 3036              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3037 1a7c 13570741 		srai	a4,a4,16	#, angle, angle
 3038              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3039 1a80 135C0C01 		srli	s8,s8,16	#, prephitmp_203, prephitmp_203
 3040              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3041 1a84 635A0700 		bge	a4,zero,.L407	#, angle,,
 3042              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3043 1a88 B7870000 		li	a5,32768		# tmp163,
 3044 1a8c 334CFC00 		xor	s8,s8,a5	# tmp163, prephitmp_203, prephitmp_203
 3045 1a90 13170C01 		slli	a4,s8,16	#, angle, prephitmp_203
 3046 1a94 13570741 		srai	a4,a4,16	#, angle, angle
 3047              	.L407:
 3048              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 3049 1a98 93578740 		srai	a5,a4,8	#, v0, angle
 3050              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3051 1a9c 13960701 		slli	a2,a5,16	#, v0.41_53, v0
 3052              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3053 1aa0 93F50702 		andi	a1,a5,32	#, tmp167, v0
 3054              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3055 1aa4 13560601 		srli	a2,a2,16	#, v0.41_53, v0.41_53
 3056 1aa8 93060C00 		mv	a3,s8	# _235, prephitmp_203
 3057              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3058 1aac 638A0500 		beq	a1,zero,.L408	#, tmp167,,
 3059              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3060 1ab0 1347F7FF 		not	a4,a4	# tmp171, angle
 3061              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3062 1ab4 93160701 		slli	a3,a4,16	#, _235, tmp171
 3063              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3064 1ab8 93C7F7FF 		not	a5,a5	# v0, v0
 3065              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3066 1abc 93D60601 		srli	a3,a3,16	#, _235, _235
 3067              	.L408:
 3068              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3069 1ac0 93F7F701 		andi	a5,a5,31	#, _59, v0
 3070              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3071 1ac4 13871700 		addi	a4,a5,1	#, tmp179, _59
 3072              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3073 1ac8 B70B0000 		lui	s7,%hi(.LANCHOR1)	# tmp256,
 3074 1acc 938B0B00 		addi	s7,s7,%lo(.LANCHOR1)	# tmp258, tmp256,
 3075 1ad0 93971700 		slli	a5,a5,1	#, tmp175, _59
 3076              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3077 1ad4 13171700 		slli	a4,a4,1	#, tmp180, tmp179
 3078              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3079 1ad8 B387FB00 		add	a5,s7,a5	# tmp175, tmp176, tmp258
 3080              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3081 1adc 3387EB00 		add	a4,s7,a4	# tmp180, tmp181, tmp258
 3082              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3083 1ae0 83950700 		lh	a1,0(a5)		# _60, sin90[_59]
 3084              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3085 1ae4 03150700 		lh	a0,0(a4)		# sin90[_62], sin90[_62]
 3086              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3087 1ae8 93F6F60F 		andi	a3,a3,0xff	# tmp185, _235
 3088              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3089 1aec 93770604 		andi	a5,a2,64	#, tmp193, v0.41_53
 3090              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3091 1af0 3305B540 		sub	a0,a0,a1	# tmp183, sin90[_62], _60
 3092              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3093 1af4 3305D502 		mul	a0,a0,a3	# tmp186, tmp183, tmp185
 3094              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3095 1af8 13558540 		srai	a0,a0,8	#, tmp187, tmp186
 3096              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3097 1afc 3305B500 		add	a0,a0,a1	# _60, tmp190, tmp187
 3098 1b00 13150501 		slli	a0,a0,16	#, _74, tmp190
 3099 1b04 13550501 		srli	a0,a0,16	#, _74, _74
 3100              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3101 1b08 63880700 		beq	a5,zero,.L409	#, tmp193,,
 3102              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3103 1b0c 3305A040 		neg	a0,a0	# tmp195, _74
 3104 1b10 13150501 		slli	a0,a0,16	#, _74, tmp195
 3105 1b14 13550501 		srli	a0,a0,16	#, _74, _74
 3106              	.L409:
 3107              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3108 1b18 13150501 		slli	a0,a0,16	#,, _74
 3109 1b1c 13550541 		srai	a0,a0,16	#,,
 3110 1b20 97000000 		call	__floatsidf		#
 3110      E7800000 
 3111 1b28 B70A0000 		lui	s5,%hi(.LC3)	# tmp257,
 3112 1b2c 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 3113 1b30 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 3114 1b34 97000000 		call	__muldf3		#
 3114      E7800000 
 3115              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3116 1b3c 97000000 		call	__truncdfsf2		#
 3116      E7800000 
 3117              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3118 1b44 B7A7FFFF 		li	a5,-24576		# tmp203,
 3119 1b48 93871700 		addi	a5,a5,1	#, tmp202, tmp203
 3120 1b4c B307FC00 		add	a5,s8,a5	# tmp202, tmp201, prephitmp_203
 3121              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3122 1b50 93960701 		slli	a3,a5,16	#, angle, tmp201
 3123              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3124 1b54 13970701 		slli	a4,a5,16	#, _42, tmp201
 3125              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3126 1b58 93D60641 		srai	a3,a3,16	#, angle, angle
 3127              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3128 1b5c 930C0500 		mv	s9,a0	# sin_theta, tmp264
 3129              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3130 1b60 13570701 		srli	a4,a4,16	#, _42, _42
 3131              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3132 1b64 63D00602 		bge	a3,zero,.L410	#, angle,,
 3133              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3134 1b68 B7270000 		li	a5,8192		# tmp206,
 3135 1b6c 93871700 		addi	a5,a5,1	#, tmp205, tmp206
 3136 1b70 330CFC00 		add	s8,s8,a5	# tmp205, tmp204, prephitmp_203
 3137 1b74 13170C01 		slli	a4,s8,16	#, _42, tmp204
 3138 1b78 93160C01 		slli	a3,s8,16	#, angle, tmp204
 3139 1b7c 13570701 		srli	a4,a4,16	#, _42, _42
 3140 1b80 93D60641 		srai	a3,a3,16	#, angle, angle
 3141              	.L410:
 3142              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 3143 1b84 93D78640 		srai	a5,a3,8	#, v0, angle
 3144              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3145 1b88 13960701 		slli	a2,a5,16	#, v0.41_84, v0
 3146              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3147 1b8c 93F50702 		andi	a1,a5,32	#, tmp210, v0
 3148              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3149 1b90 13560601 		srli	a2,a2,16	#, v0.41_84, v0.41_84
 3150              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3151 1b94 638A0500 		beq	a1,zero,.L411	#, tmp210,,
 3152              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3153 1b98 93C6F6FF 		not	a3,a3	# tmp214, angle
 3154              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3155 1b9c 13970601 		slli	a4,a3,16	#, _42, tmp214
 3156              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3157 1ba0 93C7F7FF 		not	a5,a5	# v0, v0
 3158              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3159 1ba4 13570701 		srli	a4,a4,16	#, _42, _42
 3160              	.L411:
 3161              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3162 1ba8 93F7F701 		andi	a5,a5,31	#, _90, v0
 3163              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3164 1bac 93861700 		addi	a3,a5,1	#, tmp222, _90
 3165 1bb0 93961600 		slli	a3,a3,1	#, tmp223, tmp222
 3166              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3167 1bb4 93971700 		slli	a5,a5,1	#, tmp218, _90
 3168 1bb8 B387FB00 		add	a5,s7,a5	# tmp218, tmp219, tmp258
 3169              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3170 1bbc B38BDB00 		add	s7,s7,a3	# tmp223, tmp224, tmp258
 3171              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3172 1bc0 83950700 		lh	a1,0(a5)		# _91, sin90[_90]
 3173              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3174 1bc4 83970B00 		lh	a5,0(s7)		# sin90[_93], sin90[_93]
 3175              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3176 1bc8 1377F70F 		andi	a4,a4,0xff	# tmp228, _42
 3177              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3178 1bcc 93760604 		andi	a3,a2,64	#, tmp236, v0.41_84
 3179              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3180 1bd0 B387B740 		sub	a5,a5,a1	# tmp226, sin90[_93], _91
 3181              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3182 1bd4 B387E702 		mul	a5,a5,a4	# tmp229, tmp226, tmp228
 3183              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3184 1bd8 93D78740 		srai	a5,a5,8	#, tmp230, tmp229
 3185              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3186 1bdc B387B700 		add	a5,a5,a1	# _91, tmp233, tmp230
 3187 1be0 93970701 		slli	a5,a5,16	#, _105, tmp233
 3188 1be4 93D70701 		srli	a5,a5,16	#, _105, _105
 3189              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3190 1be8 63880600 		beq	a3,zero,.L412	#, tmp236,,
 3191              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 3192 1bec B307F040 		neg	a5,a5	# tmp238, _105
 3193 1bf0 93970701 		slli	a5,a5,16	#, _105, tmp238
 3194 1bf4 93D70701 		srli	a5,a5,16	#, _105, _105
 3195              	.L412:
 3196              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 3197 1bf8 13950701 		slli	a0,a5,16	#,, _105
 3198 1bfc 13550541 		srai	a0,a0,16	#,,
 3199 1c00 97000000 		call	__floatsidf		#
 3199      E7800000 
 3200 1c08 03A60A00 		lw	a2,%lo(.LC3)(s5)		#,
 3201 1c0c 83A64A00 		lw	a3,%lo(.LC3+4)(s5)		#,
 3202 1c10 97000000 		call	__muldf3		#
 3202      E7800000 
 3203              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 3204 1c18 97000000 		call	__truncdfsf2		#
 3204      E7800000 
 3205 1c20 93070500 		mv	a5,a0	# tmp265,
 3206              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3207 1c24 13050900 		mv	a0,s2	#, _3
 3208              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 3209 1c28 13890700 		mv	s2,a5	# tmp243, tmp265
 3210              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3211 1c2c 97000000 		call	__floatsisf		#
 3211      E7800000 
 3212 1c34 930A0500 		mv	s5,a0	# tmp266,
 3213              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3214 1c38 13850400 		mv	a0,s1	#, _6
 3215 1c3c 97000000 		call	__floatsisf		#
 3215      E7800000 
 3216 1c44 93040500 		mv	s1,a0	# tmp267,
 3217              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3218 1c48 93050900 		mv	a1,s2	#, tmp243
 3219 1c4c 13850A00 		mv	a0,s5	#, _18
 3220 1c50 97000000 		call	__mulsf3		#
 3220      E7800000 
 3221 1c58 930B0500 		mv	s7,a0	# tmp244, tmp268
 3222              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3223 1c5c 93850C00 		mv	a1,s9	#, sin_theta
 3224 1c60 13850400 		mv	a0,s1	#, _20
 3225 1c64 97000000 		call	__mulsf3		#
 3225      E7800000 
 3226 1c6c 93050500 		mv	a1,a0	# tmp269,
 3227              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3228 1c70 13850B00 		mv	a0,s7	#, tmp244
 3229 1c74 97000000 		call	__subsf3		#
 3229      E7800000 
 3230 1c7c 930B0500 		mv	s7,a0	# tmp246, tmp270
 3231              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3232 1c80 13050A00 		mv	a0,s4	#, _2
 3233 1c84 97000000 		call	__floatsisf		#
 3233      E7800000 
 3234 1c8c 93050500 		mv	a1,a0	# tmp271,
 3235 1c90 13850B00 		mv	a0,s7	#, tmp246
 3236 1c94 97000000 		call	__addsf3		#
 3236      E7800000 
 3237              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3238 1c9c 97000000 		call	__fixsfsi		#
 3238      E7800000 
 3239              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 3240 1ca4 93850C00 		mv	a1,s9	#, sin_theta
 3241              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 3242 1ca8 2320A400 		sw	a0,0(s0)	# tmp272, <retval>.x
 3243              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 3244 1cac 13850A00 		mv	a0,s5	#, _18
 3245 1cb0 97000000 		call	__mulsf3		#
 3245      E7800000 
 3246 1cb8 130A0500 		mv	s4,a0	# tmp250, tmp273
 3247              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 3248 1cbc 93050900 		mv	a1,s2	#, tmp243
 3249 1cc0 13850400 		mv	a0,s1	#, _20
 3250 1cc4 97000000 		call	__mulsf3		#
 3250      E7800000 
 3251 1ccc 93050500 		mv	a1,a0	# tmp274,
 3252              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 3253 1cd0 13050A00 		mv	a0,s4	#, tmp250
 3254 1cd4 97000000 		call	__addsf3		#
 3254      E7800000 
 3255 1cdc 93040500 		mv	s1,a0	# tmp252, tmp275
 3256              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 3257 1ce0 13850900 		mv	a0,s3	#, _5
 3258 1ce4 97000000 		call	__floatsisf		#
 3258      E7800000 
 3259 1cec 93050500 		mv	a1,a0	# tmp276,
 3260 1cf0 13850400 		mv	a0,s1	#, tmp252
 3261 1cf4 97000000 		call	__addsf3		#
 3261      E7800000 
 3262              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 3263 1cfc 97000000 		call	__fixsfsi		#
 3263      E7800000 
 3264 1d04 2322A400 		sw	a0,4(s0)	# tmp277, <retval>.y
 3265              	# gfx_lib_hdmi.h:303:   return transformed;
 3266 1d08 23246401 		sw	s6,8(s0)	# _7, <retval>.z
 3267              	# gfx_lib_hdmi.h:304: }
 3268 1d0c 8320C102 		lw	ra,44(sp)		#,
 3269 1d10 13050400 		mv	a0,s0	#, .result_ptr
 3270 1d14 03248102 		lw	s0,40(sp)		#,
 3271 1d18 83244102 		lw	s1,36(sp)		#,
 3272 1d1c 03290102 		lw	s2,32(sp)		#,
 3273 1d20 8329C101 		lw	s3,28(sp)		#,
 3274 1d24 032A8101 		lw	s4,24(sp)		#,
 3275 1d28 832A4101 		lw	s5,20(sp)		#,
 3276 1d2c 032B0101 		lw	s6,16(sp)		#,
 3277 1d30 832BC100 		lw	s7,12(sp)		#,
 3278 1d34 032C8100 		lw	s8,8(sp)		#,
 3279 1d38 832C4100 		lw	s9,4(sp)		#,
 3280 1d3c 13010103 		addi	sp,sp,48	#,,
 3281 1d40 67800000 		jr	ra		#
 3283              		.align	2
 3284              		.globl	render_lines
 3286              	render_lines:
 3287 1d44 130101F7 		addi	sp,sp,-144	#,,
 3288              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 3289 1d48 9385F5FF 		addi	a1,a1,-1	#, _82, tmp863
 3290              	# main_cube3d_rotate_hdmi.c:71: void render_lines(point points [], size_t s, float angle_x, float a
 3291 1d4c 23261108 		sw	ra,140(sp)	#,
 3292 1d50 23248108 		sw	s0,136(sp)	#,
 3293 1d54 23229108 		sw	s1,132(sp)	#,
 3294 1d58 23202109 		sw	s2,128(sp)	#,
 3295 1d5c 232E3107 		sw	s3,124(sp)	#,
 3296 1d60 232C4107 		sw	s4,120(sp)	#,
 3297 1d64 232A5107 		sw	s5,116(sp)	#,
 3298 1d68 23286107 		sw	s6,112(sp)	#,
 3299 1d6c 23267107 		sw	s7,108(sp)	#,
 3300 1d70 23248107 		sw	s8,104(sp)	#,
 3301 1d74 23229107 		sw	s9,100(sp)	#,
 3302 1d78 2320A107 		sw	s10,96(sp)	#,
 3303 1d7c 232EB105 		sw	s11,92(sp)	#,
 3304              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 3305 1d80 2324B102 		sw	a1,40(sp)	# _82, %sfp
 3306              	# main_cube3d_rotate_hdmi.c:71: void render_lines(point points [], size_t s, float angle_x, float a
 3307 1d84 2328A100 		sw	a0,16(sp)	# tmp862, %sfp
 3308              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 3309 1d88 E3860536 		beq	a1,zero,.L425	#, _82,,
 3310 1d8c 93840700 		mv	s1,a5	# scalef, tmp867
 3311              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3312 1d90 B7070000 		lui	a5,%hi(.LC4)	# tmp418,
 3313 1d94 83A50700 		lw	a1,%lo(.LC4)(a5)		#,
 3314 1d98 13850400 		mv	a0,s1	#, scalef
 3315 1d9c 130A0600 		mv	s4,a2	# angle_x, tmp864
 3316 1da0 13840600 		mv	s0,a3	# angle_y, tmp865
 3317 1da4 93090700 		mv	s3,a4	# angle_z, tmp866
 3318 1da8 97000000 		call	__mulsf3		#
 3318      E7800000 
 3319              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3320 1db0 B7070000 		lui	a5,%hi(.LC5)	# tmp956,
 3321              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3322 1db4 13090500 		mv	s2,a0	# tmp868,
 3323              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3324 1db8 03A50700 		lw	a0,%lo(.LC5)(a5)		#,
 3325 1dbc 93050900 		mv	a1,s2	#, tmp419
 3326              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3327 1dc0 B70A0080 		li	s5,-2147483648		# tmp427,
 3328              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3329 1dc4 97000000 		call	__subsf3		#
 3329      E7800000 
 3330              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3331 1dcc 97000000 		call	__fixsfsi		#
 3331      E7800000 
 3332              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3333 1dd4 37070000 		lui	a4,%hi(.LC6)	# tmp422,
 3334 1dd8 83250700 		lw	a1,%lo(.LC6)(a4)		#,
 3335              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3336 1ddc 93070500 		mv	a5,a0	# tmp869,
 3337              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3338 1de0 13850400 		mv	a0,s1	#, scalef
 3339              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3340 1de4 2326F100 		sw	a5,12(sp)	# tmp869, %sfp
 3341              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3342 1de8 97000000 		call	__mulsf3		#
 3342      E7800000 
 3343              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3344 1df0 B7070000 		lui	a5,%hi(.LC7)	# tmp957,
 3345              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3346 1df4 93050500 		mv	a1,a0	# tmp870,
 3347              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3348 1df8 03A50700 		lw	a0,%lo(.LC7)(a5)		#,
 3349 1dfc 97000000 		call	__subsf3		#
 3349      E7800000 
 3350              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3351 1e04 97000000 		call	__fixsfsi		#
 3351      E7800000 
 3352 1e0c 130C0500 		mv	s8,a0	# tmp871,
 3353 1e10 33C52A01 		xor	a0,s5,s2	# tmp419,, tmp427
 3354 1e14 23268103 		sw	s8,44(sp)	# tmp871, %sfp
 3355 1e18 97000000 		call	__fixsfsi		#
 3355      E7800000 
 3356 1e20 930C0500 		mv	s9,a0	# tmp872,
 3357              	# main_cube3d_rotate_hdmi.c:85:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 3358 1e24 33C54A01 		xor	a0,s5,s4	# angle_x,, tmp427
 3359              	# main_cube3d_rotate_hdmi.c:80:     p0 = translate(&p0, HRES/2 -5*scalef, VRES/2 -15*scalef, -5*sca
 3360 1e28 23289103 		sw	s9,48(sp)	# tmp872, %sfp
 3361              	# main_cube3d_rotate_hdmi.c:85:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 3362 1e2c 97000000 		call	__fixsfsi		#
 3362      E7800000 
 3363              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 3364 1e34 97000000 		call	__floatsidf		#
 3364      E7800000 
 3365 1e3c B70A0000 		lui	s5,%hi(.LC1)	# tmp812,
 3366 1e40 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3367 1e44 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3368 1e48 370A0000 		lui	s4,%hi(.LC2)	# tmp813,
 3369 1e4c 97000000 		call	__muldf3		#
 3369      E7800000 
 3370 1e54 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3371 1e58 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3372 1e5c 97000000 		call	__divdf3		#
 3372      E7800000 
 3373 1e64 97000000 		call	__fixdfsi		#
 3373      E7800000 
 3374 1e6c 13150501 		slli	a0,a0,16	#, _296, tmp873
 3375 1e70 13550541 		srai	a0,a0,16	#, _296, _296
 3376              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3377 1e74 B787FFFF 		li	a5,-32768		# tmp438,
 3378 1e78 B307F500 		add	a5,a0,a5	# tmp438, _296, _296
 3379 1e7c 63440500 		blt	a0,zero,.L428	#, _296,,
 3380 1e80 93070500 		mv	a5,a0	# _296, _296
 3381              	.L428:
 3382 1e84 139B0701 		slli	s6,a5,16	#, angle, _296
 3383 1e88 135B0B41 		srai	s6,s6,16	#, angle, angle
 3384              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 3385 1e8c 13578B40 		srai	a4,s6,8	#, v0, angle
 3386              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3387 1e90 93C7F7FF 		not	a5,a5	# tmp447, _296
 3388              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3389 1e94 93160701 		slli	a3,a4,16	#, v0.41_331, v0
 3390              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3391 1e98 93970701 		slli	a5,a5,16	#, v1, tmp447
 3392              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3393 1e9c 93D60601 		srli	a3,a3,16	#, v0.41_331, v0.41_331
 3394              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3395 1ea0 93D70741 		srai	a5,a5,16	#, v1, v1
 3396 1ea4 937B0702 		andi	s7,a4,32	#, _332, v0
 3397              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3398 1ea8 232AD100 		sw	a3,20(sp)	# v0.41_331, %sfp
 3399              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3400 1eac 232CF100 		sw	a5,24(sp)	# v1, %sfp
 3401 1eb0 1349F7FF 		not	s2,a4	# v0, v0
 3402 1eb4 E3820B30 		beq	s7,zero,.L483	#, _332,,
 3403              	.L430:
 3404              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3405 1eb8 93170B01 		slli	a5,s6,16	#, angle.46_305, angle
 3406 1ebc 37A7FFFF 		li	a4,-24576		# tmp452,
 3407 1ec0 93D70701 		srli	a5,a5,16	#, angle.46_305, angle.46_305
 3408 1ec4 13071700 		addi	a4,a4,1	#, tmp451, tmp452
 3409 1ec8 3387E700 		add	a4,a5,a4	# tmp451, tmp450, angle.46_305
 3410              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3411 1ecc 13170701 		slli	a4,a4,16	#, _307, tmp450
 3412 1ed0 B7260000 		li	a3,8192		# tmp455,
 3413 1ed4 93861600 		addi	a3,a3,1	#, tmp454, tmp455
 3414 1ed8 13570741 		srai	a4,a4,16	#, _307, _307
 3415              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3416 1edc 1379F901 		andi	s2,s2,31	#, _337, v0
 3417 1ee0 B387D700 		add	a5,a5,a3	# tmp454, _307, angle.46_305
 3418 1ee4 63440700 		blt	a4,zero,.L432	#, _307,,
 3419 1ee8 93070700 		mv	a5,a4	# _307, _307
 3420              	.L432:
 3421 1eec 939D0701 		slli	s11,a5,16	#, angle, _307
 3422 1ef0 93DD0D41 		srai	s11,s11,16	#, angle, angle
 3423              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 3424 1ef4 13D78D40 		srai	a4,s11,8	#, v0, angle
 3425              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3426 1ef8 93C7F7FF 		not	a5,a5	# tmp462, _307
 3427              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3428 1efc 93160701 		slli	a3,a4,16	#, v0.41_362, v0
 3429              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3430 1f00 93970701 		slli	a5,a5,16	#, v1, tmp462
 3431 1f04 93D70741 		srai	a5,a5,16	#, v1, v1
 3432              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3433 1f08 93D60601 		srli	a3,a3,16	#, v0.41_362, v0.41_362
 3434              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3435 1f0c 2320F102 		sw	a5,32(sp)	# v1, %sfp
 3436 1f10 137D0702 		andi	s10,a4,32	#, _363, v0
 3437              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3438 1f14 232ED100 		sw	a3,28(sp)	# v0.41_362, %sfp
 3439 1f18 9347F7FF 		not	a5,a4	# v0, v0
 3440 1f1c E30A0D28 		beq	s10,zero,.L484	#, _363,,
 3441              	.L434:
 3442              	# main_cube3d_rotate_hdmi.c:87:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3443 1f20 37050080 		li	a0,-2147483648		# tmp466,
 3444              	# main_cube3d_rotate_hdmi.c:87:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3445 1f24 33458500 		xor	a0,a0,s0	# angle_y,, tmp466
 3446              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3447 1f28 13F4F701 		andi	s0,a5,31	#, _368, v0
 3448              	# main_cube3d_rotate_hdmi.c:87:     p0 = rotateY_pivot(&p0, &pivot, -angle_y);
 3449 1f2c 97000000 		call	__fixsfsi		#
 3449      E7800000 
 3450              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 3451 1f34 97000000 		call	__floatsidf		#
 3451      E7800000 
 3452 1f3c 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3453 1f40 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3454 1f44 97000000 		call	__muldf3		#
 3454      E7800000 
 3455 1f4c 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3456 1f50 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3457 1f54 97000000 		call	__divdf3		#
 3457      E7800000 
 3458 1f5c 97000000 		call	__fixdfsi		#
 3458      E7800000 
 3459 1f64 13150501 		slli	a0,a0,16	#, _216, tmp874
 3460 1f68 13550541 		srai	a0,a0,16	#, _216, _216
 3461              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3462 1f6c B787FFFF 		li	a5,-32768		# tmp475,
 3463 1f70 B307F500 		add	a5,a0,a5	# tmp475, _216, _216
 3464 1f74 63440500 		blt	a0,zero,.L436	#, _216,,
 3465 1f78 93070500 		mv	a5,a0	# _216, _216
 3466              	.L436:
 3467 1f7c 13980701 		slli	a6,a5,16	#, angle, _216
 3468 1f80 13580841 		srai	a6,a6,16	#, angle, angle
 3469              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 3470 1f84 13578840 		srai	a4,a6,8	#, v0, angle
 3471              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3472 1f88 93C7F7FF 		not	a5,a5	# tmp484, _216
 3473              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3474 1f8c 93160701 		slli	a3,a4,16	#, v0.41_455, v0
 3475              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3476 1f90 93970701 		slli	a5,a5,16	#, v1, tmp484
 3477              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3478 1f94 93D60601 		srli	a3,a3,16	#, v0.41_455, v0.41_455
 3479              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3480 1f98 93D70741 		srai	a5,a5,16	#, v1, v1
 3481 1f9c 13730702 		andi	t1,a4,32	#, _456, v0
 3482              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3483 1fa0 2322D102 		sw	a3,36(sp)	# v0.41_455, %sfp
 3484              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3485 1fa4 232AF102 		sw	a5,52(sp)	# v1, %sfp
 3486 1fa8 134EF7FF 		not	t3,a4	# v0, v0
 3487 1fac E30E031E 		beq	t1,zero,.L485	#, _456,,
 3488              	.L438:
 3489              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3490 1fb0 93170801 		slli	a5,a6,16	#, angle.46_225, angle
 3491 1fb4 37A7FFFF 		li	a4,-24576		# tmp489,
 3492 1fb8 93D70701 		srli	a5,a5,16	#, angle.46_225, angle.46_225
 3493 1fbc 13071700 		addi	a4,a4,1	#, tmp488, tmp489
 3494 1fc0 3387E700 		add	a4,a5,a4	# tmp488, tmp487, angle.46_225
 3495              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3496 1fc4 13170701 		slli	a4,a4,16	#, _227, tmp487
 3497 1fc8 B7260000 		li	a3,8192		# tmp492,
 3498 1fcc 93861600 		addi	a3,a3,1	#, tmp491, tmp492
 3499 1fd0 13570741 		srai	a4,a4,16	#, _227, _227
 3500              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3501 1fd4 137EFE01 		andi	t3,t3,31	#, _461, v0
 3502 1fd8 B387D700 		add	a5,a5,a3	# tmp491, _227, angle.46_225
 3503 1fdc 63440700 		blt	a4,zero,.L440	#, _227,,
 3504 1fe0 93070700 		mv	a5,a4	# _227, _227
 3505              	.L440:
 3506 1fe4 139C0701 		slli	s8,a5,16	#, angle, _227
 3507 1fe8 135C0C41 		srai	s8,s8,16	#, angle, angle
 3508              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 3509 1fec 13578C40 		srai	a4,s8,8	#, v0, angle
 3510              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3511 1ff0 93C7F7FF 		not	a5,a5	# tmp499, _227
 3512              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3513 1ff4 93160701 		slli	a3,a4,16	#, v0.41_486, v0
 3514              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3515 1ff8 93970701 		slli	a5,a5,16	#, v1, tmp499
 3516 1ffc 93D70741 		srai	a5,a5,16	#, v1, v1
 3517              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3518 2000 93D60601 		srli	a3,a3,16	#, v0.41_486, v0.41_486
 3519              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3520 2004 232EF102 		sw	a5,60(sp)	# v1, %sfp
 3521 2008 93780702 		andi	a7,a4,32	#, _487, v0
 3522              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3523 200c 232CD102 		sw	a3,56(sp)	# v0.41_486, %sfp
 3524 2010 9347F7FF 		not	a5,a4	# v0, v0
 3525 2014 E3860818 		beq	a7,zero,.L486	#, _487,,
 3526              	.L442:
 3527              	# main_cube3d_rotate_hdmi.c:89:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 3528 2018 13850900 		mv	a0,s3	#, angle_z
 3529 201c 23261105 		sw	a7,76(sp)	# _487, %sfp
 3530 2020 2324C105 		sw	t3,72(sp)	# _461, %sfp
 3531 2024 23226104 		sw	t1,68(sp)	# _456, %sfp
 3532 2028 23200105 		sw	a6,64(sp)	# angle, %sfp
 3533              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3534 202c 93F9F701 		andi	s3,a5,31	#, _492, v0
 3535              	# main_cube3d_rotate_hdmi.c:89:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 3536 2030 97000000 		call	__fixsfsi		#
 3536      E7800000 
 3537              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3538 2038 97000000 		call	__floatsidf		#
 3538      E7800000 
 3539 2040 03A60A00 		lw	a2,%lo(.LC1)(s5)		#,
 3540 2044 83A64A00 		lw	a3,%lo(.LC1+4)(s5)		#,
 3541 2048 97000000 		call	__muldf3		#
 3541      E7800000 
 3542 2050 03260A00 		lw	a2,%lo(.LC2)(s4)		#,
 3543 2054 83264A00 		lw	a3,%lo(.LC2+4)(s4)		#,
 3544 2058 97000000 		call	__divdf3		#
 3544      E7800000 
 3545 2060 97000000 		call	__fixdfsi		#
 3545      E7800000 
 3546 2068 13150501 		slli	a0,a0,16	#, _136, tmp875
 3547 206c 13550541 		srai	a0,a0,16	#, _136, _136
 3548              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 3549 2070 B787FFFF 		li	a5,-32768		# tmp510,
 3550 2074 03280104 		lw	a6,64(sp)		# angle, %sfp
 3551 2078 03234104 		lw	t1,68(sp)		# _456, %sfp
 3552 207c 032E8104 		lw	t3,72(sp)		# _461, %sfp
 3553 2080 8328C104 		lw	a7,76(sp)		# _487, %sfp
 3554 2084 B307F500 		add	a5,a0,a5	# tmp510, _136, _136
 3555 2088 63440500 		blt	a0,zero,.L444	#, _136,,
 3556 208c 93070500 		mv	a5,a0	# _136, _136
 3557              	.L444:
 3558 2090 13950701 		slli	a0,a5,16	#, angle, _136
 3559 2094 13550541 		srai	a0,a0,16	#, angle, angle
 3560              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 3561 2098 13578540 		srai	a4,a0,8	#, v0, angle
 3562              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3563 209c 93160701 		slli	a3,a4,16	#, v0.41_579, v0
 3564              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3565 20a0 93C7F7FF 		not	a5,a5	# tmp519, _136
 3566              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3567 20a4 93D60601 		srli	a3,a3,16	#, v0.41_579, v0.41_579
 3568              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3569 20a8 139A0701 		slli	s4,a5,16	#, v1, tmp519
 3570 20ac 137F0702 		andi	t5,a4,32	#, _580, v0
 3571              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3572 20b0 2320D104 		sw	a3,64(sp)	# v0.41_579, %sfp
 3573              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3574 20b4 135A0A41 		srai	s4,s4,16	#, v1, v1
 3575 20b8 9345F7FF 		not	a1,a4	# v0, v0
 3576 20bc E30E0F0C 		beq	t5,zero,.L487	#, _580,,
 3577              	.L446:
 3578              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3579 20c0 93170501 		slli	a5,a0,16	#, angle.46_145, angle
 3580 20c4 37A7FFFF 		li	a4,-24576		# tmp524,
 3581 20c8 93D70701 		srli	a5,a5,16	#, angle.46_145, angle.46_145
 3582 20cc 13071700 		addi	a4,a4,1	#, tmp523, tmp524
 3583 20d0 3387E700 		add	a4,a5,a4	# tmp523, tmp522, angle.46_145
 3584              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 3585 20d4 13170701 		slli	a4,a4,16	#, _147, tmp522
 3586 20d8 B7260000 		li	a3,8192		# tmp527,
 3587 20dc 93861600 		addi	a3,a3,1	#, tmp526, tmp527
 3588 20e0 13570741 		srai	a4,a4,16	#, _147, _147
 3589              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3590 20e4 93F5F501 		andi	a1,a1,31	#, _585, v0
 3591 20e8 B387D700 		add	a5,a5,a3	# tmp526, _147, angle.46_145
 3592 20ec 63440700 		blt	a4,zero,.L448	#, _147,,
 3593 20f0 93070700 		mv	a5,a4	# _147, _147
 3594              	.L448:
 3595 20f4 939F0701 		slli	t6,a5,16	#, angle, _147
 3596 20f8 93DF0F41 		srai	t6,t6,16	#, angle, angle
 3597              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 3598 20fc 13D78F40 		srai	a4,t6,8	#, v0, angle
 3599              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3600 2100 93C7F7FF 		not	a5,a5	# tmp534, _147
 3601              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3602 2104 931C0701 		slli	s9,a4,16	#, v0.41_610, v0
 3603              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3604 2108 93970701 		slli	a5,a5,16	#, v1, tmp534
 3605 210c 937E0702 		andi	t4,a4,32	#, _611, v0
 3606              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3607 2110 93DC0C01 		srli	s9,s9,16	#, v0.41_610, v0.41_610
 3608              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 3609 2114 93D70741 		srai	a5,a5,16	#, v1, v1
 3610 2118 1346F7FF 		not	a2,a4	# v0, v0
 3611 211c E38A0E06 		beq	t4,zero,.L488	#, _611,,
 3612              	.L450:
 3613              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3614 2120 93061900 		addi	a3,s2,1	#, tmp543, _337
 3615              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3616 2124 37070000 		lui	a4,%hi(.LANCHOR1)	# tmp817,
 3617 2128 13070700 		addi	a4,a4,%lo(.LANCHOR1)	# tmp811, tmp817,
 3618 212c 13191900 		slli	s2,s2,1	#, tmp539, _337
 3619              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3620 2130 93961600 		slli	a3,a3,1	#, tmp544, tmp543
 3621              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3622 2134 33092701 		add	s2,a4,s2	# tmp539, tmp540, tmp811
 3623              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3624 2138 B306D700 		add	a3,a4,a3	# tmp544, tmp545, tmp811
 3625              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3626 213c 83130900 		lh	t2,0(s2)		# pretmp_412, sin90[_337]
 3627              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3628 2140 83960600 		lh	a3,0(a3)		# sin90[_340], sin90[_340]
 3629              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3630 2144 83528101 		lhu	t0,24(sp)	#, %sfp
 3631              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3632 2148 1376F601 		andi	a2,a2,31	#, _616, v0
 3633              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3634 214c B3867640 		sub	a3,a3,t2	# tmp547, sin90[_340], pretmp_412
 3635              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3636 2150 E38C0B02 		beq	s7,zero,.L489	#, _332,,
 3637              	.L452:
 3638 2154 93F2F20F 		andi	t0,t0,0xff	# tmp550, v1
 3639              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3640 2158 B3865602 		mul	a3,a3,t0	# tmp551, tmp547, tmp550
 3641              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3642 215c 93021400 		addi	t0,s0,1	#, tmp562, _368
 3643 2160 93921200 		slli	t0,t0,1	#, tmp563, tmp562
 3644              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3645 2164 13141400 		slli	s0,s0,1	#, tmp558, _368
 3646 2168 33048700 		add	s0,a4,s0	# tmp558, tmp559, tmp811
 3647              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3648 216c B3025700 		add	t0,a4,t0	# tmp563, tmp564, tmp811
 3649              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3650 2170 03140400 		lh	s0,0(s0)		# pretmp_178, sin90[_368]
 3651              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3652 2174 83920200 		lh	t0,0(t0)		# sin90[_371], sin90[_371]
 3653              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3654 2178 03590102 		lhu	s2,32(sp)	#, %sfp
 3655              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3656 217c 93D68640 		srai	a3,a3,8	#, tmp552, tmp551
 3657              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3658 2180 B3867600 		add	a3,a3,t2	# pretmp_412, tmp555, tmp552
 3659 2184 93960601 		slli	a3,a3,16	#, _542, tmp555
 3660 2188 93D60601 		srli	a3,a3,16	#, _542, _542
 3661              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3662 218c B3828240 		sub	t0,t0,s0	# tmp566, sin90[_371], pretmp_178
 3663              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3664 2190 63080D7E 		beq	s10,zero,.L490	#, _363,,
 3665              	.L454:
 3666 2194 1379F90F 		andi	s2,s2,0xff	# tmp569, v1
 3667              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3668 2198 33892203 		mul	s2,t0,s2	# tmp570, tmp566, tmp569
 3669              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3670 219c 93031E00 		addi	t2,t3,1	#, tmp581, _461
 3671 21a0 93931300 		slli	t2,t2,1	#, tmp582, tmp581
 3672              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3673 21a4 131E1E00 		slli	t3,t3,1	#, tmp577, _461
 3674 21a8 330EC701 		add	t3,a4,t3	# tmp577, tmp578, tmp811
 3675              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3676 21ac B3037700 		add	t2,a4,t2	# tmp582, tmp583, tmp811
 3677              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3678 21b0 83120E00 		lh	t0,0(t3)		# pretmp_562, sin90[_461]
 3679              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3680 21b4 039E0300 		lh	t3,0(t2)		# sin90[_464], sin90[_464]
 3681              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3682 21b8 83534103 		lhu	t2,52(sp)	#, %sfp
 3683              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3684 21bc 13598940 		srai	s2,s2,8	#, tmp571, tmp570
 3685              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3686 21c0 33098900 		add	s2,s2,s0	# pretmp_178, tmp574, tmp571
 3687 21c4 931A0901 		slli	s5,s2,16	#, _552, tmp574
 3688 21c8 93DA0A01 		srli	s5,s5,16	#, _552, _552
 3689              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3690 21cc 330E5E40 		sub	t3,t3,t0	# tmp585, sin90[_464], pretmp_562
 3691              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3692 21d0 6304037A 		beq	t1,zero,.L491	#, _456,,
 3693              	.L456:
 3694 21d4 93F3F30F 		andi	t2,t2,0xff	# tmp588, v1
 3695              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3696 21d8 B3037E02 		mul	t2,t3,t2	# tmp589, tmp585, tmp588
 3697              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3698 21dc 13881900 		addi	a6,s3,1	#, tmp600, _492
 3699 21e0 13181800 		slli	a6,a6,1	#, tmp601, tmp600
 3700              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3701 21e4 93991900 		slli	s3,s3,1	#, tmp596, _492
 3702 21e8 B3093701 		add	s3,a4,s3	# tmp596, tmp597, tmp811
 3703              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3704 21ec 33080701 		add	a6,a4,a6	# tmp601, tmp602, tmp811
 3705              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3706 21f0 03930900 		lh	t1,0(s3)		# pretmp_565, sin90[_492]
 3707              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3708 21f4 03180800 		lh	a6,0(a6)		# sin90[_495], sin90[_495]
 3709              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3710 21f8 035EC103 		lhu	t3,60(sp)	#, %sfp
 3711              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3712 21fc 93D38340 		srai	t2,t2,8	#, tmp590, tmp589
 3713              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3714 2200 B3835300 		add	t2,t2,t0	# pretmp_562, tmp593, tmp590
 3715 2204 139D0301 		slli	s10,t2,16	#, _564, tmp593
 3716 2208 135D0D01 		srli	s10,s10,16	#, _564, _564
 3717              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3718 220c 33086840 		sub	a6,a6,t1	# tmp604, sin90[_495], pretmp_565
 3719              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3720 2210 63800876 		beq	a7,zero,.L492	#, _487,,
 3721              	.L458:
 3722 2214 137EFE0F 		andi	t3,t3,0xff	# tmp607, v1
 3723              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3724 2218 3308C803 		mul	a6,a6,t3	# tmp608, tmp604, tmp607
 3725              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3726 221c 93881500 		addi	a7,a1,1	#, tmp619, _585
 3727 2220 93981800 		slli	a7,a7,1	#, tmp620, tmp619
 3728              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3729 2224 93951500 		slli	a1,a1,1	#, tmp615, _585
 3730              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3731 2228 B3081701 		add	a7,a4,a7	# tmp620, tmp621, tmp811
 3732              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3733 222c B305B700 		add	a1,a4,a1	# tmp615, tmp616, tmp811
 3734              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3735 2230 83990800 		lh	s3,0(a7)		# sin90[_588], sin90[_588]
 3736              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3737 2234 83950500 		lh	a1,0(a1)		# pretmp_200, sin90[_585]
 3738              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3739 2238 93080A00 		mv	a7,s4	# v1, v1
 3740              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3741 223c 935B8840 		srai	s7,a6,8	#, tmp609, tmp608
 3742              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3743 2240 B38B6B00 		add	s7,s7,t1	# pretmp_565, tmp612, tmp609
 3744 2244 939B0B01 		slli	s7,s7,16	#, _192, tmp612
 3745 2248 93DB0B01 		srli	s7,s7,16	#, _192, _192
 3746              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3747 224c B389B940 		sub	s3,s3,a1	# tmp623, sin90[_588], pretmp_200
 3748              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3749 2250 630C0F70 		beq	t5,zero,.L493	#, _580,,
 3750              	.L460:
 3751 2254 93F8F80F 		andi	a7,a7,0xff	# tmp626, v1
 3752              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3753 2258 B3891903 		mul	s3,s3,a7	# tmp627, tmp623, tmp626
 3754              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3755 225c 13051600 		addi	a0,a2,1	#, tmp638, _616
 3756 2260 13151500 		slli	a0,a0,1	#, tmp639, tmp638
 3757              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3758 2264 13161600 		slli	a2,a2,1	#, tmp634, _616
 3759 2268 3306C700 		add	a2,a4,a2	# tmp634, tmp635, tmp811
 3760              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3761 226c 3307A700 		add	a4,a4,a0	# tmp639, tmp640, tmp811
 3762              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3763 2270 03160600 		lh	a2,0(a2)		# pretmp_90, sin90[_616]
 3764              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3765 2274 03190700 		lh	s2,0(a4)		# sin90[_619], sin90[_619]
 3766              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3767 2278 93D98940 		srai	s3,s3,8	#, tmp628, tmp627
 3768              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3769 227c B389B900 		add	s3,s3,a1	# pretmp_200, tmp631, tmp628
 3770 2280 93990901 		slli	s3,s3,16	#, _89, tmp631
 3771 2284 93D90901 		srli	s3,s3,16	#, _89, _89
 3772              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3773 2288 3309C940 		sub	s2,s2,a2	# tmp642, sin90[_619], pretmp_90
 3774              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3775 228c 638A0E6C 		beq	t4,zero,.L494	#, _611,,
 3776              	.L462:
 3777 2290 93F7F70F 		andi	a5,a5,0xff	# tmp645, v1
 3778              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3779 2294 3309F902 		mul	s2,s2,a5	# tmp646, tmp642, tmp645
 3780              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 3781 2298 83274101 		lw	a5,20(sp)		# v0.41_331, %sfp
 3782 229c 03240101 		lw	s0,16(sp)		# ivtmp.455, %sfp
 3783 22a0 13850600 		mv	a0,a3	# v1, _542
 3784 22a4 93F70704 		andi	a5,a5,64	#, tmp654, v0.41_331
 3785              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3786 22a8 13598940 		srai	s2,s2,8	#, tmp647, tmp646
 3787              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 3788 22ac 3309C900 		add	s2,s2,a2	# pretmp_90, tmp650, tmp647
 3789 22b0 13190901 		slli	s2,s2,16	#, _655, tmp650
 3790 22b4 13590901 		srli	s2,s2,16	#, _655, _655
 3791              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 3792 22b8 6390076A 		bne	a5,zero,.L495	#, tmp654,,
 3793              	.L464:
 3794 22bc 13150501 		slli	a0,a0,16	#,, v1
 3795 22c0 13550541 		srai	a0,a0,16	#,,
 3796 22c4 97000000 		call	__floatsidf		#
 3796      E7800000 
 3797 22cc 370B0000 		lui	s6,%hi(.LC3)	# tmp814,
 3798 22d0 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3799 22d4 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3800 22d8 97000000 		call	__muldf3		#
 3800      E7800000 
 3801              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 3802 22e0 97000000 		call	__truncdfsf2		#
 3802      E7800000 
 3803              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 3804 22e8 8327C101 		lw	a5,28(sp)		# v0.41_362, %sfp
 3805              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 3806 22ec 130A0500 		mv	s4,a0	# sin_theta, tmp876
 3807              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 3808 22f0 13850A00 		mv	a0,s5	# v1, _552
 3809 22f4 93F70704 		andi	a5,a5,64	#, tmp665, v0.41_362
 3810 22f8 639C0764 		bne	a5,zero,.L496	#, tmp665,,
 3811              	.L466:
 3812 22fc 13150501 		slli	a0,a0,16	#,, v1
 3813 2300 13550541 		srai	a0,a0,16	#,,
 3814 2304 97000000 		call	__floatsidf		#
 3814      E7800000 
 3815 230c 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3816 2310 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3817 2314 97000000 		call	__muldf3		#
 3817      E7800000 
 3818              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 3819 231c 97000000 		call	__truncdfsf2		#
 3819      E7800000 
 3820              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 3821 2324 83274102 		lw	a5,36(sp)		# v0.41_455, %sfp
 3822              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 3823 2328 930A0500 		mv	s5,a0	# cos_theta, tmp877
 3824              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 3825 232c 13050D00 		mv	a0,s10	# v1, _564
 3826 2330 93F70704 		andi	a5,a5,64	#, tmp676, v0.41_455
 3827 2334 639A0760 		bne	a5,zero,.L497	#, tmp676,,
 3828              	.L468:
 3829 2338 13150501 		slli	a0,a0,16	#,, v1
 3830 233c 13550541 		srai	a0,a0,16	#,,
 3831 2340 97000000 		call	__floatsidf		#
 3831      E7800000 
 3832 2348 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3833 234c 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3834 2350 97000000 		call	__muldf3		#
 3834      E7800000 
 3835              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 3836 2358 97000000 		call	__truncdfsf2		#
 3836      E7800000 
 3837              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 3838 2360 83278103 		lw	a5,56(sp)		# v0.41_486, %sfp
 3839              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 3840 2364 2328A100 		sw	a0,16(sp)	# tmp878, %sfp
 3841              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 3842 2368 33057041 		neg	a0,s7	# v1, _192
 3843 236c 93F70704 		andi	a5,a5,64	#, tmp687, v0.41_486
 3844 2370 6388075C 		beq	a5,zero,.L498	#, tmp687,,
 3845              	.L470:
 3846 2374 13150501 		slli	a0,a0,16	#,, v1
 3847 2378 13550541 		srai	a0,a0,16	#,,
 3848 237c 97000000 		call	__floatsidf		#
 3848      E7800000 
 3849 2384 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3850 2388 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3851 238c 97000000 		call	__muldf3		#
 3851      E7800000 
 3852              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 3853 2394 97000000 		call	__truncdfsf2		#
 3853      E7800000 
 3854              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3855 239c 83270104 		lw	a5,64(sp)		# v0.41_579, %sfp
 3856              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 3857 23a0 232AA100 		sw	a0,20(sp)	# tmp879, %sfp
 3858              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3859 23a4 33053041 		neg	a0,s3	# v1, _89
 3860 23a8 93F70704 		andi	a5,a5,64	#, tmp698, v0.41_579
 3861 23ac 63860758 		beq	a5,zero,.L499	#, tmp698,,
 3862              	.L472:
 3863 23b0 13150501 		slli	a0,a0,16	#,, v1
 3864 23b4 13550541 		srai	a0,a0,16	#,,
 3865 23b8 97000000 		call	__floatsidf		#
 3865      E7800000 
 3866 23c0 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3867 23c4 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3868 23c8 97000000 		call	__muldf3		#
 3868      E7800000 
 3869              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3870 23d0 97000000 		call	__truncdfsf2		#
 3870      E7800000 
 3871              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 3872 23d8 93F70C04 		andi	a5,s9,64	#, tmp709, v0.41_610
 3873              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 3874 23dc 93090500 		mv	s3,a0	# sin_theta, tmp880
 3875              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 3876 23e0 13050900 		mv	a0,s2	# v1, _655
 3877 23e4 63960754 		bne	a5,zero,.L500	#, tmp709,,
 3878              	.L474:
 3879 23e8 13150501 		slli	a0,a0,16	#,, v1
 3880 23ec 13550541 		srai	a0,a0,16	#,,
 3881 23f0 97000000 		call	__floatsidf		#
 3881      E7800000 
 3882 23f8 03260B00 		lw	a2,%lo(.LC3)(s6)		#,
 3883 23fc 83264B00 		lw	a3,%lo(.LC3+4)(s6)		#,
 3884              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 3885 2400 93070000 		li	a5,0		# i,
 3886 2404 232CF100 		sw	a5,24(sp)	# i, %sfp
 3887              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 3888 2408 97000000 		call	__muldf3		#
 3888      E7800000 
 3889              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 3890 2410 97000000 		call	__truncdfsf2		#
 3890      E7800000 
 3891              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 3892 2418 B7070000 		lui	a5,%hi(.LC5)	# tmp972,
 3893 241c 83AB0700 		lw	s7,%lo(.LC5)(a5)		# tmp854,
 3894              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 3895 2420 B7070000 		lui	a5,%hi(.LC7)	# tmp973,
 3896 2424 03AB0700 		lw	s6,%lo(.LC7)(a5)		# tmp855,
 3897              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 3898 2428 13090500 		mv	s2,a0	# cos_theta, tmp881
 3899 242c 93070000 		li	a5,0		# i,
 3900              	.L475:
 3901              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3902 2430 03254400 		lw	a0,4(s0)		#, MEM[(int *)_736 + 4B]
 3903              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 3904 2434 93872700 		addi	a5,a5,2	#, i, i
 3905 2438 2322F102 		sw	a5,36(sp)	# i, %sfp
 3906              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3907 243c 97000000 		call	__floatsisf		#
 3907      E7800000 
 3908 2444 93850400 		mv	a1,s1	#, scalef
 3909 2448 97000000 		call	__mulsf3		#
 3909      E7800000 
 3910              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3911 2450 97000000 		call	__fixsfsi		#
 3911      E7800000 
 3912              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3913 2458 032CC102 		lw	s8,44(sp)		# _11, %sfp
 3914              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 3915 245c 13048401 		addi	s0,s0,24	#, ivtmp.455, ivtmp.455
 3916              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3917 2460 33058501 		add	a0,a0,s8	# _11, tmp720, tmp882
 3918              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 3919 2464 130525FE 		addi	a0,a0,-30	#,, tmp720
 3920 2468 97000000 		call	__floatsisf		#
 3920      E7800000 
 3921 2470 130D0500 		mv	s10,a0	# tmp883,
 3922              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3923 2474 032504FF 		lw	a0,-16(s0)		#, MEM[(int *)_736 + 8B]
 3924 2478 97000000 		call	__floatsisf		#
 3924      E7800000 
 3925 2480 93850400 		mv	a1,s1	#, scalef
 3926 2484 97000000 		call	__mulsf3		#
 3926      E7800000 
 3927              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3928 248c 97000000 		call	__fixsfsi		#
 3928      E7800000 
 3929              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 3930 2494 832D0103 		lw	s11,48(sp)		# _12, %sfp
 3931 2498 3305B501 		add	a0,a0,s11	# _12,, tmp884
 3932 249c 97000000 		call	__floatsisf		#
 3932      E7800000 
 3933 24a4 930C0500 		mv	s9,a0	# tmp885,
 3934              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3935 24a8 032584FF 		lw	a0,-8(s0)		#, MEM[(int *)_736 + 16B]
 3936 24ac 97000000 		call	__floatsisf		#
 3936      E7800000 
 3937 24b4 93850400 		mv	a1,s1	#, scalef
 3938 24b8 97000000 		call	__mulsf3		#
 3938      E7800000 
 3939              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3940 24c0 97000000 		call	__fixsfsi		#
 3940      E7800000 
 3941              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3942 24c8 33058501 		add	a0,a0,s8	# _11, tmp729, tmp886
 3943              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 3944 24cc 130525FE 		addi	a0,a0,-30	#,, tmp729
 3945 24d0 97000000 		call	__floatsisf		#
 3945      E7800000 
 3946 24d8 130C0500 		mv	s8,a0	# tmp887,
 3947              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3948 24dc 0325C4FF 		lw	a0,-4(s0)		#, MEM[(int *)_736 + 20B]
 3949 24e0 97000000 		call	__floatsisf		#
 3949      E7800000 
 3950 24e8 93850400 		mv	a1,s1	#, scalef
 3951 24ec 97000000 		call	__mulsf3		#
 3951      E7800000 
 3952              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3953 24f4 97000000 		call	__fixsfsi		#
 3953      E7800000 
 3954              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 3955 24fc 3305B501 		add	a0,a0,s11	# _12,, tmp888
 3956 2500 97000000 		call	__floatsisf		#
 3956      E7800000 
 3957 2508 930D0500 		mv	s11,a0	# tmp889,
 3958              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3959 250c 032584FE 		lw	a0,-24(s0)		#, MEM[(int *)_736]
 3960 2510 97000000 		call	__floatsisf		#
 3960      E7800000 
 3961 2518 93850400 		mv	a1,s1	#, scalef
 3962 251c 97000000 		call	__mulsf3		#
 3962      E7800000 
 3963              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 3964 2524 97000000 		call	__fixsfsi		#
 3964      E7800000 
 3965              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 3966 252c 8327C100 		lw	a5,12(sp)		# _8, %sfp
 3967 2530 3305F500 		add	a0,a0,a5	# _8, tmp738, tmp890
 3968              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 3969 2534 130585FD 		addi	a0,a0,-40	#,, tmp738
 3970 2538 97000000 		call	__floatsisf		#
 3970      E7800000 
 3971 2540 83254101 		lw	a1,20(sp)		#, %sfp
 3972 2544 97000000 		call	__mulsf3		#
 3972      E7800000 
 3973 254c 13080500 		mv	a6,a0	# tmp891,
 3974              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3975 2550 93050D00 		mv	a1,s10	#, _313
 3976 2554 13050A00 		mv	a0,s4	#, sin_theta
 3977              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 3978 2558 232E0101 		sw	a6,28(sp)	# tmp741, %sfp
 3979              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3980 255c 97000000 		call	__mulsf3		#
 3980      E7800000 
 3981              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3982 2564 93850C00 		mv	a1,s9	#, _315
 3983              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3984 2568 232CA100 		sw	a0,24(sp)	# tmp742, %sfp
 3985              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3986 256c 13850A00 		mv	a0,s5	#, cos_theta
 3987 2570 97000000 		call	__mulsf3		#
 3987      E7800000 
 3988              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3989 2578 03238101 		lw	t1,24(sp)		# tmp742, %sfp
 3990              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3991 257c 93050500 		mv	a1,a0	# tmp893,
 3992              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3993 2580 13050300 		mv	a0,t1	#, tmp742
 3994 2584 97000000 		call	__addsf3		#
 3994      E7800000 
 3995              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3996 258c 93050000 		mv	a1,zero	#,
 3997 2590 97000000 		call	__addsf3		#
 3997      E7800000 
 3998              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 3999 2598 97000000 		call	__fixsfsi		#
 3999      E7800000 
 4000              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4001 25a0 97000000 		call	__floatsisf		#
 4001      E7800000 
 4002 25a8 83250101 		lw	a1,16(sp)		#, %sfp
 4003 25ac 97000000 		call	__mulsf3		#
 4003      E7800000 
 4004              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4005 25b4 0328C101 		lw	a6,28(sp)		# tmp741, %sfp
 4006              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4007 25b8 93050500 		mv	a1,a0	# tmp894,
 4008              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4009 25bc 13050800 		mv	a0,a6	#, tmp741
 4010 25c0 97000000 		call	__addsf3		#
 4010      E7800000 
 4011              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4012 25c8 93850B00 		mv	a1,s7	#, tmp854
 4013 25cc 97000000 		call	__addsf3		#
 4013      E7800000 
 4014              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4015 25d4 97000000 		call	__fixsfsi		#
 4015      E7800000 
 4016              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4017 25dc 130585FD 		addi	a0,a0,-40	#,, tmp895
 4018 25e0 97000000 		call	__floatsisf		#
 4018      E7800000 
 4019 25e8 13070500 		mv	a4,a0	# tmp896,
 4020              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4021 25ec 93050D00 		mv	a1,s10	#, _313
 4022 25f0 13850A00 		mv	a0,s5	#, cos_theta
 4023              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4024 25f4 130D0700 		mv	s10,a4	# _153, tmp896
 4025              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4026 25f8 97000000 		call	__mulsf3		#
 4026      E7800000 
 4027              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4028 2600 93850C00 		mv	a1,s9	#, _315
 4029              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4030 2604 232CA100 		sw	a0,24(sp)	# tmp754, %sfp
 4031              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4032 2608 13050A00 		mv	a0,s4	#, sin_theta
 4033 260c 97000000 		call	__mulsf3		#
 4033      E7800000 
 4034              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4035 2614 03278101 		lw	a4,24(sp)		# tmp754, %sfp
 4036              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4037 2618 93050500 		mv	a1,a0	# tmp898,
 4038              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4039 261c 13050700 		mv	a0,a4	#, tmp754
 4040 2620 97000000 		call	__subsf3		#
 4040      E7800000 
 4041              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4042 2628 93050B00 		mv	a1,s6	#, tmp855
 4043 262c 97000000 		call	__addsf3		#
 4043      E7800000 
 4044              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4045 2634 97000000 		call	__fixsfsi		#
 4045      E7800000 
 4046              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4047 263c 130525FE 		addi	a0,a0,-30	#,, tmp899
 4048 2640 97000000 		call	__floatsisf		#
 4048      E7800000 
 4049 2648 930C0500 		mv	s9,a0	# tmp900,
 4050              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4051 264c 032544FF 		lw	a0,-12(s0)		#, MEM[(int *)_736 + 12B]
 4052 2650 97000000 		call	__floatsisf		#
 4052      E7800000 
 4053 2658 93850400 		mv	a1,s1	#, scalef
 4054 265c 97000000 		call	__mulsf3		#
 4054      E7800000 
 4055              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4056 2664 97000000 		call	__fixsfsi		#
 4056      E7800000 
 4057              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 4058 266c 8327C100 		lw	a5,12(sp)		# _8, %sfp
 4059 2670 3305F500 		add	a0,a0,a5	# _8, tmp764, tmp901
 4060              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4061 2674 130585FD 		addi	a0,a0,-40	#,, tmp764
 4062 2678 97000000 		call	__floatsisf		#
 4062      E7800000 
 4063 2680 83254101 		lw	a1,20(sp)		#, %sfp
 4064 2684 97000000 		call	__mulsf3		#
 4064      E7800000 
 4065 268c 93080500 		mv	a7,a0	# tmp902,
 4066              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4067 2690 93050A00 		mv	a1,s4	#, sin_theta
 4068 2694 13050C00 		mv	a0,s8	#, _273
 4069              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4070 2698 232E1101 		sw	a7,28(sp)	# tmp767, %sfp
 4071              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4072 269c 97000000 		call	__mulsf3		#
 4072      E7800000 
 4073 26a4 232CA100 		sw	a0,24(sp)	# tmp768, %sfp
 4074              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4075 26a8 93850A00 		mv	a1,s5	#, cos_theta
 4076 26ac 13850D00 		mv	a0,s11	#, _275
 4077 26b0 97000000 		call	__mulsf3		#
 4077      E7800000 
 4078              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4079 26b8 03238101 		lw	t1,24(sp)		# tmp768, %sfp
 4080              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4081 26bc 93050500 		mv	a1,a0	# tmp904,
 4082              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4083 26c0 13050300 		mv	a0,t1	#, tmp768
 4084 26c4 97000000 		call	__addsf3		#
 4084      E7800000 
 4085              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4086 26cc 93050000 		mv	a1,zero	#,
 4087 26d0 97000000 		call	__addsf3		#
 4087      E7800000 
 4088              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4089 26d8 97000000 		call	__fixsfsi		#
 4089      E7800000 
 4090              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4091 26e0 97000000 		call	__floatsisf		#
 4091      E7800000 
 4092 26e8 83250101 		lw	a1,16(sp)		#, %sfp
 4093 26ec 97000000 		call	__mulsf3		#
 4093      E7800000 
 4094              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4095 26f4 8328C101 		lw	a7,28(sp)		# tmp767, %sfp
 4096              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4097 26f8 93050500 		mv	a1,a0	# tmp905,
 4098              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4099 26fc 13850800 		mv	a0,a7	#, tmp767
 4100 2700 97000000 		call	__addsf3		#
 4100      E7800000 
 4101              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4102 2708 93850B00 		mv	a1,s7	#, tmp854
 4103 270c 97000000 		call	__addsf3		#
 4103      E7800000 
 4104              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4105 2714 97000000 		call	__fixsfsi		#
 4105      E7800000 
 4106              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4107 271c 130585FD 		addi	a0,a0,-40	#,, tmp906
 4108 2720 97000000 		call	__floatsisf		#
 4108      E7800000 
 4109 2728 13070500 		mv	a4,a0	# tmp907,
 4110              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4111 272c 93850A00 		mv	a1,s5	#, cos_theta
 4112 2730 13050C00 		mv	a0,s8	#, _273
 4113              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4114 2734 130C0700 		mv	s8,a4	# _113, tmp907
 4115              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4116 2738 97000000 		call	__mulsf3		#
 4116      E7800000 
 4117 2740 232CA100 		sw	a0,24(sp)	# tmp780, %sfp
 4118              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4119 2744 93050A00 		mv	a1,s4	#, sin_theta
 4120 2748 13850D00 		mv	a0,s11	#, _275
 4121 274c 97000000 		call	__mulsf3		#
 4121      E7800000 
 4122              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4123 2754 03278101 		lw	a4,24(sp)		# tmp780, %sfp
 4124              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4125 2758 93050500 		mv	a1,a0	# tmp909,
 4126              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4127 275c 13050700 		mv	a0,a4	#, tmp780
 4128 2760 97000000 		call	__subsf3		#
 4128      E7800000 
 4129              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4130 2768 93050B00 		mv	a1,s6	#, tmp855
 4131 276c 97000000 		call	__addsf3		#
 4131      E7800000 
 4132              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4133 2774 97000000 		call	__fixsfsi		#
 4133      E7800000 
 4134              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4135 277c 130525FE 		addi	a0,a0,-30	#,, tmp910
 4136 2780 97000000 		call	__floatsisf		#
 4136      E7800000 
 4137 2788 930D0500 		mv	s11,a0	# tmp911,
 4138              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4139 278c 93850900 		mv	a1,s3	#, sin_theta
 4140 2790 13050C00 		mv	a0,s8	#, _113
 4141 2794 97000000 		call	__mulsf3		#
 4141      E7800000 
 4142 279c 232CA100 		sw	a0,24(sp)	# tmp787, %sfp
 4143              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4144 27a0 93050900 		mv	a1,s2	#, cos_theta
 4145 27a4 13850D00 		mv	a0,s11	#, _115
 4146 27a8 97000000 		call	__mulsf3		#
 4146      E7800000 
 4147              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4148 27b0 83268101 		lw	a3,24(sp)		# tmp787, %sfp
 4149              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4150 27b4 93050500 		mv	a1,a0	# tmp913,
 4151              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4152 27b8 13850600 		mv	a0,a3	#, tmp787
 4153 27bc 97000000 		call	__addsf3		#
 4153      E7800000 
 4154              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4155 27c4 93050B00 		mv	a1,s6	#, tmp855
 4156 27c8 97000000 		call	__addsf3		#
 4156      E7800000 
 4157              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4158 27d0 97000000 		call	__fixsfsi		#
 4158      E7800000 
 4159 27d8 93060500 		mv	a3,a0	# tmp914,
 4160              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4161 27dc 93050900 		mv	a1,s2	#, cos_theta
 4162 27e0 13050C00 		mv	a0,s8	#, _113
 4163              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4164 27e4 2320D102 		sw	a3,32(sp)	# tmp792, %sfp
 4165              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4166 27e8 97000000 		call	__mulsf3		#
 4166      E7800000 
 4167 27f0 232CA100 		sw	a0,24(sp)	# tmp793, %sfp
 4168              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4169 27f4 93850900 		mv	a1,s3	#, sin_theta
 4170 27f8 13850D00 		mv	a0,s11	#, _115
 4171 27fc 97000000 		call	__mulsf3		#
 4171      E7800000 
 4172              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4173 2804 83288101 		lw	a7,24(sp)		# tmp793, %sfp
 4174              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4175 2808 93050500 		mv	a1,a0	# tmp916,
 4176              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4177 280c 13850800 		mv	a0,a7	#, tmp793
 4178 2810 97000000 		call	__subsf3		#
 4178      E7800000 
 4179              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4180 2818 93850B00 		mv	a1,s7	#, tmp854
 4181 281c 97000000 		call	__addsf3		#
 4181      E7800000 
 4182              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4183 2824 97000000 		call	__fixsfsi		#
 4183      E7800000 
 4184 282c 13060500 		mv	a2,a0	# tmp917,
 4185              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4186 2830 93050D00 		mv	a1,s10	#, _153
 4187 2834 13850900 		mv	a0,s3	#, sin_theta
 4188              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4189 2838 232EC100 		sw	a2,28(sp)	# tmp798, %sfp
 4190              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4191 283c 97000000 		call	__mulsf3		#
 4191      E7800000 
 4192 2844 232CA100 		sw	a0,24(sp)	# tmp799, %sfp
 4193              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4194 2848 93850C00 		mv	a1,s9	#, _155
 4195 284c 13050900 		mv	a0,s2	#, cos_theta
 4196 2850 97000000 		call	__mulsf3		#
 4196      E7800000 
 4197              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4198 2858 83288101 		lw	a7,24(sp)		# tmp799, %sfp
 4199              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4200 285c 93050500 		mv	a1,a0	# tmp919,
 4201              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4202 2860 13850800 		mv	a0,a7	#, tmp799
 4203 2864 97000000 		call	__addsf3		#
 4203      E7800000 
 4204              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4205 286c 93050B00 		mv	a1,s6	#, tmp855
 4206 2870 97000000 		call	__addsf3		#
 4206      E7800000 
 4207              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4208 2878 97000000 		call	__fixsfsi		#
 4208      E7800000 
 4209 2880 93080500 		mv	a7,a0	# tmp920,
 4210              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4211 2884 93050D00 		mv	a1,s10	#, _153
 4212 2888 13050900 		mv	a0,s2	#, cos_theta
 4213              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 4214 288c 138C0800 		mv	s8,a7	# tmp804, tmp920
 4215              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4216 2890 97000000 		call	__mulsf3		#
 4216      E7800000 
 4217 2898 232CA100 		sw	a0,24(sp)	# tmp805, %sfp
 4218              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4219 289c 93850C00 		mv	a1,s9	#, _155
 4220 28a0 13850900 		mv	a0,s3	#, sin_theta
 4221 28a4 97000000 		call	__mulsf3		#
 4221      E7800000 
 4222              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4223 28ac 83288101 		lw	a7,24(sp)		# tmp805, %sfp
 4224              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4225 28b0 93050500 		mv	a1,a0	# tmp922,
 4226              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4227 28b4 13850800 		mv	a0,a7	#, tmp805
 4228 28b8 97000000 		call	__subsf3		#
 4228      E7800000 
 4229              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4230 28c0 93850B00 		mv	a1,s7	#, tmp854
 4231 28c4 97000000 		call	__addsf3		#
 4231      E7800000 
 4232              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4233 28cc 97000000 		call	__fixsfsi		#
 4233      E7800000 
 4234              	# main_cube3d_rotate_hdmi.c:94:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, 0x00ffff
 4235 28d4 83260102 		lw	a3,32(sp)		# tmp792, %sfp
 4236 28d8 0326C101 		lw	a2,28(sp)		# tmp798, %sfp
 4237 28dc 93050C00 		mv	a1,s8	#, tmp804
 4238 28e0 97000000 		call	fb_draw_bresenham.constprop.0		#
 4238      E7800000 
 4239              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 4240 28e8 03278102 		lw	a4,40(sp)		# _82, %sfp
 4241 28ec 83274102 		lw	a5,36(sp)		# i, %sfp
 4242 28f0 E3E0E7B4 		bgtu	a4,a5,.L475	#, _82, i,
 4243              	.L425:
 4244              	# main_cube3d_rotate_hdmi.c:97: }
 4245 28f4 8320C108 		lw	ra,140(sp)		#,
 4246 28f8 03248108 		lw	s0,136(sp)		#,
 4247 28fc 83244108 		lw	s1,132(sp)		#,
 4248 2900 03290108 		lw	s2,128(sp)		#,
 4249 2904 8329C107 		lw	s3,124(sp)		#,
 4250 2908 032A8107 		lw	s4,120(sp)		#,
 4251 290c 832A4107 		lw	s5,116(sp)		#,
 4252 2910 032B0107 		lw	s6,112(sp)		#,
 4253 2914 832BC106 		lw	s7,108(sp)		#,
 4254 2918 032C8106 		lw	s8,104(sp)		#,
 4255 291c 832C4106 		lw	s9,100(sp)		#,
 4256 2920 032D0106 		lw	s10,96(sp)		#,
 4257 2924 832DC105 		lw	s11,92(sp)		#,
 4258 2928 13010109 		addi	sp,sp,144	#,,
 4259 292c 67800000 		jr	ra		#
 4260              	.L500:
 4261              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 4262 2930 33052041 		neg	a0,s2	# v1, _655
 4263 2934 6FF05FAB 		j	.L474		#
 4264              	.L499:
 4265              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 4266 2938 13850900 		mv	a0,s3	# v1, _89
 4267 293c 6FF05FA7 		j	.L472		#
 4268              	.L498:
 4269              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 4270 2940 13850B00 		mv	a0,s7	# v1, _192
 4271 2944 6FF01FA3 		j	.L470		#
 4272              	.L497:
 4273              	# gfx_lib_hdmi.h:281:   float sin_theta = SIN_FAST(angle);
 4274 2948 3305A041 		neg	a0,s10	# v1, _564
 4275 294c 6FF0DF9E 		j	.L468		#
 4276              	.L496:
 4277              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 4278 2950 33055041 		neg	a0,s5	# v1, _552
 4279 2954 6FF09F9A 		j	.L466		#
 4280              	.L495:
 4281              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4282 2958 3305D040 		neg	a0,a3	# v1, _542
 4283 295c 6FF01F96 		j	.L464		#
 4284              	.L494:
 4285              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4286 2960 93870F00 		mv	a5,t6	# v1, angle
 4287 2964 6FF0DF92 		j	.L462		#
 4288              	.L493:
 4289 2968 93080500 		mv	a7,a0	# v1, angle
 4290 296c 6FF09F8E 		j	.L460		#
 4291              	.L492:
 4292 2970 130E0C00 		mv	t3,s8	# v1, angle
 4293 2974 6FF01F8A 		j	.L458		#
 4294              	.L491:
 4295 2978 93030800 		mv	t2,a6	# v1, angle
 4296 297c 6FF09F85 		j	.L456		#
 4297              	.L490:
 4298 2980 13890D00 		mv	s2,s11	# v1, angle
 4299 2984 6FF01F81 		j	.L454		#
 4300              	.L489:
 4301 2988 93020B00 		mv	t0,s6	# v1, angle
 4302 298c 6FF08FFC 		j	.L452		#
 4303              	.L488:
 4304 2990 13060700 		mv	a2,a4	# v0, v0
 4305 2994 6FF0CFF8 		j	.L450		#
 4306              	.L487:
 4307 2998 93050700 		mv	a1,a4	# v0, v0
 4308 299c 6FF04FF2 		j	.L446		#
 4309              	.L486:
 4310 29a0 93070700 		mv	a5,a4	# v0, v0
 4311 29a4 6FF04FE7 		j	.L442		#
 4312              	.L485:
 4313 29a8 130E0700 		mv	t3,a4	# v0, v0
 4314 29ac 6FF04FE0 		j	.L438		#
 4315              	.L484:
 4316 29b0 93070700 		mv	a5,a4	# v0, v0
 4317 29b4 6FF0CFD6 		j	.L434		#
 4318              	.L483:
 4319 29b8 13090700 		mv	s2,a4	# v0, v0
 4320 29bc 6FF0CFCF 		j	.L430		#
 4322              		.section	.text.startup,"ax",@progbits
 4323              		.align	2
 4324              		.globl	main
 4326              	main:
 4327              	# gfx_lib_hdmi.h:231:   dma_action((uint32_t) framebuffer, rgb, VRES*HRES, DMA_MEMSET);
 4328 0000 37070000 		lui	a4,%hi(framebuffer)	# tmp946,
 4329              	# main_cube3d_rotate_hdmi.c:103: void main() {
 4330 0004 130101F5 		addi	sp,sp,-176	#,,
 4331              	# gfx_lib_hdmi.h:231:   dma_action((uint32_t) framebuffer, rgb, VRES*HRES, DMA_MEMSET);
 4332 0008 13070700 		addi	a4,a4,%lo(framebuffer)	# framebuffer.52_26, tmp946,
 4333              	# main_cube3d_rotate_hdmi.c:103: void main() {
 4334 000c 2320210B 		sw	s2,160(sp)	#,
 4335              	# gfx_lib_hdmi.h:231:   dma_action((uint32_t) framebuffer, rgb, VRES*HRES, DMA_MEMSET);
 4336 0010 232AE104 		sw	a4,84(sp)	# framebuffer.52_26, %sfp
 4337              	# main_cube3d_rotate_hdmi.c:103: void main() {
 4338 0014 2326110A 		sw	ra,172(sp)	#,
 4339 0018 2324810A 		sw	s0,168(sp)	#,
 4340 001c 2322910A 		sw	s1,164(sp)	#,
 4341 0020 232E3109 		sw	s3,156(sp)	#,
 4342 0024 232C4109 		sw	s4,152(sp)	#,
 4343 0028 232A5109 		sw	s5,148(sp)	#,
 4344 002c 23286109 		sw	s6,144(sp)	#,
 4345 0030 23267109 		sw	s7,140(sp)	#,
 4346 0034 23248109 		sw	s8,136(sp)	#,
 4347 0038 23229109 		sw	s9,132(sp)	#,
 4348 003c 2320A109 		sw	s10,128(sp)	#,
 4349 0040 232EB107 		sw	s11,124(sp)	#,
 4350              	# kianv_stdlib.h:51:   *( (volatile uint32_t*) DMA_SRC  ) = src;
 4351 0044 B7070030 		li	a5,805306368		# tmp948,
 4352 0048 23A6E702 		sw	a4,44(a5)	# framebuffer.52_26, MEM[(volatile uint32_t *)805306412B]
 4353              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 4354 004c 37170000 		li	a4,4096		# tmp954,
 4355              	# kianv_stdlib.h:52:   *( (volatile uint32_t*) DMA_DST  ) = dst;
 4356 0050 23A80702 		sw	zero,48(a5)	#, MEM[(volatile uint32_t *)805306416B]
 4357              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 4358 0054 1307072C 		addi	a4,a4,704	#, tmp953, tmp954
 4359 0058 23AAE702 		sw	a4,52(a5)	# tmp953, MEM[(volatile uint32_t *)805306420B]
 4360              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4361 005c 37070000 		lui	a4,%hi(.LC1)	# tmp1996,
 4362 0060 83260700 		lw	a3,%lo(.LC1)(a4)		# tmp2066,
 4363 0064 03274700 		lw	a4,%lo(.LC1+4)(a4)		#,
 4364 0068 37090000 		lui	s2,%hi(.LC5)	# tmp1999,
 4365 006c 232CD104 		sw	a3,88(sp)	# tmp2066, %sfp
 4366 0070 232EE104 		sw	a4,92(sp)	#, %sfp
 4367 0074 37070000 		lui	a4,%hi(.LC2)	# tmp1997,
 4368 0078 83260700 		lw	a3,%lo(.LC2)(a4)		# tmp2067,
 4369 007c 03274700 		lw	a4,%lo(.LC2+4)(a4)		#,
 4370 0080 2320D106 		sw	a3,96(sp)	# tmp2067, %sfp
 4371 0084 2322E106 		sw	a4,100(sp)	#, %sfp
 4372              	# kianv_stdlib.h:54:   *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
 4373 0088 13072000 		li	a4,2		# tmp957,
 4374 008c 23ACE702 		sw	a4,56(a5)	# tmp957, MEM[(volatile uint32_t *)805306424B]
 4375              	# main_cube3d_rotate_hdmi.c:115:   IO_OUT(GPIO_DIR, ~0);
 4376 0090 1307F0FF 		li	a4,-1		# tmp962,
 4377              	# main_cube3d_rotate_hdmi.c:113:   *fb_ctrl = 0;
 4378 0094 23A20702 		sw	zero,36(a5)	#, MEM[(uint32_t *)805306404B]
 4379              	# main_cube3d_rotate_hdmi.c:115:   IO_OUT(GPIO_DIR, ~0);
 4380 0098 23AAE700 		sw	a4,20(a5)	# tmp962, MEM[(volatile uint32_t *)805306388B]
 4381              	# main_cube3d_rotate_hdmi.c:116:   uint8_t led = 0x01;
 4382 009c 93071000 		li	a5,1		# led,
 4383 00a0 2328F104 		sw	a5,80(sp)	# led, %sfp
 4384 00a4 B7070000 		lui	a5,%hi(.LANCHOR1)	# tmp2006,
 4385 00a8 93870700 		addi	a5,a5,%lo(.LANCHOR1)	# tmp2003, tmp2006,
 4386 00ac 2322F100 		sw	a5,4(sp)	# tmp2003, %sfp
 4387 00b0 B7070000 		lui	a5,%hi(.LANCHOR2)	# tmp2007,
 4388 00b4 93870700 		addi	a5,a5,%lo(.LANCHOR2)	# tmp2004, tmp2007,
 4389 00b8 2320F100 		sw	a5,0(sp)	# tmp2004, %sfp
 4390 00bc B7070000 		lui	a5,%hi(.LANCHOR2+40)	# tmp2010,
 4391 00c0 93878702 		addi	a5,a5,%lo(.LANCHOR2+40)	# ivtmp.514, tmp2010,
 4392              	# main_cube3d_rotate_hdmi.c:107:   int angle = 0;
 4393 00c4 23240104 		sw	zero,72(sp)	#, %sfp
 4394 00c8 2326F106 		sw	a5,108(sp)	# ivtmp.514, %sfp
 4395 00cc B7070000 		lui	a5,%hi(.LANCHOR2+136)	# tmp2011,
 4396 00d0 93878708 		addi	a5,a5,%lo(.LANCHOR2+136)	# ivtmp.507, tmp2011,
 4397 00d4 232EF102 		sw	a5,60(sp)	# ivtmp.507, %sfp
 4398              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4399 00d8 B7A7FFFF 		li	a5,-24576		# tmp986,
 4400 00dc 93871700 		addi	a5,a5,1	#, tmp985, tmp986
 4401 00e0 232AF100 		sw	a5,20(sp)	# tmp985, %sfp
 4402              	.L550:
 4403              	# main_cube3d_rotate_hdmi.c:118:     render_lines(front, SIZEOF(front), angle, angle, angle, s);
 4404 00e4 03258104 		lw	a0,72(sp)		#, %sfp
 4405 00e8 97000000 		call	__floatsisf		#
 4405      E7800000 
 4406 00f0 930B0500 		mv	s7,a0	# _1, tmp2076
 4407              	# main_cube3d_rotate_hdmi.c:85:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 4408 00f4 37050080 		li	a0,-2147483648		# tmp964,
 4409              	# main_cube3d_rotate_hdmi.c:85:     p0 = rotateX_pivot(&p0, &pivot, -angle_x);
 4410 00f8 33457501 		xor	a0,a0,s7	# _1,, tmp964
 4411 00fc 97000000 		call	__fixsfsi		#
 4411      E7800000 
 4412              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4413 0104 97000000 		call	__floatsidf		#
 4413      E7800000 
 4414 010c 03268105 		lw	a2,88(sp)		#, %sfp
 4415 0110 8326C105 		lw	a3,92(sp)		#, %sfp
 4416 0114 97000000 		call	__muldf3		#
 4416      E7800000 
 4417 011c 03260106 		lw	a2,96(sp)		#, %sfp
 4418 0120 83264106 		lw	a3,100(sp)		#, %sfp
 4419 0124 97000000 		call	__divdf3		#
 4419      E7800000 
 4420 012c 97000000 		call	__fixdfsi		#
 4420      E7800000 
 4421              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4422 0134 93170501 		slli	a5,a0,16	#, angle.39_617, tmp2077
 4423 0138 93D70701 		srli	a5,a5,16	#, angle.39_617, angle.39_617
 4424 013c 13870700 		mv	a4,a5	# angle.39_617, angle.39_617
 4425 0140 2324F106 		sw	a5,104(sp)	# angle.39_617, %sfp
 4426              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4427 0144 B7870000 		li	a5,32768		# tmp974,
 4428 0148 B347F700 		xor	a5,a4,a5	# tmp974, _618, angle.39_617
 4429 014c 2328F100 		sw	a5,16(sp)	# _618, %sfp
 4430              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4431 0150 13170501 		slli	a4,a0,16	#, _587, tmp2077
 4432              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4433 0154 93970701 		slli	a5,a5,16	#, angle, _618
 4434 0158 93D70741 		srai	a5,a5,16	#, angle, angle
 4435              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4436 015c 13570741 		srai	a4,a4,16	#, _587, _587
 4437              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4438 0160 232AF102 		sw	a5,52(sp)	# angle, %sfp
 4439              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4440 0164 2326E104 		sw	a4,76(sp)	# _587, %sfp
 4441 0168 63440700 		blt	a4,zero,.L503	#, _587,,
 4442 016c 93070700 		mv	a5,a4	# _587, _587
 4443              	.L503:
 4444 0170 93990701 		slli	s3,a5,16	#, angle, _587
 4445 0174 93D90941 		srai	s3,s3,16	#, angle, angle
 4446              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 4447 0178 13D78940 		srai	a4,s3,8	#, v0, angle
 4448              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4449 017c 93C7F7FF 		not	a5,a5	# tmp981, _587
 4450              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4451 0180 131D0701 		slli	s10,a4,16	#, v0.41_622, v0
 4452              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4453 0184 939A0701 		slli	s5,a5,16	#, v1, tmp981
 4454 0188 137A0702 		andi	s4,a4,32	#, _623, v0
 4455              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4456 018c 135D0D01 		srli	s10,s10,16	#, v0.41_622, v0.41_622
 4457              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4458 0190 93DA0A41 		srai	s5,s5,16	#, v1, v1
 4459 0194 9344F7FF 		not	s1,a4	# v0, v0
 4460 0198 63140A00 		bne	s4,zero,.L505	#, _623,,
 4461 019c 93040700 		mv	s1,a4	# v0, v0
 4462              	.L505:
 4463              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4464 01a0 83274101 		lw	a5,20(sp)		# tmp985, %sfp
 4465 01a4 139C0901 		slli	s8,s3,16	#, angle.46_596, angle
 4466 01a8 135C0C01 		srli	s8,s8,16	#, angle.46_596, angle.46_596
 4467 01ac B30CFC00 		add	s9,s8,a5	# tmp985, tmp984, angle.46_596
 4468              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4469 01b0 939C0C01 		slli	s9,s9,16	#, _598, tmp984
 4470 01b4 93DC0C41 		srai	s9,s9,16	#, _598, _598
 4471 01b8 13850C00 		mv	a0,s9	#, _598
 4472 01bc 97000000 		call	sin1		#
 4472      E7800000 
 4473              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 4474 01c4 97000000 		call	__floatsidf		#
 4474      E7800000 
 4475 01cc 37040000 		lui	s0,%hi(.LC3)	# tmp2398,
 4476 01d0 03260400 		lw	a2,%lo(.LC3)(s0)		#,
 4477 01d4 83264400 		lw	a3,%lo(.LC3+4)(s0)		#,
 4478              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4479 01d8 93F4F401 		andi	s1,s1,31	#, _628, v0
 4480              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 4481 01dc 97000000 		call	__muldf3		#
 4481      E7800000 
 4482              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 4483 01e4 97000000 		call	__truncdfsf2		#
 4483      E7800000 
 4484 01ec 130B0500 		mv	s6,a0	# tmp2078,
 4485              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4486 01f0 0325C104 		lw	a0,76(sp)		#, %sfp
 4487 01f4 97000000 		call	sin1		#
 4487      E7800000 
 4488 01fc 97000000 		call	__floatsidf		#
 4488      E7800000 
 4489 0204 03260400 		lw	a2,%lo(.LC3)(s0)		#,
 4490 0208 83264400 		lw	a3,%lo(.LC3+4)(s0)		#,
 4491 020c 97000000 		call	__muldf3		#
 4491      E7800000 
 4492              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4493 0214 97000000 		call	__truncdfsf2		#
 4493      E7800000 
 4494 021c B7270000 		li	a5,8192		# tmp999,
 4495 0220 93871700 		addi	a5,a5,1	#, tmp998, tmp999
 4496 0224 13040500 		mv	s0,a0	# sin_theta, tmp2079
 4497 0228 3308FC00 		add	a6,s8,a5	# tmp998, _598, angle.46_596
 4498 022c 63C40C00 		blt	s9,zero,.L507	#, _598,,
 4499 0230 13880C00 		mv	a6,s9	# _598, _598
 4500              	.L507:
 4501 0234 13130801 		slli	t1,a6,16	#, angle, _598
 4502 0238 13530341 		srai	t1,t1,16	#, angle, angle
 4503              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 4504 023c 93578340 		srai	a5,t1,8	#, v0, angle
 4505              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4506 0240 1348F8FF 		not	a6,a6	# tmp1006, _598
 4507              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4508 0244 13970701 		slli	a4,a5,16	#, v0.41_653, v0
 4509 0248 13570701 		srli	a4,a4,16	#, v0.41_653, v0.41_653
 4510              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4511 024c 13180801 		slli	a6,a6,16	#, v1, tmp1006
 4512 0250 93F80702 		andi	a7,a5,32	#, _654, v0
 4513              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4514 0254 930D0700 		mv	s11,a4	# v0.41_653, v0.41_653
 4515              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4516 0258 13580841 		srai	a6,a6,16	#, v1, v1
 4517 025c 13C7F7FF 		not	a4,a5	# v0, v0
 4518 0260 63940800 		bne	a7,zero,.L509	#, _654,,
 4519 0264 13870700 		mv	a4,a5	# v0, v0
 4520              	.L509:
 4521              	# main_cube3d_rotate_hdmi.c:89:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 4522 0268 13850B00 		mv	a0,s7	#, _1
 4523 026c 23200103 		sw	a6,32(sp)	# v1, %sfp
 4524 0270 232E1101 		sw	a7,28(sp)	# _654, %sfp
 4525 0274 232C6100 		sw	t1,24(sp)	# angle, %sfp
 4526              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4527 0278 937BF701 		andi	s7,a4,31	#, _659, v0
 4528              	# main_cube3d_rotate_hdmi.c:89:     p0 = rotateZ_pivot(&p0, &pivot, angle_z);
 4529 027c 97000000 		call	__fixsfsi		#
 4529      E7800000 
 4530              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 4531 0284 97000000 		call	__floatsidf		#
 4531      E7800000 
 4532 028c 03268105 		lw	a2,88(sp)		#, %sfp
 4533 0290 8326C105 		lw	a3,92(sp)		#, %sfp
 4534 0294 97000000 		call	__muldf3		#
 4534      E7800000 
 4535 029c 03260106 		lw	a2,96(sp)		#, %sfp
 4536 02a0 83264106 		lw	a3,100(sp)		#, %sfp
 4537 02a4 97000000 		call	__divdf3		#
 4537      E7800000 
 4538 02ac 97000000 		call	__fixdfsi		#
 4538      E7800000 
 4539 02b4 131C0501 		slli	s8,a0,16	#, _427, tmp2080
 4540 02b8 135C0C41 		srai	s8,s8,16	#, _427, _427
 4541 02bc 13050C00 		mv	a0,s8	#, _427
 4542 02c0 232C8103 		sw	s8,56(sp)	# _427, %sfp
 4543 02c4 97000000 		call	sin1		#
 4543      E7800000 
 4544 02cc 97000000 		call	__floatsidf		#
 4544      E7800000 
 4545 02d4 B7070000 		lui	a5,%hi(.LC3)	# tmp2402,
 4546 02d8 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4547 02dc 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4548 02e0 97000000 		call	__muldf3		#
 4548      E7800000 
 4549              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 4550 02e8 97000000 		call	__truncdfsf2		#
 4550      E7800000 
 4551              	# gfx_lib_hdmi.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4552 02f0 93170C01 		slli	a5,s8,16	#, angle.44_432, _427
 4553 02f4 93D70701 		srli	a5,a5,16	#, angle.44_432, angle.44_432
 4554 02f8 93860700 		mv	a3,a5	# angle.44_432, angle.44_432
 4555 02fc 2322F104 		sw	a5,68(sp)	# angle.44_432, %sfp
 4556              	# gfx_lib_hdmi.h:108:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 4557 0300 B7870000 		li	a5,32768		# tmp1023,
 4558 0304 B3C7F600 		xor	a5,a3,a5	# tmp1023, _433, angle.44_432
 4559 0308 2326F100 		sw	a5,12(sp)	# _433, %sfp
 4560 030c 93970701 		slli	a5,a5,16	#, angle, _433
 4561 0310 93D70741 		srai	a5,a5,16	#, angle, angle
 4562 0314 2328F102 		sw	a5,48(sp)	# angle, %sfp
 4563              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 4564 0318 2324A100 		sw	a0,8(sp)	# tmp2081, %sfp
 4565 031c 03238101 		lw	t1,24(sp)		# angle, %sfp
 4566 0320 8328C101 		lw	a7,28(sp)		# _654, %sfp
 4567 0324 03280102 		lw	a6,32(sp)		# v1, %sfp
 4568 0328 93850700 		mv	a1,a5	# _427, angle
 4569 032c 63440C00 		blt	s8,zero,.L511	#, _427,,
 4570 0330 93050C00 		mv	a1,s8	# _427, _427
 4571              	.L511:
 4572              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4573 0334 03274101 		lw	a4,20(sp)		# tmp985, %sfp
 4574 0338 93970501 		slli	a5,a1,16	#, angle.46_436, _427
 4575 033c 93D70701 		srli	a5,a5,16	#, angle.46_436, angle.46_436
 4576 0340 3387E700 		add	a4,a5,a4	# tmp985, tmp1025, angle.46_436
 4577              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 4578 0344 93160701 		slli	a3,a4,16	#, _438, tmp1025
 4579 0348 93D60641 		srai	a3,a3,16	#, _438, _438
 4580 034c 37270000 		li	a4,8192		# tmp1030,
 4581 0350 93950501 		slli	a1,a1,16	#, angle, _427
 4582 0354 13071700 		addi	a4,a4,1	#, tmp1029, tmp1030
 4583 0358 2320D104 		sw	a3,64(sp)	# _438, %sfp
 4584 035c 93D50541 		srai	a1,a1,16	#, angle, angle
 4585 0360 B387E700 		add	a5,a5,a4	# tmp1029, _438, angle.46_436
 4586 0364 63C40600 		blt	a3,zero,.L513	#, _438,,
 4587 0368 93870600 		mv	a5,a3	# _438, _438
 4588              	.L513:
 4589 036c 939E0701 		slli	t4,a5,16	#, angle, _438
 4590 0370 93DE0E41 		srai	t4,t4,16	#, angle, angle
 4591              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 4592 0374 93D68E40 		srai	a3,t4,8	#, v0, angle
 4593              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4594 0378 93C7F7FF 		not	a5,a5	# tmp1037, _438
 4595              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4596 037c 139C0601 		slli	s8,a3,16	#, v0.41_746, v0
 4597              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4598 0380 939F0701 		slli	t6,a5,16	#, v1, tmp1037
 4599 0384 13FF0602 		andi	t5,a3,32	#, _747, v0
 4600              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4601 0388 135C0C01 		srli	s8,s8,16	#, v0.41_746, v0.41_746
 4602              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4603 038c 93DF0F41 		srai	t6,t6,16	#, v1, v1
 4604 0390 13C7F6FF 		not	a4,a3	# v0, v0
 4605 0394 63140F00 		bne	t5,zero,.L515	#, _747,,
 4606 0398 13870600 		mv	a4,a3	# v0, v0
 4607              	.L515:
 4608              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 4609 039c 93D78540 		srai	a5,a1,8	#, v0, angle
 4610              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4611 03a0 939C0701 		slli	s9,a5,16	#, v0.41_777, v0
 4612 03a4 13F50702 		andi	a0,a5,32	#, _778, v0
 4613              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4614 03a8 1377F701 		andi	a4,a4,31	#, _752, v0
 4615              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4616 03ac 93DC0C01 		srli	s9,s9,16	#, v0.41_777, v0.41_777
 4617              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 4618 03b0 13CEF5FF 		not	t3,a1	# v1, angle
 4619 03b4 13C6F7FF 		not	a2,a5	# v0, v0
 4620 03b8 63140500 		bne	a0,zero,.L517	#, _778,,
 4621 03bc 13860700 		mv	a2,a5	# v0, v0
 4622              	.L517:
 4623              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4624 03c0 83264100 		lw	a3,4(sp)		# tmp2003, %sfp
 4625              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4626 03c4 93871400 		addi	a5,s1,1	#, tmp1054, _628
 4627 03c8 93971700 		slli	a5,a5,1	#, tmp1055, tmp1054
 4628              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4629 03cc 93941400 		slli	s1,s1,1	#, tmp1050, _628
 4630 03d0 B3849600 		add	s1,a3,s1	# tmp1050, tmp1051, tmp2003
 4631              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4632 03d4 B387F600 		add	a5,a3,a5	# tmp1055, tmp1056, tmp2003
 4633              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4634 03d8 83930400 		lh	t2,0(s1)		# pretmp_3131, sin90[_628]
 4635              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4636 03dc 83970700 		lh	a5,0(a5)		# sin90[_631], sin90[_631]
 4637              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4638 03e0 1376F601 		andi	a2,a2,31	#, _783, v0
 4639              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4640 03e4 B3877740 		sub	a5,a5,t2	# tmp1058, sin90[_631], pretmp_3131
 4641              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4642 03e8 63140A00 		bne	s4,zero,.L519	#, _623,,
 4643 03ec 938A0900 		mv	s5,s3	# v1, angle
 4644              	.L519:
 4645 03f0 93FAFA0F 		andi	s5,s5,0xff	# tmp1061, v1
 4646              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4647 03f4 B3875703 		mul	a5,a5,s5	# tmp1062, tmp1058, tmp1061
 4648              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4649 03f8 83224100 		lw	t0,4(sp)		# tmp2003, %sfp
 4650              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4651 03fc 93861B00 		addi	a3,s7,1	#, tmp1073, _659
 4652 0400 93961600 		slli	a3,a3,1	#, tmp1074, tmp1073
 4653              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4654 0404 939B1B00 		slli	s7,s7,1	#, tmp1069, _659
 4655              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4656 0408 B386D200 		add	a3,t0,a3	# tmp1074, tmp1075, tmp2003
 4657              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4658 040c B38B7201 		add	s7,t0,s7	# tmp1069, tmp1070, tmp2003
 4659              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4660 0410 839A0600 		lh	s5,0(a3)		# sin90[_662], sin90[_662]
 4661              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4662 0414 83920B00 		lh	t0,0(s7)		# pretmp_2946, sin90[_659]
 4663              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4664 0418 93D68740 		srai	a3,a5,8	#, tmp1063, tmp1062
 4665              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4666 041c B3867600 		add	a3,a3,t2	# pretmp_3131, tmp1066, tmp1063
 4667 0420 93960601 		slli	a3,a3,16	#, _3003, tmp1066
 4668 0424 93D60601 		srli	a3,a3,16	#, _3003, _3003
 4669              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4670 0428 B38A5A40 		sub	s5,s5,t0	# tmp1077, sin90[_662], pretmp_2946
 4671              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4672 042c 63940800 		bne	a7,zero,.L521	#, _654,,
 4673 0430 13080300 		mv	a6,t1	# v1, angle
 4674              	.L521:
 4675 0434 1378F80F 		andi	a6,a6,0xff	# tmp1080, v1
 4676              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4677 0438 B38A0A03 		mul	s5,s5,a6	# tmp1081, tmp1077, tmp1080
 4678              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4679 043c 03284100 		lw	a6,4(sp)		# tmp2003, %sfp
 4680              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4681 0440 93071700 		addi	a5,a4,1	#, tmp1092, _752
 4682 0444 93971700 		slli	a5,a5,1	#, tmp1093, tmp1092
 4683              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4684 0448 13171700 		slli	a4,a4,1	#, tmp1088, _752
 4685 044c 3307E800 		add	a4,a6,a4	# tmp1088, tmp1089, tmp2003
 4686              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4687 0450 B307F800 		add	a5,a6,a5	# tmp1093, tmp1094, tmp2003
 4688              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4689 0454 03170700 		lh	a4,0(a4)		# pretmp_3141, sin90[_752]
 4690              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4691 0458 039A0700 		lh	s4,0(a5)		# sin90[_755], sin90[_755]
 4692              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4693 045c 93DA8A40 		srai	s5,s5,8	#, tmp1082, tmp1081
 4694              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4695 0460 B38A5A00 		add	s5,s5,t0	# pretmp_2946, tmp1085, tmp1082
 4696 0464 939A0A01 		slli	s5,s5,16	#, _3001, tmp1085
 4697 0468 93DA0A01 		srli	s5,s5,16	#, _3001, _3001
 4698              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4699 046c 330AEA40 		sub	s4,s4,a4	# tmp1096, sin90[_755], pretmp_3141
 4700              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4701 0470 63140F00 		bne	t5,zero,.L523	#, _747,,
 4702 0474 938F0E00 		mv	t6,t4	# v1, angle
 4703              	.L523:
 4704 0478 93FFFF0F 		andi	t6,t6,0xff	# tmp1099, v1
 4705              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4706 047c 330AFA03 		mul	s4,s4,t6	# tmp1100, tmp1096, tmp1099
 4707              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4708 0480 83274100 		lw	a5,4(sp)		# tmp2003, %sfp
 4709              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4710 0484 13081600 		addi	a6,a2,1	#, tmp1111, _783
 4711 0488 13181800 		slli	a6,a6,1	#, tmp1112, tmp1111
 4712              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4713 048c 13161600 		slli	a2,a2,1	#, tmp1107, _783
 4714              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4715 0490 33880701 		add	a6,a5,a6	# tmp1112, tmp1113, tmp2003
 4716              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4717 0494 3386C700 		add	a2,a5,a2	# tmp1107, tmp1108, tmp2003
 4718 0498 83170600 		lh	a5,0(a2)		# pretmp_3122, sin90[_783]
 4719              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4720 049c 831B0800 		lh	s7,0(a6)		# sin90[_786], sin90[_786]
 4721              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4722 04a0 135A8A40 		srai	s4,s4,8	#, tmp1101, tmp1100
 4723              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4724 04a4 330AEA00 		add	s4,s4,a4	# pretmp_3141, tmp1104, tmp1101
 4725 04a8 131A0A01 		slli	s4,s4,16	#, _3139, tmp1104
 4726 04ac 135A0A01 		srli	s4,s4,16	#, _3139, _3139
 4727              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4728 04b0 B38BFB40 		sub	s7,s7,a5	# tmp1115, sin90[_786], pretmp_3122
 4729              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4730 04b4 63140500 		bne	a0,zero,.L525	#, _778,,
 4731 04b8 138E0500 		mv	t3,a1	# v1, angle
 4732              	.L525:
 4733 04bc 137EFE0F 		andi	t3,t3,0xff	# tmp1118, v1
 4734              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4735 04c0 B38BCB03 		mul	s7,s7,t3	# tmp1119, tmp1115, tmp1118
 4736              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4737 04c4 137D0D04 		andi	s10,s10,64	#, tmp1129, v0.41_622
 4738 04c8 8324C106 		lw	s1,108(sp)		# ivtmp.514, %sfp
 4739 04cc 13850600 		mv	a0,a3	# v1, _3003
 4740              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4741 04d0 93DB8B40 		srai	s7,s7,8	#, tmp1120, tmp1119
 4742              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 4743 04d4 B38BFB00 		add	s7,s7,a5	# pretmp_3122, tmp1123, tmp1120
 4744 04d8 939B0B01 		slli	s7,s7,16	#, _98, tmp1123
 4745 04dc 93DB0B01 		srli	s7,s7,16	#, _98, _98
 4746              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4747 04e0 63040D00 		beq	s10,zero,.L527	#, tmp1129,,
 4748 04e4 3305D040 		neg	a0,a3	# v1, _3003
 4749              	.L527:
 4750 04e8 13150501 		slli	a0,a0,16	#,, v1
 4751 04ec 13550541 		srai	a0,a0,16	#,,
 4752 04f0 97000000 		call	__floatsidf		#
 4752      E7800000 
 4753 04f8 B7070000 		lui	a5,%hi(.LC3)	# tmp2419,
 4754 04fc 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4755 0500 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4756 0504 97000000 		call	__muldf3		#
 4756      E7800000 
 4757              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4758 050c 97000000 		call	__truncdfsf2		#
 4758      E7800000 
 4759              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 4760 0514 93F70D04 		andi	a5,s11,64	#, tmp1140, v0.41_653
 4761              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 4762 0518 93090500 		mv	s3,a0	# sin_theta, tmp2082
 4763              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 4764 051c 13850A00 		mv	a0,s5	# v1, _3001
 4765 0520 63840700 		beq	a5,zero,.L529	#, tmp1140,,
 4766 0524 33055041 		neg	a0,s5	# v1, _3001
 4767              	.L529:
 4768 0528 13150501 		slli	a0,a0,16	#,, v1
 4769 052c 13550541 		srai	a0,a0,16	#,,
 4770 0530 97000000 		call	__floatsidf		#
 4770      E7800000 
 4771 0538 B7070000 		lui	a5,%hi(.LC3)	# tmp2421,
 4772 053c 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4773 0540 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4774              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 4775 0544 137C0C04 		andi	s8,s8,64	#, tmp1151, v0.41_746
 4776              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 4777 0548 97000000 		call	__muldf3		#
 4777      E7800000 
 4778              	# gfx_lib_hdmi.h:282:   float cos_theta = COS_FAST(angle);
 4779 0550 97000000 		call	__truncdfsf2		#
 4779      E7800000 
 4780 0558 930A0500 		mv	s5,a0	# cos_theta, tmp2083
 4781              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 4782 055c 13050A00 		mv	a0,s4	# v1, _3139
 4783 0560 63040C00 		beq	s8,zero,.L531	#, tmp1151,,
 4784 0564 33054041 		neg	a0,s4	# v1, _3139
 4785              	.L531:
 4786 0568 13150501 		slli	a0,a0,16	#,, v1
 4787 056c 13550541 		srai	a0,a0,16	#,,
 4788 0570 97000000 		call	__floatsidf		#
 4788      E7800000 
 4789 0578 B7070000 		lui	a5,%hi(.LC3)	# tmp2422,
 4790 057c 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4791 0580 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4792              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 4793 0584 93FC0C04 		andi	s9,s9,64	#, tmp1162, v0.41_777
 4794              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 4795 0588 97000000 		call	__muldf3		#
 4795      E7800000 
 4796              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 4797 0590 97000000 		call	__truncdfsf2		#
 4797      E7800000 
 4798 0598 130A0500 		mv	s4,a0	# cos_theta, tmp2084
 4799              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 4800 059c 33057041 		neg	a0,s7	# v1, _98
 4801 05a0 63940C00 		bne	s9,zero,.L533	#, tmp1162,,
 4802 05a4 13850B00 		mv	a0,s7	# v1, _98
 4803              	.L533:
 4804 05a8 13150501 		slli	a0,a0,16	#,, v1
 4805 05ac 13550541 		srai	a0,a0,16	#,,
 4806 05b0 97000000 		call	__floatsidf		#
 4806      E7800000 
 4807 05b8 B7070000 		lui	a5,%hi(.LC3)	# tmp2423,
 4808 05bc 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 4809 05c0 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 4810 05c4 97000000 		call	__muldf3		#
 4810      E7800000 
 4811              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 4812 05cc 97000000 		call	__truncdfsf2		#
 4812      E7800000 
 4813              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4814 05d4 B7070000 		lui	a5,%hi(.LC8)	# tmp2424,
 4815 05d8 83AB0700 		lw	s7,%lo(.LC8)(a5)		# tmp2055,
 4816              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4817 05dc B7070000 		lui	a5,%hi(.LC7)	# tmp2425,
 4818 05e0 83AC0700 		lw	s9,%lo(.LC7)(a5)		# tmp2061,
 4819              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 4820 05e4 232CA100 		sw	a0,24(sp)	# sin_theta, %sfp
 4821 05e8 232E5101 		sw	s5,28(sp)	# cos_theta, %sfp
 4822              	.L534:
 4823              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4824 05ec 03A54400 		lw	a0,4(s1)		#, MEM[(int *)_2601 + 4B]
 4825              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 4826 05f0 93848401 		addi	s1,s1,24	#, ivtmp.514, ivtmp.514
 4827              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4828 05f4 97000000 		call	__floatsisf		#
 4828      E7800000 
 4829 05fc 93850B00 		mv	a1,s7	#, tmp2055
 4830 0600 97000000 		call	__mulsf3		#
 4830      E7800000 
 4831              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4832 0608 97000000 		call	__fixsfsi		#
 4832      E7800000 
 4833              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4834 0610 130545FC 		addi	a0,a0,-60	#,, tmp2086
 4835 0614 97000000 		call	__floatsisf		#
 4835      E7800000 
 4836 061c 930D0500 		mv	s11,a0	# tmp2087,
 4837              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4838 0620 03A504FF 		lw	a0,-16(s1)		#, MEM[(int *)_2601 + 8B]
 4839 0624 97000000 		call	__floatsisf		#
 4839      E7800000 
 4840 062c 93850B00 		mv	a1,s7	#, tmp2055
 4841 0630 97000000 		call	__mulsf3		#
 4841      E7800000 
 4842              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4843 0638 97000000 		call	__fixsfsi		#
 4843      E7800000 
 4844              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4845 0640 1305C5FE 		addi	a0,a0,-20	#,, tmp2088
 4846 0644 97000000 		call	__floatsisf		#
 4846      E7800000 
 4847 064c 130D0500 		mv	s10,a0	# tmp2089,
 4848              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4849 0650 03A584FF 		lw	a0,-8(s1)		#, MEM[(int *)_2601 + 16B]
 4850 0654 97000000 		call	__floatsisf		#
 4850      E7800000 
 4851 065c 93850B00 		mv	a1,s7	#, tmp2055
 4852 0660 97000000 		call	__mulsf3		#
 4852      E7800000 
 4853              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4854 0668 97000000 		call	__fixsfsi		#
 4854      E7800000 
 4855              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4856 0670 130545FC 		addi	a0,a0,-60	#,, tmp2090
 4857 0674 97000000 		call	__floatsisf		#
 4857      E7800000 
 4858 067c 130C0500 		mv	s8,a0	# tmp2091,
 4859              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4860 0680 03A5C4FF 		lw	a0,-4(s1)		#, MEM[(int *)_2601 + 20B]
 4861 0684 97000000 		call	__floatsisf		#
 4861      E7800000 
 4862 068c 93850B00 		mv	a1,s7	#, tmp2055
 4863 0690 97000000 		call	__mulsf3		#
 4863      E7800000 
 4864              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4865 0698 97000000 		call	__fixsfsi		#
 4865      E7800000 
 4866              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4867 06a0 1305C5FE 		addi	a0,a0,-20	#,, tmp2092
 4868 06a4 97000000 		call	__floatsisf		#
 4868      E7800000 
 4869 06ac 930A0500 		mv	s5,a0	# tmp2093,
 4870              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4871 06b0 03A584FE 		lw	a0,-24(s1)		#, MEM[(int *)_2601]
 4872 06b4 97000000 		call	__floatsisf		#
 4872      E7800000 
 4873 06bc 93850B00 		mv	a1,s7	#, tmp2055
 4874 06c0 97000000 		call	__mulsf3		#
 4874      E7800000 
 4875              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4876 06c8 97000000 		call	__fixsfsi		#
 4876      E7800000 
 4877              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4878 06d0 1305C5FE 		addi	a0,a0,-20	#,, tmp2094
 4879 06d4 97000000 		call	__floatsisf		#
 4879      E7800000 
 4880 06dc 8325C101 		lw	a1,28(sp)		#, %sfp
 4881 06e0 97000000 		call	__mulsf3		#
 4881      E7800000 
 4882 06e8 93070500 		mv	a5,a0	# tmp2095,
 4883              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4884 06ec 93850D00 		mv	a1,s11	#, _604
 4885 06f0 13850900 		mv	a0,s3	#, sin_theta
 4886              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4887 06f4 2322F102 		sw	a5,36(sp)	# tmp1196, %sfp
 4888              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4889 06f8 97000000 		call	__mulsf3		#
 4889      E7800000 
 4890              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4891 0700 93050D00 		mv	a1,s10	#, _606
 4892              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4893 0704 2320A102 		sw	a0,32(sp)	# tmp1197, %sfp
 4894              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4895 0708 13050B00 		mv	a0,s6	#, cos_theta
 4896 070c 97000000 		call	__mulsf3		#
 4896      E7800000 
 4897              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4898 0714 03280102 		lw	a6,32(sp)		# tmp1197, %sfp
 4899              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4900 0718 93050500 		mv	a1,a0	# tmp2097,
 4901              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4902 071c 13050800 		mv	a0,a6	#, tmp1197
 4903 0720 97000000 		call	__addsf3		#
 4903      E7800000 
 4904              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4905 0728 93050000 		mv	a1,zero	#,
 4906 072c 97000000 		call	__addsf3		#
 4906      E7800000 
 4907              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4908 0734 97000000 		call	__fixsfsi		#
 4908      E7800000 
 4909              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4910 073c 97000000 		call	__floatsisf		#
 4910      E7800000 
 4911 0744 93050400 		mv	a1,s0	#, sin_theta
 4912 0748 97000000 		call	__mulsf3		#
 4912      E7800000 
 4913              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4914 0750 83274102 		lw	a5,36(sp)		# tmp1196, %sfp
 4915              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4916 0754 93050500 		mv	a1,a0	# tmp2098,
 4917              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4918 0758 13850700 		mv	a0,a5	#, tmp1196
 4919 075c 97000000 		call	__addsf3		#
 4919      E7800000 
 4920              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4921 0764 B7070000 		lui	a5,%hi(.LC5)	# tmp2426,
 4922 0768 83A50700 		lw	a1,%lo(.LC5)(a5)		#,
 4923 076c 97000000 		call	__addsf3		#
 4923      E7800000 
 4924              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4925 0774 97000000 		call	__fixsfsi		#
 4925      E7800000 
 4926              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4927 077c 130585FD 		addi	a0,a0,-40	#,, tmp2099
 4928 0780 97000000 		call	__floatsisf		#
 4928      E7800000 
 4929 0788 93070500 		mv	a5,a0	# tmp2100,
 4930              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4931 078c 93850D00 		mv	a1,s11	#, _604
 4932 0790 13050B00 		mv	a0,s6	#, cos_theta
 4933              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4934 0794 938D0700 		mv	s11,a5	# _444, tmp2100
 4935              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4936 0798 97000000 		call	__mulsf3		#
 4936      E7800000 
 4937              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4938 07a0 93050D00 		mv	a1,s10	#, _606
 4939              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4940 07a4 2320A102 		sw	a0,32(sp)	# tmp1209, %sfp
 4941              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4942 07a8 13850900 		mv	a0,s3	#, sin_theta
 4943 07ac 97000000 		call	__mulsf3		#
 4943      E7800000 
 4944              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4945 07b4 03260102 		lw	a2,32(sp)		# tmp1209, %sfp
 4946              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4947 07b8 93050500 		mv	a1,a0	# tmp2102,
 4948              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4949 07bc 13050600 		mv	a0,a2	#, tmp1209
 4950 07c0 97000000 		call	__subsf3		#
 4950      E7800000 
 4951              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4952 07c8 93850C00 		mv	a1,s9	#, tmp2061
 4953 07cc 97000000 		call	__addsf3		#
 4953      E7800000 
 4954              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 4955 07d4 97000000 		call	__fixsfsi		#
 4955      E7800000 
 4956              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 4957 07dc 130525FE 		addi	a0,a0,-30	#,, tmp2103
 4958 07e0 97000000 		call	__floatsisf		#
 4958      E7800000 
 4959 07e8 130D0500 		mv	s10,a0	# tmp2104,
 4960              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4961 07ec 03A544FF 		lw	a0,-12(s1)		#, MEM[(int *)_2601 + 12B]
 4962 07f0 97000000 		call	__floatsisf		#
 4962      E7800000 
 4963 07f8 93850B00 		mv	a1,s7	#, tmp2055
 4964 07fc 97000000 		call	__mulsf3		#
 4964      E7800000 
 4965              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 4966 0804 97000000 		call	__fixsfsi		#
 4966      E7800000 
 4967              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4968 080c 1305C5FE 		addi	a0,a0,-20	#,, tmp2105
 4969 0810 97000000 		call	__floatsisf		#
 4969      E7800000 
 4970 0818 8325C101 		lw	a1,28(sp)		#, %sfp
 4971 081c 97000000 		call	__mulsf3		#
 4971      E7800000 
 4972 0824 13060500 		mv	a2,a0	# tmp2106,
 4973              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4974 0828 93050C00 		mv	a1,s8	#, _564
 4975 082c 13050400 		mv	a0,s0	#, sin_theta
 4976              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4977 0830 2322C102 		sw	a2,36(sp)	# tmp1222, %sfp
 4978              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4979 0834 97000000 		call	__mulsf3		#
 4979      E7800000 
 4980 083c 2320A102 		sw	a0,32(sp)	# tmp1223, %sfp
 4981              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4982 0840 93050B00 		mv	a1,s6	#, cos_theta
 4983 0844 13850A00 		mv	a0,s5	#, _566
 4984 0848 97000000 		call	__mulsf3		#
 4984      E7800000 
 4985              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4986 0850 03280102 		lw	a6,32(sp)		# tmp1223, %sfp
 4987              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4988 0854 93050500 		mv	a1,a0	# tmp2108,
 4989              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4990 0858 13050800 		mv	a0,a6	#, tmp1223
 4991 085c 97000000 		call	__addsf3		#
 4991      E7800000 
 4992              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4993 0864 93050000 		mv	a1,zero	#,
 4994 0868 97000000 		call	__addsf3		#
 4994      E7800000 
 4995              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 4996 0870 97000000 		call	__fixsfsi		#
 4996      E7800000 
 4997              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 4998 0878 97000000 		call	__floatsisf		#
 4998      E7800000 
 4999 0880 93850900 		mv	a1,s3	#, sin_theta
 5000 0884 97000000 		call	__mulsf3		#
 5000      E7800000 
 5001              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5002 088c 03264102 		lw	a2,36(sp)		# tmp1222, %sfp
 5003              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5004 0890 93050500 		mv	a1,a0	# tmp2109,
 5005              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5006 0894 13050600 		mv	a0,a2	#, tmp1222
 5007 0898 97000000 		call	__addsf3		#
 5007      E7800000 
 5008              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5009 08a0 B7070000 		lui	a5,%hi(.LC5)	# tmp2427,
 5010 08a4 83A50700 		lw	a1,%lo(.LC5)(a5)		#,
 5011 08a8 97000000 		call	__addsf3		#
 5011      E7800000 
 5012              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5013 08b0 97000000 		call	__fixsfsi		#
 5013      E7800000 
 5014              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5015 08b8 130585FD 		addi	a0,a0,-40	#,, tmp2110
 5016 08bc 97000000 		call	__floatsisf		#
 5016      E7800000 
 5017 08c4 93070500 		mv	a5,a0	# tmp2111,
 5018              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5019 08c8 93050B00 		mv	a1,s6	#, cos_theta
 5020 08cc 13050C00 		mv	a0,s8	#, _564
 5021              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5022 08d0 138C0700 		mv	s8,a5	# _404, tmp2111
 5023              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5024 08d4 97000000 		call	__mulsf3		#
 5024      E7800000 
 5025              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5026 08dc 93850A00 		mv	a1,s5	#, _566
 5027              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5028 08e0 2320A102 		sw	a0,32(sp)	# tmp1235, %sfp
 5029              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5030 08e4 13050400 		mv	a0,s0	#, sin_theta
 5031 08e8 97000000 		call	__mulsf3		#
 5031      E7800000 
 5032              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5033 08f0 83270102 		lw	a5,32(sp)		# tmp1235, %sfp
 5034              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5035 08f4 93050500 		mv	a1,a0	# tmp2113,
 5036              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5037 08f8 13850700 		mv	a0,a5	#, tmp1235
 5038 08fc 97000000 		call	__subsf3		#
 5038      E7800000 
 5039              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5040 0904 93850C00 		mv	a1,s9	#, tmp2061
 5041 0908 97000000 		call	__addsf3		#
 5041      E7800000 
 5042              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5043 0910 97000000 		call	__fixsfsi		#
 5043      E7800000 
 5044              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5045 0918 130525FE 		addi	a0,a0,-30	#,, tmp2114
 5046 091c 97000000 		call	__floatsisf		#
 5046      E7800000 
 5047 0924 930A0500 		mv	s5,a0	# tmp2115,
 5048              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5049 0928 03258101 		lw	a0,24(sp)		#, %sfp
 5050 092c 93050C00 		mv	a1,s8	#, _404
 5051 0930 97000000 		call	__mulsf3		#
 5051      E7800000 
 5052 0938 2320A102 		sw	a0,32(sp)	# tmp1242, %sfp
 5053              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5054 093c 93050A00 		mv	a1,s4	#, cos_theta
 5055 0940 13850A00 		mv	a0,s5	#, _406
 5056 0944 97000000 		call	__mulsf3		#
 5056      E7800000 
 5057              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5058 094c 83260102 		lw	a3,32(sp)		# tmp1242, %sfp
 5059              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5060 0950 93050500 		mv	a1,a0	# tmp2117,
 5061              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5062 0954 13850600 		mv	a0,a3	#, tmp1242
 5063 0958 97000000 		call	__addsf3		#
 5063      E7800000 
 5064              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5065 0960 93850C00 		mv	a1,s9	#, tmp2061
 5066 0964 97000000 		call	__addsf3		#
 5066      E7800000 
 5067              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5068 096c 97000000 		call	__fixsfsi		#
 5068      E7800000 
 5069 0974 93060500 		mv	a3,a0	# tmp2118,
 5070              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5071 0978 93050A00 		mv	a1,s4	#, cos_theta
 5072 097c 13050C00 		mv	a0,s8	#, _404
 5073              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5074 0980 2326D102 		sw	a3,44(sp)	# tmp1247, %sfp
 5075              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5076 0984 97000000 		call	__mulsf3		#
 5076      E7800000 
 5077 098c 2320A102 		sw	a0,32(sp)	# tmp1248, %sfp
 5078              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5079 0990 03258101 		lw	a0,24(sp)		#, %sfp
 5080 0994 93850A00 		mv	a1,s5	#, _406
 5081 0998 97000000 		call	__mulsf3		#
 5081      E7800000 
 5082              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5083 09a0 03260102 		lw	a2,32(sp)		# tmp1248, %sfp
 5084              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5085 09a4 93050500 		mv	a1,a0	# tmp2120,
 5086              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5087 09a8 13050600 		mv	a0,a2	#, tmp1248
 5088 09ac 97000000 		call	__subsf3		#
 5088      E7800000 
 5089              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5090 09b4 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 5091 09b8 97000000 		call	__addsf3		#
 5091      E7800000 
 5092              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5093 09c0 97000000 		call	__fixsfsi		#
 5093      E7800000 
 5094              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5095 09c8 832A8100 		lw	s5,8(sp)		# sin_theta, %sfp
 5096              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5097 09cc 13060500 		mv	a2,a0	# tmp2121,
 5098              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5099 09d0 93850D00 		mv	a1,s11	#, _444
 5100 09d4 13850A00 		mv	a0,s5	#, sin_theta
 5101              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5102 09d8 2324C102 		sw	a2,40(sp)	# tmp1253, %sfp
 5103              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5104 09dc 97000000 		call	__mulsf3		#
 5104      E7800000 
 5105 09e4 2320A102 		sw	a0,32(sp)	# tmp1254, %sfp
 5106              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5107 09e8 93050D00 		mv	a1,s10	#, _446
 5108 09ec 13050A00 		mv	a0,s4	#, cos_theta
 5109 09f0 97000000 		call	__mulsf3		#
 5109      E7800000 
 5110              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5111 09f8 03270102 		lw	a4,32(sp)		# tmp1254, %sfp
 5112              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5113 09fc 93050500 		mv	a1,a0	# tmp2123,
 5114              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5115 0a00 13050700 		mv	a0,a4	#, tmp1254
 5116 0a04 97000000 		call	__addsf3		#
 5116      E7800000 
 5117              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5118 0a0c B7070000 		lui	a5,%hi(.LC7)	# tmp2428,
 5119 0a10 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5120 0a14 97000000 		call	__addsf3		#
 5120      E7800000 
 5121              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5122 0a1c 97000000 		call	__fixsfsi		#
 5122      E7800000 
 5123 0a24 13070500 		mv	a4,a0	# tmp2124,
 5124              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5125 0a28 93850D00 		mv	a1,s11	#, _444
 5126 0a2c 13050A00 		mv	a0,s4	#, cos_theta
 5127              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5128 0a30 2322E102 		sw	a4,36(sp)	# tmp1259, %sfp
 5129              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5130 0a34 97000000 		call	__mulsf3		#
 5130      E7800000 
 5131 0a3c 2320A102 		sw	a0,32(sp)	# tmp1260, %sfp
 5132              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5133 0a40 93050D00 		mv	a1,s10	#, _446
 5134 0a44 13850A00 		mv	a0,s5	#, sin_theta
 5135 0a48 97000000 		call	__mulsf3		#
 5135      E7800000 
 5136              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5137 0a50 03270102 		lw	a4,32(sp)		# tmp1260, %sfp
 5138              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5139 0a54 93050500 		mv	a1,a0	# tmp2126,
 5140              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5141 0a58 13050700 		mv	a0,a4	#, tmp1260
 5142 0a5c 97000000 		call	__subsf3		#
 5142      E7800000 
 5143              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5144 0a64 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 5145 0a68 97000000 		call	__addsf3		#
 5145      E7800000 
 5146              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5147 0a70 97000000 		call	__fixsfsi		#
 5147      E7800000 
 5148              	# main_cube3d_rotate_hdmi.c:94:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, 0x00ffff
 5149 0a78 83274102 		lw	a5,36(sp)		# tmp1259, %sfp
 5150 0a7c 8326C102 		lw	a3,44(sp)		# tmp1247, %sfp
 5151 0a80 03268102 		lw	a2,40(sp)		# tmp1253, %sfp
 5152 0a84 93850700 		mv	a1,a5	#, tmp1259
 5153 0a88 97000000 		call	fb_draw_bresenham.constprop.0		#
 5153      E7800000 
 5154              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 5155 0a90 8327C103 		lw	a5,60(sp)		# ivtmp.507, %sfp
 5156 0a94 E39CF4B4 		bne	s1,a5,.L534	#, ivtmp.514, ivtmp.507,
 5157              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5158 0a98 03250104 		lw	a0,64(sp)		#, %sfp
 5159 0a9c 93840700 		mv	s1,a5	# ivtmp.507, ivtmp.507
 5160 0aa0 032C8101 		lw	s8,24(sp)		# sin_theta, %sfp
 5161 0aa4 97000000 		call	sin1		#
 5161      E7800000 
 5162              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 5163 0aac 97000000 		call	__floatsidf		#
 5163      E7800000 
 5164 0ab4 B7070000 		lui	a5,%hi(.LC3)	# tmp2430,
 5165 0ab8 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5166 0abc 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5167              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5168 0ac0 832AC101 		lw	s5,28(sp)		# cos_theta, %sfp
 5169              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 5170 0ac4 97000000 		call	__muldf3		#
 5170      E7800000 
 5171              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 5172 0acc 97000000 		call	__truncdfsf2		#
 5172      E7800000 
 5173              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5174 0ad4 B7070000 		lui	a5,%hi(.LC8)	# tmp2431,
 5175 0ad8 83AB0700 		lw	s7,%lo(.LC8)(a5)		# tmp2044,
 5176              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5177 0adc B7070000 		lui	a5,%hi(.LC7)	# tmp2432,
 5178 0ae0 83AC0700 		lw	s9,%lo(.LC7)(a5)		# tmp2050,
 5179              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 5180 0ae4 232CA100 		sw	a0,24(sp)	# tmp2127, %sfp
 5181 0ae8 23204105 		sw	s4,64(sp)	# cos_theta, %sfp
 5182 0aec 232E6101 		sw	s6,28(sp)	# cos_theta, %sfp
 5183              	.L535:
 5184              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5185 0af0 03A54400 		lw	a0,4(s1)		#, MEM[(int *)_2114 + 4B]
 5186              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 5187 0af4 93848401 		addi	s1,s1,24	#, ivtmp.507, ivtmp.507
 5188              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5189 0af8 97000000 		call	__floatsisf		#
 5189      E7800000 
 5190 0b00 93850B00 		mv	a1,s7	#, tmp2044
 5191 0b04 97000000 		call	__mulsf3		#
 5191      E7800000 
 5192              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5193 0b0c 97000000 		call	__fixsfsi		#
 5193      E7800000 
 5194              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5195 0b14 130545FC 		addi	a0,a0,-60	#,, tmp2128
 5196 0b18 97000000 		call	__floatsisf		#
 5196      E7800000 
 5197 0b20 930D0500 		mv	s11,a0	# tmp2129,
 5198              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5199 0b24 03A504FF 		lw	a0,-16(s1)		#, MEM[(int *)_2114 + 8B]
 5200 0b28 97000000 		call	__floatsisf		#
 5200      E7800000 
 5201 0b30 93850B00 		mv	a1,s7	#, tmp2044
 5202 0b34 97000000 		call	__mulsf3		#
 5202      E7800000 
 5203              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5204 0b3c 97000000 		call	__fixsfsi		#
 5204      E7800000 
 5205              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5206 0b44 1305C5FE 		addi	a0,a0,-20	#,, tmp2130
 5207 0b48 97000000 		call	__floatsisf		#
 5207      E7800000 
 5208 0b50 130D0500 		mv	s10,a0	# tmp2131,
 5209              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5210 0b54 03A584FF 		lw	a0,-8(s1)		#, MEM[(int *)_2114 + 16B]
 5211 0b58 97000000 		call	__floatsisf		#
 5211      E7800000 
 5212 0b60 93850B00 		mv	a1,s7	#, tmp2044
 5213 0b64 97000000 		call	__mulsf3		#
 5213      E7800000 
 5214              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5215 0b6c 97000000 		call	__fixsfsi		#
 5215      E7800000 
 5216              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5217 0b74 130545FC 		addi	a0,a0,-60	#,, tmp2132
 5218 0b78 97000000 		call	__floatsisf		#
 5218      E7800000 
 5219 0b80 130B0500 		mv	s6,a0	# tmp2133,
 5220              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5221 0b84 03A5C4FF 		lw	a0,-4(s1)		#, MEM[(int *)_2114 + 20B]
 5222 0b88 97000000 		call	__floatsisf		#
 5222      E7800000 
 5223 0b90 93850B00 		mv	a1,s7	#, tmp2044
 5224 0b94 97000000 		call	__mulsf3		#
 5224      E7800000 
 5225              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5226 0b9c 97000000 		call	__fixsfsi		#
 5226      E7800000 
 5227              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5228 0ba4 1305C5FE 		addi	a0,a0,-20	#,, tmp2134
 5229 0ba8 97000000 		call	__floatsisf		#
 5229      E7800000 
 5230 0bb0 130A0500 		mv	s4,a0	# tmp2135,
 5231              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5232 0bb4 03A584FE 		lw	a0,-24(s1)		#, MEM[(int *)_2114]
 5233 0bb8 97000000 		call	__floatsisf		#
 5233      E7800000 
 5234 0bc0 93850B00 		mv	a1,s7	#, tmp2044
 5235 0bc4 97000000 		call	__mulsf3		#
 5235      E7800000 
 5236              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5237 0bcc 97000000 		call	__fixsfsi		#
 5237      E7800000 
 5238              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5239 0bd4 1305C5FE 		addi	a0,a0,-20	#,, tmp2136
 5240 0bd8 97000000 		call	__floatsisf		#
 5240      E7800000 
 5241 0be0 93850A00 		mv	a1,s5	#, cos_theta
 5242 0be4 97000000 		call	__mulsf3		#
 5242      E7800000 
 5243 0bec 13070500 		mv	a4,a0	# tmp2137,
 5244              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5245 0bf0 93850D00 		mv	a1,s11	#, _1061
 5246 0bf4 13850900 		mv	a0,s3	#, sin_theta
 5247              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5248 0bf8 2322E102 		sw	a4,36(sp)	# tmp1299, %sfp
 5249              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5250 0bfc 97000000 		call	__mulsf3		#
 5250      E7800000 
 5251              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5252 0c04 93050D00 		mv	a1,s10	#, _1063
 5253              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5254 0c08 2320A102 		sw	a0,32(sp)	# tmp1300, %sfp
 5255              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5256 0c0c 13850A00 		mv	a0,s5	#, cos_theta
 5257 0c10 97000000 		call	__mulsf3		#
 5257      E7800000 
 5258              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5259 0c18 83280102 		lw	a7,32(sp)		# tmp1300, %sfp
 5260              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5261 0c1c 93050500 		mv	a1,a0	# tmp2139,
 5262              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5263 0c20 13850800 		mv	a0,a7	#, tmp1300
 5264 0c24 97000000 		call	__addsf3		#
 5264      E7800000 
 5265              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5266 0c2c 93050000 		mv	a1,zero	#,
 5267 0c30 97000000 		call	__addsf3		#
 5267      E7800000 
 5268              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5269 0c38 97000000 		call	__fixsfsi		#
 5269      E7800000 
 5270              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5271 0c40 97000000 		call	__floatsisf		#
 5271      E7800000 
 5272 0c48 93850900 		mv	a1,s3	#, sin_theta
 5273 0c4c 97000000 		call	__mulsf3		#
 5273      E7800000 
 5274              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5275 0c54 03274102 		lw	a4,36(sp)		# tmp1299, %sfp
 5276              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5277 0c58 93050500 		mv	a1,a0	# tmp2140,
 5278              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5279 0c5c 13050700 		mv	a0,a4	#, tmp1299
 5280 0c60 97000000 		call	__addsf3		#
 5280      E7800000 
 5281              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5282 0c68 B7070000 		lui	a5,%hi(.LC5)	# tmp2433,
 5283 0c6c 83A50700 		lw	a1,%lo(.LC5)(a5)		#,
 5284 0c70 97000000 		call	__addsf3		#
 5284      E7800000 
 5285              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5286 0c78 97000000 		call	__fixsfsi		#
 5286      E7800000 
 5287              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5288 0c80 130585FD 		addi	a0,a0,-40	#,, tmp2141
 5289 0c84 97000000 		call	__floatsisf		#
 5289      E7800000 
 5290 0c8c 93070500 		mv	a5,a0	# tmp2142,
 5291              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5292 0c90 93850D00 		mv	a1,s11	#, _1061
 5293 0c94 13850A00 		mv	a0,s5	#, cos_theta
 5294              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5295 0c98 938D0700 		mv	s11,a5	# _901, tmp2142
 5296              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5297 0c9c 97000000 		call	__mulsf3		#
 5297      E7800000 
 5298              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5299 0ca4 93050D00 		mv	a1,s10	#, _1063
 5300              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5301 0ca8 2320A102 		sw	a0,32(sp)	# tmp1312, %sfp
 5302              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5303 0cac 13850900 		mv	a0,s3	#, sin_theta
 5304 0cb0 97000000 		call	__mulsf3		#
 5304      E7800000 
 5305              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5306 0cb8 83270102 		lw	a5,32(sp)		# tmp1312, %sfp
 5307              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5308 0cbc 93050500 		mv	a1,a0	# tmp2144,
 5309              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5310 0cc0 13850700 		mv	a0,a5	#, tmp1312
 5311 0cc4 97000000 		call	__subsf3		#
 5311      E7800000 
 5312              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5313 0ccc 93850C00 		mv	a1,s9	#, tmp2050
 5314 0cd0 97000000 		call	__addsf3		#
 5314      E7800000 
 5315              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5316 0cd8 97000000 		call	__fixsfsi		#
 5316      E7800000 
 5317              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5318 0ce0 130525FE 		addi	a0,a0,-30	#,, tmp2145
 5319 0ce4 97000000 		call	__floatsisf		#
 5319      E7800000 
 5320 0cec 130D0500 		mv	s10,a0	# tmp2146,
 5321              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5322 0cf0 03A544FF 		lw	a0,-12(s1)		#, MEM[(int *)_2114 + 12B]
 5323 0cf4 97000000 		call	__floatsisf		#
 5323      E7800000 
 5324 0cfc 93850B00 		mv	a1,s7	#, tmp2044
 5325 0d00 97000000 		call	__mulsf3		#
 5325      E7800000 
 5326              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5327 0d08 97000000 		call	__fixsfsi		#
 5327      E7800000 
 5328              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5329 0d10 1305C5FE 		addi	a0,a0,-20	#,, tmp2147
 5330 0d14 97000000 		call	__floatsisf		#
 5330      E7800000 
 5331 0d1c 93850A00 		mv	a1,s5	#, cos_theta
 5332 0d20 97000000 		call	__mulsf3		#
 5332      E7800000 
 5333 0d28 13080500 		mv	a6,a0	# tmp2148,
 5334              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5335 0d2c 93050B00 		mv	a1,s6	#, _1021
 5336 0d30 13050400 		mv	a0,s0	#, sin_theta
 5337              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5338 0d34 23220103 		sw	a6,36(sp)	# tmp1325, %sfp
 5339              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5340 0d38 97000000 		call	__mulsf3		#
 5340      E7800000 
 5341 0d40 2320A102 		sw	a0,32(sp)	# tmp1326, %sfp
 5342              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5343 0d44 0325C101 		lw	a0,28(sp)		#, %sfp
 5344 0d48 93050A00 		mv	a1,s4	#, _1023
 5345 0d4c 97000000 		call	__mulsf3		#
 5345      E7800000 
 5346              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5347 0d54 83280102 		lw	a7,32(sp)		# tmp1326, %sfp
 5348              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5349 0d58 93050500 		mv	a1,a0	# tmp2150,
 5350              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5351 0d5c 13850800 		mv	a0,a7	#, tmp1326
 5352 0d60 97000000 		call	__addsf3		#
 5352      E7800000 
 5353              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5354 0d68 93050000 		mv	a1,zero	#,
 5355 0d6c 97000000 		call	__addsf3		#
 5355      E7800000 
 5356              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5357 0d74 97000000 		call	__fixsfsi		#
 5357      E7800000 
 5358              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5359 0d7c 97000000 		call	__floatsisf		#
 5359      E7800000 
 5360 0d84 93850900 		mv	a1,s3	#, sin_theta
 5361 0d88 97000000 		call	__mulsf3		#
 5361      E7800000 
 5362              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5363 0d90 03284102 		lw	a6,36(sp)		# tmp1325, %sfp
 5364              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5365 0d94 93050500 		mv	a1,a0	# tmp2151,
 5366              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5367 0d98 13050800 		mv	a0,a6	#, tmp1325
 5368 0d9c 97000000 		call	__addsf3		#
 5368      E7800000 
 5369              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5370 0da4 B7070000 		lui	a5,%hi(.LC5)	# tmp2434,
 5371 0da8 83A50700 		lw	a1,%lo(.LC5)(a5)		#,
 5372 0dac 97000000 		call	__addsf3		#
 5372      E7800000 
 5373              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5374 0db4 97000000 		call	__fixsfsi		#
 5374      E7800000 
 5375              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5376 0dbc 130585FD 		addi	a0,a0,-40	#,, tmp2152
 5377 0dc0 97000000 		call	__floatsisf		#
 5377      E7800000 
 5378 0dc8 93070500 		mv	a5,a0	# tmp2153,
 5379              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5380 0dcc 0325C101 		lw	a0,28(sp)		#, %sfp
 5381 0dd0 93050B00 		mv	a1,s6	#, _1021
 5382              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5383 0dd4 138B0700 		mv	s6,a5	# _861, tmp2153
 5384              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5385 0dd8 97000000 		call	__mulsf3		#
 5385      E7800000 
 5386              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5387 0de0 93050A00 		mv	a1,s4	#, _1023
 5388              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5389 0de4 2320A102 		sw	a0,32(sp)	# tmp1338, %sfp
 5390              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5391 0de8 13050400 		mv	a0,s0	#, sin_theta
 5392 0dec 97000000 		call	__mulsf3		#
 5392      E7800000 
 5393              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5394 0df4 83270102 		lw	a5,32(sp)		# tmp1338, %sfp
 5395              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5396 0df8 93050500 		mv	a1,a0	# tmp2155,
 5397              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5398 0dfc 13850700 		mv	a0,a5	#, tmp1338
 5399 0e00 97000000 		call	__subsf3		#
 5399      E7800000 
 5400              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5401 0e08 93850C00 		mv	a1,s9	#, tmp2050
 5402 0e0c 97000000 		call	__addsf3		#
 5402      E7800000 
 5403              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5404 0e14 97000000 		call	__fixsfsi		#
 5404      E7800000 
 5405              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5406 0e1c 130525FE 		addi	a0,a0,-30	#,, tmp2156
 5407 0e20 97000000 		call	__floatsisf		#
 5407      E7800000 
 5408 0e28 130A0500 		mv	s4,a0	# tmp2157,
 5409              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5410 0e2c 93050B00 		mv	a1,s6	#, _861
 5411 0e30 13050C00 		mv	a0,s8	#, sin_theta
 5412 0e34 97000000 		call	__mulsf3		#
 5412      E7800000 
 5413 0e3c 2320A102 		sw	a0,32(sp)	# tmp1345, %sfp
 5414              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5415 0e40 03258101 		lw	a0,24(sp)		#, %sfp
 5416 0e44 93050A00 		mv	a1,s4	#, _863
 5417 0e48 97000000 		call	__mulsf3		#
 5417      E7800000 
 5418              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5419 0e50 83260102 		lw	a3,32(sp)		# tmp1345, %sfp
 5420              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5421 0e54 93050500 		mv	a1,a0	# tmp2159,
 5422              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5423 0e58 13850600 		mv	a0,a3	#, tmp1345
 5424 0e5c 97000000 		call	__addsf3		#
 5424      E7800000 
 5425              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5426 0e64 93850C00 		mv	a1,s9	#, tmp2050
 5427 0e68 97000000 		call	__addsf3		#
 5427      E7800000 
 5428              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5429 0e70 97000000 		call	__fixsfsi		#
 5429      E7800000 
 5430 0e78 93060500 		mv	a3,a0	# tmp2160,
 5431              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5432 0e7c 03258101 		lw	a0,24(sp)		#, %sfp
 5433 0e80 93050B00 		mv	a1,s6	#, _861
 5434              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5435 0e84 2326D102 		sw	a3,44(sp)	# tmp1350, %sfp
 5436              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5437 0e88 97000000 		call	__mulsf3		#
 5437      E7800000 
 5438              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5439 0e90 93050A00 		mv	a1,s4	#, _863
 5440              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5441 0e94 2320A102 		sw	a0,32(sp)	# tmp1351, %sfp
 5442              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5443 0e98 13050C00 		mv	a0,s8	#, sin_theta
 5444 0e9c 97000000 		call	__mulsf3		#
 5444      E7800000 
 5445              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5446 0ea4 03280102 		lw	a6,32(sp)		# tmp1351, %sfp
 5447              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5448 0ea8 93050500 		mv	a1,a0	# tmp2162,
 5449              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5450 0eac 13050800 		mv	a0,a6	#, tmp1351
 5451 0eb0 97000000 		call	__subsf3		#
 5451      E7800000 
 5452              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5453 0eb8 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 5454 0ebc 97000000 		call	__addsf3		#
 5454      E7800000 
 5455              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5456 0ec4 97000000 		call	__fixsfsi		#
 5456      E7800000 
 5457              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5458 0ecc 032B8100 		lw	s6,8(sp)		# sin_theta, %sfp
 5459              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5460 0ed0 13060500 		mv	a2,a0	# tmp2163,
 5461              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5462 0ed4 93850D00 		mv	a1,s11	#, _901
 5463 0ed8 13050B00 		mv	a0,s6	#, sin_theta
 5464              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5465 0edc 2324C102 		sw	a2,40(sp)	# tmp1356, %sfp
 5466              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5467 0ee0 97000000 		call	__mulsf3		#
 5467      E7800000 
 5468              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5469 0ee8 032A0104 		lw	s4,64(sp)		# cos_theta, %sfp
 5470              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5471 0eec 2320A102 		sw	a0,32(sp)	# tmp1357, %sfp
 5472              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5473 0ef0 93050D00 		mv	a1,s10	#, _903
 5474 0ef4 13050A00 		mv	a0,s4	#, cos_theta
 5475 0ef8 97000000 		call	__mulsf3		#
 5475      E7800000 
 5476              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5477 0f00 03280102 		lw	a6,32(sp)		# tmp1357, %sfp
 5478              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5479 0f04 93050500 		mv	a1,a0	# tmp2165,
 5480              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5481 0f08 13050800 		mv	a0,a6	#, tmp1357
 5482 0f0c 97000000 		call	__addsf3		#
 5482      E7800000 
 5483              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5484 0f14 B7070000 		lui	a5,%hi(.LC7)	# tmp2435,
 5485 0f18 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5486 0f1c 97000000 		call	__addsf3		#
 5486      E7800000 
 5487              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5488 0f24 97000000 		call	__fixsfsi		#
 5488      E7800000 
 5489 0f2c 13080500 		mv	a6,a0	# tmp2166,
 5490              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5491 0f30 93850D00 		mv	a1,s11	#, _901
 5492 0f34 13050A00 		mv	a0,s4	#, cos_theta
 5493              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 5494 0f38 23220103 		sw	a6,36(sp)	# tmp1362, %sfp
 5495              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5496 0f3c 97000000 		call	__mulsf3		#
 5496      E7800000 
 5497 0f44 2320A102 		sw	a0,32(sp)	# tmp1363, %sfp
 5498              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5499 0f48 93050D00 		mv	a1,s10	#, _903
 5500 0f4c 13050B00 		mv	a0,s6	#, sin_theta
 5501 0f50 97000000 		call	__mulsf3		#
 5501      E7800000 
 5502              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5503 0f58 03280102 		lw	a6,32(sp)		# tmp1363, %sfp
 5504              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5505 0f5c 93050500 		mv	a1,a0	# tmp2168,
 5506              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5507 0f60 13050800 		mv	a0,a6	#, tmp1363
 5508 0f64 97000000 		call	__subsf3		#
 5508      E7800000 
 5509              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5510 0f6c 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 5511 0f70 97000000 		call	__addsf3		#
 5511      E7800000 
 5512              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 5513 0f78 97000000 		call	__fixsfsi		#
 5513      E7800000 
 5514              	# main_cube3d_rotate_hdmi.c:94:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, 0x00ffff
 5515 0f80 03274102 		lw	a4,36(sp)		# tmp1362, %sfp
 5516 0f84 8326C102 		lw	a3,44(sp)		# tmp1350, %sfp
 5517 0f88 03268102 		lw	a2,40(sp)		# tmp1356, %sfp
 5518 0f8c 93050700 		mv	a1,a4	#, tmp1362
 5519 0f90 97000000 		call	fb_draw_bresenham.constprop.0		#
 5519      E7800000 
 5520              	# main_cube3d_rotate_hdmi.c:72:   for (int i = 0; i < s - 1; i = i + 2) {
 5521 0f98 B7070000 		lui	a5,%hi(.LANCHOR2+232)	# tmp2437,
 5522 0f9c 9387870E 		addi	a5,a5,%lo(.LANCHOR2+232)	# tmp2436, tmp2437,
 5523 0fa0 E398F4B4 		bne	s1,a5,.L535	#, ivtmp.507, tmp2436,
 5524              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5525 0fa4 83240100 		lw	s1,0(sp)		# tmp2004, %sfp
 5526 0fa8 B7090000 		lui	s3,%hi(.LC8)	# tmp2439,
 5527 0fac 03A5840E 		lw	a0,232(s1)		#, MEM[(struct point *)&left_bottom].x
 5528 0fb0 97000000 		call	__floatsisf		#
 5528      E7800000 
 5529 0fb8 83A50900 		lw	a1,%lo(.LC8)(s3)		#,
 5530 0fbc 97000000 		call	__mulsf3		#
 5530      E7800000 
 5531              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5532 0fc4 97000000 		call	__fixsfsi		#
 5532      E7800000 
 5533 0fcc 130B0500 		mv	s6,a0	# tmp2169,
 5534              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5535 0fd0 03A5440F 		lw	a0,244(s1)		#, MEM[(struct point *)&left_bottom + 12B].x
 5536              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5537 0fd4 232C6101 		sw	s6,24(sp)	# tmp2169, %sfp
 5538              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5539 0fd8 97000000 		call	__floatsisf		#
 5539      E7800000 
 5540 0fe0 83A50900 		lw	a1,%lo(.LC8)(s3)		#,
 5541 0fe4 97000000 		call	__mulsf3		#
 5541      E7800000 
 5542              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5543 0fec 97000000 		call	__fixsfsi		#
 5543      E7800000 
 5544 0ff4 930B0500 		mv	s7,a0	# tmp2170,
 5545              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5546 0ff8 03A5840F 		lw	a0,248(s1)		#, MEM[(struct point *)&left_bottom + 12B].y
 5547 0ffc 97000000 		call	__floatsisf		#
 5547      E7800000 
 5548 1004 83A50900 		lw	a1,%lo(.LC8)(s3)		#,
 5549 1008 97000000 		call	__mulsf3		#
 5549      E7800000 
 5550              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5551 1010 97000000 		call	__fixsfsi		#
 5551      E7800000 
 5552 1018 930A0500 		mv	s5,a0	# tmp2171,
 5553              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5554 101c 03A5040F 		lw	a0,240(s1)		#, MEM[(struct point *)&left_bottom].z
 5555 1020 97000000 		call	__floatsisf		#
 5555      E7800000 
 5556 1028 83A50900 		lw	a1,%lo(.LC8)(s3)		#,
 5557 102c 97000000 		call	__mulsf3		#
 5557      E7800000 
 5558              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5559 1034 97000000 		call	__fixsfsi		#
 5559      E7800000 
 5560 103c 130A0500 		mv	s4,a0	# tmp2172,
 5561              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5562 1040 03A5C40F 		lw	a0,252(s1)		#, MEM[(struct point *)&left_bottom + 12B].z
 5563              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5564 1044 130ACAFE 		addi	s4,s4,-20	#, _249, tmp2172
 5565              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5566 1048 97000000 		call	__floatsisf		#
 5566      E7800000 
 5567 1050 83A50900 		lw	a1,%lo(.LC8)(s3)		#,
 5568 1054 97000000 		call	__mulsf3		#
 5568      E7800000 
 5569              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5570 105c 97000000 		call	__fixsfsi		#
 5570      E7800000 
 5571 1064 130C0500 		mv	s8,a0	# tmp2173,
 5572              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5573 1068 03A5C40E 		lw	a0,236(s1)		#, MEM[(struct point *)&left_bottom].y
 5574              	# gfx_lib_hdmi.h:256:   point transformed = {p->x + tx, p->y + ty, p->z + tz};
 5575 106c 130CCCFE 		addi	s8,s8,-20	#, _252, tmp2173
 5576              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5577 1070 97000000 		call	__floatsisf		#
 5577      E7800000 
 5578 1078 83A50900 		lw	a1,%lo(.LC8)(s3)		#,
 5579 107c 97000000 		call	__mulsf3		#
 5579      E7800000 
 5580              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 5581 1084 97000000 		call	__fixsfsi		#
 5581      E7800000 
 5582              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5583 108c 8327C104 		lw	a5,76(sp)		# _587, %sfp
 5584              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5585 1090 930C45FC 		addi	s9,a0,-60	#, _1525, tmp2174
 5586              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5587 1094 63C80700 		blt	a5,zero,.L536	#, _587,,
 5588 1098 03278106 		lw	a4,104(sp)		# angle.39_617, %sfp
 5589 109c 232AF102 		sw	a5,52(sp)	# _587, %sfp
 5590 10a0 2328E100 		sw	a4,16(sp)	# angle.39_617, %sfp
 5591              	.L536:
 5592              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 5593 10a4 83254103 		lw	a1,52(sp)		# angle, %sfp
 5594 10a8 83260101 		lw	a3,16(sp)		# _1482, %sfp
 5595 10ac 93D78540 		srai	a5,a1,8	#, v0, angle
 5596              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5597 10b0 13960701 		slli	a2,a5,16	#, v0.41_1567, v0
 5598              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5599 10b4 13F70702 		andi	a4,a5,32	#, tmp1405, v0
 5600              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5601 10b8 13560601 		srli	a2,a2,16	#, v0.41_1567, v0.41_1567
 5602              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5603 10bc 630A0700 		beq	a4,zero,.L537	#, tmp1405,,
 5604              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5605 10c0 13C7F5FF 		not	a4,a1	# tmp1409, angle
 5606              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5607 10c4 93160701 		slli	a3,a4,16	#, _1482, tmp1409
 5608              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5609 10c8 93C7F7FF 		not	a5,a5	# v0, v0
 5610              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5611 10cc 93D60601 		srli	a3,a3,16	#, _1482, _1482
 5612              	.L537:
 5613              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5614 10d0 83254100 		lw	a1,4(sp)		# tmp2003, %sfp
 5615 10d4 93F7F701 		andi	a5,a5,31	#, _1573, v0
 5616              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5617 10d8 13871700 		addi	a4,a5,1	#, tmp1417, _1573
 5618 10dc 13171700 		slli	a4,a4,1	#, tmp1418, tmp1417
 5619              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5620 10e0 93971700 		slli	a5,a5,1	#, tmp1413, _1573
 5621 10e4 B387F500 		add	a5,a1,a5	# tmp1413, tmp1414, tmp2003
 5622              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5623 10e8 3387E500 		add	a4,a1,a4	# tmp1418, tmp1419, tmp2003
 5624 10ec 03150700 		lh	a0,0(a4)		# sin90[_1576], sin90[_1576]
 5625              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5626 10f0 83950700 		lh	a1,0(a5)		# _1574, sin90[_1573]
 5627              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5628 10f4 93F6F60F 		andi	a3,a3,0xff	# tmp1423, _1482
 5629              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5630 10f8 93770604 		andi	a5,a2,64	#, tmp1431, v0.41_1567
 5631              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5632 10fc 3305B540 		sub	a0,a0,a1	# tmp1421, sin90[_1576], _1574
 5633              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5634 1100 3305D502 		mul	a0,a0,a3	# tmp1424, tmp1421, tmp1423
 5635              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5636 1104 13558540 		srai	a0,a0,8	#, tmp1425, tmp1424
 5637              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5638 1108 3305B500 		add	a0,a0,a1	# _1574, tmp1428, tmp1425
 5639 110c 13150501 		slli	a0,a0,16	#, _1588, tmp1428
 5640 1110 13550501 		srli	a0,a0,16	#, _1588, _1588
 5641              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5642 1114 63880700 		beq	a5,zero,.L538	#, tmp1431,,
 5643              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5644 1118 3305A040 		neg	a0,a0	# tmp1433, _1588
 5645 111c 13150501 		slli	a0,a0,16	#, _1588, tmp1433
 5646 1120 13550501 		srli	a0,a0,16	#, _1588, _1588
 5647              	.L538:
 5648              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 5649 1124 13150501 		slli	a0,a0,16	#,, _1588
 5650 1128 13550541 		srai	a0,a0,16	#,,
 5651 112c B7090000 		lui	s3,%hi(.LC3)	# tmp2457,
 5652 1130 97000000 		call	__floatsidf		#
 5652      E7800000 
 5653 1138 03A60900 		lw	a2,%lo(.LC3)(s3)		#,
 5654 113c 83A64900 		lw	a3,%lo(.LC3+4)(s3)		#,
 5655              	# gfx_lib_hdmi.h:262:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5656 1140 938A4AFC 		addi	s5,s5,-60	#, _1485, _234
 5657              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 5658 1144 97000000 		call	__muldf3		#
 5658      E7800000 
 5659              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 5660 114c 97000000 		call	__truncdfsf2		#
 5660      E7800000 
 5661              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5662 1154 83270101 		lw	a5,16(sp)		# _618, %sfp
 5663 1158 83264101 		lw	a3,20(sp)		# tmp985, %sfp
 5664              	# gfx_lib_hdmi.h:266:   float sin_theta = SIN_FAST(angle);
 5665 115c 93040500 		mv	s1,a0	# tmp2175,
 5666              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5667 1160 338DD700 		add	s10,a5,a3	# tmp985, tmp1439, _618
 5668              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5669 1164 931D0D01 		slli	s11,s10,16	#, angle, tmp1439
 5670 1168 93DD0D41 		srai	s11,s11,16	#, angle, angle
 5671 116c 13850D00 		mv	a0,s11	#, angle
 5672 1170 97000000 		call	sin1		#
 5672      E7800000 
 5673              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 5674 1178 97000000 		call	__floatsidf		#
 5674      E7800000 
 5675 1180 03A60900 		lw	a2,%lo(.LC3)(s3)		#,
 5676 1184 83A64900 		lw	a3,%lo(.LC3+4)(s3)		#,
 5677              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 5678 1188 131D0D01 		slli	s10,s10,16	#, _1542, tmp1439
 5679 118c 135D0D01 		srli	s10,s10,16	#, _1542, _1542
 5680              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 5681 1190 97000000 		call	__muldf3		#
 5681      E7800000 
 5682              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 5683 1198 97000000 		call	__truncdfsf2		#
 5683      E7800000 
 5684 11a0 93090500 		mv	s3,a0	# tmp2176,
 5685              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5686 11a4 13850C00 		mv	a0,s9	#, _1525
 5687 11a8 97000000 		call	__floatsisf		#
 5687      E7800000 
 5688 11b0 93070500 		mv	a5,a0	# tmp2177,
 5689              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5690 11b4 13050A00 		mv	a0,s4	#, _249
 5691              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5692 11b8 138A0700 		mv	s4,a5	# _1549, tmp2177
 5693              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5694 11bc 97000000 		call	__floatsisf		#
 5694      E7800000 
 5695 11c4 930C0500 		mv	s9,a0	# tmp2178,
 5696              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5697 11c8 93050A00 		mv	a1,s4	#, _1549
 5698 11cc 13850900 		mv	a0,s3	#, cos_theta
 5699 11d0 97000000 		call	__mulsf3		#
 5699      E7800000 
 5700 11d8 130B0500 		mv	s6,a0	# tmp1447, tmp2179
 5701              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5702 11dc 93850C00 		mv	a1,s9	#, _1551
 5703 11e0 13850400 		mv	a0,s1	#, sin_theta
 5704 11e4 97000000 		call	__mulsf3		#
 5704      E7800000 
 5705 11ec 93050500 		mv	a1,a0	# tmp2180,
 5706              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5707 11f0 13050B00 		mv	a0,s6	#, tmp1447
 5708 11f4 97000000 		call	__subsf3		#
 5708      E7800000 
 5709              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5710 11fc B7060000 		lui	a3,%hi(.LC7)	# tmp2461,
 5711 1200 83A50600 		lw	a1,%lo(.LC7)(a3)		#,
 5712 1204 97000000 		call	__addsf3		#
 5712      E7800000 
 5713              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5714 120c 97000000 		call	__fixsfsi		#
 5714      E7800000 
 5715 1214 93070500 		mv	a5,a0	# tmp2181,
 5716              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5717 1218 93050A00 		mv	a1,s4	#, _1549
 5718 121c 13850400 		mv	a0,s1	#, sin_theta
 5719              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5720 1220 138A0700 		mv	s4,a5	# _1555, tmp2181
 5721              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5722 1224 97000000 		call	__mulsf3		#
 5722      E7800000 
 5723              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5724 122c 93850C00 		mv	a1,s9	#, _1551
 5725              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5726 1230 130B0500 		mv	s6,a0	# tmp1452, tmp2182
 5727              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5728 1234 13850900 		mv	a0,s3	#, cos_theta
 5729 1238 97000000 		call	__mulsf3		#
 5729      E7800000 
 5730 1240 93050500 		mv	a1,a0	# tmp2183,
 5731              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5732 1244 13050B00 		mv	a0,s6	#, tmp1452
 5733 1248 97000000 		call	__addsf3		#
 5733      E7800000 
 5734              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5735 1250 93050000 		mv	a1,zero	#,
 5736 1254 97000000 		call	__addsf3		#
 5736      E7800000 
 5737              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5738 125c 97000000 		call	__fixsfsi		#
 5738      E7800000 
 5739 1264 930C0500 		mv	s9,a0	# _1561, tmp2184
 5740              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5741 1268 63D20D02 		bge	s11,zero,.L539	#, angle,,
 5742              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5743 126c 03270101 		lw	a4,16(sp)		# _618, %sfp
 5744 1270 B7270000 		li	a5,8192		# tmp1458,
 5745 1274 93871700 		addi	a5,a5,1	#, tmp1457, tmp1458
 5746 1278 B307F700 		add	a5,a4,a5	# tmp1457, tmp1456, _618
 5747 127c 139D0701 		slli	s10,a5,16	#, _1542, tmp1456
 5748 1280 939D0701 		slli	s11,a5,16	#, angle, tmp1456
 5749 1284 135D0D01 		srli	s10,s10,16	#, _1542, _1542
 5750 1288 93DD0D41 		srai	s11,s11,16	#, angle, angle
 5751              	.L539:
 5752              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 5753 128c 93D78D40 		srai	a5,s11,8	#, v0, angle
 5754              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5755 1290 93960701 		slli	a3,a5,16	#, v0.41_1629, v0
 5756              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5757 1294 13F70702 		andi	a4,a5,32	#, tmp1462, v0
 5758              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5759 1298 93D60601 		srli	a3,a3,16	#, v0.41_1629, v0.41_1629
 5760              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5761 129c 630E0700 		beq	a4,zero,.L540	#, tmp1462,,
 5762              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5763 12a0 93C7F7FF 		not	a5,a5	# tmp1464, v0
 5764              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5765 12a4 93CDFDFF 		not	s11,s11	# tmp1466, angle
 5766              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5767 12a8 93970701 		slli	a5,a5,16	#, v0, tmp1464
 5768              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5769 12ac 139D0D01 		slli	s10,s11,16	#, _1542, tmp1466
 5770              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5771 12b0 93D70741 		srai	a5,a5,16	#, v0, v0
 5772              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5773 12b4 135D0D01 		srli	s10,s10,16	#, _1542, _1542
 5774              	.L540:
 5775              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5776 12b8 03264100 		lw	a2,4(sp)		# tmp2003, %sfp
 5777 12bc 93F7F701 		andi	a5,a5,31	#, _1635, v0
 5778              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5779 12c0 13871700 		addi	a4,a5,1	#, tmp1474, _1635
 5780 12c4 13171700 		slli	a4,a4,1	#, tmp1475, tmp1474
 5781              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5782 12c8 93971700 		slli	a5,a5,1	#, tmp1470, _1635
 5783              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5784 12cc 3307E600 		add	a4,a2,a4	# tmp1475, tmp1476, tmp2003
 5785              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5786 12d0 B307F600 		add	a5,a2,a5	# tmp1470, tmp1471, tmp2003
 5787 12d4 03960700 		lh	a2,0(a5)		# _1636, sin90[_1635]
 5788              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5789 12d8 83170700 		lh	a5,0(a4)		# sin90[_1638], sin90[_1638]
 5790              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5791 12dc 137DFD0F 		andi	s10,s10,0xff	# tmp1480, _1542
 5792              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5793 12e0 13F70604 		andi	a4,a3,64	#, tmp1488, v0.41_1629
 5794              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5795 12e4 B387C740 		sub	a5,a5,a2	# tmp1478, sin90[_1638], _1636
 5796              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5797 12e8 B387A703 		mul	a5,a5,s10	# tmp1481, tmp1478, tmp1480
 5798              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5799 12ec 93D78740 		srai	a5,a5,8	#, tmp1482, tmp1481
 5800              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5801 12f0 B387C700 		add	a5,a5,a2	# _1636, tmp1485, tmp1482
 5802 12f4 93970701 		slli	a5,a5,16	#, _1650, tmp1485
 5803 12f8 93D70701 		srli	a5,a5,16	#, _1650, _1650
 5804              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5805 12fc 63080700 		beq	a4,zero,.L541	#, tmp1488,,
 5806              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5807 1300 B307F040 		neg	a5,a5	# tmp1490, _1650
 5808 1304 93970701 		slli	a5,a5,16	#, _1650, tmp1490
 5809 1308 93D70701 		srli	a5,a5,16	#, _1650, _1650
 5810              	.L541:
 5811              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 5812 130c 13950701 		slli	a0,a5,16	#,, _1650
 5813 1310 13550541 		srai	a0,a0,16	#,,
 5814 1314 97000000 		call	__floatsidf		#
 5814      E7800000 
 5815 131c B7070000 		lui	a5,%hi(.LC3)	# tmp2465,
 5816 1320 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 5817 1324 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 5818              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5819 1328 130A2AFE 		addi	s4,s4,-30	#, _1367, _1555
 5820              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 5821 132c 97000000 		call	__muldf3		#
 5821      E7800000 
 5822              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 5823 1334 97000000 		call	__truncdfsf2		#
 5823      E7800000 
 5824 133c 93070500 		mv	a5,a0	# tmp2185,
 5825              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5826 1340 13850A00 		mv	a0,s5	#, _1485
 5827              	# gfx_lib_hdmi.h:267:   float cos_theta = COS_FAST(angle);
 5828 1344 938A0700 		mv	s5,a5	# cos_theta, tmp2185
 5829              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5830 1348 97000000 		call	__floatsisf		#
 5830      E7800000 
 5831 1350 930D0500 		mv	s11,a0	# tmp2186,
 5832              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5833 1354 13050C00 		mv	a0,s8	#, _252
 5834 1358 97000000 		call	__floatsisf		#
 5834      E7800000 
 5835 1360 130D0500 		mv	s10,a0	# tmp2187,
 5836              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5837 1364 93850D00 		mv	a1,s11	#, _1509
 5838 1368 13850A00 		mv	a0,s5	#, cos_theta
 5839 136c 97000000 		call	__mulsf3		#
 5839      E7800000 
 5840 1374 130C0500 		mv	s8,a0	# tmp1496, tmp2188
 5841              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5842 1378 93850400 		mv	a1,s1	#, sin_theta
 5843 137c 13050D00 		mv	a0,s10	#, _1511
 5844 1380 97000000 		call	__mulsf3		#
 5844      E7800000 
 5845 1388 93050500 		mv	a1,a0	# tmp2189,
 5846              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5847 138c 13050C00 		mv	a0,s8	#, tmp1496
 5848 1390 97000000 		call	__subsf3		#
 5848      E7800000 
 5849              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5850 1398 B7070000 		lui	a5,%hi(.LC7)	# tmp2466,
 5851 139c 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 5852 13a0 97000000 		call	__addsf3		#
 5852      E7800000 
 5853              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5854 13a8 97000000 		call	__fixsfsi		#
 5854      E7800000 
 5855              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5856 13b0 93850400 		mv	a1,s1	#, sin_theta
 5857              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 5858 13b4 130C0500 		mv	s8,a0	# tmp2190,
 5859              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5860 13b8 13850D00 		mv	a0,s11	#, _1509
 5861 13bc 97000000 		call	__mulsf3		#
 5861      E7800000 
 5862              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5863 13c4 93050D00 		mv	a1,s10	#, _1511
 5864              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5865 13c8 930D0500 		mv	s11,a0	# tmp1501, tmp2191
 5866              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5867 13cc 13850A00 		mv	a0,s5	#, cos_theta
 5868 13d0 97000000 		call	__mulsf3		#
 5868      E7800000 
 5869 13d8 93050500 		mv	a1,a0	# tmp2192,
 5870              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5871 13dc 13850D00 		mv	a0,s11	#, tmp1501
 5872 13e0 97000000 		call	__addsf3		#
 5872      E7800000 
 5873              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5874 13e8 93050000 		mv	a1,zero	#,
 5875 13ec 97000000 		call	__addsf3		#
 5875      E7800000 
 5876              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 5877 13f4 97000000 		call	__fixsfsi		#
 5877      E7800000 
 5878              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5879 13fc 97000000 		call	__floatsisf		#
 5879      E7800000 
 5880 1404 93850400 		mv	a1,s1	#, sin_theta
 5881 1408 97000000 		call	__mulsf3		#
 5881      E7800000 
 5882 1410 93070500 		mv	a5,a0	# tmp2193,
 5883              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5884 1414 1385CBFE 		addi	a0,s7,-20	#,, _230
 5885              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5886 1418 938B0700 		mv	s7,a5	# tmp1507, tmp2193
 5887              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5888 141c 97000000 		call	__floatsisf		#
 5888      E7800000 
 5889 1424 93850A00 		mv	a1,s5	#, cos_theta
 5890 1428 97000000 		call	__mulsf3		#
 5890      E7800000 
 5891 1430 93050500 		mv	a1,a0	# tmp2194,
 5892              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5893 1434 13850B00 		mv	a0,s7	#, tmp1507
 5894 1438 97000000 		call	__addsf3		#
 5894      E7800000 
 5895              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5896 1440 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 5897 1444 97000000 		call	__addsf3		#
 5897      E7800000 
 5898              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5899 144c 97000000 		call	__fixsfsi		#
 5899      E7800000 
 5900              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5901 1454 03278101 		lw	a4,24(sp)		# _218, %sfp
 5902              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5903 1458 93070500 		mv	a5,a0	# tmp2195,
 5904 145c 138B0700 		mv	s6,a5	# _1435, tmp2195
 5905              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5906 1460 1305C7FE 		addi	a0,a4,-20	#,, _218
 5907 1464 97000000 		call	__floatsisf		#
 5907      E7800000 
 5908 146c 93850900 		mv	a1,s3	#, cos_theta
 5909 1470 97000000 		call	__mulsf3		#
 5909      E7800000 
 5910 1478 930B0500 		mv	s7,a0	# tmp2196,
 5911              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5912 147c 13850C00 		mv	a0,s9	#, _1561
 5913 1480 97000000 		call	__floatsisf		#
 5913      E7800000 
 5914 1488 93850400 		mv	a1,s1	#, sin_theta
 5915 148c 97000000 		call	__mulsf3		#
 5915      E7800000 
 5916 1494 93050500 		mv	a1,a0	# tmp2197,
 5917              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5918 1498 13850B00 		mv	a0,s7	#, tmp1516
 5919 149c 97000000 		call	__addsf3		#
 5919      E7800000 
 5920              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5921 14a4 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 5922 14a8 97000000 		call	__addsf3		#
 5922      E7800000 
 5923              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 5924 14b0 97000000 		call	__fixsfsi		#
 5924      E7800000 
 5925              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5926 14b8 83278103 		lw	a5,56(sp)		# _427, %sfp
 5927              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 5928 14bc 130D85FD 		addi	s10,a0,-40	#, _1364, tmp2198
 5929              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 5930 14c0 63C80700 		blt	a5,zero,.L542	#, _427,,
 5931 14c4 03274104 		lw	a4,68(sp)		# angle.44_432, %sfp
 5932 14c8 2328F102 		sw	a5,48(sp)	# _427, %sfp
 5933 14cc 2326E100 		sw	a4,12(sp)	# angle.44_432, %sfp
 5934              	.L542:
 5935              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 5936 14d0 83250103 		lw	a1,48(sp)		# angle, %sfp
 5937 14d4 8326C100 		lw	a3,12(sp)		# _1738, %sfp
 5938 14d8 93D78540 		srai	a5,a1,8	#, v0, angle
 5939              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5940 14dc 13960701 		slli	a2,a5,16	#, v0.41_1753, v0
 5941              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5942 14e0 13F70702 		andi	a4,a5,32	#, tmp1526, v0
 5943              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5944 14e4 13560601 		srli	a2,a2,16	#, v0.41_1753, v0.41_1753
 5945              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5946 14e8 630A0700 		beq	a4,zero,.L543	#, tmp1526,,
 5947              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5948 14ec 13C7F5FF 		not	a4,a1	# tmp1530, angle
 5949              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5950 14f0 93160701 		slli	a3,a4,16	#, _1738, tmp1530
 5951              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 5952 14f4 93C7F7FF 		not	a5,a5	# v0, v0
 5953              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5954 14f8 93D60601 		srli	a3,a3,16	#, _1738, _1738
 5955              	.L543:
 5956              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5957 14fc 83254100 		lw	a1,4(sp)		# tmp2003, %sfp
 5958 1500 93F7F701 		andi	a5,a5,31	#, _1759, v0
 5959              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5960 1504 13871700 		addi	a4,a5,1	#, tmp1538, _1759
 5961 1508 13171700 		slli	a4,a4,1	#, tmp1539, tmp1538
 5962              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5963 150c 93971700 		slli	a5,a5,1	#, tmp1534, _1759
 5964 1510 B387F500 		add	a5,a1,a5	# tmp1534, tmp1535, tmp2003
 5965              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5966 1514 3387E500 		add	a4,a1,a4	# tmp1539, tmp1540, tmp2003
 5967 1518 03150700 		lh	a0,0(a4)		# sin90[_1762], sin90[_1762]
 5968              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5969 151c 83950700 		lh	a1,0(a5)		# _1760, sin90[_1759]
 5970              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5971 1520 93F6F60F 		andi	a3,a3,0xff	# tmp1544, _1738
 5972              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5973 1524 93770604 		andi	a5,a2,64	#, tmp1552, v0.41_1753
 5974              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5975 1528 3305B540 		sub	a0,a0,a1	# tmp1542, sin90[_1762], _1760
 5976              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5977 152c 3305D502 		mul	a0,a0,a3	# tmp1545, tmp1542, tmp1544
 5978              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5979 1530 13558540 		srai	a0,a0,8	#, tmp1546, tmp1545
 5980              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 5981 1534 3305B500 		add	a0,a0,a1	# _1760, tmp1549, tmp1546
 5982 1538 13150501 		slli	a0,a0,16	#, _1774, tmp1549
 5983 153c 13550501 		srli	a0,a0,16	#, _1774, _1774
 5984              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5985 1540 63880700 		beq	a5,zero,.L544	#, tmp1552,,
 5986              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 5987 1544 3305A040 		neg	a0,a0	# tmp1554, _1774
 5988 1548 13150501 		slli	a0,a0,16	#, _1774, tmp1554
 5989 154c 13550501 		srli	a0,a0,16	#, _1774, _1774
 5990              	.L544:
 5991              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 5992 1550 13150501 		slli	a0,a0,16	#,, _1774
 5993 1554 13550541 		srai	a0,a0,16	#,,
 5994 1558 97000000 		call	__floatsidf		#
 5994      E7800000 
 5995 1560 B70B0000 		lui	s7,%hi(.LC3)	# tmp2475,
 5996 1564 03A60B00 		lw	a2,%lo(.LC3)(s7)		#,
 5997 1568 83A64B00 		lw	a3,%lo(.LC3+4)(s7)		#,
 5998 156c 97000000 		call	__muldf3		#
 5998      E7800000 
 5999              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 6000 1574 97000000 		call	__truncdfsf2		#
 6000      E7800000 
 6001              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6002 157c 8327C100 		lw	a5,12(sp)		# _433, %sfp
 6003 1580 83264101 		lw	a3,20(sp)		# tmp985, %sfp
 6004              	# gfx_lib_hdmi.h:296:   float sin_theta = SIN_FAST(angle);
 6005 1584 930C0500 		mv	s9,a0	# tmp2199,
 6006              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6007 1588 B38DD700 		add	s11,a5,a3	# tmp985, tmp1560, _433
 6008              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6009 158c 13970D01 		slli	a4,s11,16	#, angle, tmp1560
 6010 1590 13570741 		srai	a4,a4,16	#, angle, angle
 6011              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6012 1594 13980D01 		slli	a6,s11,16	#, prephitmp_1172, tmp1560
 6013 1598 13580801 		srli	a6,a6,16	#, prephitmp_1172, prephitmp_1172
 6014              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6015 159c 13050700 		mv	a0,a4	#, angle
 6016 15a0 2320E102 		sw	a4,32(sp)	# angle, %sfp
 6017              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6018 15a4 232E0101 		sw	a6,28(sp)	# prephitmp_1172, %sfp
 6019              	# gfx_lib_hdmi.h:109:   return sin1(angle - (int16_t)(((int32_t)INT16_MAX * 270) / 360));
 6020 15a8 97000000 		call	sin1		#
 6020      E7800000 
 6021              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 6022 15b0 97000000 		call	__floatsidf		#
 6022      E7800000 
 6023 15b8 03A60B00 		lw	a2,%lo(.LC3)(s7)		#,
 6024 15bc 83A64B00 		lw	a3,%lo(.LC3+4)(s7)		#,
 6025 15c0 97000000 		call	__muldf3		#
 6025      E7800000 
 6026              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 6027 15c8 97000000 		call	__truncdfsf2		#
 6027      E7800000 
 6028 15d0 930B0500 		mv	s7,a0	# tmp2200,
 6029              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6030 15d4 13050D00 		mv	a0,s10	#, _1364
 6031 15d8 97000000 		call	__floatsisf		#
 6031      E7800000 
 6032 15e0 130D0500 		mv	s10,a0	# tmp2201,
 6033              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6034 15e4 13050A00 		mv	a0,s4	#, _1367
 6035 15e8 97000000 		call	__floatsisf		#
 6035      E7800000 
 6036 15f0 130A0500 		mv	s4,a0	# tmp2202,
 6037              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6038 15f4 13058BFD 		addi	a0,s6,-40	#,, _1435
 6039 15f8 97000000 		call	__floatsisf		#
 6039      E7800000 
 6040 1600 93070500 		mv	a5,a0	# tmp2203,
 6041              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6042 1604 13052CFE 		addi	a0,s8,-30	#,, _1515
 6043              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6044 1608 138C0700 		mv	s8,a5	# _1349, tmp2203
 6045              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6046 160c 97000000 		call	__floatsisf		#
 6046      E7800000 
 6047 1614 130B0500 		mv	s6,a0	# tmp2204,
 6048              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6049 1618 93850C00 		mv	a1,s9	#, sin_theta
 6050 161c 13050C00 		mv	a0,s8	#, _1349
 6051 1620 97000000 		call	__mulsf3		#
 6051      E7800000 
 6052 1628 930D0500 		mv	s11,a0	# tmp1570, tmp2205
 6053              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6054 162c 93850B00 		mv	a1,s7	#, cos_theta
 6055 1630 13050B00 		mv	a0,s6	#, _1351
 6056 1634 97000000 		call	__mulsf3		#
 6056      E7800000 
 6057 163c 93050500 		mv	a1,a0	# tmp2206,
 6058              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6059 1640 13850D00 		mv	a0,s11	#, tmp1570
 6060 1644 97000000 		call	__addsf3		#
 6060      E7800000 
 6061              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6062 164c B7070000 		lui	a5,%hi(.LC7)	# tmp2479,
 6063 1650 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6064 1654 97000000 		call	__addsf3		#
 6064      E7800000 
 6065              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6066 165c 97000000 		call	__fixsfsi		#
 6066      E7800000 
 6067 1664 930D0500 		mv	s11,a0	# tmp2207,
 6068              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6069 1668 93850B00 		mv	a1,s7	#, cos_theta
 6070 166c 13050C00 		mv	a0,s8	#, _1349
 6071 1670 97000000 		call	__mulsf3		#
 6071      E7800000 
 6072 1678 130C0500 		mv	s8,a0	# tmp1576, tmp2208
 6073              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6074 167c 93850C00 		mv	a1,s9	#, sin_theta
 6075 1680 13050B00 		mv	a0,s6	#, _1351
 6076 1684 97000000 		call	__mulsf3		#
 6076      E7800000 
 6077 168c 93050500 		mv	a1,a0	# tmp2209,
 6078              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6079 1690 13050C00 		mv	a0,s8	#, tmp1576
 6080 1694 97000000 		call	__subsf3		#
 6080      E7800000 
 6081              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6082 169c 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6083 16a0 97000000 		call	__addsf3		#
 6083      E7800000 
 6084              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6085 16a8 97000000 		call	__fixsfsi		#
 6085      E7800000 
 6086 16b0 130C0500 		mv	s8,a0	# tmp2210,
 6087              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6088 16b4 93050D00 		mv	a1,s10	#, _1389
 6089 16b8 13850C00 		mv	a0,s9	#, sin_theta
 6090 16bc 97000000 		call	__mulsf3		#
 6090      E7800000 
 6091 16c4 130B0500 		mv	s6,a0	# tmp1582, tmp2211
 6092              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6093 16c8 93050A00 		mv	a1,s4	#, _1391
 6094 16cc 13850B00 		mv	a0,s7	#, cos_theta
 6095 16d0 97000000 		call	__mulsf3		#
 6095      E7800000 
 6096 16d8 93050500 		mv	a1,a0	# tmp2212,
 6097              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6098 16dc 13050B00 		mv	a0,s6	#, tmp1582
 6099 16e0 97000000 		call	__addsf3		#
 6099      E7800000 
 6100              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6101 16e8 B7070000 		lui	a5,%hi(.LC7)	# tmp2480,
 6102 16ec 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6103 16f0 97000000 		call	__addsf3		#
 6103      E7800000 
 6104              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6105 16f8 97000000 		call	__fixsfsi		#
 6105      E7800000 
 6106 1700 130B0500 		mv	s6,a0	# tmp2213,
 6107              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6108 1704 93050D00 		mv	a1,s10	#, _1389
 6109 1708 13850B00 		mv	a0,s7	#, cos_theta
 6110 170c 97000000 		call	__mulsf3		#
 6110      E7800000 
 6111 1714 130D0500 		mv	s10,a0	# tmp1588, tmp2214
 6112              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6113 1718 93050A00 		mv	a1,s4	#, _1391
 6114 171c 13850C00 		mv	a0,s9	#, sin_theta
 6115 1720 97000000 		call	__mulsf3		#
 6115      E7800000 
 6116 1728 93050500 		mv	a1,a0	# tmp2215,
 6117              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6118 172c 13050D00 		mv	a0,s10	#, tmp1588
 6119 1730 97000000 		call	__subsf3		#
 6119      E7800000 
 6120              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6121 1738 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6122 173c 97000000 		call	__addsf3		#
 6122      E7800000 
 6123              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6124 1744 97000000 		call	__fixsfsi		#
 6124      E7800000 
 6125              	# main_cube3d_rotate_hdmi.c:94:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, 0x00ffff
 6126 174c 13060C00 		mv	a2,s8	#, tmp1581
 6127 1750 93860D00 		mv	a3,s11	#, tmp1575
 6128 1754 93050B00 		mv	a1,s6	#, tmp1587
 6129 1758 97000000 		call	fb_draw_bresenham.constprop.0		#
 6129      E7800000 
 6130              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6131 1760 032A0100 		lw	s4,0(sp)		# tmp2004, %sfp
 6132 1764 370B0000 		lui	s6,%hi(.LC8)	# tmp2482,
 6133 1768 03254A10 		lw	a0,260(s4)		#, MEM[(struct point *)&left_top].y
 6134 176c 97000000 		call	__floatsisf		#
 6134      E7800000 
 6135 1774 83250B00 		lw	a1,%lo(.LC8)(s6)		#,
 6136 1778 97000000 		call	__mulsf3		#
 6136      E7800000 
 6137              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6138 1780 97000000 		call	__fixsfsi		#
 6138      E7800000 
 6139              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6140 1788 130545FC 		addi	a0,a0,-60	#,, tmp2216
 6141 178c 97000000 		call	__floatsisf		#
 6141      E7800000 
 6142 1794 130C0500 		mv	s8,a0	# tmp2217,
 6143              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6144 1798 03258A10 		lw	a0,264(s4)		#, MEM[(struct point *)&left_top].z
 6145 179c 97000000 		call	__floatsisf		#
 6145      E7800000 
 6146 17a4 83250B00 		lw	a1,%lo(.LC8)(s6)		#,
 6147 17a8 97000000 		call	__mulsf3		#
 6147      E7800000 
 6148              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6149 17b0 97000000 		call	__fixsfsi		#
 6149      E7800000 
 6150              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6151 17b8 1305C5FE 		addi	a0,a0,-20	#,, tmp2218
 6152 17bc 97000000 		call	__floatsisf		#
 6152      E7800000 
 6153 17c4 130D0500 		mv	s10,a0	# tmp2219,
 6154              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6155 17c8 03250A11 		lw	a0,272(s4)		#, MEM[(struct point *)&left_top + 12B].y
 6156 17cc 97000000 		call	__floatsisf		#
 6156      E7800000 
 6157 17d4 83250B00 		lw	a1,%lo(.LC8)(s6)		#,
 6158 17d8 97000000 		call	__mulsf3		#
 6158      E7800000 
 6159              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6160 17e0 97000000 		call	__fixsfsi		#
 6160      E7800000 
 6161              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6162 17e8 130545FC 		addi	a0,a0,-60	#,, tmp2220
 6163 17ec 97000000 		call	__floatsisf		#
 6163      E7800000 
 6164 17f4 930D0500 		mv	s11,a0	# tmp2221,
 6165              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6166 17f8 03254A11 		lw	a0,276(s4)		#, MEM[(struct point *)&left_top + 12B].z
 6167 17fc 97000000 		call	__floatsisf		#
 6167      E7800000 
 6168 1804 83250B00 		lw	a1,%lo(.LC8)(s6)		#,
 6169 1808 97000000 		call	__mulsf3		#
 6169      E7800000 
 6170              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6171 1810 97000000 		call	__fixsfsi		#
 6171      E7800000 
 6172              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6173 1818 1305C5FE 		addi	a0,a0,-20	#,, tmp2222
 6174 181c 97000000 		call	__floatsisf		#
 6174      E7800000 
 6175 1824 130B0500 		mv	s6,a0	# tmp2223,
 6176              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6177 1828 93850D00 		mv	a1,s11	#, _1997
 6178 182c 13850A00 		mv	a0,s5	#, cos_theta
 6179 1830 97000000 		call	__mulsf3		#
 6179      E7800000 
 6180 1838 130A0500 		mv	s4,a0	# tmp1622, tmp2224
 6181              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6182 183c 93050B00 		mv	a1,s6	#, _1999
 6183 1840 13850400 		mv	a0,s1	#, sin_theta
 6184 1844 97000000 		call	__mulsf3		#
 6184      E7800000 
 6185 184c 93050500 		mv	a1,a0	# tmp2225,
 6186              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6187 1850 13050A00 		mv	a0,s4	#, tmp1622
 6188 1854 97000000 		call	__subsf3		#
 6188      E7800000 
 6189              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6190 185c B7060000 		lui	a3,%hi(.LC7)	# tmp2489,
 6191 1860 83A50600 		lw	a1,%lo(.LC7)(a3)		#,
 6192 1864 97000000 		call	__addsf3		#
 6192      E7800000 
 6193              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6194 186c 97000000 		call	__fixsfsi		#
 6194      E7800000 
 6195              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6196 1874 83270100 		lw	a5,0(sp)		# tmp2004, %sfp
 6197              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6198 1878 130A0500 		mv	s4,a0	# tmp2226,
 6199              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6200 187c 03A5C710 		lw	a0,268(a5)		#, MEM[(struct point *)&left_top + 12B].x
 6201 1880 97000000 		call	__floatsisf		#
 6201      E7800000 
 6202 1888 37070000 		lui	a4,%hi(.LC8)	# tmp2491,
 6203 188c 83250700 		lw	a1,%lo(.LC8)(a4)		#,
 6204 1890 97000000 		call	__mulsf3		#
 6204      E7800000 
 6205              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6206 1898 97000000 		call	__fixsfsi		#
 6206      E7800000 
 6207              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6208 18a0 1305C5FE 		addi	a0,a0,-20	#,, tmp2227
 6209 18a4 97000000 		call	__floatsisf		#
 6209      E7800000 
 6210 18ac 93850A00 		mv	a1,s5	#, cos_theta
 6211 18b0 97000000 		call	__mulsf3		#
 6211      E7800000 
 6212 18b8 93060500 		mv	a3,a0	# tmp2228,
 6213              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6214 18bc 93850D00 		mv	a1,s11	#, _1997
 6215 18c0 13850400 		mv	a0,s1	#, sin_theta
 6216              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6217 18c4 232CD100 		sw	a3,24(sp)	# tmp1635, %sfp
 6218              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6219 18c8 97000000 		call	__mulsf3		#
 6219      E7800000 
 6220              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6221 18d0 93050B00 		mv	a1,s6	#, _1999
 6222              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6223 18d4 2328A100 		sw	a0,16(sp)	# tmp1636, %sfp
 6224              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6225 18d8 13850A00 		mv	a0,s5	#, cos_theta
 6226 18dc 97000000 		call	__mulsf3		#
 6226      E7800000 
 6227              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6228 18e4 83260101 		lw	a3,16(sp)		# tmp1636, %sfp
 6229              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6230 18e8 93050500 		mv	a1,a0	# tmp2230,
 6231              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6232 18ec 13850600 		mv	a0,a3	#, tmp1636
 6233 18f0 97000000 		call	__addsf3		#
 6233      E7800000 
 6234              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6235 18f8 93050000 		mv	a1,zero	#,
 6236 18fc 97000000 		call	__addsf3		#
 6236      E7800000 
 6237              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6238 1904 97000000 		call	__fixsfsi		#
 6238      E7800000 
 6239              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6240 190c 97000000 		call	__floatsisf		#
 6240      E7800000 
 6241 1914 93850400 		mv	a1,s1	#, sin_theta
 6242 1918 97000000 		call	__mulsf3		#
 6242      E7800000 
 6243              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6244 1920 83278101 		lw	a5,24(sp)		# tmp1635, %sfp
 6245              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6246 1924 93050500 		mv	a1,a0	# tmp2231,
 6247              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6248 1928 13850700 		mv	a0,a5	#, tmp1635
 6249 192c 97000000 		call	__addsf3		#
 6249      E7800000 
 6250              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6251 1934 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6252 1938 97000000 		call	__addsf3		#
 6252      E7800000 
 6253              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6254 1940 97000000 		call	__fixsfsi		#
 6254      E7800000 
 6255              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6256 1948 83270100 		lw	a5,0(sp)		# tmp2004, %sfp
 6257              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6258 194c 130B0500 		mv	s6,a0	# tmp2232,
 6259              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6260 1950 03A50710 		lw	a0,256(a5)		#, MEM[(struct point *)&left_top].x
 6261 1954 97000000 		call	__floatsisf		#
 6261      E7800000 
 6262 195c 37070000 		lui	a4,%hi(.LC8)	# tmp2493,
 6263 1960 83250700 		lw	a1,%lo(.LC8)(a4)		#,
 6264 1964 97000000 		call	__mulsf3		#
 6264      E7800000 
 6265              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6266 196c 97000000 		call	__fixsfsi		#
 6266      E7800000 
 6267              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6268 1974 1305C5FE 		addi	a0,a0,-20	#,, tmp2233
 6269 1978 97000000 		call	__floatsisf		#
 6269      E7800000 
 6270 1980 93850900 		mv	a1,s3	#, cos_theta
 6271 1984 97000000 		call	__mulsf3		#
 6271      E7800000 
 6272 198c 93070500 		mv	a5,a0	# tmp2234,
 6273              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6274 1990 93050C00 		mv	a1,s8	#, _2037
 6275 1994 13850400 		mv	a0,s1	#, sin_theta
 6276              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6277 1998 232CF100 		sw	a5,24(sp)	# tmp1654, %sfp
 6278              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6279 199c 97000000 		call	__mulsf3		#
 6279      E7800000 
 6280              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6281 19a4 93050D00 		mv	a1,s10	#, _2039
 6282              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6283 19a8 2328A100 		sw	a0,16(sp)	# tmp1655, %sfp
 6284              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6285 19ac 13850900 		mv	a0,s3	#, cos_theta
 6286 19b0 97000000 		call	__mulsf3		#
 6286      E7800000 
 6287              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6288 19b8 83260101 		lw	a3,16(sp)		# tmp1655, %sfp
 6289              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6290 19bc 93050500 		mv	a1,a0	# tmp2236,
 6291              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6292 19c0 13850600 		mv	a0,a3	#, tmp1655
 6293 19c4 97000000 		call	__addsf3		#
 6293      E7800000 
 6294              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6295 19cc 93050000 		mv	a1,zero	#,
 6296 19d0 97000000 		call	__addsf3		#
 6296      E7800000 
 6297              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6298 19d8 97000000 		call	__fixsfsi		#
 6298      E7800000 
 6299              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6300 19e0 97000000 		call	__floatsisf		#
 6300      E7800000 
 6301 19e8 93850400 		mv	a1,s1	#, sin_theta
 6302 19ec 97000000 		call	__mulsf3		#
 6302      E7800000 
 6303              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6304 19f4 83278101 		lw	a5,24(sp)		# tmp1654, %sfp
 6305              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6306 19f8 93050500 		mv	a1,a0	# tmp2237,
 6307              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6308 19fc 13850700 		mv	a0,a5	#, tmp1654
 6309 1a00 97000000 		call	__addsf3		#
 6309      E7800000 
 6310              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6311 1a08 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6312 1a0c 97000000 		call	__addsf3		#
 6312      E7800000 
 6313              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6314 1a14 97000000 		call	__fixsfsi		#
 6314      E7800000 
 6315 1a1c 93070500 		mv	a5,a0	# tmp2238,
 6316              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6317 1a20 93050C00 		mv	a1,s8	#, _2037
 6318 1a24 13850900 		mv	a0,s3	#, cos_theta
 6319              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 6320 1a28 138C87FD 		addi	s8,a5,-40	#, _1852, tmp2238
 6321              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6322 1a2c 97000000 		call	__mulsf3		#
 6322      E7800000 
 6323              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6324 1a34 93050D00 		mv	a1,s10	#, _2039
 6325              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6326 1a38 2328A100 		sw	a0,16(sp)	# tmp1666, %sfp
 6327              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6328 1a3c 13850400 		mv	a0,s1	#, sin_theta
 6329 1a40 97000000 		call	__mulsf3		#
 6329      E7800000 
 6330              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6331 1a48 83270101 		lw	a5,16(sp)		# tmp1666, %sfp
 6332              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6333 1a4c 93050500 		mv	a1,a0	# tmp2240,
 6334              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6335 1a50 13850700 		mv	a0,a5	#, tmp1666
 6336 1a54 97000000 		call	__subsf3		#
 6336      E7800000 
 6337              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6338 1a5c B7060000 		lui	a3,%hi(.LC7)	# tmp2494,
 6339 1a60 83A50600 		lw	a1,%lo(.LC7)(a3)		#,
 6340 1a64 97000000 		call	__addsf3		#
 6340      E7800000 
 6341              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6342 1a6c 97000000 		call	__fixsfsi		#
 6342      E7800000 
 6343              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 6344 1a74 03270102 		lw	a4,32(sp)		# angle, %sfp
 6345 1a78 0328C101 		lw	a6,28(sp)		# prephitmp_1172, %sfp
 6346              	# gfx_lib_hdmi.h:292:   point shifted_point = {p->x - pivot->x, p->y - pivot->y, p->z - pivot->z};
 6347 1a7c 130D25FE 		addi	s10,a0,-30	#, _1855, tmp2241
 6348              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 6349 1a80 63520702 		bge	a4,zero,.L545	#, angle,,
 6350              	# gfx_lib_hdmi.h:87:   if(angle < 0) { angle += INT16_MAX; angle += 1; }
 6351 1a84 0327C100 		lw	a4,12(sp)		# _433, %sfp
 6352 1a88 B7270000 		li	a5,8192		# tmp1674,
 6353 1a8c 93871700 		addi	a5,a5,1	#, tmp1673, tmp1674
 6354 1a90 B307F700 		add	a5,a4,a5	# tmp1673, tmp1672, _433
 6355 1a94 13980701 		slli	a6,a5,16	#, prephitmp_1172, tmp1672
 6356 1a98 13970701 		slli	a4,a5,16	#, angle, tmp1672
 6357 1a9c 13580801 		srli	a6,a6,16	#, prephitmp_1172, prephitmp_1172
 6358 1aa0 13570741 		srai	a4,a4,16	#, angle, angle
 6359              	.L545:
 6360              	# gfx_lib_hdmi.h:88:   v0 = (angle >> INTERP_BITS);
 6361 1aa4 93578740 		srai	a5,a4,8	#, v0, angle
 6362              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6363 1aa8 93960701 		slli	a3,a5,16	#, v0.41_2272, v0
 6364              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6365 1aac 13F60702 		andi	a2,a5,32	#, tmp1678, v0
 6366              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6367 1ab0 93D60601 		srli	a3,a3,16	#, v0.41_2272, v0.41_2272
 6368              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6369 1ab4 630E0600 		beq	a2,zero,.L546	#, tmp1678,,
 6370              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6371 1ab8 93C7F7FF 		not	a5,a5	# tmp1680, v0
 6372              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6373 1abc 1347F7FF 		not	a4,a4	# tmp1682, angle
 6374              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6375 1ac0 93970701 		slli	a5,a5,16	#, v0, tmp1680
 6376              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6377 1ac4 13180701 		slli	a6,a4,16	#, prephitmp_1172, tmp1682
 6378              	# gfx_lib_hdmi.h:89:   if(v0 & FLIP_BIT) { v0 = ~v0; v1 = ~angle; } else { v1 = angle; }
 6379 1ac8 93D70741 		srai	a5,a5,16	#, v0, v0
 6380              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6381 1acc 13580801 		srli	a6,a6,16	#, prephitmp_1172, prephitmp_1172
 6382              	.L546:
 6383              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6384 1ad0 03264100 		lw	a2,4(sp)		# tmp2003, %sfp
 6385 1ad4 93F7F701 		andi	a5,a5,31	#, _2278, v0
 6386              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6387 1ad8 13871700 		addi	a4,a5,1	#, tmp1690, _2278
 6388 1adc 13171700 		slli	a4,a4,1	#, tmp1691, tmp1690
 6389              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6390 1ae0 93971700 		slli	a5,a5,1	#, tmp1686, _2278
 6391 1ae4 B307F600 		add	a5,a2,a5	# tmp1686, tmp1687, tmp2003
 6392              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6393 1ae8 3307E600 		add	a4,a2,a4	# tmp1691, tmp1692, tmp2003
 6394 1aec 03150700 		lh	a0,0(a4)		# sin90[_2281], sin90[_2281]
 6395              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6396 1af0 03960700 		lh	a2,0(a5)		# _2279, sin90[_2278]
 6397              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6398 1af4 937DF80F 		andi	s11,a6,0xff	# tmp1696, prephitmp_1172
 6399              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6400 1af8 93F70604 		andi	a5,a3,64	#, tmp1704, v0.41_2272
 6401              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6402 1afc 3305C540 		sub	a0,a0,a2	# tmp1694, sin90[_2281], _2279
 6403              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6404 1b00 3305B503 		mul	a0,a0,s11	# tmp1697, tmp1694, tmp1696
 6405              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6406 1b04 13558540 		srai	a0,a0,8	#, tmp1698, tmp1697
 6407              	# gfx_lib_hdmi.h:91:   v1 = sin90[v0] + (int16_t) (((int32_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTER
 6408 1b08 3305C500 		add	a0,a0,a2	# _2279, tmp1701, tmp1698
 6409 1b0c 13150501 		slli	a0,a0,16	#, _2293, tmp1701
 6410 1b10 13550501 		srli	a0,a0,16	#, _2293, _2293
 6411              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6412 1b14 63880700 		beq	a5,zero,.L547	#, tmp1704,,
 6413              	# gfx_lib_hdmi.h:92:   if((angle >> INTERP_BITS) & NEGATE_BIT) v1 = -v1;
 6414 1b18 3305A040 		neg	a0,a0	# tmp1706, _2293
 6415 1b1c 13150501 		slli	a0,a0,16	#, _2293, tmp1706
 6416 1b20 13550501 		srli	a0,a0,16	#, _2293, _2293
 6417              	.L547:
 6418              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 6419 1b24 13150501 		slli	a0,a0,16	#,, _2293
 6420 1b28 13550541 		srai	a0,a0,16	#,,
 6421 1b2c 97000000 		call	__floatsidf		#
 6421      E7800000 
 6422 1b34 B7070000 		lui	a5,%hi(.LC3)	# tmp2498,
 6423 1b38 03A60700 		lw	a2,%lo(.LC3)(a5)		#,
 6424 1b3c 83A64700 		lw	a3,%lo(.LC3+4)(a5)		#,
 6425 1b40 97000000 		call	__muldf3		#
 6425      E7800000 
 6426              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 6427 1b48 97000000 		call	__truncdfsf2		#
 6427      E7800000 
 6428 1b50 93070500 		mv	a5,a0	# tmp2242,
 6429              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6430 1b54 13050C00 		mv	a0,s8	#, _1852
 6431              	# gfx_lib_hdmi.h:297:   float cos_theta = COS_FAST(angle);
 6432 1b58 138C0700 		mv	s8,a5	# tmp1711, tmp2242
 6433              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6434 1b5c 97000000 		call	__floatsisf		#
 6434      E7800000 
 6435 1b64 93070500 		mv	a5,a0	# tmp2243,
 6436              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6437 1b68 13050D00 		mv	a0,s10	#, _1855
 6438              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6439 1b6c 138D0700 		mv	s10,a5	# _1877, tmp2243
 6440              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6441 1b70 97000000 		call	__floatsisf		#
 6441      E7800000 
 6442 1b78 93070500 		mv	a5,a0	# tmp2244,
 6443              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6444 1b7c 13058BFD 		addi	a0,s6,-40	#,, _1923
 6445              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6446 1b80 138B0700 		mv	s6,a5	# _1879, tmp2244
 6447              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6448 1b84 97000000 		call	__floatsisf		#
 6448      E7800000 
 6449 1b8c 930D0500 		mv	s11,a0	# tmp2245,
 6450              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6451 1b90 13052AFE 		addi	a0,s4,-30	#,, _2003
 6452 1b94 97000000 		call	__floatsisf		#
 6452      E7800000 
 6453 1b9c 130A0500 		mv	s4,a0	# tmp2246,
 6454              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6455 1ba0 93850D00 		mv	a1,s11	#, _1837
 6456 1ba4 13850C00 		mv	a0,s9	#, sin_theta
 6457 1ba8 97000000 		call	__mulsf3		#
 6457      E7800000 
 6458              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6459 1bb0 93050A00 		mv	a1,s4	#, _1839
 6460              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6461 1bb4 2326A100 		sw	a0,12(sp)	# tmp1714, %sfp
 6462              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6463 1bb8 13850B00 		mv	a0,s7	#, cos_theta
 6464 1bbc 97000000 		call	__mulsf3		#
 6464      E7800000 
 6465              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6466 1bc4 8327C100 		lw	a5,12(sp)		# tmp1714, %sfp
 6467              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6468 1bc8 93050500 		mv	a1,a0	# tmp2248,
 6469              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6470 1bcc 13850700 		mv	a0,a5	#, tmp1714
 6471 1bd0 97000000 		call	__addsf3		#
 6471      E7800000 
 6472              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6473 1bd8 B7070000 		lui	a5,%hi(.LC7)	# tmp2499,
 6474 1bdc 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6475 1be0 97000000 		call	__addsf3		#
 6475      E7800000 
 6476              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6477 1be8 97000000 		call	__fixsfsi		#
 6477      E7800000 
 6478 1bf0 93060500 		mv	a3,a0	# tmp2249,
 6479              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6480 1bf4 93850D00 		mv	a1,s11	#, _1837
 6481 1bf8 13850B00 		mv	a0,s7	#, cos_theta
 6482              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6483 1bfc 2326D100 		sw	a3,12(sp)	# tmp1719, %sfp
 6484              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6485 1c00 97000000 		call	__mulsf3		#
 6485      E7800000 
 6486 1c08 930D0500 		mv	s11,a0	# tmp1720, tmp2250
 6487              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6488 1c0c 93050A00 		mv	a1,s4	#, _1839
 6489 1c10 13850C00 		mv	a0,s9	#, sin_theta
 6490 1c14 97000000 		call	__mulsf3		#
 6490      E7800000 
 6491 1c1c 93050500 		mv	a1,a0	# tmp2251,
 6492              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6493 1c20 13850D00 		mv	a0,s11	#, tmp1720
 6494 1c24 97000000 		call	__subsf3		#
 6494      E7800000 
 6495              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6496 1c2c 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6497 1c30 97000000 		call	__addsf3		#
 6497      E7800000 
 6498              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6499 1c38 97000000 		call	__fixsfsi		#
 6499      E7800000 
 6500 1c40 930D0500 		mv	s11,a0	# tmp2252,
 6501              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6502 1c44 93050D00 		mv	a1,s10	#, _1877
 6503 1c48 13850C00 		mv	a0,s9	#, sin_theta
 6504 1c4c 97000000 		call	__mulsf3		#
 6504      E7800000 
 6505 1c54 130A0500 		mv	s4,a0	# tmp1726, tmp2253
 6506              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6507 1c58 93050B00 		mv	a1,s6	#, _1879
 6508 1c5c 13050C00 		mv	a0,s8	#, tmp1711
 6509 1c60 97000000 		call	__mulsf3		#
 6509      E7800000 
 6510 1c68 93050500 		mv	a1,a0	# tmp2254,
 6511              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6512 1c6c 13050A00 		mv	a0,s4	#, tmp1726
 6513 1c70 97000000 		call	__addsf3		#
 6513      E7800000 
 6514              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6515 1c78 B7070000 		lui	a5,%hi(.LC7)	# tmp2500,
 6516 1c7c 83A50700 		lw	a1,%lo(.LC7)(a5)		#,
 6517 1c80 97000000 		call	__addsf3		#
 6517      E7800000 
 6518              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6519 1c88 97000000 		call	__fixsfsi		#
 6519      E7800000 
 6520 1c90 130A0500 		mv	s4,a0	# tmp2255,
 6521              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6522 1c94 93050D00 		mv	a1,s10	#, _1877
 6523 1c98 13050C00 		mv	a0,s8	#, tmp1711
 6524 1c9c 97000000 		call	__mulsf3		#
 6524      E7800000 
 6525 1ca4 130C0500 		mv	s8,a0	# tmp1732, tmp2256
 6526              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6527 1ca8 93050B00 		mv	a1,s6	#, _1879
 6528 1cac 13850C00 		mv	a0,s9	#, sin_theta
 6529 1cb0 97000000 		call	__mulsf3		#
 6529      E7800000 
 6530 1cb8 93050500 		mv	a1,a0	# tmp2257,
 6531              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6532 1cbc 13050C00 		mv	a0,s8	#, tmp1732
 6533 1cc0 97000000 		call	__subsf3		#
 6533      E7800000 
 6534              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6535 1cc8 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6536              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6537 1ccc 370C0000 		lui	s8,%hi(.LC8)	# tmp2502,
 6538              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6539 1cd0 97000000 		call	__addsf3		#
 6539      E7800000 
 6540              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6541 1cd8 97000000 		call	__fixsfsi		#
 6541      E7800000 
 6542              	# main_cube3d_rotate_hdmi.c:94:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, 0x00ffff
 6543 1ce0 8326C100 		lw	a3,12(sp)		# tmp1719, %sfp
 6544 1ce4 13860D00 		mv	a2,s11	#, tmp1725
 6545 1ce8 93050A00 		mv	a1,s4	#, tmp1731
 6546 1cec 97000000 		call	fb_draw_bresenham.constprop.0		#
 6546      E7800000 
 6547              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6548 1cf4 032B0100 		lw	s6,0(sp)		# tmp2004, %sfp
 6549 1cf8 0325CB11 		lw	a0,284(s6)		#, MEM[(struct point *)&right_bottom].y
 6550 1cfc 97000000 		call	__floatsisf		#
 6550      E7800000 
 6551 1d04 83250C00 		lw	a1,%lo(.LC8)(s8)		#,
 6552 1d08 97000000 		call	__mulsf3		#
 6552      E7800000 
 6553              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6554 1d10 97000000 		call	__fixsfsi		#
 6554      E7800000 
 6555              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6556 1d18 130545FC 		addi	a0,a0,-60	#,, tmp2258
 6557 1d1c 97000000 		call	__floatsisf		#
 6557      E7800000 
 6558 1d24 130D0500 		mv	s10,a0	# tmp2259,
 6559              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6560 1d28 03250B12 		lw	a0,288(s6)		#, MEM[(struct point *)&right_bottom].z
 6561 1d2c 97000000 		call	__floatsisf		#
 6561      E7800000 
 6562 1d34 83250C00 		lw	a1,%lo(.LC8)(s8)		#,
 6563 1d38 97000000 		call	__mulsf3		#
 6563      E7800000 
 6564              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6565 1d40 97000000 		call	__fixsfsi		#
 6565      E7800000 
 6566              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6567 1d48 1305C5FE 		addi	a0,a0,-20	#,, tmp2260
 6568 1d4c 97000000 		call	__floatsisf		#
 6568      E7800000 
 6569 1d54 130A0500 		mv	s4,a0	# tmp2261,
 6570              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6571 1d58 03258B12 		lw	a0,296(s6)		#, MEM[(struct point *)&right_bottom + 12B].y
 6572 1d5c 97000000 		call	__floatsisf		#
 6572      E7800000 
 6573 1d64 83250C00 		lw	a1,%lo(.LC8)(s8)		#,
 6574 1d68 97000000 		call	__mulsf3		#
 6574      E7800000 
 6575              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6576 1d70 97000000 		call	__fixsfsi		#
 6576      E7800000 
 6577              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6578 1d78 130545FC 		addi	a0,a0,-60	#,, tmp2262
 6579 1d7c 97000000 		call	__floatsisf		#
 6579      E7800000 
 6580 1d84 930D0500 		mv	s11,a0	# tmp2263,
 6581              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6582 1d88 0325CB12 		lw	a0,300(s6)		#, MEM[(struct point *)&right_bottom + 12B].z
 6583 1d8c 97000000 		call	__floatsisf		#
 6583      E7800000 
 6584 1d94 83250C00 		lw	a1,%lo(.LC8)(s8)		#,
 6585 1d98 97000000 		call	__mulsf3		#
 6585      E7800000 
 6586              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6587 1da0 97000000 		call	__fixsfsi		#
 6587      E7800000 
 6588              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6589 1da8 1305C5FE 		addi	a0,a0,-20	#,, tmp2264
 6590 1dac 97000000 		call	__floatsisf		#
 6590      E7800000 
 6591 1db4 130C0500 		mv	s8,a0	# tmp2265,
 6592              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6593 1db8 03258B11 		lw	a0,280(s6)		#, MEM[(struct point *)&right_bottom].x
 6594 1dbc 97000000 		call	__floatsisf		#
 6594      E7800000 
 6595 1dc4 B7070000 		lui	a5,%hi(.LC8)	# tmp2510,
 6596 1dc8 83A50700 		lw	a1,%lo(.LC8)(a5)		#,
 6597 1dcc 97000000 		call	__mulsf3		#
 6597      E7800000 
 6598              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6599 1dd4 97000000 		call	__fixsfsi		#
 6599      E7800000 
 6600              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6601 1ddc 1305C5FE 		addi	a0,a0,-20	#,, tmp2266
 6602 1de0 97000000 		call	__floatsisf		#
 6602      E7800000 
 6603 1de8 93850A00 		mv	a1,s5	#, cos_theta
 6604 1dec 97000000 		call	__mulsf3		#
 6604      E7800000 
 6605 1df4 130B0500 		mv	s6,a0	# tmp2267,
 6606              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6607 1df8 93050D00 		mv	a1,s10	#, _2556
 6608 1dfc 13850400 		mv	a0,s1	#, sin_theta
 6609 1e00 97000000 		call	__mulsf3		#
 6609      E7800000 
 6610              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6611 1e08 93050A00 		mv	a1,s4	#, _2558
 6612              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6613 1e0c 2326A100 		sw	a0,12(sp)	# tmp1775, %sfp
 6614              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6615 1e10 13850A00 		mv	a0,s5	#, cos_theta
 6616 1e14 97000000 		call	__mulsf3		#
 6616      E7800000 
 6617              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6618 1e1c 8327C100 		lw	a5,12(sp)		# tmp1775, %sfp
 6619              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6620 1e20 93050500 		mv	a1,a0	# tmp2269,
 6621              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6622 1e24 13850700 		mv	a0,a5	#, tmp1775
 6623 1e28 97000000 		call	__addsf3		#
 6623      E7800000 
 6624              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6625 1e30 93050000 		mv	a1,zero	#,
 6626 1e34 97000000 		call	__addsf3		#
 6626      E7800000 
 6627              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6628 1e3c 97000000 		call	__fixsfsi		#
 6628      E7800000 
 6629              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6630 1e44 97000000 		call	__floatsisf		#
 6630      E7800000 
 6631 1e4c 93050400 		mv	a1,s0	#, sin_theta
 6632 1e50 97000000 		call	__mulsf3		#
 6632      E7800000 
 6633 1e58 93050500 		mv	a1,a0	# tmp2270,
 6634              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6635 1e5c 13050B00 		mv	a0,s6	#, tmp1774
 6636 1e60 97000000 		call	__addsf3		#
 6636      E7800000 
 6637              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6638 1e68 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6639 1e6c 97000000 		call	__addsf3		#
 6639      E7800000 
 6640              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6641 1e74 97000000 		call	__fixsfsi		#
 6641      E7800000 
 6642              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6643 1e7c 130585FD 		addi	a0,a0,-40	#,, tmp2271
 6644 1e80 97000000 		call	__floatsisf		#
 6644      E7800000 
 6645 1e88 130B0500 		mv	s6,a0	# tmp2272,
 6646              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6647 1e8c 93050D00 		mv	a1,s10	#, _2556
 6648 1e90 13850A00 		mv	a0,s5	#, cos_theta
 6649 1e94 97000000 		call	__mulsf3		#
 6649      E7800000 
 6650 1e9c 130D0500 		mv	s10,a0	# tmp1787, tmp2273
 6651              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6652 1ea0 93050A00 		mv	a1,s4	#, _2558
 6653 1ea4 13850400 		mv	a0,s1	#, sin_theta
 6654 1ea8 97000000 		call	__mulsf3		#
 6654      E7800000 
 6655 1eb0 93050500 		mv	a1,a0	# tmp2274,
 6656              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6657 1eb4 13050D00 		mv	a0,s10	#, tmp1787
 6658 1eb8 97000000 		call	__subsf3		#
 6658      E7800000 
 6659              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6660 1ec0 37070000 		lui	a4,%hi(.LC7)	# tmp2511,
 6661 1ec4 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6662 1ec8 97000000 		call	__addsf3		#
 6662      E7800000 
 6663              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6664 1ed0 97000000 		call	__fixsfsi		#
 6664      E7800000 
 6665              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6666 1ed8 130525FE 		addi	a0,a0,-30	#,, tmp2275
 6667 1edc 97000000 		call	__floatsisf		#
 6667      E7800000 
 6668              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6669 1ee4 83270100 		lw	a5,0(sp)		# tmp2004, %sfp
 6670              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6671 1ee8 130A0500 		mv	s4,a0	# tmp2276,
 6672              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6673 1eec 03A54712 		lw	a0,292(a5)		#, MEM[(struct point *)&right_bottom + 12B].x
 6674 1ef0 97000000 		call	__floatsisf		#
 6674      E7800000 
 6675 1ef8 B7070000 		lui	a5,%hi(.LC8)	# tmp2513,
 6676 1efc 83A50700 		lw	a1,%lo(.LC8)(a5)		#,
 6677 1f00 97000000 		call	__mulsf3		#
 6677      E7800000 
 6678              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6679 1f08 97000000 		call	__fixsfsi		#
 6679      E7800000 
 6680              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6681 1f10 1305C5FE 		addi	a0,a0,-20	#,, tmp2277
 6682 1f14 97000000 		call	__floatsisf		#
 6682      E7800000 
 6683 1f1c 93850A00 		mv	a1,s5	#, cos_theta
 6684 1f20 97000000 		call	__mulsf3		#
 6684      E7800000 
 6685 1f28 130D0500 		mv	s10,a0	# tmp2278,
 6686              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6687 1f2c 93850D00 		mv	a1,s11	#, _2516
 6688 1f30 13850400 		mv	a0,s1	#, sin_theta
 6689 1f34 97000000 		call	__mulsf3		#
 6689      E7800000 
 6690              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6691 1f3c 93050C00 		mv	a1,s8	#, _2518
 6692              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6693 1f40 2326A100 		sw	a0,12(sp)	# tmp1803, %sfp
 6694              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6695 1f44 13850900 		mv	a0,s3	#, cos_theta
 6696 1f48 97000000 		call	__mulsf3		#
 6696      E7800000 
 6697              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6698 1f50 8327C100 		lw	a5,12(sp)		# tmp1803, %sfp
 6699              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6700 1f54 93050500 		mv	a1,a0	# tmp2280,
 6701              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6702 1f58 13850700 		mv	a0,a5	#, tmp1803
 6703 1f5c 97000000 		call	__addsf3		#
 6703      E7800000 
 6704              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6705 1f64 93050000 		mv	a1,zero	#,
 6706 1f68 97000000 		call	__addsf3		#
 6706      E7800000 
 6707              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6708 1f70 97000000 		call	__fixsfsi		#
 6708      E7800000 
 6709              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6710 1f78 97000000 		call	__floatsisf		#
 6710      E7800000 
 6711 1f80 93850400 		mv	a1,s1	#, sin_theta
 6712 1f84 97000000 		call	__mulsf3		#
 6712      E7800000 
 6713 1f8c 93050500 		mv	a1,a0	# tmp2281,
 6714              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6715 1f90 13050D00 		mv	a0,s10	#, tmp1802
 6716 1f94 97000000 		call	__addsf3		#
 6716      E7800000 
 6717              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6718 1f9c 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6719 1fa0 97000000 		call	__addsf3		#
 6719      E7800000 
 6720              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6721 1fa8 97000000 		call	__fixsfsi		#
 6721      E7800000 
 6722              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6723 1fb0 130585FD 		addi	a0,a0,-40	#,, tmp2282
 6724 1fb4 97000000 		call	__floatsisf		#
 6724      E7800000 
 6725 1fbc 130D0500 		mv	s10,a0	# tmp2283,
 6726              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6727 1fc0 93850D00 		mv	a1,s11	#, _2516
 6728 1fc4 13850900 		mv	a0,s3	#, cos_theta
 6729 1fc8 97000000 		call	__mulsf3		#
 6729      E7800000 
 6730 1fd0 930D0500 		mv	s11,a0	# tmp1815, tmp2284
 6731              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6732 1fd4 93050C00 		mv	a1,s8	#, _2518
 6733 1fd8 13850400 		mv	a0,s1	#, sin_theta
 6734 1fdc 97000000 		call	__mulsf3		#
 6734      E7800000 
 6735 1fe4 93050500 		mv	a1,a0	# tmp2285,
 6736              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6737 1fe8 13850D00 		mv	a0,s11	#, tmp1815
 6738 1fec 97000000 		call	__subsf3		#
 6738      E7800000 
 6739              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6740 1ff4 37070000 		lui	a4,%hi(.LC7)	# tmp2514,
 6741 1ff8 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6742 1ffc 97000000 		call	__addsf3		#
 6742      E7800000 
 6743              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6744 2004 97000000 		call	__fixsfsi		#
 6744      E7800000 
 6745              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6746 200c 130525FE 		addi	a0,a0,-30	#,, tmp2286
 6747 2010 97000000 		call	__floatsisf		#
 6747      E7800000 
 6748 2018 130C0500 		mv	s8,a0	# tmp2287,
 6749              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6750 201c 93050D00 		mv	a1,s10	#, _2356
 6751 2020 13850C00 		mv	a0,s9	#, sin_theta
 6752 2024 97000000 		call	__mulsf3		#
 6752      E7800000 
 6753 202c 930D0500 		mv	s11,a0	# tmp1822, tmp2288
 6754              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6755 2030 93050C00 		mv	a1,s8	#, _2358
 6756 2034 13850B00 		mv	a0,s7	#, cos_theta
 6757 2038 97000000 		call	__mulsf3		#
 6757      E7800000 
 6758 2040 93050500 		mv	a1,a0	# tmp2289,
 6759              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6760 2044 13850D00 		mv	a0,s11	#, tmp1822
 6761 2048 97000000 		call	__addsf3		#
 6761      E7800000 
 6762              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6763 2050 37070000 		lui	a4,%hi(.LC7)	# tmp2515,
 6764 2054 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6765 2058 97000000 		call	__addsf3		#
 6765      E7800000 
 6766              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6767 2060 97000000 		call	__fixsfsi		#
 6767      E7800000 
 6768 2068 93070500 		mv	a5,a0	# tmp2290,
 6769              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6770 206c 93050D00 		mv	a1,s10	#, _2356
 6771 2070 13850B00 		mv	a0,s7	#, cos_theta
 6772              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6773 2074 138D0700 		mv	s10,a5	# tmp1827, tmp2290
 6774              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6775 2078 97000000 		call	__mulsf3		#
 6775      E7800000 
 6776 2080 930D0500 		mv	s11,a0	# tmp1828, tmp2291
 6777              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6778 2084 93050C00 		mv	a1,s8	#, _2358
 6779 2088 13850C00 		mv	a0,s9	#, sin_theta
 6780 208c 97000000 		call	__mulsf3		#
 6780      E7800000 
 6781 2094 93050500 		mv	a1,a0	# tmp2292,
 6782              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6783 2098 13850D00 		mv	a0,s11	#, tmp1828
 6784 209c 97000000 		call	__subsf3		#
 6784      E7800000 
 6785              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6786 20a4 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6787 20a8 97000000 		call	__addsf3		#
 6787      E7800000 
 6788              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6789 20b0 97000000 		call	__fixsfsi		#
 6789      E7800000 
 6790 20b8 130C0500 		mv	s8,a0	# tmp2293,
 6791              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6792 20bc 93050B00 		mv	a1,s6	#, _2396
 6793 20c0 13850C00 		mv	a0,s9	#, sin_theta
 6794 20c4 97000000 		call	__mulsf3		#
 6794      E7800000 
 6795 20cc 930D0500 		mv	s11,a0	# tmp1834, tmp2294
 6796              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6797 20d0 93050A00 		mv	a1,s4	#, _2398
 6798 20d4 13850B00 		mv	a0,s7	#, cos_theta
 6799 20d8 97000000 		call	__mulsf3		#
 6799      E7800000 
 6800 20e0 93050500 		mv	a1,a0	# tmp2295,
 6801              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6802 20e4 13850D00 		mv	a0,s11	#, tmp1834
 6803 20e8 97000000 		call	__addsf3		#
 6803      E7800000 
 6804              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6805 20f0 37070000 		lui	a4,%hi(.LC7)	# tmp2516,
 6806 20f4 83250700 		lw	a1,%lo(.LC7)(a4)		#,
 6807 20f8 97000000 		call	__addsf3		#
 6807      E7800000 
 6808              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6809 2100 97000000 		call	__fixsfsi		#
 6809      E7800000 
 6810 2108 93070500 		mv	a5,a0	# tmp2296,
 6811              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6812 210c 93050B00 		mv	a1,s6	#, _2396
 6813 2110 13850B00 		mv	a0,s7	#, cos_theta
 6814              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 6815 2114 138B0700 		mv	s6,a5	# tmp1839, tmp2296
 6816              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6817 2118 97000000 		call	__mulsf3		#
 6817      E7800000 
 6818 2120 930D0500 		mv	s11,a0	# tmp1840, tmp2297
 6819              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6820 2124 93050A00 		mv	a1,s4	#, _2398
 6821 2128 13850C00 		mv	a0,s9	#, sin_theta
 6822 212c 97000000 		call	__mulsf3		#
 6822      E7800000 
 6823 2134 93050500 		mv	a1,a0	# tmp2298,
 6824              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6825 2138 13850D00 		mv	a0,s11	#, tmp1840
 6826 213c 97000000 		call	__subsf3		#
 6826      E7800000 
 6827              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6828 2144 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6829              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6830 2148 B70D0000 		lui	s11,%hi(.LC8)	# tmp2518,
 6831              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6832 214c 97000000 		call	__addsf3		#
 6832      E7800000 
 6833              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6834 2154 97000000 		call	__fixsfsi		#
 6834      E7800000 
 6835              	# main_cube3d_rotate_hdmi.c:94:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, 0x00ffff
 6836 215c 93060D00 		mv	a3,s10	#, tmp1827
 6837 2160 13060C00 		mv	a2,s8	#, tmp1833
 6838 2164 93050B00 		mv	a1,s6	#, tmp1839
 6839 2168 97000000 		call	fb_draw_bresenham.constprop.0		#
 6839      E7800000 
 6840              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6841 2170 032A0100 		lw	s4,0(sp)		# tmp2004, %sfp
 6842 2174 03254A13 		lw	a0,308(s4)		#, MEM[(struct point *)&right_top].y
 6843 2178 97000000 		call	__floatsisf		#
 6843      E7800000 
 6844 2180 83A50D00 		lw	a1,%lo(.LC8)(s11)		#,
 6845 2184 97000000 		call	__mulsf3		#
 6845      E7800000 
 6846              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6847 218c 97000000 		call	__fixsfsi		#
 6847      E7800000 
 6848              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6849 2194 130545FC 		addi	a0,a0,-60	#,, tmp2299
 6850 2198 97000000 		call	__floatsisf		#
 6850      E7800000 
 6851 21a0 130D0500 		mv	s10,a0	# tmp2300,
 6852              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6853 21a4 03258A13 		lw	a0,312(s4)		#, MEM[(struct point *)&right_top].z
 6854 21a8 97000000 		call	__floatsisf		#
 6854      E7800000 
 6855 21b0 83A50D00 		lw	a1,%lo(.LC8)(s11)		#,
 6856 21b4 97000000 		call	__mulsf3		#
 6856      E7800000 
 6857              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6858 21bc 97000000 		call	__fixsfsi		#
 6858      E7800000 
 6859              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6860 21c4 1305C5FE 		addi	a0,a0,-20	#,, tmp2301
 6861 21c8 97000000 		call	__floatsisf		#
 6861      E7800000 
 6862 21d0 930C0500 		mv	s9,a0	# tmp2302,
 6863              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6864 21d4 03250A14 		lw	a0,320(s4)		#, MEM[(struct point *)&right_top + 12B].y
 6865 21d8 97000000 		call	__floatsisf		#
 6865      E7800000 
 6866 21e0 83A50D00 		lw	a1,%lo(.LC8)(s11)		#,
 6867 21e4 97000000 		call	__mulsf3		#
 6867      E7800000 
 6868              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6869 21ec 97000000 		call	__fixsfsi		#
 6869      E7800000 
 6870              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6871 21f4 130545FC 		addi	a0,a0,-60	#,, tmp2303
 6872 21f8 97000000 		call	__floatsisf		#
 6872      E7800000 
 6873 2200 130C0500 		mv	s8,a0	# tmp2304,
 6874              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6875 2204 03254A14 		lw	a0,324(s4)		#, MEM[(struct point *)&right_top + 12B].z
 6876 2208 97000000 		call	__floatsisf		#
 6876      E7800000 
 6877 2210 83A50D00 		lw	a1,%lo(.LC8)(s11)		#,
 6878 2214 97000000 		call	__mulsf3		#
 6878      E7800000 
 6879              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6880 221c 97000000 		call	__fixsfsi		#
 6880      E7800000 
 6881              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6882 2224 1305C5FE 		addi	a0,a0,-20	#,, tmp2305
 6883 2228 97000000 		call	__floatsisf		#
 6883      E7800000 
 6884 2230 130B0500 		mv	s6,a0	# tmp2306,
 6885              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6886 2234 03250A13 		lw	a0,304(s4)		#, MEM[(struct point *)&right_top].x
 6887 2238 97000000 		call	__floatsisf		#
 6887      E7800000 
 6888 2240 83A50D00 		lw	a1,%lo(.LC8)(s11)		#,
 6889 2244 97000000 		call	__mulsf3		#
 6889      E7800000 
 6890              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6891 224c 97000000 		call	__fixsfsi		#
 6891      E7800000 
 6892              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6893 2254 1305C5FE 		addi	a0,a0,-20	#,, tmp2307
 6894 2258 97000000 		call	__floatsisf		#
 6894      E7800000 
 6895 2260 93850A00 		mv	a1,s5	#, cos_theta
 6896 2264 97000000 		call	__mulsf3		#
 6896      E7800000 
 6897 226c 130A0500 		mv	s4,a0	# tmp2308,
 6898              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6899 2270 93050D00 		mv	a1,s10	#, _3044
 6900 2274 13850400 		mv	a0,s1	#, sin_theta
 6901 2278 97000000 		call	__mulsf3		#
 6901      E7800000 
 6902 2280 930D0500 		mv	s11,a0	# tmp1883, tmp2309
 6903              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6904 2284 93850C00 		mv	a1,s9	#, _3046
 6905 2288 13850A00 		mv	a0,s5	#, cos_theta
 6906 228c 97000000 		call	__mulsf3		#
 6906      E7800000 
 6907 2294 93050500 		mv	a1,a0	# tmp2310,
 6908              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6909 2298 13850D00 		mv	a0,s11	#, tmp1883
 6910 229c 97000000 		call	__addsf3		#
 6910      E7800000 
 6911              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6912 22a4 93050000 		mv	a1,zero	#,
 6913 22a8 97000000 		call	__addsf3		#
 6913      E7800000 
 6914              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6915 22b0 97000000 		call	__fixsfsi		#
 6915      E7800000 
 6916              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6917 22b8 97000000 		call	__floatsisf		#
 6917      E7800000 
 6918 22c0 93850400 		mv	a1,s1	#, sin_theta
 6919 22c4 97000000 		call	__mulsf3		#
 6919      E7800000 
 6920 22cc 93050500 		mv	a1,a0	# tmp2311,
 6921              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6922 22d0 13050A00 		mv	a0,s4	#, tmp1882
 6923 22d4 97000000 		call	__addsf3		#
 6923      E7800000 
 6924              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6925 22dc 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 6926              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6927 22e0 B70D0000 		lui	s11,%hi(.LC8)	# tmp2529,
 6928              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6929 22e4 97000000 		call	__addsf3		#
 6929      E7800000 
 6930              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6931 22ec 97000000 		call	__fixsfsi		#
 6931      E7800000 
 6932              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6933 22f4 130585FD 		addi	a0,a0,-40	#,, tmp2312
 6934 22f8 97000000 		call	__floatsisf		#
 6934      E7800000 
 6935 2300 130A0500 		mv	s4,a0	# tmp2313,
 6936              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6937 2304 93050D00 		mv	a1,s10	#, _3044
 6938 2308 13850A00 		mv	a0,s5	#, cos_theta
 6939 230c 97000000 		call	__mulsf3		#
 6939      E7800000 
 6940 2314 130D0500 		mv	s10,a0	# tmp1895, tmp2314
 6941              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6942 2318 93850C00 		mv	a1,s9	#, _3046
 6943 231c 13850400 		mv	a0,s1	#, sin_theta
 6944 2320 97000000 		call	__mulsf3		#
 6944      E7800000 
 6945 2328 93050500 		mv	a1,a0	# tmp2315,
 6946              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6947 232c 13050D00 		mv	a0,s10	#, tmp1895
 6948 2330 97000000 		call	__subsf3		#
 6948      E7800000 
 6949              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6950 2338 370D0000 		lui	s10,%hi(.LC7)	# tmp2527,
 6951 233c 83250D00 		lw	a1,%lo(.LC7)(s10)		#,
 6952 2340 97000000 		call	__addsf3		#
 6952      E7800000 
 6953              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 6954 2348 97000000 		call	__fixsfsi		#
 6954      E7800000 
 6955              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6956 2350 130525FE 		addi	a0,a0,-30	#,, tmp2316
 6957 2354 97000000 		call	__floatsisf		#
 6957      E7800000 
 6958              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6959 235c 83270100 		lw	a5,0(sp)		# tmp2004, %sfp
 6960              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 6961 2360 93040500 		mv	s1,a0	# tmp2317,
 6962              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6963 2364 03A5C713 		lw	a0,316(a5)		#, MEM[(struct point *)&right_top + 12B].x
 6964 2368 97000000 		call	__floatsisf		#
 6964      E7800000 
 6965 2370 83A50D00 		lw	a1,%lo(.LC8)(s11)		#,
 6966 2374 97000000 		call	__mulsf3		#
 6966      E7800000 
 6967              	# gfx_lib_hdmi.h:251:   point transformed = {p->x*sx, p->y*sy, p->z*sz};
 6968 237c 97000000 		call	__fixsfsi		#
 6968      E7800000 
 6969              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6970 2384 1305C5FE 		addi	a0,a0,-20	#,, tmp2318
 6971 2388 97000000 		call	__floatsisf		#
 6971      E7800000 
 6972 2390 93850900 		mv	a1,s3	#, cos_theta
 6973 2394 97000000 		call	__mulsf3		#
 6973      E7800000 
 6974 239c 93090500 		mv	s3,a0	# tmp2319,
 6975              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6976 23a0 93050C00 		mv	a1,s8	#, _3004
 6977 23a4 13050400 		mv	a0,s0	#, sin_theta
 6978 23a8 97000000 		call	__mulsf3		#
 6978      E7800000 
 6979              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6980 23b0 93050B00 		mv	a1,s6	#, _3006
 6981              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6982 23b4 930C0500 		mv	s9,a0	# tmp1911, tmp2320
 6983              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6984 23b8 13850A00 		mv	a0,s5	#, cos_theta
 6985 23bc 97000000 		call	__mulsf3		#
 6985      E7800000 
 6986 23c4 93050500 		mv	a1,a0	# tmp2321,
 6987              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6988 23c8 13850C00 		mv	a0,s9	#, tmp1911
 6989 23cc 97000000 		call	__addsf3		#
 6989      E7800000 
 6990              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6991 23d4 93050000 		mv	a1,zero	#,
 6992 23d8 97000000 		call	__addsf3		#
 6992      E7800000 
 6993              	# gfx_lib_hdmi.h:271:   transformed.z = pivot->z + (shifted_point.y*sin_theta + shifted_point.z*cos
 6994 23e0 97000000 		call	__fixsfsi		#
 6994      E7800000 
 6995              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 6996 23e8 97000000 		call	__floatsisf		#
 6996      E7800000 
 6997 23f0 93050400 		mv	a1,s0	#, sin_theta
 6998 23f4 97000000 		call	__mulsf3		#
 6998      E7800000 
 6999 23fc 93050500 		mv	a1,a0	# tmp2322,
 7000              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 7001 2400 13850900 		mv	a0,s3	#, tmp1910
 7002 2404 97000000 		call	__addsf3		#
 7002      E7800000 
 7003              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 7004 240c 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 7005 2410 97000000 		call	__addsf3		#
 7005      E7800000 
 7006              	# gfx_lib_hdmi.h:284:   transformed.x = pivot->x + (shifted_point.x*cos_theta + shifted_point.z*sin
 7007 2418 97000000 		call	__fixsfsi		#
 7007      E7800000 
 7008              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7009 2420 130585FD 		addi	a0,a0,-40	#,, tmp2323
 7010 2424 97000000 		call	__floatsisf		#
 7010      E7800000 
 7011 242c 93090500 		mv	s3,a0	# tmp2324,
 7012              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 7013 2430 93050C00 		mv	a1,s8	#, _3004
 7014 2434 13850A00 		mv	a0,s5	#, cos_theta
 7015 2438 97000000 		call	__mulsf3		#
 7015      E7800000 
 7016 2440 930A0500 		mv	s5,a0	# tmp1923, tmp2325
 7017              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 7018 2444 93050B00 		mv	a1,s6	#, _3006
 7019 2448 13050400 		mv	a0,s0	#, sin_theta
 7020 244c 97000000 		call	__mulsf3		#
 7020      E7800000 
 7021 2454 93050500 		mv	a1,a0	# tmp2326,
 7022              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 7023 2458 13850A00 		mv	a0,s5	#, tmp1923
 7024 245c 97000000 		call	__subsf3		#
 7024      E7800000 
 7025              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 7026 2464 83250D00 		lw	a1,%lo(.LC7)(s10)		#,
 7027 2468 97000000 		call	__addsf3		#
 7027      E7800000 
 7028              	# gfx_lib_hdmi.h:270:   transformed.y = pivot->y + (shifted_point.y*cos_theta - shifted_point.z*sin
 7029 2470 97000000 		call	__fixsfsi		#
 7029      E7800000 
 7030              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7031 2478 130525FE 		addi	a0,a0,-30	#,, tmp2327
 7032 247c 97000000 		call	__floatsisf		#
 7032      E7800000 
 7033              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7034 2484 032B8100 		lw	s6,8(sp)		# sin_theta, %sfp
 7035              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7036 2488 13040500 		mv	s0,a0	# tmp2328,
 7037              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7038 248c 93850900 		mv	a1,s3	#, _2844
 7039 2490 13050B00 		mv	a0,s6	#, sin_theta
 7040 2494 97000000 		call	__mulsf3		#
 7040      E7800000 
 7041 249c 930A0500 		mv	s5,a0	# tmp1930, tmp2329
 7042              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7043 24a0 93050400 		mv	a1,s0	#, _2846
 7044 24a4 13850B00 		mv	a0,s7	#, cos_theta
 7045 24a8 97000000 		call	__mulsf3		#
 7045      E7800000 
 7046 24b0 93050500 		mv	a1,a0	# tmp2330,
 7047              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7048 24b4 13850A00 		mv	a0,s5	#, tmp1930
 7049 24b8 97000000 		call	__addsf3		#
 7049      E7800000 
 7050              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7051 24c0 83250D00 		lw	a1,%lo(.LC7)(s10)		#,
 7052 24c4 97000000 		call	__addsf3		#
 7052      E7800000 
 7053              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7054 24cc 97000000 		call	__fixsfsi		#
 7054      E7800000 
 7055              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7056 24d4 93850900 		mv	a1,s3	#, _2844
 7057              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7058 24d8 930A0500 		mv	s5,a0	# tmp2331,
 7059              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7060 24dc 13850B00 		mv	a0,s7	#, cos_theta
 7061 24e0 97000000 		call	__mulsf3		#
 7061      E7800000 
 7062 24e8 93090500 		mv	s3,a0	# tmp1936, tmp2332
 7063              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7064 24ec 93050400 		mv	a1,s0	#, _2846
 7065 24f0 13050B00 		mv	a0,s6	#, sin_theta
 7066 24f4 97000000 		call	__mulsf3		#
 7066      E7800000 
 7067 24fc 93050500 		mv	a1,a0	# tmp2333,
 7068              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7069 2500 13850900 		mv	a0,s3	#, tmp1936
 7070 2504 97000000 		call	__subsf3		#
 7070      E7800000 
 7071              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7072 250c 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 7073 2510 97000000 		call	__addsf3		#
 7073      E7800000 
 7074              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7075 2518 97000000 		call	__fixsfsi		#
 7075      E7800000 
 7076              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7077 2520 93050A00 		mv	a1,s4	#, _2884
 7078              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7079 2524 93090500 		mv	s3,a0	# tmp2334,
 7080              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7081 2528 13050B00 		mv	a0,s6	#, sin_theta
 7082 252c 97000000 		call	__mulsf3		#
 7082      E7800000 
 7083 2534 13040500 		mv	s0,a0	# tmp1942, tmp2335
 7084              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7085 2538 93850400 		mv	a1,s1	#, _2886
 7086 253c 13850B00 		mv	a0,s7	#, cos_theta
 7087 2540 97000000 		call	__mulsf3		#
 7087      E7800000 
 7088 2548 93050500 		mv	a1,a0	# tmp2336,
 7089              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7090 254c 13050400 		mv	a0,s0	#, tmp1942
 7091 2550 97000000 		call	__addsf3		#
 7091      E7800000 
 7092              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7093 2558 83250D00 		lw	a1,%lo(.LC7)(s10)		#,
 7094 255c 97000000 		call	__addsf3		#
 7094      E7800000 
 7095              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7096 2564 97000000 		call	__fixsfsi		#
 7096      E7800000 
 7097              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7098 256c 93050A00 		mv	a1,s4	#, _2884
 7099              	# gfx_lib_hdmi.h:300:   transformed.y = pivot->y + (shifted_point.x*sin_theta + shifted_point.y*cos
 7100 2570 13040500 		mv	s0,a0	# tmp2337,
 7101              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7102 2574 13850B00 		mv	a0,s7	#, cos_theta
 7103 2578 97000000 		call	__mulsf3		#
 7103      E7800000 
 7104 2580 130A0500 		mv	s4,a0	# tmp1948, tmp2338
 7105              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7106 2584 93850400 		mv	a1,s1	#, _2886
 7107 2588 13050B00 		mv	a0,s6	#, sin_theta
 7108 258c 97000000 		call	__mulsf3		#
 7108      E7800000 
 7109 2594 93050500 		mv	a1,a0	# tmp2339,
 7110              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7111 2598 13050A00 		mv	a0,s4	#, tmp1948
 7112 259c 97000000 		call	__subsf3		#
 7112      E7800000 
 7113              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7114 25a4 83250900 		lw	a1,%lo(.LC5)(s2)		#,
 7115 25a8 97000000 		call	__addsf3		#
 7115      E7800000 
 7116              	# gfx_lib_hdmi.h:299:   transformed.x = pivot->x + (shifted_point.x*cos_theta - shifted_point.y*sin
 7117 25b0 97000000 		call	__fixsfsi		#
 7117      E7800000 
 7118              	# main_cube3d_rotate_hdmi.c:94:     fb_draw_bresenham(framebuffer, p0.x, p0.y, p1.x, p1.y, 0x00ffff
 7119 25b8 93860A00 		mv	a3,s5	#, tmp1935
 7120 25bc 13860900 		mv	a2,s3	#, tmp1941
 7121 25c0 93050400 		mv	a1,s0	#, tmp1947
 7122 25c4 97000000 		call	fb_draw_bresenham.constprop.0		#
 7122      E7800000 
 7123              	# main_cube3d_rotate_hdmi.c:126:     oled_show_fb_8or16(framebuffer, 0x10000000 + ((*fb_ctrl & 1) ?
 7124 25cc B7070030 		li	a5,805306368		# tmp1955,
 7125              	# main_cube3d_rotate_hdmi.c:126:     oled_show_fb_8or16(framebuffer, 0x10000000 + ((*fb_ctrl & 1) ?
 7126 25d0 83A74702 		lw	a5,36(a5)		# MEM[(uint32_t *)805306404B], MEM[(uint32_t *)805306404B]
 7127 25d4 37070010 		li	a4,268435456		# prephitmp_719,
 7128 25d8 93F71700 		andi	a5,a5,1	#, tmp1956, MEM[(uint32_t *)805306404B]
 7129              	# main_cube3d_rotate_hdmi.c:126:     oled_show_fb_8or16(framebuffer, 0x10000000 + ((*fb_ctrl & 1) ?
 7130 25dc 63940700 		bne	a5,zero,.L548	#, tmp1956,,
 7131 25e0 37870010 		li	a4,268468224		# prephitmp_719,
 7132              	.L548:
 7133              	# kianv_stdlib.h:51:   *( (volatile uint32_t*) DMA_SRC  ) = src;
 7134 25e4 03264105 		lw	a2,84(sp)		# framebuffer.52_26, %sfp
 7135 25e8 B7070030 		li	a5,805306368		# tmp1959,
 7136              	# main_cube3d_rotate_hdmi.c:127:     *fb_ctrl ^= 1;
 7137 25ec 83A64702 		lw	a3,36(a5)		# MEM[(uint32_t *)805306404B], MEM[(uint32_t *)805306404B]
 7138              	# kianv_stdlib.h:51:   *( (volatile uint32_t*) DMA_SRC  ) = src;
 7139 25f0 23A6C702 		sw	a2,44(a5)	# framebuffer.52_26, MEM[(volatile uint32_t *)805306412B]
 7140              	# kianv_stdlib.h:52:   *( (volatile uint32_t*) DMA_DST  ) = dst;
 7141 25f4 23A8E702 		sw	a4,48(a5)	# prephitmp_719, MEM[(volatile uint32_t *)805306416B]
 7142              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 7143 25f8 37170000 		li	a4,4096		# tmp1965,
 7144 25fc 1307072C 		addi	a4,a4,704	#, tmp1964, tmp1965
 7145 2600 23AAE702 		sw	a4,52(a5)	# tmp1964, MEM[(volatile uint32_t *)805306420B]
 7146              	# main_cube3d_rotate_hdmi.c:127:     *fb_ctrl ^= 1;
 7147 2604 13C71600 		xori	a4,a3,1	#, tmp1973, MEM[(uint32_t *)805306404B]
 7148              	# kianv_stdlib.h:54:   *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
 7149 2608 93061000 		li	a3,1		# tmp1968,
 7150 260c 23ACD702 		sw	a3,56(a5)	# tmp1968, MEM[(volatile uint32_t *)805306424B]
 7151              	# main_cube3d_rotate_hdmi.c:127:     *fb_ctrl ^= 1;
 7152 2610 23A2E702 		sw	a4,36(a5)	# tmp1973, MEM[(uint32_t *)805306404B]
 7153              	# main_cube3d_rotate_hdmi.c:130:     angle += delta_angle;
 7154 2614 83278104 		lw	a5,72(sp)		# angle, %sfp
 7155 2618 9387E7FF 		addi	a5,a5,-2	#, angle, angle
 7156 261c 2324F104 		sw	a5,72(sp)	# angle, %sfp
 7157              	# main_cube3d_rotate_hdmi.c:133:     if (angle < 0) angle = 359;
 7158 2620 63D60700 		bge	a5,zero,.L549	#, angle,,
 7159              	# main_cube3d_rotate_hdmi.c:133:     if (angle < 0) angle = 359;
 7160 2624 93077016 		li	a5,359		# angle,
 7161 2628 2324F104 		sw	a5,72(sp)	# angle, %sfp
 7162              	.L549:
 7163              	# kianv_stdlib.h:51:   *( (volatile uint32_t*) DMA_SRC  ) = src;
 7164 262c 03274105 		lw	a4,84(sp)		# framebuffer.52_26, %sfp
 7165 2630 B7070030 		li	a5,805306368		# tmp1976,
 7166 2634 23A6E702 		sw	a4,44(a5)	# framebuffer.52_26, MEM[(volatile uint32_t *)805306412B]
 7167              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 7168 2638 37170000 		li	a4,4096		# tmp1982,
 7169              	# kianv_stdlib.h:52:   *( (volatile uint32_t*) DMA_DST  ) = dst;
 7170 263c 23A80702 		sw	zero,48(a5)	#, MEM[(volatile uint32_t *)805306416B]
 7171              	# kianv_stdlib.h:53:   *( (volatile uint32_t*) DMA_LEN  ) = len;
 7172 2640 1307072C 		addi	a4,a4,704	#, tmp1981, tmp1982
 7173 2644 23AAE702 		sw	a4,52(a5)	# tmp1981, MEM[(volatile uint32_t *)805306420B]
 7174              	# kianv_stdlib.h:54:   *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
 7175 2648 13072000 		li	a4,2		# tmp1985,
 7176 264c 23ACE702 		sw	a4,56(a5)	# tmp1985, MEM[(volatile uint32_t *)805306424B]
 7177              	# main_cube3d_rotate_hdmi.c:147:     led &= 7;
 7178 2650 03270105 		lw	a4,80(sp)		# led, %sfp
 7179              	# main_cube3d_rotate_hdmi.c:146:     IO_OUT(GPIO_OUTPUT, 0);
 7180 2654 23AE0700 		sw	zero,28(a5)	#, MEM[(volatile uint32_t *)805306396B]
 7181              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 7182 2658 03A6C701 		lw	a2,28(a5)		# _3212, MEM[(volatile uint32_t *)805306396B]
 7183              	# main_cube3d_rotate_hdmi.c:147:     led &= 7;
 7184 265c 93767700 		andi	a3,a4,7	#, led, led
 7185              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 7186 2660 13071000 		li	a4,1		# tmp1993,
 7187 2664 3317D700 		sll	a4,a4,a3	# led, tmp1992, tmp1993
 7188              	# main_cube3d_rotate_hdmi.c:149:     gpio_set_value(led++, 1);
 7189 2668 93861600 		addi	a3,a3,1	#, led, led
 7190              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 7191 266c 3367C700 		or	a4,a4,a2	# _3212, _3216, tmp1992
 7192              	# main_cube3d_rotate_hdmi.c:149:     gpio_set_value(led++, 1);
 7193 2670 2328D104 		sw	a3,80(sp)	# led, %sfp
 7194              	# kianv_stdlib.h:125:       *p |=  (0x01 << (gpio & 0x1f));
 7195 2674 23AEE700 		sw	a4,28(a5)	# _3216, MEM[(volatile uint32_t *)805306396B]
 7196 2678 6FD0DFA6 		j	.L550		#
 7198              		.globl	roof
 7199              		.globl	right_bottom
 7200              		.globl	right_top
 7201              		.globl	left_bottom
 7202              		.globl	left_top
 7203              		.globl	back
 7204              		.globl	front
 7205              		.globl	oled_8bit_init_seq
 7206              		.globl	framebuffer
 7207              		.globl	heap_memory_used
 7208              		.globl	heap_memory
 7209              		.section	.srodata.cst8,"aM",@progbits,8
 7210              		.align	3
 7211              	.LC1:
 7212 0000 00000000 		.word	0
 7213 0004 0000E040 		.word	1088421888
 7214              		.align	3
 7215              	.LC2:
 7216 0008 00000000 		.word	0
 7217 000c 00807640 		.word	1081507840
 7218              		.align	3
 7219              	.LC3:
 7220 0010 80004000 		.word	4194432
 7221 0014 2000003F 		.word	1056964640
 7222              		.section	.srodata.cst4,"aM",@progbits,4
 7223              		.align	2
 7224              	.LC4:
 7225 0000 0000A040 		.word	1084227584
 7226              		.align	2
 7227              	.LC5:
 7228 0004 00002042 		.word	1109393408
 7229              		.align	2
 7230              	.LC6:
 7231 0008 00007041 		.word	1097859072
 7232              		.align	2
 7233              	.LC7:
 7234 000c 0000F041 		.word	1106247680
 7235              		.align	2
 7236              	.LC8:
 7237 0010 00008040 		.word	1082130432
 7238              		.section	.rodata
 7239              		.align	2
 7240              		.set	.LANCHOR1,. + 0
 7243              	sin90:
 7244 0000 0000     		.half	0
 7245 0002 4706     		.half	1607
 7246 0004 8B0C     		.half	3211
 7247 0006 C712     		.half	4807
 7248 0008 F818     		.half	6392
 7249 000a 191F     		.half	7961
 7250 000c 2725     		.half	9511
 7251 000e 1E2B     		.half	11038
 7252 0010 FB30     		.half	12539
 7253 0012 B936     		.half	14009
 7254 0014 563C     		.half	15446
 7255 0016 CD41     		.half	16845
 7256 0018 1C47     		.half	18204
 7257 001a 3F4C     		.half	19519
 7258 001c 3351     		.half	20787
 7259 001e F455     		.half	22004
 7260 0020 815A     		.half	23169
 7261 0022 D65E     		.half	24278
 7262 0024 F162     		.half	25329
 7263 0026 CE66     		.half	26318
 7264 0028 6C6A     		.half	27244
 7265 002a C96D     		.half	28105
 7266 002c E170     		.half	28897
 7267 002e B573     		.half	29621
 7268 0030 4076     		.half	30272
 7269 0032 8378     		.half	30851
 7270 0034 7C7A     		.half	31356
 7271 0036 297C     		.half	31785
 7272 0038 897D     		.half	32137
 7273 003a 9C7E     		.half	32412
 7274 003c 617F     		.half	32609
 7275 003e D77F     		.half	32727
 7276 0040 FF7F     		.half	32767
 7277              		.data
 7278              		.align	2
 7279              		.set	.LANCHOR2,. + 0
 7282              	oled_8bit_init_seq:
 7283 0000 AEA032A1 		.string	"\256\2402\241"
 7283      00
 7284 0005 A200     		.string	"\242"
 7285 0007 A4A83FAD 		.ascii	"\244\250?\255\216\260\013\2611\263\360\212d\213x\214d\273:\276"
 7285      8EB00BB1 
 7285      31B3F08A 
 7285      648B788C 
 7285      64BB3ABE 
 7286 001b 3E870681 		.ascii	">\207\006\201\221\202P\203}\257"
 7286      91825083 
 7286      7DAF
 7287 0025 000000   		.zero	3
 7290              	front:
 7291              	# x:
 7292 0028 00000000 		.word	0
 7293              	# y:
 7294 002c 0A000000 		.word	10
 7295              	# z:
 7296 0030 00000000 		.word	0
 7297              	# x:
 7298 0034 0A000000 		.word	10
 7299              	# y:
 7300 0038 0A000000 		.word	10
 7301              	# z:
 7302 003c 00000000 		.word	0
 7303              	# x:
 7304 0040 0A000000 		.word	10
 7305              	# y:
 7306 0044 0A000000 		.word	10
 7307              	# z:
 7308 0048 00000000 		.word	0
 7309              	# x:
 7310 004c 0A000000 		.word	10
 7311              	# y:
 7312 0050 14000000 		.word	20
 7313              	# z:
 7314 0054 00000000 		.word	0
 7315              	# x:
 7316 0058 0A000000 		.word	10
 7317              	# y:
 7318 005c 14000000 		.word	20
 7319              	# z:
 7320 0060 00000000 		.word	0
 7321              	# x:
 7322 0064 00000000 		.word	0
 7323              	# y:
 7324 0068 14000000 		.word	20
 7325              	# z:
 7326 006c 00000000 		.word	0
 7327              	# x:
 7328 0070 00000000 		.word	0
 7329              	# y:
 7330 0074 14000000 		.word	20
 7331              	# z:
 7332 0078 00000000 		.word	0
 7333              	# x:
 7334 007c 00000000 		.word	0
 7335              	# y:
 7336 0080 0A000000 		.word	10
 7337              	# z:
 7338 0084 00000000 		.word	0
 7341              	back:
 7342              	# x:
 7343 0088 00000000 		.word	0
 7344              	# y:
 7345 008c 0A000000 		.word	10
 7346              	# z:
 7347 0090 0A000000 		.word	10
 7348              	# x:
 7349 0094 0A000000 		.word	10
 7350              	# y:
 7351 0098 0A000000 		.word	10
 7352              	# z:
 7353 009c 0A000000 		.word	10
 7354              	# x:
 7355 00a0 0A000000 		.word	10
 7356              	# y:
 7357 00a4 0A000000 		.word	10
 7358              	# z:
 7359 00a8 0A000000 		.word	10
 7360              	# x:
 7361 00ac 0A000000 		.word	10
 7362              	# y:
 7363 00b0 14000000 		.word	20
 7364              	# z:
 7365 00b4 0A000000 		.word	10
 7366              	# x:
 7367 00b8 0A000000 		.word	10
 7368              	# y:
 7369 00bc 14000000 		.word	20
 7370              	# z:
 7371 00c0 0A000000 		.word	10
 7372              	# x:
 7373 00c4 00000000 		.word	0
 7374              	# y:
 7375 00c8 14000000 		.word	20
 7376              	# z:
 7377 00cc 0A000000 		.word	10
 7378              	# x:
 7379 00d0 00000000 		.word	0
 7380              	# y:
 7381 00d4 14000000 		.word	20
 7382              	# z:
 7383 00d8 0A000000 		.word	10
 7384              	# x:
 7385 00dc 00000000 		.word	0
 7386              	# y:
 7387 00e0 0A000000 		.word	10
 7388              	# z:
 7389 00e4 0A000000 		.word	10
 7392              	left_bottom:
 7393              	# x:
 7394 00e8 00000000 		.word	0
 7395              	# y:
 7396 00ec 14000000 		.word	20
 7397              	# z:
 7398 00f0 00000000 		.word	0
 7399              	# x:
 7400 00f4 00000000 		.word	0
 7401              	# y:
 7402 00f8 14000000 		.word	20
 7403              	# z:
 7404 00fc 0A000000 		.word	10
 7407              	left_top:
 7408              	# x:
 7409 0100 00000000 		.word	0
 7410              	# y:
 7411 0104 0A000000 		.word	10
 7412              	# z:
 7413 0108 00000000 		.word	0
 7414              	# x:
 7415 010c 00000000 		.word	0
 7416              	# y:
 7417 0110 0A000000 		.word	10
 7418              	# z:
 7419 0114 0A000000 		.word	10
 7422              	right_bottom:
 7423              	# x:
 7424 0118 0A000000 		.word	10
 7425              	# y:
 7426 011c 14000000 		.word	20
 7427              	# z:
 7428 0120 00000000 		.word	0
 7429              	# x:
 7430 0124 0A000000 		.word	10
 7431              	# y:
 7432 0128 14000000 		.word	20
 7433              	# z:
 7434 012c 0A000000 		.word	10
 7437              	right_top:
 7438              	# x:
 7439 0130 0A000000 		.word	10
 7440              	# y:
 7441 0134 0A000000 		.word	10
 7442              	# z:
 7443 0138 00000000 		.word	0
 7444              	# x:
 7445 013c 0A000000 		.word	10
 7446              	# y:
 7447 0140 0A000000 		.word	10
 7448              	# z:
 7449 0144 0A000000 		.word	10
 7452              	roof:
 7453              	# x:
 7454 0148 05000000 		.word	5
 7455              	# y:
 7456 014c 05000000 		.word	5
 7457              	# z:
 7458 0150 00000000 		.word	0
 7459              	# x:
 7460 0154 05000000 		.word	5
 7461              	# y:
 7462 0158 05000000 		.word	5
 7463              	# z:
 7464 015c 0A000000 		.word	10
 7465              		.bss
 7466              		.align	2
 7467              		.set	.LANCHOR0,. + 0
 7470              	heap_memory:
 7471 0000 00000000 		.zero	1024
 7471      00000000 
 7471      00000000 
 7471      00000000 
 7471      00000000 
 7474              	framebuffer:
 7475 0400 00000000 		.zero	19200
 7475      00000000 
 7475      00000000 
 7475      00000000 
 7475      00000000 
 7476              		.section	.sbss,"aw",@nobits
 7477              		.align	2
 7480              	heap_memory_used:
 7481 0000 00000000 		.zero	4
 7482              		.ident	"GCC: (GNU) 11.1.0"
