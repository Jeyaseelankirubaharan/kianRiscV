   1              		.file	"julia_hdmi.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              	# GNU C17 (GCC) version 11.1.0 (riscv32-unknown-elf)
   7              	#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   8              	# warning: GMP header version 6.2.0 differs from library version 6.3.0.
   9              	# warning: MPFR header version 4.0.2 differs from library version 4.2.1.
  10              	# warning: MPC header version 1.1.0 differs from library version 1.3.1.
  11              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  12              	# options passed: -march=rv32im -mabi=ilp32 -mtune=rocket -march=rv32im -O3 -fno-pic -fno-stack-pro
  13              		.text
  14              		.align	2
  15              		.globl	dma_action
  17              	dma_action:
  18              	# kianv_stdlib_hdmi.h:50:   *( (volatile uint32_t*) DMA_SRC  ) = src;
  19 0000 B7070030 		li	a5,805306368		# tmp77,
  20 0004 23A6A702 		sw	a0,44(a5)	# src, MEM[(volatile uint32_t *)805306412B]
  21              	# kianv_stdlib_hdmi.h:51:   *( (volatile uint32_t*) DMA_DST  ) = dst;
  22 0008 23A8B702 		sw	a1,48(a5)	# dst, MEM[(volatile uint32_t *)805306416B]
  23              	# kianv_stdlib_hdmi.h:52:   *( (volatile uint32_t*) DMA_LEN  ) = len;
  24 000c 23AAC702 		sw	a2,52(a5)	# len, MEM[(volatile uint32_t *)805306420B]
  25              	# kianv_stdlib_hdmi.h:53:   *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
  26 0010 23ACD702 		sw	a3,56(a5)	# ctrl, MEM[(volatile uint32_t *)805306424B]
  27              	# kianv_stdlib_hdmi.h:54: }
  28 0014 67800000 		ret	
  30              		.align	2
  31              		.globl	set_reg
  33              	set_reg:
  34              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
  35 0018 03270500 		lw	a4,0(a0)		# _1,* p
  36              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
  37 001c 93071000 		li	a5,1		# tmp85,
  38 0020 B397B700 		sll	a5,a5,a1	# tmp88, _12, tmp85
  39              	# kianv_stdlib_hdmi.h:57:     if (bit) {
  40 0024 63080600 		beq	a2,zero,.L4	#, tmp89,,
  41              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
  42 0028 B3E7E700 		or	a5,a5,a4	# _1, _5, _12
  43 002c 2320F500 		sw	a5,0(a0)	# _5,* p
  44 0030 67800000 		ret	
  45              	.L4:
  46              	# kianv_stdlib_hdmi.h:60:       *p &= ~( 0x01 << (gpio & 0x1f));
  47 0034 93C7F7FF 		not	a5,a5	# tmp86, _12
  48              	# kianv_stdlib_hdmi.h:60:       *p &= ~( 0x01 << (gpio & 0x1f));
  49 0038 B3F7E700 		and	a5,a5,a4	# _13, _18, tmp86
  50 003c 2320F500 		sw	a5,0(a0)	# _18,* p
  51              	# kianv_stdlib_hdmi.h:62: }
  52 0040 67800000 		ret	
  54              		.align	2
  55              		.globl	gpio_set_value
  57              	gpio_set_value:
  58              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
  59 0044 37070030 		li	a4,805306368		# tmp86,
  60 0048 8326C701 		lw	a3,28(a4)		# _4,
  61              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
  62 004c 93071000 		li	a5,1		# tmp84,
  63 0050 B397A700 		sll	a5,a5,a0	# tmp94, _19, tmp84
  64              	# kianv_stdlib_hdmi.h:57:     if (bit) {
  65 0054 63880500 		beq	a1,zero,.L7	#, tmp95,,
  66              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
  67 0058 B3E7D700 		or	a5,a5,a3	# _4, _8, _19
  68 005c 232EF700 		sw	a5,28(a4)	# _8,
  69 0060 67800000 		ret	
  70              	.L7:
  71              	# kianv_stdlib_hdmi.h:60:       *p &= ~( 0x01 << (gpio & 0x1f));
  72 0064 93C7F7FF 		not	a5,a5	# tmp91, _19
  73              	# kianv_stdlib_hdmi.h:60:       *p &= ~( 0x01 << (gpio & 0x1f));
  74 0068 B3F7D700 		and	a5,a5,a3	# _12, _17, tmp91
  75 006c 232EF700 		sw	a5,28(a4)	# _17,
  76              	# kianv_stdlib_hdmi.h:66: }
  77 0070 67800000 		ret	
  79              		.align	2
  80              		.globl	gpio_get_input_value
  82              	gpio_get_input_value:
  83              	# kianv_stdlib_hdmi.h:69:   uint32_t read = IO_IN(GPIO_INPUT);
  84 0074 B7070030 		li	a5,805306368		# tmp77,
  85 0078 83A70702 		lw	a5,32(a5)		# read, MEM[(volatile uint32_t *)805306400B]
  86              	# kianv_stdlib_hdmi.h:72:   return ((read >> gpio) & 0x01);
  87 007c 33D5A700 		srl	a0,a5,a0	# tmp80, tmp79, read
  88              	# kianv_stdlib_hdmi.h:73: }
  89 0080 13751500 		andi	a0,a0,1	#,, tmp79
  90 0084 67800000 		ret	
  92              		.align	2
  93              		.globl	gpio_set_direction
  95              	gpio_set_direction:
  96              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
  97 0088 37070030 		li	a4,805306368		# tmp86,
  98 008c 83264701 		lw	a3,20(a4)		# _4,
  99              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
 100 0090 93071000 		li	a5,1		# tmp84,
 101 0094 B397A700 		sll	a5,a5,a0	# tmp94, _19, tmp84
 102              	# kianv_stdlib_hdmi.h:57:     if (bit) {
 103 0098 63880500 		beq	a1,zero,.L11	#, tmp95,,
 104              	# kianv_stdlib_hdmi.h:58:       *p |=  (0x01 << (gpio & 0x1f));
 105 009c B3E7D700 		or	a5,a5,a3	# _4, _8, _19
 106 00a0 232AF700 		sw	a5,20(a4)	# _8,
 107 00a4 67800000 		ret	
 108              	.L11:
 109              	# kianv_stdlib_hdmi.h:60:       *p &= ~( 0x01 << (gpio & 0x1f));
 110 00a8 93C7F7FF 		not	a5,a5	# tmp91, _19
 111              	# kianv_stdlib_hdmi.h:60:       *p &= ~( 0x01 << (gpio & 0x1f));
 112 00ac B3F7D700 		and	a5,a5,a3	# _12, _17, tmp91
 113 00b0 232AF700 		sw	a5,20(a4)	# _17,
 114              	# kianv_stdlib_hdmi.h:77: }
 115 00b4 67800000 		ret	
 117              		.align	2
 118              		.globl	get_cycles
 120              	get_cycles:
 121 00b8 130101FF 		addi	sp,sp,-16	#,,
 122              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 123              	 #APP
 124              	# 83 "kianv_stdlib_hdmi.h" 1
   1              	#include <stdint.h>
   2              	#include <math.h>
   3              	
   4              	/* kian hardware register */
   5              	#define IO_BASE 0x30000000
   6              	#define UART_TX             (volatile uint32_t *) (IO_BASE + 0x0000)
   7              	#define UART_READY          (volatile uint32_t *) (IO_BASE + 0x0000)
   8              	#define VIDEOENABLE         (volatile uint32_t *) (IO_BASE + 0x0008)
   9              	#define VIDEO               (volatile uint32_t *) (IO_BASE + 0x0008)
  10              	#define VIDEO_RAW           (volatile uint32_t *) (IO_BASE + 0x000C)
  11              	#define CPU_FREQ            (volatile uint32_t *) (IO_BASE + 0x0010)
  12              	// gpio hack stuff
  13              	#define GPIO_DIR            ( volatile uint32_t  *) (IO_BASE + 0x0014)
  14              	#define GPIO_PULLUP         ( volatile uint32_t  *) (IO_BASE + 0x0018) // not implemented
  15              	#define GPIO_OUTPUT         ( volatile uint32_t  *) (IO_BASE + 0x001C)
  16              	#define GPIO_INPUT          ( volatile uint32_t  *) (IO_BASE + 0x0020)
  17              	#define IO_OUT(reg, value) *((volatile uint32_t  *) (reg)) = (value)
  18              	#define IO_IN(reg)         *((volatile uint32_t  *) reg)
  19              	// dma stuff
  20              	#define DMA_SRC             ( volatile uint32_t  *) (IO_BASE + 0x002C)
  21              	#define DMA_DST             ( volatile uint32_t  *) (IO_BASE + 0x0030)
  22              	#define DMA_LEN             ( volatile uint32_t  *) (IO_BASE + 0x0034)
  23              	#define DMA_CTRL            ( volatile uint32_t  *) (IO_BASE + 0x0038)
  24              	#define DMA_MEMCPY          (1 << 0)
  25              	#define DMA_MEMSET          (1 << 1)
  26              	
  27              	#define GPIO_INPUT_PIN  0
  28              	#define GPIO_OUTPUT_PIN 1
  29              	//#define RV32_FASTCODE __attribute((section(".fastcode")))
  30              	#define RV32_FASTCODE
  31              	
  32              	//__attribute((section(".fastcode")))
  33              	
  34              	#define RED   "\x1B[31m"
  35              	#define GRN   "\x1B[32m"
  36              	#define YEL   "\x1B[33m"
  37              	#define BLU   "\x1B[34m"
  38              	#define MAG   "\x1B[35m"
  39              	#define CYN   "\x1B[36m"
  40              	#define WHT   "\x1B[37m"
  41              	#define RESET "\x1B[0m"
  42              	
  43              	#define CLS       "\x1B[2J"
  44              	#define BOLD      "\x1B[1m"
  45              	#define BLINK     "\x1B[5m"
  46              	#define BLINK_OFF "\x1B[25m"
  47              	
  48              	// dma stuff
  49              	void dma_action(uint32_t src, uint32_t dst, uint32_t len, uint32_t ctrl) {
  50              	  *( (volatile uint32_t*) DMA_SRC  ) = src;
  51              	  *( (volatile uint32_t*) DMA_DST  ) = dst;
  52              	  *( (volatile uint32_t*) DMA_LEN  ) = len;
  53              	  *( (volatile uint32_t*) DMA_CTRL ) = ctrl;
  54              	}
  55              	
  56              	void set_reg(volatile uint32_t *p, int gpio, int bit) {
  57              	    if (bit) {
  58              	      *p |=  (0x01 << (gpio & 0x1f));
  59              	    } else {
  60              	      *p &= ~( 0x01 << (gpio & 0x1f));
  61              	    }
  62              	}
  63              	
  64              	void gpio_set_value(int gpio, int bit) {
  65              	    set_reg(GPIO_OUTPUT, gpio, bit);
  66              	}
  67              	
  68              	uint32_t gpio_get_input_value(int gpio) {
  69              	  uint32_t read = IO_IN(GPIO_INPUT);
  70              	
  71              	  //  return ((read & (1<<gpio)) >> gpio);
  72              	  return ((read >> gpio) & 0x01);
  73              	}
  74              	
  75              	void gpio_set_direction(int gpio, int bit) {
  76              	    set_reg(GPIO_DIR, gpio, bit);
  77              	}
  78              	
  79              	uint64_t get_cycles() {
  80              	  volatile uint32_t tmph0;
  81              	  volatile uint32_t tmpl0;
  82              	
  83 00bc F32700C8 	  asm volatile ("rdcycleh %0" : "=r"(tmph0));
  84              	  asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 125              		rdcycleh a5	# tmp78
 126              	# 0 "" 2
 127              	 #NO_APP
 128 00c0 2324F100 		sw	a5,8(sp)	# tmp78, tmph0
 129              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 130              	 #APP
 131              	# 84 "kianv_stdlib_hdmi.h" 1
  85              	
 132              		rdcycle  a5	# tmp79
 133              	# 0 "" 2
 134              	 #NO_APP
 135 00c8 2326F100 		sw	a5,12(sp)	# tmp79, tmpl0
 136              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 137 00cc 83258100 		lw	a1,8(sp)		# tmph0.0_1, tmph0
 138              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 139 00d0 0325C100 		lw	a0,12(sp)		# tmpl0.1_4, tmpl0
 140              	# kianv_stdlib_hdmi.h:88: }
 141 00d4 13010101 		addi	sp,sp,16	#,,
 142 00d8 67800000 		jr	ra		#
 144              		.align	2
 145              		.globl	wait_cycles
 147              	wait_cycles:
 148 00dc 130101FF 		addi	sp,sp,-16	#,,
 149              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 150              	 #APP
 151              	# 83 "kianv_stdlib_hdmi.h" 1
 152              		rdcycleh a5	# tmp86
 153              	# 0 "" 2
 154              	 #NO_APP
 155 00e4 2320F100 		sw	a5,0(sp)	# tmp86, tmph0
 156              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 157              	 #APP
 158              	# 84 "kianv_stdlib_hdmi.h" 1
 159              		rdcycle  a5	# tmp87
 160              	# 0 "" 2
 161              	 #NO_APP
 162 00ec 2322F100 		sw	a5,4(sp)	# tmp87, tmpl0
 163              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 164 00f0 83270100 		lw	a5,0(sp)		# tmph0.0_5, tmph0
 165              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 166 00f4 03264100 		lw	a2,4(sp)		# tmpl0.1_8, tmpl0
 167              	# kianv_stdlib_hdmi.h:95:   uint64_t lim = get_cycles() + wait;
 168 00f8 B387B700 		add	a5,a5,a1	# wait, tmp126, tmph0.0_5
 169 00fc 3306C500 		add	a2,a0,a2	# tmpl0.1_8, tmp129, wait
 170 0100 3335A600 		sltu	a0,a2,a0	# wait, tmp98, tmp129
 171 0104 3307F500 		add	a4,a0,a5	# tmp126, tmp100, tmp98
 172              	.L18:
 173              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 174              	 #APP
 175              	# 83 "kianv_stdlib_hdmi.h" 1
 176              		rdcycleh a5	# tmp101
 177              	# 0 "" 2
 178              	 #NO_APP
 179 010c 2324F100 		sw	a5,8(sp)	# tmp101, tmph0
 180              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 181              	 #APP
 182              	# 84 "kianv_stdlib_hdmi.h" 1
 183              		rdcycle  a5	# tmp102
 184              	# 0 "" 2
 185              	 #NO_APP
 186 0114 2326F100 		sw	a5,12(sp)	# tmp102, tmpl0
 187              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 188 0118 83278100 		lw	a5,8(sp)		# tmph0.0_11, tmph0
 189              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 190 011c 8326C100 		lw	a3,12(sp)		# tmpl0.1_14, tmpl0
 191              	# kianv_stdlib_hdmi.h:96:   while (get_cycles() < lim)
 192 0120 E3E4E7FE 		bgtu	a4,a5,.L18	#, tmp100, tmph0.0_11,
 193 0124 6314F700 		bne	a4,a5,.L15	#, tmp100, tmph0.0_11,
 194 0128 E3E0C6FE 		bgtu	a2,a3,.L18	#, tmp129, tmpl0.1_14,
 195              	.L15:
 196              	# kianv_stdlib_hdmi.h:98: }
 197 012c 13010101 		addi	sp,sp,16	#,,
 198 0130 67800000 		jr	ra		#
 200              		.align	2
 201              		.globl	usleep
 203              	usleep:
 204              	# kianv_stdlib_hdmi.h:101:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 205 0134 63080506 		beq	a0,zero,.L29	#, us,,
 206              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 207 0138 B7070030 		li	a5,805306368		# tmp91,
 208              	# kianv_stdlib_hdmi.h:100: void usleep(uint32_t us) {
 209 013c 130101FF 		addi	sp,sp,-16	#,,
 210              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 211 0140 83A70701 		lw	a5,16(a5)		# _20, MEM[(volatile uint32_t *)805306384B]
 212              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 213              	 #APP
 214              	# 83 "kianv_stdlib_hdmi.h" 1
 215              		rdcycleh a4	# tmp92
 216              	# 0 "" 2
 217              	 #NO_APP
 218 0148 2324E100 		sw	a4,8(sp)	# tmp92, tmph0
 219              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 220              	 #APP
 221              	# 84 "kianv_stdlib_hdmi.h" 1
 222              		rdcycle  a3	# tmp93
 223              	# 0 "" 2
 224              	# kianv_stdlib_hdmi.h:101:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 225              	 #NO_APP
 226 0150 37470F00 		li	a4,999424		# tmp97,
 227 0154 13070724 		addi	a4,a4,576	#, tmp96, tmp97
 228 0158 B3D7E702 		divu	a5,a5,a4	# tmp96, tmp95, _20
 229              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 230 015c 2326D100 		sw	a3,12(sp)	# tmp93, tmpl0
 231              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 232 0160 03278100 		lw	a4,8(sp)		# tmph0.0_7, tmph0
 233              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 234 0164 0326C100 		lw	a2,12(sp)		# tmpl0.1_10, tmpl0
 235              	# kianv_stdlib_hdmi.h:101:   if (us) wait_cycles(us * (get_cpu_freq() / 1000000));
 236 0168 B387A702 		mul	a5,a5,a0	# tmp98, tmp95, us
 237              	# kianv_stdlib_hdmi.h:95:   uint64_t lim = get_cycles() + wait;
 238 016c 3386C700 		add	a2,a5,a2	# tmpl0.1_10, tmp141, tmp98
 239 0170 B337F600 		sltu	a5,a2,a5	# tmp98, tmp110, tmp141
 240 0174 B387E700 		add	a5,a5,a4	# tmph0.0_7, tmp112, tmp110
 241              	.L26:
 242              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 243              	 #APP
 244              	# 83 "kianv_stdlib_hdmi.h" 1
 245              		rdcycleh a4	# tmp113
 246              	# 0 "" 2
 247              	 #NO_APP
 248 017c 2320E100 		sw	a4,0(sp)	# tmp113, tmph0
 249              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 250              	 #APP
 251              	# 84 "kianv_stdlib_hdmi.h" 1
 252              		rdcycle  a4	# tmp114
 253              	# 0 "" 2
 254              	 #NO_APP
 255 0184 2322E100 		sw	a4,4(sp)	# tmp114, tmpl0
 256              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 257 0188 03270100 		lw	a4,0(sp)		# tmph0.0_14, tmph0
 258              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 259 018c 83264100 		lw	a3,4(sp)		# tmpl0.1_17, tmpl0
 260              	# kianv_stdlib_hdmi.h:96:   while (get_cycles() < lim)
 261 0190 E364F7FE 		bgtu	a5,a4,.L26	#, tmp112, tmph0.0_14,
 262 0194 6394E700 		bne	a5,a4,.L20	#, tmp112, tmph0.0_14,
 263 0198 E3E0C6FE 		bgtu	a2,a3,.L26	#, tmp141, tmpl0.1_17,
 264              	.L20:
 265              	# kianv_stdlib_hdmi.h:102: }
 266 019c 13010101 		addi	sp,sp,16	#,,
 267 01a0 67800000 		jr	ra		#
 268              	.L29:
 269 01a4 67800000 		ret	
 271              		.align	2
 272              		.globl	msleep
 274              	msleep:
 275              	# kianv_stdlib_hdmi.h:105:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 276 01a8 63060506 		beq	a0,zero,.L41	#, ms,,
 277              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 278 01ac B7070030 		li	a5,805306368		# tmp91,
 279              	# kianv_stdlib_hdmi.h:104: void msleep(uint32_t ms) {
 280 01b0 130101FF 		addi	sp,sp,-16	#,,
 281              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 282 01b4 83A70701 		lw	a5,16(a5)		# _20, MEM[(volatile uint32_t *)805306384B]
 283              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 284              	 #APP
 285              	# 83 "kianv_stdlib_hdmi.h" 1
 286              		rdcycleh a4	# tmp92
 287              	# 0 "" 2
 288              	 #NO_APP
 289 01bc 2324E100 		sw	a4,8(sp)	# tmp92, tmph0
 290              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 291              	 #APP
 292              	# 84 "kianv_stdlib_hdmi.h" 1
 293              		rdcycle  a4	# tmp93
 294              	# 0 "" 2
 295              	# kianv_stdlib_hdmi.h:105:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 296              	 #NO_APP
 297 01c4 9306803E 		li	a3,1000		# tmp95,
 298 01c8 B3D7D702 		divu	a5,a5,a3	# tmp95, tmp96, _20
 299              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 300 01cc 2326E100 		sw	a4,12(sp)	# tmp93, tmpl0
 301              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 302 01d0 03278100 		lw	a4,8(sp)		# tmph0.0_7, tmph0
 303              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 304 01d4 0326C100 		lw	a2,12(sp)		# tmpl0.1_10, tmpl0
 305              	# kianv_stdlib_hdmi.h:105:   if (ms) wait_cycles(ms * (get_cpu_freq() / 1000));
 306 01d8 B387A702 		mul	a5,a5,a0	# tmp97, tmp96, ms
 307              	# kianv_stdlib_hdmi.h:95:   uint64_t lim = get_cycles() + wait;
 308 01dc 3386C700 		add	a2,a5,a2	# tmpl0.1_10, tmp140, tmp97
 309 01e0 B337F600 		sltu	a5,a2,a5	# tmp97, tmp109, tmp140
 310 01e4 B387E700 		add	a5,a5,a4	# tmph0.0_7, tmp111, tmp109
 311              	.L38:
 312              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 313              	 #APP
 314              	# 83 "kianv_stdlib_hdmi.h" 1
 315              		rdcycleh a4	# tmp112
 316              	# 0 "" 2
 317              	 #NO_APP
 318 01ec 2320E100 		sw	a4,0(sp)	# tmp112, tmph0
 319              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 320              	 #APP
 321              	# 84 "kianv_stdlib_hdmi.h" 1
 322              		rdcycle  a4	# tmp113
 323              	# 0 "" 2
 324              	 #NO_APP
 325 01f4 2322E100 		sw	a4,4(sp)	# tmp113, tmpl0
 326              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 327 01f8 03270100 		lw	a4,0(sp)		# tmph0.0_14, tmph0
 328              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 329 01fc 83264100 		lw	a3,4(sp)		# tmpl0.1_17, tmpl0
 330              	# kianv_stdlib_hdmi.h:96:   while (get_cycles() < lim)
 331 0200 E364F7FE 		bgtu	a5,a4,.L38	#, tmp111, tmph0.0_14,
 332 0204 6394E700 		bne	a5,a4,.L32	#, tmp111, tmph0.0_14,
 333 0208 E3E0C6FE 		bgtu	a2,a3,.L38	#, tmp140, tmpl0.1_17,
 334              	.L32:
 335              	# kianv_stdlib_hdmi.h:106: }
 336 020c 13010101 		addi	sp,sp,16	#,,
 337 0210 67800000 		jr	ra		#
 338              	.L41:
 339 0214 67800000 		ret	
 341              		.align	2
 342              		.globl	sleep
 344              	sleep:
 345              	# kianv_stdlib_hdmi.h:109:   if (sec) wait_cycles(sec * get_cpu_freq());
 346 0218 63020506 		beq	a0,zero,.L53	#, sec,,
 347              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 348 021c B7070030 		li	a5,805306368		# tmp90,
 349              	# kianv_stdlib_hdmi.h:108: void sleep(uint32_t sec) {
 350 0220 130101FF 		addi	sp,sp,-16	#,,
 351              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 352 0224 03A70701 		lw	a4,16(a5)		# _19, MEM[(volatile uint32_t *)805306384B]
 353              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 354              	 #APP
 355              	# 83 "kianv_stdlib_hdmi.h" 1
 356              		rdcycleh a5	# tmp91
 357              	# 0 "" 2
 358              	 #NO_APP
 359 022c 2324F100 		sw	a5,8(sp)	# tmp91, tmph0
 360              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 361              	 #APP
 362              	# 84 "kianv_stdlib_hdmi.h" 1
 363              		rdcycle  a5	# tmp92
 364              	# 0 "" 2
 365              	# kianv_stdlib_hdmi.h:109:   if (sec) wait_cycles(sec * get_cpu_freq());
 366              	 #NO_APP
 367 0234 3305E502 		mul	a0,a0,a4	# tmp101, sec, _19
 368              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 369 0238 2326F100 		sw	a5,12(sp)	# tmp92, tmpl0
 370              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 371 023c 83278100 		lw	a5,8(sp)		# tmph0.0_6, tmph0
 372              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 373 0240 0327C100 		lw	a4,12(sp)		# tmpl0.1_9, tmpl0
 374              	# kianv_stdlib_hdmi.h:95:   uint64_t lim = get_cycles() + wait;
 375 0244 3305A700 		add	a0,a4,a0	# tmp101, tmp136, tmpl0.1_9
 376 0248 3337E500 		sltu	a4,a0,a4	# tmpl0.1_9, tmp105, tmp136
 377 024c 3307F700 		add	a4,a4,a5	# tmph0.0_6, tmp107, tmp105
 378              	.L50:
 379              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 380              	 #APP
 381              	# 83 "kianv_stdlib_hdmi.h" 1
 382              		rdcycleh a5	# tmp108
 383              	# 0 "" 2
 384              	 #NO_APP
 385 0254 2320F100 		sw	a5,0(sp)	# tmp108, tmph0
 386              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 387              	 #APP
 388              	# 84 "kianv_stdlib_hdmi.h" 1
 389              		rdcycle  a5	# tmp109
 390              	# 0 "" 2
 391              	 #NO_APP
 392 025c 2322F100 		sw	a5,4(sp)	# tmp109, tmpl0
 393              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 394 0260 83270100 		lw	a5,0(sp)		# tmph0.0_13, tmph0
 395              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 396 0264 83264100 		lw	a3,4(sp)		# tmpl0.1_16, tmpl0
 397              	# kianv_stdlib_hdmi.h:96:   while (get_cycles() < lim)
 398 0268 E3E4E7FE 		bgtu	a4,a5,.L50	#, tmp107, tmph0.0_13,
 399 026c 6314F700 		bne	a4,a5,.L44	#, tmp107, tmph0.0_13,
 400 0270 E3E0A6FE 		bgtu	a0,a3,.L50	#, tmp136, tmpl0.1_16,
 401              	.L44:
 402              	# kianv_stdlib_hdmi.h:110: }
 403 0274 13010101 		addi	sp,sp,16	#,,
 404 0278 67800000 		jr	ra		#
 405              	.L53:
 406 027c 67800000 		ret	
 408              		.globl	__udivdi3
 409              		.align	2
 410              		.globl	nanoseconds
 412              	nanoseconds:
 413 0280 130101FE 		addi	sp,sp,-32	#,,
 414 0284 232E1100 		sw	ra,28(sp)	#,
 415              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 416              	 #APP
 417              	# 83 "kianv_stdlib_hdmi.h" 1
 418              		rdcycleh a5	# tmp82
 419              	# 0 "" 2
 420              	 #NO_APP
 421 028c 2324F100 		sw	a5,8(sp)	# tmp82, tmph0
 422              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 423              	 #APP
 424              	# 84 "kianv_stdlib_hdmi.h" 1
 425              		rdcycle  a5	# tmp83
 426              	# 0 "" 2
 427              	 #NO_APP
 428 0294 2326F100 		sw	a5,12(sp)	# tmp83, tmpl0
 429              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 430 0298 B7070030 		li	a5,805306368		# tmp85,
 431              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 432 029c 83258100 		lw	a1,8(sp)		# tmph0.0_6, tmph0
 433              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 434 02a0 0325C100 		lw	a0,12(sp)		# tmpl0.1_9, tmpl0
 435              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 436 02a4 03A60701 		lw	a2,16(a5)		# _5, MEM[(volatile uint32_t *)805306384B]
 437              	# kianv_stdlib_hdmi.h:113:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 438 02a8 B7470F00 		li	a5,999424		# tmp98,
 439 02ac 93870724 		addi	a5,a5,576	#, tmp97, tmp98
 440              	# kianv_stdlib_hdmi.h:113:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000000);
 441 02b0 3356F602 		divu	a2,a2,a5	# tmp97,, _5
 442 02b4 93060000 		li	a3,0		#,
 443 02b8 97000000 		call	__udivdi3		#
 443      E7800000 
 444              	# kianv_stdlib_hdmi.h:114: }
 445 02c0 8320C101 		lw	ra,28(sp)		#,
 446 02c4 13010102 		addi	sp,sp,32	#,,
 447 02c8 67800000 		jr	ra		#
 449              		.align	2
 450              		.globl	milliseconds
 452              	milliseconds:
 453 02cc 130101FE 		addi	sp,sp,-32	#,,
 454 02d0 232E1100 		sw	ra,28(sp)	#,
 455              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 456              	 #APP
 457              	# 83 "kianv_stdlib_hdmi.h" 1
 458              		rdcycleh a5	# tmp82
 459              	# 0 "" 2
 460              	 #NO_APP
 461 02d8 2324F100 		sw	a5,8(sp)	# tmp82, tmph0
 462              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 463              	 #APP
 464              	# 84 "kianv_stdlib_hdmi.h" 1
 465              		rdcycle  a5	# tmp83
 466              	# 0 "" 2
 467              	 #NO_APP
 468 02e0 2326F100 		sw	a5,12(sp)	# tmp83, tmpl0
 469              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 470 02e4 B7070030 		li	a5,805306368		# tmp85,
 471              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 472 02e8 83258100 		lw	a1,8(sp)		# tmph0.0_6, tmph0
 473              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 474 02ec 0325C100 		lw	a0,12(sp)		# tmpl0.1_9, tmpl0
 475              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 476 02f0 03A60701 		lw	a2,16(a5)		# _5, MEM[(volatile uint32_t *)805306384B]
 477              	# kianv_stdlib_hdmi.h:117:   return get_cycles() / (uint64_t) (get_cpu_freq() / 1000);
 478 02f4 9307803E 		li	a5,1000		# tmp96,
 479 02f8 93060000 		li	a3,0		#,
 480 02fc 3356F602 		divu	a2,a2,a5	# tmp96,, _5
 481 0300 97000000 		call	__udivdi3		#
 481      E7800000 
 482              	# kianv_stdlib_hdmi.h:118: }
 483 0308 8320C101 		lw	ra,28(sp)		#,
 484 030c 13010102 		addi	sp,sp,32	#,,
 485 0310 67800000 		jr	ra		#
 487              		.align	2
 488              		.globl	seconds
 490              	seconds:
 491 0314 130101FE 		addi	sp,sp,-32	#,,
 492 0318 232E1100 		sw	ra,28(sp)	#,
 493              	# kianv_stdlib_hdmi.h:83:   asm volatile ("rdcycleh %0" : "=r"(tmph0));
 494              	 #APP
 495              	# 83 "kianv_stdlib_hdmi.h" 1
 496              		rdcycleh a5	# tmp81
 497              	# 0 "" 2
 498              	 #NO_APP
 499 0320 2324F100 		sw	a5,8(sp)	# tmp81, tmph0
 500              	# kianv_stdlib_hdmi.h:84:   asm volatile ("rdcycle  %0" : "=r"(tmpl0));
 501              	 #APP
 502              	# 84 "kianv_stdlib_hdmi.h" 1
 503              		rdcycle  a5	# tmp82
 504              	# 0 "" 2
 505              	 #NO_APP
 506 0328 2326F100 		sw	a5,12(sp)	# tmp82, tmpl0
 507              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 508 032c B7070030 		li	a5,805306368		# tmp84,
 509              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 510 0330 83258100 		lw	a1,8(sp)		# tmph0.0_5, tmph0
 511              	# kianv_stdlib_hdmi.h:86:   return ((uint64_t)(tmph0)<<32) + tmpl0;
 512 0334 0325C100 		lw	a0,12(sp)		# tmpl0.1_8, tmpl0
 513              	# kianv_stdlib_hdmi.h:91:   return *((volatile uint32_t*) CPU_FREQ);
 514 0338 03A60701 		lw	a2,16(a5)		# _4, MEM[(volatile uint32_t *)805306384B]
 515              	# kianv_stdlib_hdmi.h:121:   return get_cycles() / (uint64_t) (get_cpu_freq());
 516 033c 93060000 		li	a3,0		#,
 517 0340 97000000 		call	__udivdi3		#
 517      E7800000 
 518              	# kianv_stdlib_hdmi.h:122: }
 519 0348 8320C101 		lw	ra,28(sp)		#,
 520 034c 13010102 		addi	sp,sp,32	#,,
 521 0350 67800000 		jr	ra		#
 523              		.align	2
 524              		.globl	putchar
 526              	putchar:
 527              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 528 0354 37070030 		li	a4,805306368		# tmp76,
 529              	.L63:
 530              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 531 0358 83270700 		lw	a5,0(a4)		# _2, MEM[(volatile uint32_t *)805306368B]
 532              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 533 035c E38E07FE 		beq	a5,zero,.L63	#, _2,,
 534              	# kianv_stdlib_hdmi.h:127:   *((volatile uint32_t*) UART_TX) = c;
 535 0360 2320A700 		sw	a0,0(a4)	# c, MEM[(volatile uint32_t *)805306368B]
 536              	# kianv_stdlib_hdmi.h:128:    if (c == 13) {
 537 0364 9307D000 		li	a5,13		# tmp78,
 538 0368 6304F500 		beq	a0,a5,.L70	#, c, tmp78,
 539              	# kianv_stdlib_hdmi.h:133: }
 540 036c 67800000 		ret	
 541              	.L70:
 542              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 543 0370 37070030 		li	a4,805306368		# tmp79,
 544              	.L65:
 545 0374 83270700 		lw	a5,0(a4)		# _8, MEM[(volatile uint32_t *)805306368B]
 546              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 547 0378 E38E07FE 		beq	a5,zero,.L65	#, _8,,
 548              	# kianv_stdlib_hdmi.h:131:     *((volatile uint32_t*) UART_TX) = 10;
 549 037c 9307A000 		li	a5,10		# tmp81,
 550 0380 2320F700 		sw	a5,0(a4)	# tmp81, MEM[(volatile uint32_t *)805306368B]
 551              	# kianv_stdlib_hdmi.h:133: }
 552 0384 67800000 		ret	
 554              		.align	2
 555              		.globl	print_chr
 557              	print_chr:
 558              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 559 0388 37070030 		li	a4,805306368		# tmp76,
 560              	.L72:
 561 038c 83270700 		lw	a5,0(a4)		# _3, MEM[(volatile uint32_t *)805306368B]
 562              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 563 0390 E38E07FE 		beq	a5,zero,.L72	#, _3,,
 564              	# kianv_stdlib_hdmi.h:127:   *((volatile uint32_t*) UART_TX) = c;
 565 0394 2320A700 		sw	a0,0(a4)	# ch, MEM[(volatile uint32_t *)805306368B]
 566              	# kianv_stdlib_hdmi.h:128:    if (c == 13) {
 567 0398 9307D000 		li	a5,13		# tmp78,
 568 039c 6304F500 		beq	a0,a5,.L79	#, ch, tmp78,
 569              	# kianv_stdlib_hdmi.h:137: }
 570 03a0 67800000 		ret	
 571              	.L79:
 572              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 573 03a4 37070030 		li	a4,805306368		# tmp79,
 574              	.L74:
 575 03a8 83270700 		lw	a5,0(a4)		# _8, MEM[(volatile uint32_t *)805306368B]
 576              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 577 03ac E38E07FE 		beq	a5,zero,.L74	#, _8,,
 578              	# kianv_stdlib_hdmi.h:131:     *((volatile uint32_t*) UART_TX) = 10;
 579 03b0 9307A000 		li	a5,10		# tmp81,
 580 03b4 2320F700 		sw	a5,0(a4)	# tmp81, MEM[(volatile uint32_t *)805306368B]
 581              	# kianv_stdlib_hdmi.h:137: }
 582 03b8 67800000 		ret	
 584              		.align	2
 585              		.globl	print_char
 587              	print_char:
 588 03bc 37070030 		li	a4,805306368		# tmp76,
 589              	.L81:
 590 03c0 83270700 		lw	a5,0(a4)		# _4, MEM[(volatile uint32_t *)805306368B]
 591 03c4 E38E07FE 		beq	a5,zero,.L81	#, _4,,
 592 03c8 2320A700 		sw	a0,0(a4)	# ch, MEM[(volatile uint32_t *)805306368B]
 593 03cc 9307D000 		li	a5,13		# tmp78,
 594 03d0 6304F500 		beq	a0,a5,.L88	#, ch, tmp78,
 595 03d4 67800000 		ret	
 596              	.L88:
 597 03d8 37070030 		li	a4,805306368		# tmp79,
 598              	.L83:
 599 03dc 83270700 		lw	a5,0(a4)		# _6, MEM[(volatile uint32_t *)805306368B]
 600 03e0 E38E07FE 		beq	a5,zero,.L83	#, _6,,
 601 03e4 9307A000 		li	a5,10		# tmp81,
 602 03e8 2320F700 		sw	a5,0(a4)	# tmp81, MEM[(volatile uint32_t *)805306368B]
 603 03ec 67800000 		ret	
 605              		.align	2
 606              		.globl	print_str
 608              	print_str:
 609              	# kianv_stdlib_hdmi.h:144:   while (*p != 0) {
 610 03f0 83460500 		lbu	a3,0(a0)	# _3, *p_6(D)
 611              	# kianv_stdlib_hdmi.h:144:   while (*p != 0) {
 612 03f4 638A0602 		beq	a3,zero,.L89	#, _3,,
 613              	# kianv_stdlib_hdmi.h:145:     while (!*((volatile uint32_t*) UART_READY))
 614 03f8 B7070030 		li	a5,805306368		# tmp78,
 615              	# kianv_stdlib_hdmi.h:128:    if (c == 13) {
 616 03fc 1306D000 		li	a2,13		# tmp81,
 617              	# kianv_stdlib_hdmi.h:131:     *((volatile uint32_t*) UART_TX) = 10;
 618 0400 9305A000 		li	a1,10		# tmp85,
 619              	.L91:
 620              	# kianv_stdlib_hdmi.h:145:     while (!*((volatile uint32_t*) UART_READY))
 621 0404 03A70700 		lw	a4,0(a5)		# _1, MEM[(volatile uint32_t *)805306368B]
 622              	# kianv_stdlib_hdmi.h:145:     while (!*((volatile uint32_t*) UART_READY))
 623 0408 E30E07FE 		beq	a4,zero,.L91	#, _1,,
 624              	# kianv_stdlib_hdmi.h:147:     putchar(*(p++));
 625 040c 13051500 		addi	a0,a0,1	#, p, p
 626              	.L92:
 627              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 628 0410 03A70700 		lw	a4,0(a5)		# _9, MEM[(volatile uint32_t *)805306368B]
 629              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 630 0414 E30E07FE 		beq	a4,zero,.L92	#, _9,,
 631              	# kianv_stdlib_hdmi.h:127:   *((volatile uint32_t*) UART_TX) = c;
 632 0418 23A0D700 		sw	a3,0(a5)	# _3, MEM[(volatile uint32_t *)805306368B]
 633              	# kianv_stdlib_hdmi.h:128:    if (c == 13) {
 634 041c 6388C600 		beq	a3,a2,.L94	#, _3, tmp81,
 635              	.L93:
 636              	# kianv_stdlib_hdmi.h:144:   while (*p != 0) {
 637 0420 83460500 		lbu	a3,0(a0)	# _3, MEM[(char *)p_8]
 638              	# kianv_stdlib_hdmi.h:144:   while (*p != 0) {
 639 0424 E39006FE 		bne	a3,zero,.L91	#, _3,,
 640              	.L89:
 641              	# kianv_stdlib_hdmi.h:149: }
 642 0428 67800000 		ret	
 643              	.L94:
 644              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 645 042c 03A70700 		lw	a4,0(a5)		# _14, MEM[(volatile uint32_t *)805306368B]
 646              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 647 0430 E30E07FE 		beq	a4,zero,.L94	#, _14,,
 648              	# kianv_stdlib_hdmi.h:131:     *((volatile uint32_t*) UART_TX) = 10;
 649 0434 23A0B700 		sw	a1,0(a5)	# tmp85, MEM[(volatile uint32_t *)805306368B]
 650              	# kianv_stdlib_hdmi.h:133: }
 651 0438 6FF09FFE 		j	.L93		#
 653              		.align	2
 654              		.globl	print_str_ln
 656              	print_str_ln:
 657              	# kianv_stdlib_hdmi.h:144:   while (*p != 0) {
 658 043c 83460500 		lbu	a3,0(a0)	# _11, *p_2(D)
 659              	# kianv_stdlib_hdmi.h:144:   while (*p != 0) {
 660 0440 638A0602 		beq	a3,zero,.L107	#, _11,,
 661              	# kianv_stdlib_hdmi.h:145:     while (!*((volatile uint32_t*) UART_READY))
 662 0444 B7070030 		li	a5,805306368		# tmp80,
 663              	# kianv_stdlib_hdmi.h:128:    if (c == 13) {
 664 0448 1306D000 		li	a2,13		# tmp83,
 665              	# kianv_stdlib_hdmi.h:131:     *((volatile uint32_t*) UART_TX) = 10;
 666 044c 9305A000 		li	a1,10		# tmp93,
 667              	.L108:
 668              	# kianv_stdlib_hdmi.h:145:     while (!*((volatile uint32_t*) UART_READY))
 669 0450 03A70700 		lw	a4,0(a5)		# _7, MEM[(volatile uint32_t *)805306368B]
 670              	# kianv_stdlib_hdmi.h:145:     while (!*((volatile uint32_t*) UART_READY))
 671 0454 E30E07FE 		beq	a4,zero,.L108	#, _7,,
 672              	# kianv_stdlib_hdmi.h:147:     putchar(*(p++));
 673 0458 13051500 		addi	a0,a0,1	#, p, p
 674              	.L109:
 675              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 676 045c 03A70700 		lw	a4,0(a5)		# _10, MEM[(volatile uint32_t *)805306368B]
 677              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 678 0460 E30E07FE 		beq	a4,zero,.L109	#, _10,,
 679              	# kianv_stdlib_hdmi.h:127:   *((volatile uint32_t*) UART_TX) = c;
 680 0464 23A0D700 		sw	a3,0(a5)	# _11, MEM[(volatile uint32_t *)805306368B]
 681              	# kianv_stdlib_hdmi.h:128:    if (c == 13) {
 682 0468 638CC602 		beq	a3,a2,.L111	#, _11, tmp83,
 683              	.L110:
 684              	# kianv_stdlib_hdmi.h:144:   while (*p != 0) {
 685 046c 83460500 		lbu	a3,0(a0)	# _11, MEM[(char *)p_9]
 686              	# kianv_stdlib_hdmi.h:144:   while (*p != 0) {
 687 0470 E39006FE 		bne	a3,zero,.L108	#, _11,,
 688              	.L107:
 689              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 690 0474 37070030 		li	a4,805306368		# tmp87,
 691              	.L113:
 692 0478 83270700 		lw	a5,0(a4)		# _4, MEM[(volatile uint32_t *)805306368B]
 693              	# kianv_stdlib_hdmi.h:125:   while (!*((volatile uint32_t*) UART_READY))
 694 047c E38E07FE 		beq	a5,zero,.L113	#, _4,,
 695              	# kianv_stdlib_hdmi.h:127:   *((volatile uint32_t*) UART_TX) = c;
 696 0480 9307D000 		li	a5,13		# tmp89,
 697 0484 2320F700 		sw	a5,0(a4)	# tmp89, MEM[(volatile uint32_t *)805306368B]
 698              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 699 0488 37070030 		li	a4,805306368		# tmp90,
 700              	.L114:
 701 048c 83270700 		lw	a5,0(a4)		# _15, MEM[(volatile uint32_t *)805306368B]
 702              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 703 0490 E38E07FE 		beq	a5,zero,.L114	#, _15,,
 704              	# kianv_stdlib_hdmi.h:131:     *((volatile uint32_t*) UART_TX) = 10;
 705 0494 9307A000 		li	a5,10		# tmp92,
 706 0498 2320F700 		sw	a5,0(a4)	# tmp92, MEM[(volatile uint32_t *)805306368B]
 707              	# kianv_stdlib_hdmi.h:154: }
 708 049c 67800000 		ret	
 709              	.L111:
 710              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 711 04a0 03A70700 		lw	a4,0(a5)		# _14, MEM[(volatile uint32_t *)805306368B]
 712              	# kianv_stdlib_hdmi.h:129:   while (!*((volatile uint32_t*) UART_READY))
 713 04a4 E30E07FE 		beq	a4,zero,.L111	#, _14,,
 714              	# kianv_stdlib_hdmi.h:131:     *((volatile uint32_t*) UART_TX) = 10;
 715 04a8 23A0B700 		sw	a1,0(a5)	# tmp93, MEM[(volatile uint32_t *)805306368B]
 716              	# kianv_stdlib_hdmi.h:133: }
 717 04ac 6FF01FFC 		j	.L110		#
 719              		.align	2
 720              		.globl	print_dec
 722              	print_dec:
 723 04b0 130101FF 		addi	sp,sp,-16	#,,
 724              	# kianv_stdlib_hdmi.h:160:   char *p = buffer;
 725 04b4 13064100 		addi	a2,sp,4	#, tmp90,
 726 04b8 93070600 		mv	a5,a2	# p, tmp90
 727              	# kianv_stdlib_hdmi.h:162:     *(p++) = val % 10;
 728 04bc 1307A000 		li	a4,10		# tmp91,
 729              	.L130:
 730              	# kianv_stdlib_hdmi.h:161:   while (val || p == buffer) {
 731 04c0 63140500 		bne	a0,zero,.L131	#, val,,
 732              	# kianv_stdlib_hdmi.h:161:   while (val || p == buffer) {
 733 04c4 639CC700 		bne	a5,a2,.L135	#, p, tmp90,
 734              	.L131:
 735              	# kianv_stdlib_hdmi.h:162:     *(p++) = val % 10;
 736 04c8 B376E502 		remu	a3,a0,a4	# tmp91, tmp82, val
 737              	# kianv_stdlib_hdmi.h:162:     *(p++) = val % 10;
 738 04cc 93871700 		addi	a5,a5,1	#, p, p
 739              	# kianv_stdlib_hdmi.h:163:     val = val / 10;
 740 04d0 3355E502 		divu	a0,a0,a4	# tmp91, val, val
 741              	# kianv_stdlib_hdmi.h:162:     *(p++) = val % 10;
 742 04d4 A38FD7FE 		sb	a3,-1(a5)	# tmp82, MEM[(char *)p_17 + 4294967295B]
 743 04d8 6FF09FFE 		j	.L130		#
 744              	.L135:
 745              	# kianv_stdlib_hdmi.h:167:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 746 04dc B7060030 		li	a3,805306368		# tmp88,
 747              	.L132:
 748              	# kianv_stdlib_hdmi.h:167:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 749 04e0 03C7F7FF 		lbu	a4,-1(a5)	# MEM[(char *)p_15], MEM[(char *)p_15]
 750              	# kianv_stdlib_hdmi.h:167:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 751 04e4 9387F7FF 		addi	a5,a5,-1	#, p, p
 752              	# kianv_stdlib_hdmi.h:167:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 753 04e8 13070703 		addi	a4,a4,48	#, _6, MEM[(char *)p_15]
 754              	# kianv_stdlib_hdmi.h:167:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 755 04ec 23A0E600 		sw	a4,0(a3)	# _6, MEM[(volatile uint32_t *)805306368B]
 756              	# kianv_stdlib_hdmi.h:166:   while (p != buffer) {
 757 04f0 E398C7FE 		bne	a5,a2,.L132	#, p, tmp90,
 758              	# kianv_stdlib_hdmi.h:169: }
 759 04f4 13010101 		addi	sp,sp,16	#,,
 760 04f8 67800000 		jr	ra		#
 762              		.align	2
 763              		.globl	print_dec64
 765              	print_dec64:
 766 04fc 130101FE 		addi	sp,sp,-32	#,,
 767              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 768 0500 37DECCCC 		li	t3,-858992640		# tmp256,
 769              	# kianv_stdlib_hdmi.h:173:   char *p = buffer;
 770 0504 930EC100 		addi	t4,sp,12	#, tmp252,
 771              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 772 0508 37030010 		li	t1,268435456		# tmp253,
 773 050c 9308DECC 		addi	a7,t3,-819	#, tmp257, tmp256
 774              	# kianv_stdlib_hdmi.h:171: void print_dec64(uint64_t val) {
 775 0510 13070500 		mv	a4,a0	# val, tmp259
 776 0514 13880500 		mv	a6,a1	# val, tmp260
 777              	# kianv_stdlib_hdmi.h:173:   char *p = buffer;
 778 0518 13860E00 		mv	a2,t4	# p, tmp252
 779              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 780 051c 1303F3FF 		addi	t1,t1,-1	#, tmp254, tmp253
 781 0520 130F5000 		li	t5,5		# tmp255,
 782 0524 130ECECC 		addi	t3,t3,-820	#, tmp258, tmp256
 783              	# kianv_stdlib_hdmi.h:174:   while (val || p == buffer) {
 784 0528 6F008005 		j	.L137		#
 785              	.L138:
 786              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 787 052c B3F7E703 		remu	a5,a5,t5	# tmp255, tmp96, tmp93
 788              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 789 0530 13061600 		addi	a2,a2,1	#, p, p
 790              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 791 0534 B307F740 		sub	a5,a4,a5	# tmp212, val, tmp96
 792 0538 B335F700 		sgtu	a1,a5,a4	# tmp100, tmp212, val
 793 053c B305B840 		sub	a1,a6,a1	# tmp102, val, tmp100
 794 0540 3385C703 		mul	a0,a5,t3	# tmp106, tmp212, tmp258
 795 0544 B3851503 		mul	a1,a1,a7	# tmp103, tmp102, tmp257
 796 0548 B3B61703 		mulhu	a3,a5,a7	# tmp215, tmp212, tmp257
 797 054c B385A500 		add	a1,a1,a0	# tmp106, tmp109, tmp103
 798 0550 B3871703 		mul	a5,a5,a7	# tmp113, tmp212, tmp257
 799 0554 B385D500 		add	a1,a1,a3	# tmp215, tmp114, tmp109
 800 0558 9396F501 		slli	a3,a1,31	#, tmp132, tmp114
 801              	# kianv_stdlib_hdmi.h:176:     val = val / 10;
 802 055c 13D81500 		srli	a6,a1,1	#, val, tmp114
 803              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 804 0560 93D71700 		srli	a5,a5,1	#, tmp222, tmp113
 805 0564 B3E7F600 		or	a5,a3,a5	# tmp222, tmp222, tmp132
 806 0568 13952700 		slli	a0,a5,2	#, tmp226, tmp222
 807 056c 3305F500 		add	a0,a0,a5	# tmp222, tmp228, tmp226
 808 0570 13151500 		slli	a0,a0,1	#, tmp230, tmp228
 809 0574 3305A740 		sub	a0,a4,a0	# tmp232, val, tmp230
 810              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 811 0578 A30FA6FE 		sb	a0,-1(a2)	# tmp232, MEM[(char *)p_17 + 4294967295B]
 812              	# kianv_stdlib_hdmi.h:176:     val = val / 10;
 813 057c 13870700 		mv	a4,a5	# val, tmp222
 814              	.L137:
 815              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 816 0580 93174800 		slli	a5,a6,4	#, tmp87, val
 817 0584 9356C701 		srli	a3,a4,28	#, tmp206, val
 818 0588 B3E6D700 		or	a3,a5,a3	# tmp206, tmp206, tmp87
 819 058c B3F66600 		and	a3,a3,t1	# tmp254, tmp88, tmp206
 820 0590 B3776700 		and	a5,a4,t1	# tmp254, tmp83, val
 821 0594 B387D700 		add	a5,a5,a3	# tmp88, tmp91, tmp83
 822 0598 93558801 		srli	a1,a6,24	#, tmp208, val
 823              	# kianv_stdlib_hdmi.h:174:   while (val || p == buffer) {
 824 059c B3660701 		or	a3,a4,a6	# val, val, val
 825              	# kianv_stdlib_hdmi.h:175:     *(p++) = val % 10;
 826 05a0 B387B700 		add	a5,a5,a1	# tmp208, tmp93, tmp91
 827              	# kianv_stdlib_hdmi.h:174:   while (val || p == buffer) {
 828 05a4 E39406F8 		bne	a3,zero,.L138	#, val,,
 829              	# kianv_stdlib_hdmi.h:174:   while (val || p == buffer) {
 830 05a8 E302D6F9 		beq	a2,t4,.L138	#, p, tmp252,
 831              	# kianv_stdlib_hdmi.h:180:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 832 05ac 37070030 		li	a4,805306368		# tmp202,
 833              	.L139:
 834              	# kianv_stdlib_hdmi.h:180:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 835 05b0 8347F6FF 		lbu	a5,-1(a2)	# MEM[(char *)p_15], MEM[(char *)p_15]
 836              	# kianv_stdlib_hdmi.h:180:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 837 05b4 1306F6FF 		addi	a2,a2,-1	#, p, p
 838              	# kianv_stdlib_hdmi.h:180:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 839 05b8 93870703 		addi	a5,a5,48	#, _6, MEM[(char *)p_15]
 840              	# kianv_stdlib_hdmi.h:180:     *((volatile uint32_t*) UART_TX) = '0' + *(--p);
 841 05bc 2320F700 		sw	a5,0(a4)	# _6, MEM[(volatile uint32_t *)805306368B]
 842              	# kianv_stdlib_hdmi.h:179:   while (p != buffer) {
 843 05c0 E318D6FF 		bne	a2,t4,.L139	#, p, tmp252,
 844              	# kianv_stdlib_hdmi.h:182: }
 845 05c4 13010102 		addi	sp,sp,32	#,,
 846 05c8 67800000 		jr	ra		#
 848              		.section	.rodata.str1.4,"aMS",@progbits,1
 849              		.align	2
 850              	.LC0:
 851 0000 30313233 		.string	"0123456789ABCDEF"
 851      34353637 
 851      38394142 
 851      43444546 
 851      00
 852              		.text
 853              		.align	2
 854              		.globl	print_hex
 856              	print_hex:
 857              	# kianv_stdlib_hdmi.h:185:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 858 05cc 9385F5FF 		addi	a1,a1,-1	#, tmp84, tmp96
 859              	# kianv_stdlib_hdmi.h:185:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 860 05d0 93952500 		slli	a1,a1,2	#, i, tmp84
 861              	# kianv_stdlib_hdmi.h:185:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 862 05d4 63C80502 		blt	a1,zero,.L142	#, i,,
 863 05d8 37070000 		lui	a4,%hi(.LC0)	# tmp93,
 864 05dc 1306C0FF 		li	a2,-4		# _7,
 865 05e0 13070700 		addi	a4,a4,%lo(.LC0)	# tmp92, tmp93,
 866              	# kianv_stdlib_hdmi.h:186:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16
 867 05e4 B7060030 		li	a3,805306368		# tmp91,
 868              	.L144:
 869              	# kianv_stdlib_hdmi.h:186:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16
 870 05e8 B357B500 		srl	a5,a0,a1	# i, tmp88, val
 871              	# kianv_stdlib_hdmi.h:186:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16
 872 05ec 93F7F700 		andi	a5,a5,15	#, tmp89, tmp88
 873              	# kianv_stdlib_hdmi.h:186:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16
 874 05f0 B307F700 		add	a5,a4,a5	# tmp89, tmp90, tmp92
 875 05f4 83C70700 		lbu	a5,0(a5)	# _5, "0123456789ABCDEF"[_3]
 876              	# kianv_stdlib_hdmi.h:185:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 877 05f8 9385C5FF 		addi	a1,a1,-4	#, i, i
 878              	# kianv_stdlib_hdmi.h:186:     *((volatile uint32_t*) UART_TX) = "0123456789ABCDEF"[(val >> i) % 16
 879 05fc 23A0F600 		sw	a5,0(a3)	# _5, MEM[(volatile uint32_t *)805306368B]
 880              	# kianv_stdlib_hdmi.h:185:   for (int i = (4*digits)-4; i >= 0; i -= 4) {
 881 0600 E314B6FE 		bne	a2,a1,.L144	#, _7, i,
 882              	.L142:
 883              	# kianv_stdlib_hdmi.h:188: }
 884 0604 67800000 		ret	
 886              		.align	2
 887              		.globl	setpixel
 889              	setpixel:
 890              	# kianv_stdlib_hdmi.h:197:   const int y_offset = y*80;
 891 0608 93172600 		slli	a5,a2,2	#, tmp82, tmp89
 892 060c 3386C700 		add	a2,a5,a2	# tmp89, y_offset, tmp82
 893 0610 13164600 		slli	a2,a2,4	#, tmp84, y_offset
 894              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 895 0614 3306B600 		add	a2,a2,a1	# tmp88, tmp85, tmp84
 896              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 897 0618 13162600 		slli	a2,a2,2	#, tmp86, tmp85
 898 061c 3305C500 		add	a0,a0,a2	# tmp86, _4, tmp87
 899              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 900 0620 2320D500 		sw	a3,0(a0)	# color, *_4
 901              	# kianv_stdlib_hdmi.h:200: }
 902 0624 67800000 		ret	
 904              		.align	2
 905              		.globl	draw_bresenham
 907              	draw_bresenham:
 908 0628 130101FD 		addi	sp,sp,-48	#,,
 909 062c 232A5101 		sw	s5,20(sp)	#,
 910 0630 930A0500 		mv	s5,a0	# tmp107, fb
 911              	# kianv_stdlib_hdmi.h:205:   int dx =  abs(x1 - x0);
 912 0634 3385B640 		sub	a0,a3,a1	#, x1, x0
 913              	# kianv_stdlib_hdmi.h:203: {
 914 0638 23261102 		sw	ra,44(sp)	#,
 915 063c 23248102 		sw	s0,40(sp)	#,
 916 0640 23229102 		sw	s1,36(sp)	#,
 917 0644 13840500 		mv	s0,a1	# x0, tmp108
 918 0648 93040600 		mv	s1,a2	# y0, tmp109
 919 064c 23202103 		sw	s2,32(sp)	#,
 920 0650 232E3101 		sw	s3,28(sp)	#,
 921 0654 232C4101 		sw	s4,24(sp)	#,
 922 0658 93890600 		mv	s3,a3	# x1, tmp110
 923 065c 138A0700 		mv	s4,a5	# color, tmp112
 924 0660 23286101 		sw	s6,16(sp)	#,
 925 0664 23267101 		sw	s7,12(sp)	#,
 926              	# kianv_stdlib_hdmi.h:203: {
 927 0668 930B0700 		mv	s7,a4	# y1, tmp111
 928              	# kianv_stdlib_hdmi.h:205:   int dx =  abs(x1 - x0);
 929 066c 97000000 		call	abs		#
 929      E7800000 
 930 0674 13090500 		mv	s2,a0	# tmp113,
 931              	# kianv_stdlib_hdmi.h:207:   int dy = -abs(y1 - y0);
 932 0678 33859B40 		sub	a0,s7,s1	#, y1, y0
 933 067c 97000000 		call	abs		#
 933      E7800000 
 934              	# kianv_stdlib_hdmi.h:206:   int sx = x0 < x1 ? 1 : -1;
 935 0684 332B3401 		sgt	s6,s3,s0	# tmp102, x1, x0
 936              	# kianv_stdlib_hdmi.h:208:   int sy = y0 < y1 ? 1 : -1;
 937 0688 B3A67401 		sgt	a3,s7,s1	# tmp105, y1, y0
 938              	# kianv_stdlib_hdmi.h:206:   int sx = x0 < x1 ? 1 : -1;
 939 068c 131B1B00 		slli	s6,s6,1	#, iftmp.5_9, tmp102
 940              	# kianv_stdlib_hdmi.h:208:   int sy = y0 < y1 ? 1 : -1;
 941 0690 93961600 		slli	a3,a3,1	#, iftmp.6_10, tmp105
 942              	# kianv_stdlib_hdmi.h:206:   int sx = x0 < x1 ? 1 : -1;
 943 0694 130BFBFF 		addi	s6,s6,-1	#, iftmp.5_9, iftmp.5_9
 944              	# kianv_stdlib_hdmi.h:207:   int dy = -abs(y1 - y0);
 945 0698 B307A040 		neg	a5,a0	# dy, _3
 946              	# kianv_stdlib_hdmi.h:208:   int sy = y0 < y1 ? 1 : -1;
 947 069c 9386F6FF 		addi	a3,a3,-1	#, iftmp.6_10, iftmp.6_10
 948 06a0 3306A940 		sub	a2,s2,a0	# err, dx, _3
 949 06a4 93982400 		slli	a7,s1,2	#, tmp100, y0
 950              	.L150:
 951              	# kianv_stdlib_hdmi.h:197:   const int y_offset = y*80;
 952 06a8 33889800 		add	a6,a7,s1	# y0, y_offset, tmp100
 953 06ac 13184800 		slli	a6,a6,4	#, tmp97, y_offset
 954              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 955 06b0 33088800 		add	a6,a6,s0	# x0, tmp98, tmp97
 956              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 957 06b4 13182800 		slli	a6,a6,2	#, tmp99, tmp98
 958 06b8 33880A01 		add	a6,s5,a6	# tmp99, _36, fb
 959              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 960 06bc 23204801 		sw	s4,0(a6)	# color, *_36
 961              	# kianv_stdlib_hdmi.h:214:     e2 = 2*err;
 962 06c0 93151600 		slli	a1,a2,1	#, e2, err
 963              	# kianv_stdlib_hdmi.h:213:     if (x0 == x1 && y0 == y1) break;
 964 06c4 63003405 		beq	s0,s3,.L158	#, x0, x1,
 965              	.L151:
 966              	# kianv_stdlib_hdmi.h:215:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 967 06c8 63C6F500 		bgt	a5,a1,.L153	#, dy, e2,
 968 06cc 3306A640 		sub	a2,a2,a0	# err, err, _3
 969              	# kianv_stdlib_hdmi.h:215:     if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 970 06d0 33046401 		add	s0,s0,s6	# iftmp.5_9, x0, x0
 971              	.L153:
 972              	# kianv_stdlib_hdmi.h:216:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 973 06d4 E34AB9FC 		blt	s2,a1,.L150	#, dx, e2,
 974              	# kianv_stdlib_hdmi.h:216:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 975 06d8 B384D400 		add	s1,s1,a3	# iftmp.6_10, y0, y0
 976 06dc 93982400 		slli	a7,s1,2	#, tmp100, y0
 977              	# kianv_stdlib_hdmi.h:197:   const int y_offset = y*80;
 978 06e0 33889800 		add	a6,a7,s1	# y0, y_offset, tmp100
 979 06e4 13184800 		slli	a6,a6,4	#, tmp97, y_offset
 980              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 981 06e8 33088800 		add	a6,a6,s0	# x0, tmp98, tmp97
 982              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 983 06ec 13182800 		slli	a6,a6,2	#, tmp99, tmp98
 984 06f0 33880A01 		add	a6,s5,a6	# tmp99, _36, fb
 985              	# kianv_stdlib_hdmi.h:216:     if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 986 06f4 33062601 		add	a2,a2,s2	# dx, err, err
 987              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 988 06f8 23204801 		sw	s4,0(a6)	# color, *_36
 989              	# kianv_stdlib_hdmi.h:214:     e2 = 2*err;
 990 06fc 93151600 		slli	a1,a2,1	#, e2, err
 991              	# kianv_stdlib_hdmi.h:213:     if (x0 == x1 && y0 == y1) break;
 992 0700 E31434FD 		bne	s0,s3,.L151	#, x0, x1,
 993              	.L158:
 994              	# kianv_stdlib_hdmi.h:213:     if (x0 == x1 && y0 == y1) break;
 995 0704 E39274FD 		bne	s1,s7,.L151	#, y0, y1,
 996              	# kianv_stdlib_hdmi.h:218: }
 997 0708 8320C102 		lw	ra,44(sp)		#,
 998 070c 03248102 		lw	s0,40(sp)		#,
 999 0710 83244102 		lw	s1,36(sp)		#,
 1000 0714 03290102 		lw	s2,32(sp)		#,
 1001 0718 8329C101 		lw	s3,28(sp)		#,
 1002 071c 032A8101 		lw	s4,24(sp)		#,
 1003 0720 832A4101 		lw	s5,20(sp)		#,
 1004 0724 032B0101 		lw	s6,16(sp)		#,
 1005 0728 832BC100 		lw	s7,12(sp)		#,
 1006 072c 13010103 		addi	sp,sp,48	#,,
 1007 0730 67800000 		jr	ra		#
 1009              		.section	.text.startup,"ax",@progbits
 1010              		.align	2
 1011              		.globl	main
 1013              	main:
 1014 0000 130101FE 		addi	sp,sp,-32	#,,
 1015 0004 232E1100 		sw	ra,28(sp)	#,
 1016 0008 37060000 		lui	a2,%hi(sq)	# tmp167,
 1017 000c B7000000 		lui	ra,%hi(sq+1910)	# tmp166,
 1018 0010 B7230000 		li	t2,8192		# tmp175,
 1019 0014 232C8100 		sw	s0,24(sp)	#,
 1020 0018 232A9100 		sw	s1,20(sp)	#,
 1021 001c 23244101 		sw	s4,8(sp)	#,
 1022 0020 23282101 		sw	s2,16(sp)	#,
 1023 0024 23263101 		sw	s3,12(sp)	#,
 1024 0028 23225101 		sw	s5,4(sp)	#,
 1025 002c 23206101 		sw	s6,0(sp)	#,
 1026              	# julia_hdmi.c:67:   int y_c = (YCmin+YCmax)>>1; int y_c_i = 3;
 1027 0030 93043000 		li	s1,3		# y_c_i,
 1028              	# julia_hdmi.c:67:   int y_c = (YCmin+YCmax)>>1; int y_c_i = 3;
 1029 0034 1308E001 		li	a6,30		# y_c,
 1030              	# julia_hdmi.c:66:   int x_c = (XCmin+XCmax)>>1; int x_c_i = 1;
 1031 0038 13041000 		li	s0,1		# x_c_i,
 1032              	# julia_hdmi.c:66:   int x_c = (XCmin+XCmax)>>1; int x_c_i = 1;
 1033 003c 1305A0FB 		li	a0,-70		# x_c,
 1034 0040 93806077 		addi	ra,ra,%lo(sq+1910)	# ivtmp.188, tmp166,
 1035 0044 13060600 		addi	a2,a2,%lo(sq)	# tmp169, tmp167,
 1036              	# julia_hdmi.c:89:           if (u_f + v_f > CUTOFF) {
 1037 0048 93080010 		li	a7,256		# tmp140,
 1038              	# julia_hdmi.c:79:         for ( ; clr<24 ; clr++,clr8+=8) {
 1039 004c 13038001 		li	t1,24		# tmp172,
 1040 0050 93830380 		addi	t2,t2,-2048	#, _173, tmp175
 1041              	# julia_hdmi.c:75:       for (int i = 0 ; i < 80 ; ++i) {
 1042 0054 930F8002 		li	t6,40		# tmp144,
 1043              	# julia_hdmi.c:73:     for (int j = 0 ; j < 60 ; ++j) {
 1044 0058 130AE001 		li	s4,30		# tmp181,
 1045              	.L160:
 1046 005c 93890000 		mv	s3,ra	# ivtmp.188, ivtmp.188
 1047              	# julia_hdmi.c:74:       int i_f = -40;
 1048 0060 37090010 		li	s2,268435456		# ivtmp.193,
 1049 0064 9307A004 		li	a5,74		# pretmp_167,
 1050 0068 9302D000 		li	t0,13		# pretmp_144,
 1051              	# julia_hdmi.c:71:     int j_f = -30;
 1052 006c 130F20FE 		li	t5,-30		# j_f,
 1053              	.L161:
 1054 0070 930E0900 		mv	t4,s2	# ivtmp.169, ivtmp.193
 1055 0074 930A7001 		li	s5,23		# pretmp_160,
 1056              	# julia_hdmi.c:74:       int i_f = -40;
 1057 0078 130E80FD 		li	t3,-40		# i_f,
 1058              	.L168:
 1059              	# julia_hdmi.c:66:   int x_c = (XCmin+XCmax)>>1; int x_c_i = 1;
 1060 007c 138B0200 		mv	s6,t0	# pretmp_163, pretmp_144
 1061              	# julia_hdmi.c:78:         int clr=0; int clr8=32;
 1062 0080 93050002 		li	a1,32		# clr8,
 1063              	# julia_hdmi.c:78:         int clr=0; int clr8=32;
 1064 0084 93060000 		li	a3,0		# clr,
 1065 0088 6F00C001 		j	.L166		#
 1066              	.L162:
 1067              	# julia_hdmi.c:79:         for ( ; clr<24 ; clr++,clr8+=8) {
 1068 008c 93861600 		addi	a3,a3,1	#, clr, clr
 1069              	# julia_hdmi.c:79:         for ( ; clr<24 ; clr++,clr8+=8) {
 1070 0090 93858500 		addi	a1,a1,8	#, clr8, clr8
 1071              	# julia_hdmi.c:79:         for ( ; clr<24 ; clr++,clr8+=8) {
 1072 0094 638E6608 		beq	a3,t1,.L172	#, clr, tmp172,
 1073              	# julia_hdmi.c:82:           int u_f = sq[a_f];
 1074 0098 835A0B00 		lhu	s5,0(s6)	# pretmp_160, sq[_159]
 1075              	# julia_hdmi.c:83:           int v_f = sq[b_f];
 1076 009c 03DB0700 		lhu	s6,0(a5)	# pretmp_163, sq[_162]
 1077              	# julia_hdmi.c:85:           int s_f = sq[c_f];
 1078 00a0 83570700 		lhu	a5,0(a4)	# pretmp_167, sq[_166]
 1079              	.L166:
 1080              	# julia_hdmi.c:86:           int w_f = s_f - u_f - v_f;
 1081 00a4 B3875741 		sub	a5,a5,s5	# tmp137, pretmp_167, pretmp_160
 1082              	# julia_hdmi.c:87:           x_f     = u_f - v_f + x_c; // + i_f; // use for Mandlebrot
 1083 00a8 33876A41 		sub	a4,s5,s6	# tmp136, pretmp_160, pretmp_163
 1084              	# julia_hdmi.c:86:           int w_f = s_f - u_f - v_f;
 1085 00ac B3876741 		sub	a5,a5,s6	# w_f, tmp137, pretmp_163
 1086              	# julia_hdmi.c:87:           x_f     = u_f - v_f + x_c; // + i_f; // use for Mandlebrot
 1087 00b0 3307A700 		add	a4,a4,a0	# x_c, x_f, tmp136
 1088              	# julia_hdmi.c:88:           y_f     = w_f       + y_c; // + j_f; // use for Mandlebrot
 1089 00b4 B3870701 		add	a5,a5,a6	# y_c, y_f, w_f
 1090              	# julia_hdmi.c:89:           if (u_f + v_f > CUTOFF) {
 1091 00b8 B38A6A01 		add	s5,s5,s6	# pretmp_163, tmp139, pretmp_160
 1092              	# julia_hdmi.c:80:           int a_f = x_f & MASK;
 1093 00bc 137BF73F 		andi	s6,a4,1023	#, tmp122, x_f
 1094              	# julia_hdmi.c:84:           int c_f = (x_f+y_f) & MASK;
 1095 00c0 3307F700 		add	a4,a4,a5	# y_f, tmp132, x_f
 1096              	# julia_hdmi.c:84:           int c_f = (x_f+y_f) & MASK;
 1097 00c4 1377F73F 		andi	a4,a4,1023	#, tmp133, tmp132
 1098              	# julia_hdmi.c:81:           int b_f = y_f & MASK;
 1099 00c8 93F7F73F 		andi	a5,a5,1023	#, tmp127, y_f
 1100              	# julia_hdmi.c:82:           int u_f = sq[a_f];
 1101 00cc 131B1B00 		slli	s6,s6,1	#, tmp123, tmp122
 1102              	# julia_hdmi.c:83:           int v_f = sq[b_f];
 1103 00d0 93971700 		slli	a5,a5,1	#, tmp128, tmp127
 1104              	# julia_hdmi.c:85:           int s_f = sq[c_f];
 1105 00d4 13171700 		slli	a4,a4,1	#, tmp134, tmp133
 1106              	# julia_hdmi.c:82:           int u_f = sq[a_f];
 1107 00d8 330B6601 		add	s6,a2,s6	# tmp123, tmp124, tmp169
 1108              	# julia_hdmi.c:83:           int v_f = sq[b_f];
 1109 00dc B307F600 		add	a5,a2,a5	# tmp128, tmp129, tmp169
 1110              	# julia_hdmi.c:85:           int s_f = sq[c_f];
 1111 00e0 3307E600 		add	a4,a2,a4	# tmp134, tmp135, tmp169
 1112              	# julia_hdmi.c:89:           if (u_f + v_f > CUTOFF) {
 1113 00e4 E3D458FB 		ble	s5,a7,.L162	#, tmp139, tmp140,
 1114              	# julia_hdmi.c:95:         setpixel(0x10000000, i, j, (clr8)<<16| (clr8) | clr<<8 );
 1115 00e8 93968600 		slli	a3,a3,8	#, _173, clr
 1116              	# julia_hdmi.c:95:         setpixel(0x10000000, i, j, (clr8)<<16| (clr8) | clr<<8 );
 1117 00ec 93970501 		slli	a5,a1,16	#, tmp142, clr8
 1118              	# julia_hdmi.c:95:         setpixel(0x10000000, i, j, (clr8)<<16| (clr8) | clr<<8 );
 1119 00f0 B3E6D500 		or	a3,a1,a3	# _173, tmp143, clr8
 1120 00f4 B3E7D700 		or	a5,a5,a3	# tmp143, _12, tmp142
 1121              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 1122 00f8 23A0FE00 		sw	a5,0(t4)	# _12, *_63
 1123              	# julia_hdmi.c:98:         i_f += 1;
 1124 00fc 130E1E00 		addi	t3,t3,1	#, i_f, i_f
 1125              	# julia_hdmi.c:75:       for (int i = 0 ; i < 80 ; ++i) {
 1126 0100 938E4E00 		addi	t4,t4,4	#, ivtmp.169, ivtmp.169
 1127 0104 6306FE05 		beq	t3,t6,.L165	#, i_f, tmp144,
 1128              	.L173:
 1129              	# julia_hdmi.c:84:           int c_f = (x_f+y_f) & MASK;
 1130 0108 B307CF01 		add	a5,t5,t3	# i_f, tmp152, j_f
 1131              	# julia_hdmi.c:80:           int a_f = x_f & MASK;
 1132 010c 1377FE3F 		andi	a4,t3,1023	#, tmp147, i_f
 1133              	# julia_hdmi.c:84:           int c_f = (x_f+y_f) & MASK;
 1134 0110 93F7F73F 		andi	a5,a5,1023	#, tmp153, tmp152
 1135              	# julia_hdmi.c:82:           int u_f = sq[a_f];
 1136 0114 13171700 		slli	a4,a4,1	#, tmp148, tmp147
 1137              	# julia_hdmi.c:85:           int s_f = sq[c_f];
 1138 0118 93971700 		slli	a5,a5,1	#, tmp154, tmp153
 1139              	# julia_hdmi.c:82:           int u_f = sq[a_f];
 1140 011c 3307E600 		add	a4,a2,a4	# tmp148, tmp149, tmp169
 1141              	# julia_hdmi.c:85:           int s_f = sq[c_f];
 1142 0120 B307F600 		add	a5,a2,a5	# tmp154, tmp155, tmp169
 1143              	# julia_hdmi.c:82:           int u_f = sq[a_f];
 1144 0124 835A0700 		lhu	s5,0(a4)	# pretmp_160, sq[_150]
 1145              	# julia_hdmi.c:85:           int s_f = sq[c_f];
 1146 0128 83D70700 		lhu	a5,0(a5)	# pretmp_167, sq[_154]
 1147 012c 6FF01FF5 		j	.L168		#
 1148              	.L172:
 1149 0130 93860300 		mv	a3,t2	# _173, _173
 1150              	# julia_hdmi.c:95:         setpixel(0x10000000, i, j, (clr8)<<16| (clr8) | clr<<8 );
 1151 0134 93970501 		slli	a5,a1,16	#, tmp142, clr8
 1152              	# julia_hdmi.c:95:         setpixel(0x10000000, i, j, (clr8)<<16| (clr8) | clr<<8 );
 1153 0138 B3E6D500 		or	a3,a1,a3	# _173, tmp143, clr8
 1154 013c B3E7D700 		or	a5,a5,a3	# tmp143, _12, tmp142
 1155              	# kianv_stdlib_hdmi.h:199:   fb[x_offset + y_offset] = color;
 1156 0140 23A0FE00 		sw	a5,0(t4)	# _12, *_63
 1157              	# julia_hdmi.c:98:         i_f += 1;
 1158 0144 130E1E00 		addi	t3,t3,1	#, i_f, i_f
 1159              	# julia_hdmi.c:75:       for (int i = 0 ; i < 80 ; ++i) {
 1160 0148 938E4E00 		addi	t4,t4,4	#, ivtmp.169, ivtmp.169
 1161 014c E31EFEFB 		bne	t3,t6,.L173	#, i_f, tmp144,
 1162              	.L165:
 1163              	# julia_hdmi.c:100:       j_f += 1;
 1164 0150 130F1F00 		addi	t5,t5,1	#, j_f, j_f
 1165              	# julia_hdmi.c:73:     for (int j = 0 ; j < 60 ; ++j) {
 1166 0154 13090914 		addi	s2,s2,320	#, ivtmp.193, ivtmp.193
 1167 0158 63004F03 		beq	t5,s4,.L167	#, j_f, tmp181,
 1168              	# julia_hdmi.c:81:           int b_f = y_f & MASK;
 1169 015c 9377FF3F 		andi	a5,t5,1023	#, tmp159, j_f
 1170              	# julia_hdmi.c:83:           int v_f = sq[b_f];
 1171 0160 93971700 		slli	a5,a5,1	#, tmp160, tmp159
 1172 0164 B307F600 		add	a5,a2,a5	# tmp160, tmp161, tmp169
 1173 0168 83D20700 		lhu	t0,0(a5)	# pretmp_144, sq[_143]
 1174 016c 93892900 		addi	s3,s3,2	#, ivtmp.188, ivtmp.188
 1175              	# julia_hdmi.c:85:           int s_f = sq[c_f];
 1176 0170 83D7E9FF 		lhu	a5,-2(s3)	# pretmp_167, MEM[(short unsigned int *)_123]
 1177 0174 6FF0DFEF 		j	.L161		#
 1178              	.L167:
 1179              	# julia_hdmi.c:103:     x_c += x_c_i;
 1180 0178 33058500 		add	a0,a0,s0	# x_c_i, x_c, x_c
 1181              	# julia_hdmi.c:104:     if (x_c < XCmin || x_c > XCmax) { x_c_i = - x_c_i; }
 1182 017c 9307A505 		addi	a5,a0,90	#, tmp162, x_c
 1183              	# julia_hdmi.c:104:     if (x_c < XCmin || x_c > XCmax) { x_c_i = - x_c_i; }
 1184 0180 63F4FF00 		bleu	a5,t6,.L169	#, tmp162, tmp144,
 1185              	# julia_hdmi.c:104:     if (x_c < XCmin || x_c > XCmax) { x_c_i = - x_c_i; }
 1186 0184 33048040 		neg	s0,s0	# x_c_i, x_c_i
 1187              	.L169:
 1188              	# julia_hdmi.c:105:     y_c += y_c_i;
 1189 0188 33089800 		add	a6,a6,s1	# y_c_i, y_c, y_c
 1190              	# julia_hdmi.c:106:     if (y_c < YCmin || y_c > YCmax) { y_c_i = - y_c_i; }
 1191 018c 930768FF 		addi	a5,a6,-10	#, tmp164, y_c
 1192              	# julia_hdmi.c:106:     if (y_c < YCmin || y_c > YCmax) { y_c_i = - y_c_i; }
 1193 0190 E3F6FFEC 		bleu	a5,t6,.L160	#, tmp164, tmp144,
 1194              	# julia_hdmi.c:106:     if (y_c < YCmin || y_c > YCmax) { y_c_i = - y_c_i; }
 1195 0194 B3049040 		neg	s1,s1	# y_c_i, y_c_i
 1196 0198 6FF05FEC 		j	.L160		#
 1198              		.section	.rodata
 1199              		.align	2
 1202              	sq:
 1203 0000 0000     		.half	0
 1204 0002 0000     		.half	0
 1205 0004 0000     		.half	0
 1206 0006 0000     		.half	0
 1207 0008 0000     		.half	0
 1208 000a 0000     		.half	0
 1209 000c 0000     		.half	0
 1210 000e 0000     		.half	0
 1211 0010 0100     		.half	1
 1212 0012 0100     		.half	1
 1213 0014 0100     		.half	1
 1214 0016 0100     		.half	1
 1215 0018 0200     		.half	2
 1216 001a 0200     		.half	2
 1217 001c 0300     		.half	3
 1218 001e 0300     		.half	3
 1219 0020 0400     		.half	4
 1220 0022 0400     		.half	4
 1221 0024 0500     		.half	5
 1222 0026 0500     		.half	5
 1223 0028 0600     		.half	6
 1224 002a 0600     		.half	6
 1225 002c 0700     		.half	7
 1226 002e 0800     		.half	8
 1227 0030 0900     		.half	9
 1228 0032 0900     		.half	9
 1229 0034 0A00     		.half	10
 1230 0036 0B00     		.half	11
 1231 0038 0C00     		.half	12
 1232 003a 0D00     		.half	13
 1233 003c 0E00     		.half	14
 1234 003e 0F00     		.half	15
 1235 0040 1000     		.half	16
 1236 0042 1100     		.half	17
 1237 0044 1200     		.half	18
 1238 0046 1300     		.half	19
 1239 0048 1400     		.half	20
 1240 004a 1500     		.half	21
 1241 004c 1600     		.half	22
 1242 004e 1700     		.half	23
 1243 0050 1900     		.half	25
 1244 0052 1A00     		.half	26
 1245 0054 1B00     		.half	27
 1246 0056 1C00     		.half	28
 1247 0058 1E00     		.half	30
 1248 005a 1F00     		.half	31
 1249 005c 2100     		.half	33
 1250 005e 2200     		.half	34
 1251 0060 2400     		.half	36
 1252 0062 2500     		.half	37
 1253 0064 2700     		.half	39
 1254 0066 2800     		.half	40
 1255 0068 2A00     		.half	42
 1256 006a 2B00     		.half	43
 1257 006c 2D00     		.half	45
 1258 006e 2F00     		.half	47
 1259 0070 3100     		.half	49
 1260 0072 3200     		.half	50
 1261 0074 3400     		.half	52
 1262 0076 3600     		.half	54
 1263 0078 3800     		.half	56
 1264 007a 3A00     		.half	58
 1265 007c 3C00     		.half	60
 1266 007e 3E00     		.half	62
 1267 0080 4000     		.half	64
 1268 0082 4200     		.half	66
 1269 0084 4400     		.half	68
 1270 0086 4600     		.half	70
 1271 0088 4800     		.half	72
 1272 008a 4A00     		.half	74
 1273 008c 4C00     		.half	76
 1274 008e 4E00     		.half	78
 1275 0090 5100     		.half	81
 1276 0092 5300     		.half	83
 1277 0094 5500     		.half	85
 1278 0096 5700     		.half	87
 1279 0098 5A00     		.half	90
 1280 009a 5C00     		.half	92
 1281 009c 5F00     		.half	95
 1282 009e 6100     		.half	97
 1283 00a0 6400     		.half	100
 1284 00a2 6600     		.half	102
 1285 00a4 6900     		.half	105
 1286 00a6 6B00     		.half	107
 1287 00a8 6E00     		.half	110
 1288 00aa 7000     		.half	112
 1289 00ac 7300     		.half	115
 1290 00ae 7600     		.half	118
 1291 00b0 7900     		.half	121
 1292 00b2 7B00     		.half	123
 1293 00b4 7E00     		.half	126
 1294 00b6 8100     		.half	129
 1295 00b8 8400     		.half	132
 1296 00ba 8700     		.half	135
 1297 00bc 8A00     		.half	138
 1298 00be 8D00     		.half	141
 1299 00c0 9000     		.half	144
 1300 00c2 9300     		.half	147
 1301 00c4 9600     		.half	150
 1302 00c6 9900     		.half	153
 1303 00c8 9C00     		.half	156
 1304 00ca 9F00     		.half	159
 1305 00cc A200     		.half	162
 1306 00ce A500     		.half	165
 1307 00d0 A900     		.half	169
 1308 00d2 AC00     		.half	172
 1309 00d4 AF00     		.half	175
 1310 00d6 B200     		.half	178
 1311 00d8 B600     		.half	182
 1312 00da B900     		.half	185
 1313 00dc BD00     		.half	189
 1314 00de C000     		.half	192
 1315 00e0 C400     		.half	196
 1316 00e2 C700     		.half	199
 1317 00e4 CB00     		.half	203
 1318 00e6 CE00     		.half	206
 1319 00e8 D200     		.half	210
 1320 00ea D500     		.half	213
 1321 00ec D900     		.half	217
 1322 00ee DD00     		.half	221
 1323 00f0 E100     		.half	225
 1324 00f2 E400     		.half	228
 1325 00f4 E800     		.half	232
 1326 00f6 EC00     		.half	236
 1327 00f8 F000     		.half	240
 1328 00fa F400     		.half	244
 1329 00fc F800     		.half	248
 1330 00fe FC00     		.half	252
 1331 0100 0001     		.half	256
 1332 0102 0401     		.half	260
 1333 0104 0801     		.half	264
 1334 0106 0C01     		.half	268
 1335 0108 1001     		.half	272
 1336 010a 1401     		.half	276
 1337 010c 1801     		.half	280
 1338 010e 1C01     		.half	284
 1339 0110 2101     		.half	289
 1340 0112 2501     		.half	293
 1341 0114 2901     		.half	297
 1342 0116 2D01     		.half	301
 1343 0118 3201     		.half	306
 1344 011a 3601     		.half	310
 1345 011c 3B01     		.half	315
 1346 011e 3F01     		.half	319
 1347 0120 4401     		.half	324
 1348 0122 4801     		.half	328
 1349 0124 4D01     		.half	333
 1350 0126 5101     		.half	337
 1351 0128 5601     		.half	342
 1352 012a 5A01     		.half	346
 1353 012c 5F01     		.half	351
 1354 012e 6401     		.half	356
 1355 0130 6901     		.half	361
 1356 0132 6D01     		.half	365
 1357 0134 7201     		.half	370
 1358 0136 7701     		.half	375
 1359 0138 7C01     		.half	380
 1360 013a 8101     		.half	385
 1361 013c 8601     		.half	390
 1362 013e 8B01     		.half	395
 1363 0140 9001     		.half	400
 1364 0142 9501     		.half	405
 1365 0144 9A01     		.half	410
 1366 0146 9F01     		.half	415
 1367 0148 A401     		.half	420
 1368 014a A901     		.half	425
 1369 014c AE01     		.half	430
 1370 014e B301     		.half	435
 1371 0150 B901     		.half	441
 1372 0152 BE01     		.half	446
 1373 0154 C301     		.half	451
 1374 0156 C801     		.half	456
 1375 0158 CE01     		.half	462
 1376 015a D301     		.half	467
 1377 015c D901     		.half	473
 1378 015e DE01     		.half	478
 1379 0160 E401     		.half	484
 1380 0162 E901     		.half	489
 1381 0164 EF01     		.half	495
 1382 0166 F401     		.half	500
 1383 0168 FA01     		.half	506
 1384 016a FF01     		.half	511
 1385 016c FF01     		.half	511
 1386 016e FF01     		.half	511
 1387 0170 FF01     		.half	511
 1388 0172 FF01     		.half	511
 1389 0174 FF01     		.half	511
 1390 0176 FF01     		.half	511
 1391 0178 FF01     		.half	511
 1392 017a FF01     		.half	511
 1393 017c FF01     		.half	511
 1394 017e FF01     		.half	511
 1395 0180 FF01     		.half	511
 1396 0182 FF01     		.half	511
 1397 0184 FF01     		.half	511
 1398 0186 FF01     		.half	511
 1399 0188 FF01     		.half	511
 1400 018a FF01     		.half	511
 1401 018c FF01     		.half	511
 1402 018e FF01     		.half	511
 1403 0190 FF01     		.half	511
 1404 0192 FF01     		.half	511
 1405 0194 FF01     		.half	511
 1406 0196 FF01     		.half	511
 1407 0198 FF01     		.half	511
 1408 019a FF01     		.half	511
 1409 019c FF01     		.half	511
 1410 019e FF01     		.half	511
 1411 01a0 FF01     		.half	511
 1412 01a2 FF01     		.half	511
 1413 01a4 FF01     		.half	511
 1414 01a6 FF01     		.half	511
 1415 01a8 FF01     		.half	511
 1416 01aa FF01     		.half	511
 1417 01ac FF01     		.half	511
 1418 01ae FF01     		.half	511
 1419 01b0 FF01     		.half	511
 1420 01b2 FF01     		.half	511
 1421 01b4 FF01     		.half	511
 1422 01b6 FF01     		.half	511
 1423 01b8 FF01     		.half	511
 1424 01ba FF01     		.half	511
 1425 01bc FF01     		.half	511
 1426 01be FF01     		.half	511
 1427 01c0 FF01     		.half	511
 1428 01c2 FF01     		.half	511
 1429 01c4 FF01     		.half	511
 1430 01c6 FF01     		.half	511
 1431 01c8 FF01     		.half	511
 1432 01ca FF01     		.half	511
 1433 01cc FF01     		.half	511
 1434 01ce FF01     		.half	511
 1435 01d0 FF01     		.half	511
 1436 01d2 FF01     		.half	511
 1437 01d4 FF01     		.half	511
 1438 01d6 FF01     		.half	511
 1439 01d8 FF01     		.half	511
 1440 01da FF01     		.half	511
 1441 01dc FF01     		.half	511
 1442 01de FF01     		.half	511
 1443 01e0 FF01     		.half	511
 1444 01e2 FF01     		.half	511
 1445 01e4 FF01     		.half	511
 1446 01e6 FF01     		.half	511
 1447 01e8 FF01     		.half	511
 1448 01ea FF01     		.half	511
 1449 01ec FF01     		.half	511
 1450 01ee FF01     		.half	511
 1451 01f0 FF01     		.half	511
 1452 01f2 FF01     		.half	511
 1453 01f4 FF01     		.half	511
 1454 01f6 FF01     		.half	511
 1455 01f8 FF01     		.half	511
 1456 01fa FF01     		.half	511
 1457 01fc FF01     		.half	511
 1458 01fe FF01     		.half	511
 1459 0200 FF01     		.half	511
 1460 0202 FF01     		.half	511
 1461 0204 FF01     		.half	511
 1462 0206 FF01     		.half	511
 1463 0208 FF01     		.half	511
 1464 020a FF01     		.half	511
 1465 020c FF01     		.half	511
 1466 020e FF01     		.half	511
 1467 0210 FF01     		.half	511
 1468 0212 FF01     		.half	511
 1469 0214 FF01     		.half	511
 1470 0216 FF01     		.half	511
 1471 0218 FF01     		.half	511
 1472 021a FF01     		.half	511
 1473 021c FF01     		.half	511
 1474 021e FF01     		.half	511
 1475 0220 FF01     		.half	511
 1476 0222 FF01     		.half	511
 1477 0224 FF01     		.half	511
 1478 0226 FF01     		.half	511
 1479 0228 FF01     		.half	511
 1480 022a FF01     		.half	511
 1481 022c FF01     		.half	511
 1482 022e FF01     		.half	511
 1483 0230 FF01     		.half	511
 1484 0232 FF01     		.half	511
 1485 0234 FF01     		.half	511
 1486 0236 FF01     		.half	511
 1487 0238 FF01     		.half	511
 1488 023a FF01     		.half	511
 1489 023c FF01     		.half	511
 1490 023e FF01     		.half	511
 1491 0240 FF01     		.half	511
 1492 0242 FF01     		.half	511
 1493 0244 FF01     		.half	511
 1494 0246 FF01     		.half	511
 1495 0248 FF01     		.half	511
 1496 024a FF01     		.half	511
 1497 024c FF01     		.half	511
 1498 024e FF01     		.half	511
 1499 0250 FF01     		.half	511
 1500 0252 FF01     		.half	511
 1501 0254 FF01     		.half	511
 1502 0256 FF01     		.half	511
 1503 0258 FF01     		.half	511
 1504 025a FF01     		.half	511
 1505 025c FF01     		.half	511
 1506 025e FF01     		.half	511
 1507 0260 FF01     		.half	511
 1508 0262 FF01     		.half	511
 1509 0264 FF01     		.half	511
 1510 0266 FF01     		.half	511
 1511 0268 FF01     		.half	511
 1512 026a FF01     		.half	511
 1513 026c FF01     		.half	511
 1514 026e FF01     		.half	511
 1515 0270 FF01     		.half	511
 1516 0272 FF01     		.half	511
 1517 0274 FF01     		.half	511
 1518 0276 FF01     		.half	511
 1519 0278 FF01     		.half	511
 1520 027a FF01     		.half	511
 1521 027c FF01     		.half	511
 1522 027e FF01     		.half	511
 1523 0280 FF01     		.half	511
 1524 0282 FF01     		.half	511
 1525 0284 FF01     		.half	511
 1526 0286 FF01     		.half	511
 1527 0288 FF01     		.half	511
 1528 028a FF01     		.half	511
 1529 028c FF01     		.half	511
 1530 028e FF01     		.half	511
 1531 0290 FF01     		.half	511
 1532 0292 FF01     		.half	511
 1533 0294 FF01     		.half	511
 1534 0296 FF01     		.half	511
 1535 0298 FF01     		.half	511
 1536 029a FF01     		.half	511
 1537 029c FF01     		.half	511
 1538 029e FF01     		.half	511
 1539 02a0 FF01     		.half	511
 1540 02a2 FF01     		.half	511
 1541 02a4 FF01     		.half	511
 1542 02a6 FF01     		.half	511
 1543 02a8 FF01     		.half	511
 1544 02aa FF01     		.half	511
 1545 02ac FF01     		.half	511
 1546 02ae FF01     		.half	511
 1547 02b0 FF01     		.half	511
 1548 02b2 FF01     		.half	511
 1549 02b4 FF01     		.half	511
 1550 02b6 FF01     		.half	511
 1551 02b8 FF01     		.half	511
 1552 02ba FF01     		.half	511
 1553 02bc FF01     		.half	511
 1554 02be FF01     		.half	511
 1555 02c0 FF01     		.half	511
 1556 02c2 FF01     		.half	511
 1557 02c4 FF01     		.half	511
 1558 02c6 FF01     		.half	511
 1559 02c8 FF01     		.half	511
 1560 02ca FF01     		.half	511
 1561 02cc FF01     		.half	511
 1562 02ce FF01     		.half	511
 1563 02d0 FF01     		.half	511
 1564 02d2 FF01     		.half	511
 1565 02d4 FF01     		.half	511
 1566 02d6 FF01     		.half	511
 1567 02d8 FF01     		.half	511
 1568 02da FF01     		.half	511
 1569 02dc FF01     		.half	511
 1570 02de FF01     		.half	511
 1571 02e0 FF01     		.half	511
 1572 02e2 FF01     		.half	511
 1573 02e4 FF01     		.half	511
 1574 02e6 FF01     		.half	511
 1575 02e8 FF01     		.half	511
 1576 02ea FF01     		.half	511
 1577 02ec FF01     		.half	511
 1578 02ee FF01     		.half	511
 1579 02f0 FF01     		.half	511
 1580 02f2 FF01     		.half	511
 1581 02f4 FF01     		.half	511
 1582 02f6 FF01     		.half	511
 1583 02f8 FF01     		.half	511
 1584 02fa FF01     		.half	511
 1585 02fc FF01     		.half	511
 1586 02fe FF01     		.half	511
 1587 0300 FF01     		.half	511
 1588 0302 FF01     		.half	511
 1589 0304 FF01     		.half	511
 1590 0306 FF01     		.half	511
 1591 0308 FF01     		.half	511
 1592 030a FF01     		.half	511
 1593 030c FF01     		.half	511
 1594 030e FF01     		.half	511
 1595 0310 FF01     		.half	511
 1596 0312 FF01     		.half	511
 1597 0314 FF01     		.half	511
 1598 0316 FF01     		.half	511
 1599 0318 FF01     		.half	511
 1600 031a FF01     		.half	511
 1601 031c FF01     		.half	511
 1602 031e FF01     		.half	511
 1603 0320 FF01     		.half	511
 1604 0322 FF01     		.half	511
 1605 0324 FF01     		.half	511
 1606 0326 FF01     		.half	511
 1607 0328 FF01     		.half	511
 1608 032a FF01     		.half	511
 1609 032c FF01     		.half	511
 1610 032e FF01     		.half	511
 1611 0330 FF01     		.half	511
 1612 0332 FF01     		.half	511
 1613 0334 FF01     		.half	511
 1614 0336 FF01     		.half	511
 1615 0338 FF01     		.half	511
 1616 033a FF01     		.half	511
 1617 033c FF01     		.half	511
 1618 033e FF01     		.half	511
 1619 0340 FF01     		.half	511
 1620 0342 FF01     		.half	511
 1621 0344 FF01     		.half	511
 1622 0346 FF01     		.half	511
 1623 0348 FF01     		.half	511
 1624 034a FF01     		.half	511
 1625 034c FF01     		.half	511
 1626 034e FF01     		.half	511
 1627 0350 FF01     		.half	511
 1628 0352 FF01     		.half	511
 1629 0354 FF01     		.half	511
 1630 0356 FF01     		.half	511
 1631 0358 FF01     		.half	511
 1632 035a FF01     		.half	511
 1633 035c FF01     		.half	511
 1634 035e FF01     		.half	511
 1635 0360 FF01     		.half	511
 1636 0362 FF01     		.half	511
 1637 0364 FF01     		.half	511
 1638 0366 FF01     		.half	511
 1639 0368 FF01     		.half	511
 1640 036a FF01     		.half	511
 1641 036c FF01     		.half	511
 1642 036e FF01     		.half	511
 1643 0370 FF01     		.half	511
 1644 0372 FF01     		.half	511
 1645 0374 FF01     		.half	511
 1646 0376 FF01     		.half	511
 1647 0378 FF01     		.half	511
 1648 037a FF01     		.half	511
 1649 037c FF01     		.half	511
 1650 037e FF01     		.half	511
 1651 0380 FF01     		.half	511
 1652 0382 FF01     		.half	511
 1653 0384 FF01     		.half	511
 1654 0386 FF01     		.half	511
 1655 0388 FF01     		.half	511
 1656 038a FF01     		.half	511
 1657 038c FF01     		.half	511
 1658 038e FF01     		.half	511
 1659 0390 FF01     		.half	511
 1660 0392 FF01     		.half	511
 1661 0394 FF01     		.half	511
 1662 0396 FF01     		.half	511
 1663 0398 FF01     		.half	511
 1664 039a FF01     		.half	511
 1665 039c FF01     		.half	511
 1666 039e FF01     		.half	511
 1667 03a0 FF01     		.half	511
 1668 03a2 FF01     		.half	511
 1669 03a4 FF01     		.half	511
 1670 03a6 FF01     		.half	511
 1671 03a8 FF01     		.half	511
 1672 03aa FF01     		.half	511
 1673 03ac FF01     		.half	511
 1674 03ae FF01     		.half	511
 1675 03b0 FF01     		.half	511
 1676 03b2 FF01     		.half	511
 1677 03b4 FF01     		.half	511
 1678 03b6 FF01     		.half	511
 1679 03b8 FF01     		.half	511
 1680 03ba FF01     		.half	511
 1681 03bc FF01     		.half	511
 1682 03be FF01     		.half	511
 1683 03c0 FF01     		.half	511
 1684 03c2 FF01     		.half	511
 1685 03c4 FF01     		.half	511
 1686 03c6 FF01     		.half	511
 1687 03c8 FF01     		.half	511
 1688 03ca FF01     		.half	511
 1689 03cc FF01     		.half	511
 1690 03ce FF01     		.half	511
 1691 03d0 FF01     		.half	511
 1692 03d2 FF01     		.half	511
 1693 03d4 FF01     		.half	511
 1694 03d6 FF01     		.half	511
 1695 03d8 FF01     		.half	511
 1696 03da FF01     		.half	511
 1697 03dc FF01     		.half	511
 1698 03de FF01     		.half	511
 1699 03e0 FF01     		.half	511
 1700 03e2 FF01     		.half	511
 1701 03e4 FF01     		.half	511
 1702 03e6 FF01     		.half	511
 1703 03e8 FF01     		.half	511
 1704 03ea FF01     		.half	511
 1705 03ec FF01     		.half	511
 1706 03ee FF01     		.half	511
 1707 03f0 FF01     		.half	511
 1708 03f2 FF01     		.half	511
 1709 03f4 FF01     		.half	511
 1710 03f6 FF01     		.half	511
 1711 03f8 FF01     		.half	511
 1712 03fa FF01     		.half	511
 1713 03fc FF01     		.half	511
 1714 03fe FF01     		.half	511
 1715 0400 FF01     		.half	511
 1716 0402 FF01     		.half	511
 1717 0404 FF01     		.half	511
 1718 0406 FF01     		.half	511
 1719 0408 FF01     		.half	511
 1720 040a FF01     		.half	511
 1721 040c FF01     		.half	511
 1722 040e FF01     		.half	511
 1723 0410 FF01     		.half	511
 1724 0412 FF01     		.half	511
 1725 0414 FF01     		.half	511
 1726 0416 FF01     		.half	511
 1727 0418 FF01     		.half	511
 1728 041a FF01     		.half	511
 1729 041c FF01     		.half	511
 1730 041e FF01     		.half	511
 1731 0420 FF01     		.half	511
 1732 0422 FF01     		.half	511
 1733 0424 FF01     		.half	511
 1734 0426 FF01     		.half	511
 1735 0428 FF01     		.half	511
 1736 042a FF01     		.half	511
 1737 042c FF01     		.half	511
 1738 042e FF01     		.half	511
 1739 0430 FF01     		.half	511
 1740 0432 FF01     		.half	511
 1741 0434 FF01     		.half	511
 1742 0436 FF01     		.half	511
 1743 0438 FF01     		.half	511
 1744 043a FF01     		.half	511
 1745 043c FF01     		.half	511
 1746 043e FF01     		.half	511
 1747 0440 FF01     		.half	511
 1748 0442 FF01     		.half	511
 1749 0444 FF01     		.half	511
 1750 0446 FF01     		.half	511
 1751 0448 FF01     		.half	511
 1752 044a FF01     		.half	511
 1753 044c FF01     		.half	511
 1754 044e FF01     		.half	511
 1755 0450 FF01     		.half	511
 1756 0452 FF01     		.half	511
 1757 0454 FF01     		.half	511
 1758 0456 FF01     		.half	511
 1759 0458 FF01     		.half	511
 1760 045a FF01     		.half	511
 1761 045c FF01     		.half	511
 1762 045e FF01     		.half	511
 1763 0460 FF01     		.half	511
 1764 0462 FF01     		.half	511
 1765 0464 FF01     		.half	511
 1766 0466 FF01     		.half	511
 1767 0468 FF01     		.half	511
 1768 046a FF01     		.half	511
 1769 046c FF01     		.half	511
 1770 046e FF01     		.half	511
 1771 0470 FF01     		.half	511
 1772 0472 FF01     		.half	511
 1773 0474 FF01     		.half	511
 1774 0476 FF01     		.half	511
 1775 0478 FF01     		.half	511
 1776 047a FF01     		.half	511
 1777 047c FF01     		.half	511
 1778 047e FF01     		.half	511
 1779 0480 FF01     		.half	511
 1780 0482 FF01     		.half	511
 1781 0484 FF01     		.half	511
 1782 0486 FF01     		.half	511
 1783 0488 FF01     		.half	511
 1784 048a FF01     		.half	511
 1785 048c FF01     		.half	511
 1786 048e FF01     		.half	511
 1787 0490 FF01     		.half	511
 1788 0492 FF01     		.half	511
 1789 0494 FF01     		.half	511
 1790 0496 FF01     		.half	511
 1791 0498 FF01     		.half	511
 1792 049a FF01     		.half	511
 1793 049c FF01     		.half	511
 1794 049e FF01     		.half	511
 1795 04a0 FF01     		.half	511
 1796 04a2 FF01     		.half	511
 1797 04a4 FF01     		.half	511
 1798 04a6 FF01     		.half	511
 1799 04a8 FF01     		.half	511
 1800 04aa FF01     		.half	511
 1801 04ac FF01     		.half	511
 1802 04ae FF01     		.half	511
 1803 04b0 FF01     		.half	511
 1804 04b2 FF01     		.half	511
 1805 04b4 FF01     		.half	511
 1806 04b6 FF01     		.half	511
 1807 04b8 FF01     		.half	511
 1808 04ba FF01     		.half	511
 1809 04bc FF01     		.half	511
 1810 04be FF01     		.half	511
 1811 04c0 FF01     		.half	511
 1812 04c2 FF01     		.half	511
 1813 04c4 FF01     		.half	511
 1814 04c6 FF01     		.half	511
 1815 04c8 FF01     		.half	511
 1816 04ca FF01     		.half	511
 1817 04cc FF01     		.half	511
 1818 04ce FF01     		.half	511
 1819 04d0 FF01     		.half	511
 1820 04d2 FF01     		.half	511
 1821 04d4 FF01     		.half	511
 1822 04d6 FF01     		.half	511
 1823 04d8 FF01     		.half	511
 1824 04da FF01     		.half	511
 1825 04dc FF01     		.half	511
 1826 04de FF01     		.half	511
 1827 04e0 FF01     		.half	511
 1828 04e2 FF01     		.half	511
 1829 04e4 FF01     		.half	511
 1830 04e6 FF01     		.half	511
 1831 04e8 FF01     		.half	511
 1832 04ea FF01     		.half	511
 1833 04ec FF01     		.half	511
 1834 04ee FF01     		.half	511
 1835 04f0 FF01     		.half	511
 1836 04f2 FF01     		.half	511
 1837 04f4 FF01     		.half	511
 1838 04f6 FF01     		.half	511
 1839 04f8 FF01     		.half	511
 1840 04fa FF01     		.half	511
 1841 04fc FF01     		.half	511
 1842 04fe FF01     		.half	511
 1843 0500 FF01     		.half	511
 1844 0502 FF01     		.half	511
 1845 0504 FF01     		.half	511
 1846 0506 FF01     		.half	511
 1847 0508 FF01     		.half	511
 1848 050a FF01     		.half	511
 1849 050c FF01     		.half	511
 1850 050e FF01     		.half	511
 1851 0510 FF01     		.half	511
 1852 0512 FF01     		.half	511
 1853 0514 FF01     		.half	511
 1854 0516 FF01     		.half	511
 1855 0518 FF01     		.half	511
 1856 051a FF01     		.half	511
 1857 051c FF01     		.half	511
 1858 051e FF01     		.half	511
 1859 0520 FF01     		.half	511
 1860 0522 FF01     		.half	511
 1861 0524 FF01     		.half	511
 1862 0526 FF01     		.half	511
 1863 0528 FF01     		.half	511
 1864 052a FF01     		.half	511
 1865 052c FF01     		.half	511
 1866 052e FF01     		.half	511
 1867 0530 FF01     		.half	511
 1868 0532 FF01     		.half	511
 1869 0534 FF01     		.half	511
 1870 0536 FF01     		.half	511
 1871 0538 FF01     		.half	511
 1872 053a FF01     		.half	511
 1873 053c FF01     		.half	511
 1874 053e FF01     		.half	511
 1875 0540 FF01     		.half	511
 1876 0542 FF01     		.half	511
 1877 0544 FF01     		.half	511
 1878 0546 FF01     		.half	511
 1879 0548 FF01     		.half	511
 1880 054a FF01     		.half	511
 1881 054c FF01     		.half	511
 1882 054e FF01     		.half	511
 1883 0550 FF01     		.half	511
 1884 0552 FF01     		.half	511
 1885 0554 FF01     		.half	511
 1886 0556 FF01     		.half	511
 1887 0558 FF01     		.half	511
 1888 055a FF01     		.half	511
 1889 055c FF01     		.half	511
 1890 055e FF01     		.half	511
 1891 0560 FF01     		.half	511
 1892 0562 FF01     		.half	511
 1893 0564 FF01     		.half	511
 1894 0566 FF01     		.half	511
 1895 0568 FF01     		.half	511
 1896 056a FF01     		.half	511
 1897 056c FF01     		.half	511
 1898 056e FF01     		.half	511
 1899 0570 FF01     		.half	511
 1900 0572 FF01     		.half	511
 1901 0574 FF01     		.half	511
 1902 0576 FF01     		.half	511
 1903 0578 FF01     		.half	511
 1904 057a FF01     		.half	511
 1905 057c FF01     		.half	511
 1906 057e FF01     		.half	511
 1907 0580 FF01     		.half	511
 1908 0582 FF01     		.half	511
 1909 0584 FF01     		.half	511
 1910 0586 FF01     		.half	511
 1911 0588 FF01     		.half	511
 1912 058a FF01     		.half	511
 1913 058c FF01     		.half	511
 1914 058e FF01     		.half	511
 1915 0590 FF01     		.half	511
 1916 0592 FF01     		.half	511
 1917 0594 FF01     		.half	511
 1918 0596 FF01     		.half	511
 1919 0598 FF01     		.half	511
 1920 059a FF01     		.half	511
 1921 059c FF01     		.half	511
 1922 059e FF01     		.half	511
 1923 05a0 FF01     		.half	511
 1924 05a2 FF01     		.half	511
 1925 05a4 FF01     		.half	511
 1926 05a6 FF01     		.half	511
 1927 05a8 FF01     		.half	511
 1928 05aa FF01     		.half	511
 1929 05ac FF01     		.half	511
 1930 05ae FF01     		.half	511
 1931 05b0 FF01     		.half	511
 1932 05b2 FF01     		.half	511
 1933 05b4 FF01     		.half	511
 1934 05b6 FF01     		.half	511
 1935 05b8 FF01     		.half	511
 1936 05ba FF01     		.half	511
 1937 05bc FF01     		.half	511
 1938 05be FF01     		.half	511
 1939 05c0 FF01     		.half	511
 1940 05c2 FF01     		.half	511
 1941 05c4 FF01     		.half	511
 1942 05c6 FF01     		.half	511
 1943 05c8 FF01     		.half	511
 1944 05ca FF01     		.half	511
 1945 05cc FF01     		.half	511
 1946 05ce FF01     		.half	511
 1947 05d0 FF01     		.half	511
 1948 05d2 FF01     		.half	511
 1949 05d4 FF01     		.half	511
 1950 05d6 FF01     		.half	511
 1951 05d8 FF01     		.half	511
 1952 05da FF01     		.half	511
 1953 05dc FF01     		.half	511
 1954 05de FF01     		.half	511
 1955 05e0 FF01     		.half	511
 1956 05e2 FF01     		.half	511
 1957 05e4 FF01     		.half	511
 1958 05e6 FF01     		.half	511
 1959 05e8 FF01     		.half	511
 1960 05ea FF01     		.half	511
 1961 05ec FF01     		.half	511
 1962 05ee FF01     		.half	511
 1963 05f0 FF01     		.half	511
 1964 05f2 FF01     		.half	511
 1965 05f4 FF01     		.half	511
 1966 05f6 FF01     		.half	511
 1967 05f8 FF01     		.half	511
 1968 05fa FF01     		.half	511
 1969 05fc FF01     		.half	511
 1970 05fe FF01     		.half	511
 1971 0600 FF01     		.half	511
 1972 0602 FF01     		.half	511
 1973 0604 FF01     		.half	511
 1974 0606 FF01     		.half	511
 1975 0608 FF01     		.half	511
 1976 060a FF01     		.half	511
 1977 060c FF01     		.half	511
 1978 060e FF01     		.half	511
 1979 0610 FF01     		.half	511
 1980 0612 FF01     		.half	511
 1981 0614 FF01     		.half	511
 1982 0616 FF01     		.half	511
 1983 0618 FF01     		.half	511
 1984 061a FF01     		.half	511
 1985 061c FF01     		.half	511
 1986 061e FF01     		.half	511
 1987 0620 FF01     		.half	511
 1988 0622 FF01     		.half	511
 1989 0624 FF01     		.half	511
 1990 0626 FF01     		.half	511
 1991 0628 FF01     		.half	511
 1992 062a FF01     		.half	511
 1993 062c FF01     		.half	511
 1994 062e FF01     		.half	511
 1995 0630 FF01     		.half	511
 1996 0632 FF01     		.half	511
 1997 0634 FF01     		.half	511
 1998 0636 FF01     		.half	511
 1999 0638 FF01     		.half	511
 2000 063a FF01     		.half	511
 2001 063c FF01     		.half	511
 2002 063e FF01     		.half	511
 2003 0640 FF01     		.half	511
 2004 0642 FF01     		.half	511
 2005 0644 FF01     		.half	511
 2006 0646 FF01     		.half	511
 2007 0648 FF01     		.half	511
 2008 064a FF01     		.half	511
 2009 064c FF01     		.half	511
 2010 064e FF01     		.half	511
 2011 0650 FF01     		.half	511
 2012 0652 FF01     		.half	511
 2013 0654 FF01     		.half	511
 2014 0656 FF01     		.half	511
 2015 0658 FF01     		.half	511
 2016 065a FF01     		.half	511
 2017 065c FF01     		.half	511
 2018 065e FF01     		.half	511
 2019 0660 FF01     		.half	511
 2020 0662 FF01     		.half	511
 2021 0664 FF01     		.half	511
 2022 0666 FF01     		.half	511
 2023 0668 FF01     		.half	511
 2024 066a FF01     		.half	511
 2025 066c FF01     		.half	511
 2026 066e FF01     		.half	511
 2027 0670 FF01     		.half	511
 2028 0672 FF01     		.half	511
 2029 0674 FF01     		.half	511
 2030 0676 FF01     		.half	511
 2031 0678 FF01     		.half	511
 2032 067a FF01     		.half	511
 2033 067c FF01     		.half	511
 2034 067e FF01     		.half	511
 2035 0680 FF01     		.half	511
 2036 0682 FF01     		.half	511
 2037 0684 FF01     		.half	511
 2038 0686 FF01     		.half	511
 2039 0688 FF01     		.half	511
 2040 068a FF01     		.half	511
 2041 068c FF01     		.half	511
 2042 068e FF01     		.half	511
 2043 0690 FF01     		.half	511
 2044 0692 FF01     		.half	511
 2045 0694 FF01     		.half	511
 2046 0696 FA01     		.half	506
 2047 0698 F401     		.half	500
 2048 069a EF01     		.half	495
 2049 069c E901     		.half	489
 2050 069e E401     		.half	484
 2051 06a0 DE01     		.half	478
 2052 06a2 D901     		.half	473
 2053 06a4 D301     		.half	467
 2054 06a6 CE01     		.half	462
 2055 06a8 C801     		.half	456
 2056 06aa C301     		.half	451
 2057 06ac BE01     		.half	446
 2058 06ae B901     		.half	441
 2059 06b0 B301     		.half	435
 2060 06b2 AE01     		.half	430
 2061 06b4 A901     		.half	425
 2062 06b6 A401     		.half	420
 2063 06b8 9F01     		.half	415
 2064 06ba 9A01     		.half	410
 2065 06bc 9501     		.half	405
 2066 06be 9001     		.half	400
 2067 06c0 8B01     		.half	395
 2068 06c2 8601     		.half	390
 2069 06c4 8101     		.half	385
 2070 06c6 7C01     		.half	380
 2071 06c8 7701     		.half	375
 2072 06ca 7201     		.half	370
 2073 06cc 6D01     		.half	365
 2074 06ce 6901     		.half	361
 2075 06d0 6401     		.half	356
 2076 06d2 5F01     		.half	351
 2077 06d4 5A01     		.half	346
 2078 06d6 5601     		.half	342
 2079 06d8 5101     		.half	337
 2080 06da 4D01     		.half	333
 2081 06dc 4801     		.half	328
 2082 06de 4401     		.half	324
 2083 06e0 3F01     		.half	319
 2084 06e2 3B01     		.half	315
 2085 06e4 3601     		.half	310
 2086 06e6 3201     		.half	306
 2087 06e8 2D01     		.half	301
 2088 06ea 2901     		.half	297
 2089 06ec 2501     		.half	293
 2090 06ee 2101     		.half	289
 2091 06f0 1C01     		.half	284
 2092 06f2 1801     		.half	280
 2093 06f4 1401     		.half	276
 2094 06f6 1001     		.half	272
 2095 06f8 0C01     		.half	268
 2096 06fa 0801     		.half	264
 2097 06fc 0401     		.half	260
 2098 06fe 0001     		.half	256
 2099 0700 FC00     		.half	252
 2100 0702 F800     		.half	248
 2101 0704 F400     		.half	244
 2102 0706 F000     		.half	240
 2103 0708 EC00     		.half	236
 2104 070a E800     		.half	232
 2105 070c E400     		.half	228
 2106 070e E100     		.half	225
 2107 0710 DD00     		.half	221
 2108 0712 D900     		.half	217
 2109 0714 D500     		.half	213
 2110 0716 D200     		.half	210
 2111 0718 CE00     		.half	206
 2112 071a CB00     		.half	203
 2113 071c C700     		.half	199
 2114 071e C400     		.half	196
 2115 0720 C000     		.half	192
 2116 0722 BD00     		.half	189
 2117 0724 B900     		.half	185
 2118 0726 B600     		.half	182
 2119 0728 B200     		.half	178
 2120 072a AF00     		.half	175
 2121 072c AC00     		.half	172
 2122 072e A900     		.half	169
 2123 0730 A500     		.half	165
 2124 0732 A200     		.half	162
 2125 0734 9F00     		.half	159
 2126 0736 9C00     		.half	156
 2127 0738 9900     		.half	153
 2128 073a 9600     		.half	150
 2129 073c 9300     		.half	147
 2130 073e 9000     		.half	144
 2131 0740 8D00     		.half	141
 2132 0742 8A00     		.half	138
 2133 0744 8700     		.half	135
 2134 0746 8400     		.half	132
 2135 0748 8100     		.half	129
 2136 074a 7E00     		.half	126
 2137 074c 7B00     		.half	123
 2138 074e 7900     		.half	121
 2139 0750 7600     		.half	118
 2140 0752 7300     		.half	115
 2141 0754 7000     		.half	112
 2142 0756 6E00     		.half	110
 2143 0758 6B00     		.half	107
 2144 075a 6900     		.half	105
 2145 075c 6600     		.half	102
 2146 075e 6400     		.half	100
 2147 0760 6100     		.half	97
 2148 0762 5F00     		.half	95
 2149 0764 5C00     		.half	92
 2150 0766 5A00     		.half	90
 2151 0768 5700     		.half	87
 2152 076a 5500     		.half	85
 2153 076c 5300     		.half	83
 2154 076e 5100     		.half	81
 2155 0770 4E00     		.half	78
 2156 0772 4C00     		.half	76
 2157 0774 4A00     		.half	74
 2158 0776 4800     		.half	72
 2159 0778 4600     		.half	70
 2160 077a 4400     		.half	68
 2161 077c 4200     		.half	66
 2162 077e 4000     		.half	64
 2163 0780 3E00     		.half	62
 2164 0782 3C00     		.half	60
 2165 0784 3A00     		.half	58
 2166 0786 3800     		.half	56
 2167 0788 3600     		.half	54
 2168 078a 3400     		.half	52
 2169 078c 3200     		.half	50
 2170 078e 3100     		.half	49
 2171 0790 2F00     		.half	47
 2172 0792 2D00     		.half	45
 2173 0794 2B00     		.half	43
 2174 0796 2A00     		.half	42
 2175 0798 2800     		.half	40
 2176 079a 2700     		.half	39
 2177 079c 2500     		.half	37
 2178 079e 2400     		.half	36
 2179 07a0 2200     		.half	34
 2180 07a2 2100     		.half	33
 2181 07a4 1F00     		.half	31
 2182 07a6 1E00     		.half	30
 2183 07a8 1C00     		.half	28
 2184 07aa 1B00     		.half	27
 2185 07ac 1A00     		.half	26
 2186 07ae 1900     		.half	25
 2187 07b0 1700     		.half	23
 2188 07b2 1600     		.half	22
 2189 07b4 1500     		.half	21
 2190 07b6 1400     		.half	20
 2191 07b8 1300     		.half	19
 2192 07ba 1200     		.half	18
 2193 07bc 1100     		.half	17
 2194 07be 1000     		.half	16
 2195 07c0 0F00     		.half	15
 2196 07c2 0E00     		.half	14
 2197 07c4 0D00     		.half	13
 2198 07c6 0C00     		.half	12
 2199 07c8 0B00     		.half	11
 2200 07ca 0A00     		.half	10
 2201 07cc 0900     		.half	9
 2202 07ce 0900     		.half	9
 2203 07d0 0800     		.half	8
 2204 07d2 0700     		.half	7
 2205 07d4 0600     		.half	6
 2206 07d6 0600     		.half	6
 2207 07d8 0500     		.half	5
 2208 07da 0500     		.half	5
 2209 07dc 0400     		.half	4
 2210 07de 0400     		.half	4
 2211 07e0 0300     		.half	3
 2212 07e2 0300     		.half	3
 2213 07e4 0200     		.half	2
 2214 07e6 0200     		.half	2
 2215 07e8 0100     		.half	1
 2216 07ea 0100     		.half	1
 2217 07ec 0100     		.half	1
 2218 07ee 0100     		.half	1
 2219 07f0 0000     		.half	0
 2220 07f2 0000     		.half	0
 2221 07f4 0000     		.half	0
 2222 07f6 0000     		.half	0
 2223 07f8 0000     		.half	0
 2224 07fa 0000     		.half	0
 2225 07fc 0000     		.half	0
 2226 07fe 0000     		.half	0
 2227              		.ident	"GCC: (GNU) 11.1.0"
